
Tx_ModuleManager_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015ffc  080002a0  080002a0  000102a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0801629c  0801629c  0002629c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801671c  0801671c  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  0801671c  0801671c  0002671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016724  08016724  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016724  08016724  00026724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016728  08016728  00026728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  0801672c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f704  240000a0  080167b4  000300a0  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  2400f7a4  080167b4  0003f7a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 12 .debug_line   0006a8bd  00000000  00000000  000300b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0006fa59  00000000  00000000  0009a973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00012882  00000000  00000000  0010a3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ea0  00000000  00000000  0011cc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001d04ea  00000000  00000000  0011faf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002090  00000000  00000000  002effe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00057a1b  00000000  00000000  002f2070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00349a8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bd8  00000000  00000000  00349adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a0 	.word	0x240000a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016284 	.word	0x08016284

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a4 	.word	0x240000a4
 80002dc:	08016284 	.word	0x08016284

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002e6:	4918      	ldr	r1, [pc, #96]	; (8000348 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002ec:	4817      	ldr	r0, [pc, #92]	; (800034c <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ee:	4916      	ldr	r1, [pc, #88]	; (8000348 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002f4:	4816      	ldr	r0, [pc, #88]	; (8000350 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80002f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80002f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000302:	4914      	ldr	r1, [pc, #80]	; (8000354 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000304:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000306:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800030a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800030c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000310:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000314:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000318:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800031c:	490e      	ldr	r1, [pc, #56]	; (8000358 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800031e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000322:	4770      	bx	lr

08000324 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000324:	f7ff bffe 	b.w	8000324 <__tx_BadHandler>

08000328 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000328:	f7ff bffe 	b.w	8000328 <__tx_HardfaultHandler>

0800032c <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 800032c:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800032e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000332:	4770      	bx	lr

08000334 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000334:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000336:	f000 f9e3 	bl	8000700 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800033e:	4770      	bx	lr

08000340 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000340:	f7ff bffe 	b.w	8000340 <__tx_NMIHandler>

08000344 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000344:	f7ff bffe 	b.w	8000344 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000348:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800034c:	2400f030 	.word	0x2400f030
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000350:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000354:	003d08ff 	.word	0x003d08ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000358:	40ff0000 	.word	0x40ff0000
 800035c:	00000000 	.word	0x00000000

08000360 <_tx_thread_interrupt_control>:
// UINT   _tx_thread_interrupt_control(UINT new_posture)
// {
    .global  _tx_thread_interrupt_control
    .thumb_func
_tx_thread_interrupt_control:
    MRS     r1, PRIMASK                         // Pickup current interrupt lockout
 8000360:	f3ef 8110 	mrs	r1, PRIMASK
    MSR     PRIMASK, r0                         // Apply the new interrupt lockout
 8000364:	f380 8810 	msr	PRIMASK, r0
    MOV     r0, r1                              // Transfer old to return register
 8000368:	4608      	mov	r0, r1
    BX      lr                                  // Return to caller
 800036a:	4770      	bx	lr
	...

08000380 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routines below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000380:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000384:	4abd      	ldr	r2, [pc, #756]	; (800067c <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000386:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so FPU registers aren't unnecessarily stacked.  */

#ifdef __ARM_PCS_VFP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000388:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800038c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000390:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable memory fault registers.  */

    LDR     r0, =0xE000ED24                         // Build SHCSR address
 8000394:	48ba      	ldr	r0, [pc, #744]	; (8000680 <tx_thread_fpu_disable+0x6>)
    LDR     r1, =0x70000                            // Enable Usage, Bus, and MemManage faults
 8000396:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
    STR     r1, [r0]                                //
 800039a:	6001      	str	r1, [r0, #0]

    /* Enable interrupts */

    CPSIE   i
 800039c:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800039e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80003a2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80003a6:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80003aa:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80003ae:	f3bf 8f6f 	isb	sy

080003b2 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80003b2:	e7fe      	b.n	80003b2 <__tx_wait_here>

080003b4 <BusFault_Handler>:
    .thumb_func
BusFault_Handler:
    .thumb_func
UsageFault_Handler:

    CPSID   i                                       // Disable interrupts
 80003b4:	b672      	cpsid	i

    /* Now pickup and store all the fault related information.  */

    LDR     r12,=_txm_module_manager_memory_fault_info  // Pickup fault info struct
 80003b6:	f8df c2cc 	ldr.w	ip, [pc, #716]	; 8000684 <tx_thread_fpu_disable+0xa>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ba:	48b3      	ldr	r0, [pc, #716]	; (8000688 <tx_thread_fpu_disable+0xe>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003bc:	6801      	ldr	r1, [r0, #0]
    STR     r1, [r12, #0]                           // Save current thread pointer in fault info structure
 80003be:	f8cc 1000 	str.w	r1, [ip]
    LDR     r0, =0xE000ED24                         // Build SHCSR address
 80003c2:	48af      	ldr	r0, [pc, #700]	; (8000680 <tx_thread_fpu_disable+0x6>)
    LDR     r1, [r0]                                // Pickup SHCSR
 80003c4:	6801      	ldr	r1, [r0, #0]
    STR     r1, [r12, #8]                           // Save SHCSR
 80003c6:	f8cc 1008 	str.w	r1, [ip, #8]
    LDR     r0, =0xE000ED28                         // Build CFSR address
 80003ca:	48b0      	ldr	r0, [pc, #704]	; (800068c <tx_thread_fpu_disable+0x12>)
    LDR     r1, [r0]                                // Pickup CFSR
 80003cc:	6801      	ldr	r1, [r0, #0]
    STR     r1, [r12, #12]                          // Save CFSR
 80003ce:	f8cc 100c 	str.w	r1, [ip, #12]
    LDR     r0, =0xE000ED34                         // Build MMFAR address
 80003d2:	48af      	ldr	r0, [pc, #700]	; (8000690 <tx_thread_fpu_disable+0x16>)
    LDR     r1, [r0]                                // Pickup MMFAR
 80003d4:	6801      	ldr	r1, [r0, #0]
    STR     r1, [r12, #16]                          // Save MMFAR
 80003d6:	f8cc 1010 	str.w	r1, [ip, #16]
    LDR     r0, =0xE000ED38                         // Build BFAR address
 80003da:	48ae      	ldr	r0, [pc, #696]	; (8000694 <tx_thread_fpu_disable+0x1a>)
    LDR     r1, [r0]                                // Pickup BFAR
 80003dc:	6801      	ldr	r1, [r0, #0]
    STR     r1, [r12, #20]                          // Save BFAR
 80003de:	f8cc 1014 	str.w	r1, [ip, #20]
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80003e2:	f3ef 8014 	mrs	r0, CONTROL
    STR     r0, [r12, #24]                          // Save CONTROL
 80003e6:	f8cc 0018 	str.w	r0, [ip, #24]
    MRS     r1, PSP                                 // Pickup thread stack pointer
 80003ea:	f3ef 8109 	mrs	r1, PSP
    STR     r1, [r12, #28]                          // Save thread stack pointer
 80003ee:	f8cc 101c 	str.w	r1, [ip, #28]
    LDR     r0, [r1]                                // Pickup saved r0
 80003f2:	6808      	ldr	r0, [r1, #0]
    STR     r0, [r12, #32]                          // Save r0
 80003f4:	f8cc 0020 	str.w	r0, [ip, #32]
    LDR     r0, [r1, #4]                            // Pickup saved r1
 80003f8:	6848      	ldr	r0, [r1, #4]
    STR     r0, [r12, #36]                          // Save r1
 80003fa:	f8cc 0024 	str.w	r0, [ip, #36]	; 0x24
    STR     r2, [r12, #40]                          // Save r2
 80003fe:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    STR     r3, [r12, #44]                          // Save r3
 8000402:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    STR     r4, [r12, #48]                          // Save r4
 8000406:	f8cc 4030 	str.w	r4, [ip, #48]	; 0x30
    STR     r5, [r12, #52]                          // Save r5
 800040a:	f8cc 5034 	str.w	r5, [ip, #52]	; 0x34
    STR     r6, [r12, #56]                          // Save r6
 800040e:	f8cc 6038 	str.w	r6, [ip, #56]	; 0x38
    STR     r7, [r12, #60]                          // Save r7
 8000412:	f8cc 703c 	str.w	r7, [ip, #60]	; 0x3c
    STR     r8, [r12, #64]                          // Save r8
 8000416:	f8cc 8040 	str.w	r8, [ip, #64]	; 0x40
    STR     r9, [r12, #68]                          // Save r9
 800041a:	f8cc 9044 	str.w	r9, [ip, #68]	; 0x44
    STR     r10,[r12, #72]                          // Save r10
 800041e:	f8cc a048 	str.w	sl, [ip, #72]	; 0x48
    STR     r11,[r12, #76]                          // Save r11
 8000422:	f8cc b04c 	str.w	fp, [ip, #76]	; 0x4c
    LDR     r0, [r1, #16]                           // Pickup saved r12
 8000426:	6908      	ldr	r0, [r1, #16]
    STR     r0, [r12, #80]                          // Save r12
 8000428:	f8cc 0050 	str.w	r0, [ip, #80]	; 0x50
    LDR     r0, [r1, #20]                           // Pickup saved lr
 800042c:	6948      	ldr	r0, [r1, #20]
    STR     r0, [r12, #84]                          // Save lr
 800042e:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    LDR     r0, [r1, #24]                           // Pickup instruction address at point of fault
 8000432:	6988      	ldr	r0, [r1, #24]
    STR     r0, [r12, #4]                           // Save point of fault
 8000434:	f8cc 0004 	str.w	r0, [ip, #4]
    LDR     r0, [r1, #28]                           // Pickup xPSR
 8000438:	69c8      	ldr	r0, [r1, #28]
    STR     r0, [r12, #88]                          // Save xPSR
 800043a:	f8cc 0058 	str.w	r0, [ip, #88]	; 0x58

    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800043e:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #1                              // Clear the UNPRIV bit
 8000442:	f020 0001 	bic.w	r0, r0, #1
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000446:	f380 8814 	msr	CONTROL, r0

    LDR     r0, =0xE000ED28                         // Build the Memory Management Fault Status Register (MMFSR)
 800044a:	4890      	ldr	r0, [pc, #576]	; (800068c <tx_thread_fpu_disable+0x12>)
    LDRB    r1, [r0]                                // Pickup the MMFSR, with the following bit definitions:
 800044c:	7801      	ldrb	r1, [r0, #0]
                                                    //     Bit 0 = 1 -> Instruction address violation
                                                    //     Bit 1 = 1 -> Load/store address violation
                                                    //     Bit 7 = 1 -> MMFAR is valid
    STRB    r1, [r0]                                // Clear the MMFSR
 800044e:	7001      	strb	r1, [r0, #0]

#ifdef __ARM_PCS_VFP
    LDR     r0, =0xE000EF34                         // Cleanup FPU context: Load FPCCR address
 8000450:	4891      	ldr	r0, [pc, #580]	; (8000698 <tx_thread_fpu_disable+0x1e>)
    LDR     r1, [r0]                                // Load FPCCR
 8000452:	6801      	ldr	r1, [r0, #0]
    BIC     r1, r1, #1                              // Clear the lazy preservation active bit
 8000454:	f021 0101 	bic.w	r1, r1, #1
    STR     r1, [r0]                                // Store the value
 8000458:	6001      	str	r1, [r0, #0]
#endif

    BL      _txm_module_manager_memory_fault_handler    // Call memory manager fault handler
 800045a:	f012 fc83 	bl	8012d64 <_txm_module_manager_memory_fault_handler>
    CPSID   i                                       // Disable interrupts
    BL      _tx_execution_thread_exit               // Call the thread exit function
    CPSIE   i                                       // Enable interrupts
#endif

    MOV     r1, #0                                  // Build NULL value
 800045e:	f04f 0100 	mov.w	r1, #0
    LDR     r0, =_tx_thread_current_ptr             // Pickup address of current thread pointer
 8000462:	4889      	ldr	r0, [pc, #548]	; (8000688 <tx_thread_fpu_disable+0xe>)
    STR     r1, [r0]                                // Clear current thread pointer
 8000464:	6001      	str	r1, [r0, #0]

    // Return from MemManage_Handler exception
    LDR     r0, =0xE000ED04                         // Load ICSR
 8000466:	488d      	ldr	r0, [pc, #564]	; (800069c <tx_thread_fpu_disable+0x22>)
    LDR     r1, =0x10000000                         // Set PENDSVSET bit
 8000468:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     r1, [r0]                                // Store ICSR
 800046c:	6001      	str	r1, [r0, #0]
    DSB                                             // Wait for memory access to complete
 800046e:	f3bf 8f4f 	dsb	sy
    CPSIE   i                                       // Enable interrupts
 8000472:	b662      	cpsie	i
    MOV     lr, #0xFFFFFFFD                         // Load exception return code
 8000474:	f06f 0e02 	mvn.w	lr, #2
    BX      lr                                      // Return from exception
 8000478:	4770      	bx	lr

0800047a <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800047a:	4883      	ldr	r0, [pc, #524]	; (8000688 <tx_thread_fpu_disable+0xe>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800047c:	4a88      	ldr	r2, [pc, #544]	; (80006a0 <tx_thread_fpu_disable+0x26>)
    MOV     r3, #0                                  // Build NULL value
 800047e:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000482:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000484:	b191      	cbz	r1, 80004ac <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000486:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000488:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800048c:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000490:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000494:	d101      	bne.n	800049a <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000496:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800049a <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800049a:	4c82      	ldr	r4, [pc, #520]	; (80006a4 <tx_thread_fpu_disable+0x2a>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800049c:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80004a0:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80004a2:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80004a6:	b10d      	cbz	r5, 80004ac <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80004a8:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80004aa:	6023      	str	r3, [r4, #0]

080004ac <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80004ac:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80004ae:	6811      	ldr	r1, [r2, #0]
    CBNZ    r1, __tx_ts_restore                     // Yes, schedule it
 80004b0:	b951      	cbnz	r1, 80004c8 <__tx_ts_restore>

080004b2 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 80004b2:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80004b4:	6811      	ldr	r1, [r2, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80004b6:	b909      	cbnz	r1, 80004bc <__tx_ts_ready>
#ifdef TX_ENABLE_WFI
    DSB                                             // Ensure no outstanding memory transactions
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif
    CPSIE   i                                       // Enable interrupts
 80004b8:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 80004ba:	e7fa      	b.n	80004b2 <__tx_ts_wait>

080004bc <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80004bc:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80004c0:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80004c4:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

080004c8 <__tx_ts_restore>:
__tx_ts_restore:

    /* A thread is ready, make the current thread the new thread
       and enable interrupts.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80004c8:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80004ca:	b662      	cpsie	i

    /* Increment the thread run count.  */

    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80004cc:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80004ce:	4c75      	ldr	r4, [pc, #468]	; (80006a4 <tx_thread_fpu_disable+0x2a>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80004d0:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80004d2:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80004d6:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80004d8:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80004da:	f8d1 c008 	ldr.w	ip, [r1, #8]

    MRS     r5, CONTROL                             // Pickup current CONTROL register
 80004de:	f3ef 8514 	mrs	r5, CONTROL
    LDR     r4, [r1, #0x98]                         // Pickup current user mode flag
 80004e2:	f8d1 4098 	ldr.w	r4, [r1, #152]	; 0x98
    BIC     r5, r5, #1                              // Clear the UNPRIV bit
 80004e6:	f025 0501 	bic.w	r5, r5, #1
    ORR     r4, r4, r5                              // Build new CONTROL register
 80004ea:	ea44 0405 	orr.w	r4, r4, r5
    MSR     CONTROL, r4                             // Setup new CONTROL register
 80004ee:	f384 8814 	msr	CONTROL, r4

    LDR     r0, =0xE000ED94                         // Build MPU control reg address
 80004f2:	486d      	ldr	r0, [pc, #436]	; (80006a8 <tx_thread_fpu_disable+0x2e>)
    MOV     r3, #0                                  // Build disable value
 80004f4:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r0]                                // Disable MPU
 80004f8:	6003      	str	r3, [r0, #0]
    LDR     r0, [r1, #0x90]                         // Pickup the module instance pointer
 80004fa:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
    CBZ     r0, skip_mpu_setup                      // Is this thread owned by a module? No, skip MPU setup
 80004fe:	b1c0      	cbz	r0, 8000532 <skip_mpu_setup>
    LDR     r1, [r0, #0x64]                         // Pickup MPU register[0]
 8000500:	6e41      	ldr	r1, [r0, #100]	; 0x64
    CBZ     r1, skip_mpu_setup                      // Is protection required for this module? No, skip MPU setup
 8000502:	b1b1      	cbz	r1, 8000532 <skip_mpu_setup>
    LDR     r1, =0xE000ED9C                         // Build address of MPU base register
 8000504:	4969      	ldr	r1, [pc, #420]	; (80006ac <tx_thread_fpu_disable+0x32>)

    // Use alias registers to quickly load MPU
    ADD     r0, r0, #100                            // Build address of MPU register start in thread control block
 8000506:	f100 0064 	add.w	r0, r0, #100	; 0x64
#ifndef TXM_MODULE_MANAGER_8_MPU
    LDM     r0!,{r2-r9}                             // Load MPU regions 0-3
 800050a:	e8b0 03fc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    STM     r1,{r2-r9}                              // Store MPU regions 0-3
 800050e:	e881 03fc 	stmia.w	r1, {r2, r3, r4, r5, r6, r7, r8, r9}
    LDM     r0!,{r2-r9}                             // Load MPU regions 4-7
 8000512:	e8b0 03fc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    STM     r1,{r2-r9}                              // Store MPU regions 4-7
 8000516:	e881 03fc 	stmia.w	r1, {r2, r3, r4, r5, r6, r7, r8, r9}
    LDM     r0!,{r2-r9}                             // Load MPU regions 8-11
 800051a:	e8b0 03fc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
    STM     r1,{r2-r9}                              // Store MPU regions 8-11
 800051e:	e881 03fc 	stmia.w	r1, {r2, r3, r4, r5, r6, r7, r8, r9}
    LDM     r0,{r2-r9}                              // Load MPU regions 12-15
 8000522:	e890 03fc 	ldmia.w	r0, {r2, r3, r4, r5, r6, r7, r8, r9}
    STM     r1,{r2-r9}                              // Store MPU regions 12-15
 8000526:	e881 03fc 	stmia.w	r1, {r2, r3, r4, r5, r6, r7, r8, r9}
    LDM     r0!,{r2-r9}                             // Load first four MPU regions
    STM     r1,{r2-r9}                              // Store first four MPU regions
    LDM     r0,{r2-r9}                              // Load second four MPU regions
    STM     r1,{r2-r9}                              // Store second four MPU regions
#endif
    LDR     r0, =0xE000ED94                         // Build MPU control reg address
 800052a:	485f      	ldr	r0, [pc, #380]	; (80006a8 <tx_thread_fpu_disable+0x2e>)
    MOV     r1, #5                                  // Build enable value with background region enabled
 800052c:	f04f 0105 	mov.w	r1, #5
    STR     r1, [r0]                                // Enable MPU
 8000530:	6001      	str	r1, [r0, #0]

08000532 <skip_mpu_setup>:
skip_mpu_setup:
    LDMIA   r12!, {LR}                              // Pickup LR
 8000532:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000536:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800053a:	d101      	bne.n	8000540 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800053c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000540 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000540:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000544:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000548:	4770      	bx	lr

0800054a <SVC_Handler>:
    .thumb_func
SVC_Handler:
    .thumb_func
__tx_SVCallHandler:

    MRS     r0, PSP                                 // Pickup the PSP stack
 800054a:	f3ef 8009 	mrs	r0, PSP
    LDR     r1, [r0, #24]                           // Pickup the point of interrupt
 800054e:	6981      	ldr	r1, [r0, #24]
    LDRB    r2, [r1, #-2]                           // Pickup the SVC parameter
 8000550:	f811 2c02 	ldrb.w	r2, [r1, #-2]

    /* Determine which SVC trap we are processing */

    CMP     r2, #1                                  // Is it the entry into ThreadX?
 8000554:	2a01      	cmp	r2, #1
    BNE     _tx_thread_user_return                  // No, return to user mode
 8000556:	d143      	bne.n	80005e0 <_tx_thread_user_return>

    /* At this point we have an SVC 1, which means we are entering
       the kernel from a module thread with user mode selected. */

    LDR     r2, =_txm_module_priv                   // Load address of where we should have come from
 8000558:	4a55      	ldr	r2, [pc, #340]	; (80006b0 <tx_thread_fpu_disable+0x36>)
    CMP     r1, r2                                  // Did we come from user_mode_entry?
 800055a:	4291      	cmp	r1, r2
    IT      NE                                      // If no (not equal), then...
 800055c:	bf18      	it	ne
    BXNE    lr                                      // return from where we came.
 800055e:	4770      	bxne	lr

    LDR     r3, [r0, #20]                           // This is the saved LR
 8000560:	6943      	ldr	r3, [r0, #20]
    LDR     r1, =_tx_thread_current_ptr             // Build current thread pointer address
 8000562:	4949      	ldr	r1, [pc, #292]	; (8000688 <tx_thread_fpu_disable+0xe>)
    LDR     r2, [r1]                                // Pickup current thread pointer
 8000564:	680a      	ldr	r2, [r1, #0]
    MOV     r1, #0                                  // Build clear value
 8000566:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r2, #0x98]                         // Clear the current user mode selection for thread
 800056a:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    STR     r3, [r2, #0xA0]                         // Save the original LR in thread control block
 800056e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    /* If there is memory protection, use kernel stack */
    LDR     r0, [r2, #0x90]                         // Load the module instance ptr
 8000572:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    LDR     r0, [r0, #0x0C]                         // Load the module property flags
 8000576:	68c0      	ldr	r0, [r0, #12]
    TST     r0, #2                                  // Check if memory protected
 8000578:	f010 0f02 	tst.w	r0, #2
    BEQ     _tx_skip_kernel_stack_enter
 800057c:	d029      	beq.n	80005d2 <_tx_skip_kernel_stack_enter>

    /* Switch to the module thread's kernel stack */
    LDR     r0, [r2, #0xA8]                         // Load the module kernel stack end
 800057e:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
#ifndef TXM_MODULE_KERNEL_STACK_MAINTENANCE_DISABLE
    LDR     r1, [r2, #0xA4]                         // Load the module kernel stack start
 8000582:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    LDR     r3, [r2, #0xAC]                         // Load the module kernel stack size
 8000586:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
    STR     r1, [r2, #12]                           // Set stack start
 800058a:	60d1      	str	r1, [r2, #12]
    STR     r0, [r2, #16]                           // Set stack end
 800058c:	6110      	str	r0, [r2, #16]
    STR     r3, [r2, #20]                           // Set stack size
 800058e:	6153      	str	r3, [r2, #20]
#endif
    MRS     r3, PSP                                 // Pickup thread stack pointer
 8000590:	f3ef 8309 	mrs	r3, PSP
    TST     lr, #0x10                               // Test for extended module stack
 8000594:	f01e 0f10 	tst.w	lr, #16
    ITT     EQ
 8000598:	bf04      	itt	eq
    ORREQ   r3, r3, #1                              // If so, set LSB in thread stack pointer to indicate extended frame
 800059a:	f043 0301 	orreq.w	r3, r3, #1
    ORREQ   lr, lr, #0x10                           // Set bit, return with standard frame
 800059e:	f04e 0e10 	orreq.w	lr, lr, #16
    STR     r3, [r2, #0xB0]                         // Save thread stack pointer
 80005a2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
    BIC     r3, #1                                  // Clear possibly OR'd bit
 80005a6:	f023 0301 	bic.w	r3, r3, #1
    
    /* Build kernel stack by copying thread stack two registers at a time */
    ADD     r3, r3, #32                             // Start at bottom of hardware stack
 80005aa:	f103 0320 	add.w	r3, r3, #32
    LDMDB   r3!, {r1-r2}
 80005ae:	e933 0006 	ldmdb	r3!, {r1, r2}
    STMDB   r0!, {r1-r2}
 80005b2:	e920 0006 	stmdb	r0!, {r1, r2}
    LDMDB   r3!, {r1-r2}
 80005b6:	e933 0006 	ldmdb	r3!, {r1, r2}
    STMDB   r0!, {r1-r2}
 80005ba:	e920 0006 	stmdb	r0!, {r1, r2}
    LDMDB   r3!, {r1-r2}
 80005be:	e933 0006 	ldmdb	r3!, {r1, r2}
    STMDB   r0!, {r1-r2}
 80005c2:	e920 0006 	stmdb	r0!, {r1, r2}
    LDMDB   r3!, {r1-r2}
 80005c6:	e933 0006 	ldmdb	r3!, {r1, r2}
    STMDB   r0!, {r1-r2}
 80005ca:	e920 0006 	stmdb	r0!, {r1, r2}

    MSR     PSP, r0                                 // Set kernel stack pointer
 80005ce:	f380 8809 	msr	PSP, r0

080005d2 <_tx_skip_kernel_stack_enter>:

_tx_skip_kernel_stack_enter:
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80005d2:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #1                              // Clear the UNPRIV bit
 80005d6:	f020 0001 	bic.w	r0, r0, #1
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80005da:	f380 8814 	msr	CONTROL, r0
    BX      lr                                      // Return to thread
 80005de:	4770      	bx	lr

080005e0 <_tx_thread_user_return>:

_tx_thread_user_return:
    LDR     r2, =_txm_module_user_mode_exit         // Load address of where we should have come from
 80005e0:	4a34      	ldr	r2, [pc, #208]	; (80006b4 <tx_thread_fpu_disable+0x3a>)
    CMP     r1, r2                                  // Did we come from user_mode_exit?
 80005e2:	4291      	cmp	r1, r2
    IT      NE                                      // If no (not equal), then...
 80005e4:	bf18      	it	ne
    BXNE    lr                                      // return from where we came
 80005e6:	4770      	bxne	lr

    LDR     r1, =_tx_thread_current_ptr             // Build current thread pointer address
 80005e8:	4927      	ldr	r1, [pc, #156]	; (8000688 <tx_thread_fpu_disable+0xe>)
    LDR     r2, [r1]                                // Pickup current thread pointer
 80005ea:	680a      	ldr	r2, [r1, #0]
    LDR     r1, [r2, #0x9C]                         // Pick up user mode
 80005ec:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
    STR     r1, [r2, #0x98]                         // Set the current user mode selection for thread
 80005f0:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98

    /* If there is memory protection, use kernel stack */
    LDR     r0, [r2, #0x90]                         // Load the module instance ptr
 80005f4:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
    LDR     r0, [r0, #0x0C]                         // Load the module property flags
 80005f8:	68c0      	ldr	r0, [r0, #12]
    TST     r0, #2                                  // Check if memory protected
 80005fa:	f010 0f02 	tst.w	r0, #2
    BEQ     _tx_skip_kernel_stack_exit
 80005fe:	d025      	beq.n	800064c <_tx_skip_kernel_stack_exit>

#ifndef TXM_MODULE_KERNEL_STACK_MAINTENANCE_DISABLE
    LDR     r0, [r2, #0xB4]                         // Load the module thread stack start
 8000600:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    LDR     r1, [r2, #0xB8]                         // Load the module thread stack end
 8000604:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
    LDR     r3, [r2, #0xBC]                         // Load the module thread stack size
 8000608:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
    STR     r0, [r2, #12]                           // Set stack start
 800060c:	60d0      	str	r0, [r2, #12]
    STR     r1, [r2, #16]                           // Set stack end
 800060e:	6111      	str	r1, [r2, #16]
    STR     r3, [r2, #20]                           // Set stack size
 8000610:	6153      	str	r3, [r2, #20]
#endif
    LDR     r0, [r2, #0xB0]                         // Load the module thread stack pointer
 8000612:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
    MRS     r3, PSP                                 // Pickup kernel stack pointer
 8000616:	f3ef 8309 	mrs	r3, PSP
    TST     r0, #1                                  // Is module stack extended?
 800061a:	f010 0f01 	tst.w	r0, #1
    ITTE    NE                                      // If so...
 800061e:	bf1a      	itte	ne
    BICNE   lr, #0x10                               // Clear bit, return with extended frame
 8000620:	f02e 0e10 	bicne.w	lr, lr, #16
    BICNE   r0, #1                                  // Clear bit that indicates extended module frame
 8000624:	f020 0001 	bicne.w	r0, r0, #1
    ORREQ   lr, lr, #0x10                           // Else set bit, return with standard frame
 8000628:	f04e 0e10 	orreq.w	lr, lr, #16

    /* Copy kernel hardware stack to module thread stack. */
    LDM     r3!, {r1-r2}
 800062c:	cb06      	ldmia	r3!, {r1, r2}
    STM     r0!, {r1-r2}
 800062e:	c006      	stmia	r0!, {r1, r2}
    LDM     r3!, {r1-r2}
 8000630:	cb06      	ldmia	r3!, {r1, r2}
    STM     r0!, {r1-r2}
 8000632:	c006      	stmia	r0!, {r1, r2}
    LDM     r3!, {r1-r2}
 8000634:	cb06      	ldmia	r3!, {r1, r2}
    STM     r0!, {r1-r2}
 8000636:	c006      	stmia	r0!, {r1, r2}
    LDM     r3!, {r1-r2}
 8000638:	cb06      	ldmia	r3!, {r1, r2}
    STM     r0!, {r1-r2}
 800063a:	c006      	stmia	r0!, {r1, r2}
    SUB     r0, r0, #32                             // Subtract 32 to get back to top of stack
 800063c:	f1a0 0020 	sub.w	r0, r0, #32
    MSR     PSP, r0                                 // Set thread stack pointer
 8000640:	f380 8809 	msr	PSP, r0

    LDR     r1, =_tx_thread_current_ptr             // Build current thread pointer address
 8000644:	4910      	ldr	r1, [pc, #64]	; (8000688 <tx_thread_fpu_disable+0xe>)
    LDR     r2, [r1]                                // Pickup current thread pointer
 8000646:	680a      	ldr	r2, [r1, #0]
    LDR     r1, [r2, #0x9C]                         // Pick up user mode
 8000648:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c

0800064c <_tx_skip_kernel_stack_exit>:

_tx_skip_kernel_stack_exit:
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800064c:	f3ef 8014 	mrs	r0, CONTROL
    ORR     r0, r0, r1                              // OR in the user mode bit
 8000650:	ea40 0001 	orr.w	r0, r0, r1
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000654:	f380 8814 	msr	CONTROL, r0
    BX      lr                                      // Return to thread
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	f3af 8000 	nop.w

08000660 <_txm_module_manager_user_mode_entry>:
// VOID   _txm_module_manager_user_mode_entry(VOID)
// {
    .global  _txm_module_manager_user_mode_entry
    .thumb_func
_txm_module_manager_user_mode_entry:
    SVC     1                                       // Enter kernel
 8000660:	df01      	svc	1

08000662 <_txm_module_priv>:
_txm_module_priv:
    /* At this point, we are out of user mode. The original LR has been saved in the
       thread control block. Simply call the kernel dispatch function. */
    BL      _txm_module_manager_kernel_dispatch
 8000662:	f011 ffdf 	bl	8012624 <_txm_module_manager_kernel_dispatch>

    /* Pickup the original LR value while still in privileged mode */
    LDR     r2, =_tx_thread_current_ptr             // Build current thread pointer address
 8000666:	4a08      	ldr	r2, [pc, #32]	; (8000688 <tx_thread_fpu_disable+0xe>)
    LDR     r3, [r2]                                // Pickup current thread pointer
 8000668:	6813      	ldr	r3, [r2, #0]
    LDR     lr, [r3, #0xA0]                         // Pickup saved LR from original call
 800066a:	f8d3 e0a0 	ldr.w	lr, [r3, #160]	; 0xa0

    SVC     2                                       // Exit kernel and return to user mode
 800066e:	df02      	svc	2

08000670 <_txm_module_user_mode_exit>:
_txm_module_user_mode_exit:
    BX      lr                                      // Return to the caller
 8000670:	4770      	bx	lr
    NOP
 8000672:	bf00      	nop
    NOP
 8000674:	bf00      	nop
    NOP
 8000676:	bf00      	nop
    NOP
 8000678:	bf00      	nop

0800067a <tx_thread_fpu_disable>:
    .thumb_func
tx_thread_fpu_enable:
    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800067a:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800067c:	2400f0d0 	.word	0x2400f0d0
    LDR     r0, =0xE000ED24                         // Build SHCSR address
 8000680:	e000ed24 	.word	0xe000ed24
    LDR     r12,=_txm_module_manager_memory_fault_info  // Pickup fault info struct
 8000684:	2400f738 	.word	0x2400f738
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000688:	2400f034 	.word	0x2400f034
    LDR     r0, =0xE000ED28                         // Build CFSR address
 800068c:	e000ed28 	.word	0xe000ed28
    LDR     r0, =0xE000ED34                         // Build MMFAR address
 8000690:	e000ed34 	.word	0xe000ed34
    LDR     r0, =0xE000ED38                         // Build BFAR address
 8000694:	e000ed38 	.word	0xe000ed38
    LDR     r0, =0xE000EF34                         // Cleanup FPU context: Load FPCCR address
 8000698:	e000ef34 	.word	0xe000ef34
    LDR     r0, =0xE000ED04                         // Load ICSR
 800069c:	e000ed04 	.word	0xe000ed04
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80006a0:	2400f038 	.word	0x2400f038
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80006a4:	2400f674 	.word	0x2400f674
    LDR     r0, =0xE000ED94                         // Build MPU control reg address
 80006a8:	e000ed94 	.word	0xe000ed94
    LDR     r1, =0xE000ED9C                         // Build address of MPU base register
 80006ac:	e000ed9c 	.word	0xe000ed9c
    LDR     r2, =_txm_module_priv                   // Load address of where we should have come from
 80006b0:	08000662 	.word	0x08000662
    LDR     r2, =_txm_module_user_mode_exit         // Load address of where we should have come from
 80006b4:	08000670 	.word	0x08000670
	...

080006c0 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80006c0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80006c2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80006c6:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 80006ca:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 80006ce:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80006d0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80006d4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80006d6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80006d8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80006da:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80006dc:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80006de:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80006e0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80006e2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80006e4:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80006e6:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80006e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80006ea:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80006ec:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80006f2:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80006f4:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80006f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80006fc:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80006fe:	4770      	bx	lr

08000700 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000700:	4922      	ldr	r1, [pc, #136]	; (800078c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000702:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000704:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000708:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800070c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800070e:	b13a      	cbz	r2, 8000720 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000710:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000714:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000716:	b91a      	cbnz	r2, 8000720 <__tx_timer_no_time_slice>

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800071a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800071e:	6018      	str	r0, [r3, #0]

08000720 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000720:	491d      	ldr	r1, [pc, #116]	; (8000798 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000722:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000724:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000726:	b122      	cbz	r2, 8000732 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000728:	4b1c      	ldr	r3, [pc, #112]	; (800079c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800072a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800072e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000730:	e008      	b.n	8000744 <__tx_timer_done>

08000732 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000732:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000738:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800073a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800073c:	d101      	bne.n	8000742 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000740:	6818      	ldr	r0, [r3, #0]

08000742 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000742:	6008      	str	r0, [r1, #0]

08000744 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000746:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000748:	b912      	cbnz	r2, 8000750 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800074a:	4914      	ldr	r1, [pc, #80]	; (800079c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800074c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800074e:	b1d0      	cbz	r0, 8000786 <__tx_timer_nothing_expired>

08000750 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 8000750:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000754:	4911      	ldr	r1, [pc, #68]	; (800079c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000756:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000758:	b108      	cbz	r0, 800075e <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800075a:	f00a ff11 	bl	800b580 <_tx_timer_expiration_process>

0800075e <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000760:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000762:	b172      	cbz	r2, 8000782 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000764:	f00a fc04 	bl	800af70 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000768:	480f      	ldr	r0, [pc, #60]	; (80007a8 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800076a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800076c:	b949      	cbnz	r1, 8000782 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800076e:	480f      	ldr	r0, [pc, #60]	; (80007ac <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000770:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000772:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000774:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000776:	480f      	ldr	r0, [pc, #60]	; (80007b4 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800077c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800077e:	d000      	beq.n	8000782 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000780:	6002      	str	r2, [r0, #0]

08000782 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000782:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000786 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000786:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800078a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800078c:	2400f0dc 	.word	0x2400f0dc
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000790:	2400f674 	.word	0x2400f674
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000794:	2400f0e0 	.word	0x2400f0e0
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000798:	2400f16c 	.word	0x2400f16c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800079c:	2400f170 	.word	0x2400f170
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80007a0:	2400f168 	.word	0x2400f168
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80007a4:	2400f164 	.word	0x2400f164
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80007a8:	2400f0d0 	.word	0x2400f0d0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80007ac:	2400f034 	.word	0x2400f034
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80007b0:	2400f038 	.word	0x2400f038
    LDR     r0, =0xE000ED04                         // Build address of control register
 80007b4:	e000ed04 	.word	0xe000ed04
	...

080007c0 <_txm_module_manager_thread_stack_build>:
                    pc          Initial value for pc
                    xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                       // Pickup end of stack area
 80007c0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                        // Align frame
 80007c2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                         // Subtract frame size
 80007c6:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                     // Build initial LR value
 80007ca:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                        // Save on the stack
 80007ce:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                              // Build initial register value
 80007d0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                        // Store initial r4
 80007d4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                        // Store initial r5
 80007d6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                       // Store initial r6
 80007d8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                       // Store initial r7
 80007da:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                       // Store initial r8
 80007dc:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #28]                       // Store initial r10
 80007de:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                       // Store initial r11
 80007e0:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r0, [r2, #36]                       // Store initial r0, which is the thread control block
 80007e2:	6250      	str	r0, [r2, #36]	; 0x24

    LDR     r3, [r0, #8]                        // Pickup thread entry info pointer,which is in the stack pointer position of the thread control block.
 80007e4:	6883      	ldr	r3, [r0, #8]
                                                //   It was setup in the txm_module_manager_thread_create function. It will be overwritten later in this
                                                //   function with the actual, initial stack pointer.
    STR     r3, [r2, #40]                       // Store initial r1, which is the module entry information.
 80007e6:	6293      	str	r3, [r2, #40]	; 0x28
    LDR     r3, [r3, #8]                        // Pickup data base register from the module information
 80007e8:	689b      	ldr	r3, [r3, #8]
    STR     r3, [r2, #24]                       // Store initial r9 (data base register)
 80007ea:	6193      	str	r3, [r2, #24]
    MOV     r3, #0                              // Clear r3 again
 80007ec:	f04f 0300 	mov.w	r3, #0

    STR     r3, [r2, #44]                       // Store initial r2
 80007f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                       // Store initial r3
 80007f2:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                       // Store initial r12
 80007f4:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                     // Poison EXC_RETURN value
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                       // Store initial lr
 80007fa:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                       // Store initial pc
 80007fc:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                     // Only T-bit need be set
 80007fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                       // Store initial xPSR
 8000802:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                        // Save stack pointer in thread's control block
 8000804:	6082      	str	r2, [r0, #8]
    BX      lr                                  // Return to caller
 8000806:	4770      	bx	lr
	...

08000810 <memchr>:
 8000810:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000814:	2a10      	cmp	r2, #16
 8000816:	db2b      	blt.n	8000870 <memchr+0x60>
 8000818:	f010 0f07 	tst.w	r0, #7
 800081c:	d008      	beq.n	8000830 <memchr+0x20>
 800081e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000822:	3a01      	subs	r2, #1
 8000824:	428b      	cmp	r3, r1
 8000826:	d02d      	beq.n	8000884 <memchr+0x74>
 8000828:	f010 0f07 	tst.w	r0, #7
 800082c:	b342      	cbz	r2, 8000880 <memchr+0x70>
 800082e:	d1f6      	bne.n	800081e <memchr+0xe>
 8000830:	b4f0      	push	{r4, r5, r6, r7}
 8000832:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000836:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800083a:	f022 0407 	bic.w	r4, r2, #7
 800083e:	f07f 0700 	mvns.w	r7, #0
 8000842:	2300      	movs	r3, #0
 8000844:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000848:	3c08      	subs	r4, #8
 800084a:	ea85 0501 	eor.w	r5, r5, r1
 800084e:	ea86 0601 	eor.w	r6, r6, r1
 8000852:	fa85 f547 	uadd8	r5, r5, r7
 8000856:	faa3 f587 	sel	r5, r3, r7
 800085a:	fa86 f647 	uadd8	r6, r6, r7
 800085e:	faa5 f687 	sel	r6, r5, r7
 8000862:	b98e      	cbnz	r6, 8000888 <memchr+0x78>
 8000864:	d1ee      	bne.n	8000844 <memchr+0x34>
 8000866:	bcf0      	pop	{r4, r5, r6, r7}
 8000868:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800086c:	f002 0207 	and.w	r2, r2, #7
 8000870:	b132      	cbz	r2, 8000880 <memchr+0x70>
 8000872:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000876:	3a01      	subs	r2, #1
 8000878:	ea83 0301 	eor.w	r3, r3, r1
 800087c:	b113      	cbz	r3, 8000884 <memchr+0x74>
 800087e:	d1f8      	bne.n	8000872 <memchr+0x62>
 8000880:	2000      	movs	r0, #0
 8000882:	4770      	bx	lr
 8000884:	3801      	subs	r0, #1
 8000886:	4770      	bx	lr
 8000888:	2d00      	cmp	r5, #0
 800088a:	bf06      	itte	eq
 800088c:	4635      	moveq	r5, r6
 800088e:	3803      	subeq	r0, #3
 8000890:	3807      	subne	r0, #7
 8000892:	f015 0f01 	tst.w	r5, #1
 8000896:	d107      	bne.n	80008a8 <memchr+0x98>
 8000898:	3001      	adds	r0, #1
 800089a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800089e:	bf02      	ittt	eq
 80008a0:	3001      	addeq	r0, #1
 80008a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80008a6:	3001      	addeq	r0, #1
 80008a8:	bcf0      	pop	{r4, r5, r6, r7}
 80008aa:	3801      	subs	r0, #1
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop

080008b0 <__aeabi_uldivmod>:
 80008b0:	b953      	cbnz	r3, 80008c8 <__aeabi_uldivmod+0x18>
 80008b2:	b94a      	cbnz	r2, 80008c8 <__aeabi_uldivmod+0x18>
 80008b4:	2900      	cmp	r1, #0
 80008b6:	bf08      	it	eq
 80008b8:	2800      	cmpeq	r0, #0
 80008ba:	bf1c      	itt	ne
 80008bc:	f04f 31ff 	movne.w	r1, #4294967295
 80008c0:	f04f 30ff 	movne.w	r0, #4294967295
 80008c4:	f000 b974 	b.w	8000bb0 <__aeabi_idiv0>
 80008c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80008cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008d0:	f000 f806 	bl	80008e0 <__udivmoddi4>
 80008d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008dc:	b004      	add	sp, #16
 80008de:	4770      	bx	lr

080008e0 <__udivmoddi4>:
 80008e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e4:	9d08      	ldr	r5, [sp, #32]
 80008e6:	4604      	mov	r4, r0
 80008e8:	468e      	mov	lr, r1
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d14d      	bne.n	800098a <__udivmoddi4+0xaa>
 80008ee:	428a      	cmp	r2, r1
 80008f0:	4694      	mov	ip, r2
 80008f2:	d969      	bls.n	80009c8 <__udivmoddi4+0xe8>
 80008f4:	fab2 f282 	clz	r2, r2
 80008f8:	b152      	cbz	r2, 8000910 <__udivmoddi4+0x30>
 80008fa:	fa01 f302 	lsl.w	r3, r1, r2
 80008fe:	f1c2 0120 	rsb	r1, r2, #32
 8000902:	fa20 f101 	lsr.w	r1, r0, r1
 8000906:	fa0c fc02 	lsl.w	ip, ip, r2
 800090a:	ea41 0e03 	orr.w	lr, r1, r3
 800090e:	4094      	lsls	r4, r2
 8000910:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000914:	0c21      	lsrs	r1, r4, #16
 8000916:	fbbe f6f8 	udiv	r6, lr, r8
 800091a:	fa1f f78c 	uxth.w	r7, ip
 800091e:	fb08 e316 	mls	r3, r8, r6, lr
 8000922:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000926:	fb06 f107 	mul.w	r1, r6, r7
 800092a:	4299      	cmp	r1, r3
 800092c:	d90a      	bls.n	8000944 <__udivmoddi4+0x64>
 800092e:	eb1c 0303 	adds.w	r3, ip, r3
 8000932:	f106 30ff 	add.w	r0, r6, #4294967295
 8000936:	f080 811f 	bcs.w	8000b78 <__udivmoddi4+0x298>
 800093a:	4299      	cmp	r1, r3
 800093c:	f240 811c 	bls.w	8000b78 <__udivmoddi4+0x298>
 8000940:	3e02      	subs	r6, #2
 8000942:	4463      	add	r3, ip
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	b2a4      	uxth	r4, r4
 8000948:	fbb3 f0f8 	udiv	r0, r3, r8
 800094c:	fb08 3310 	mls	r3, r8, r0, r3
 8000950:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000954:	fb00 f707 	mul.w	r7, r0, r7
 8000958:	42a7      	cmp	r7, r4
 800095a:	d90a      	bls.n	8000972 <__udivmoddi4+0x92>
 800095c:	eb1c 0404 	adds.w	r4, ip, r4
 8000960:	f100 33ff 	add.w	r3, r0, #4294967295
 8000964:	f080 810a 	bcs.w	8000b7c <__udivmoddi4+0x29c>
 8000968:	42a7      	cmp	r7, r4
 800096a:	f240 8107 	bls.w	8000b7c <__udivmoddi4+0x29c>
 800096e:	4464      	add	r4, ip
 8000970:	3802      	subs	r0, #2
 8000972:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000976:	1be4      	subs	r4, r4, r7
 8000978:	2600      	movs	r6, #0
 800097a:	b11d      	cbz	r5, 8000984 <__udivmoddi4+0xa4>
 800097c:	40d4      	lsrs	r4, r2
 800097e:	2300      	movs	r3, #0
 8000980:	e9c5 4300 	strd	r4, r3, [r5]
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	428b      	cmp	r3, r1
 800098c:	d909      	bls.n	80009a2 <__udivmoddi4+0xc2>
 800098e:	2d00      	cmp	r5, #0
 8000990:	f000 80ef 	beq.w	8000b72 <__udivmoddi4+0x292>
 8000994:	2600      	movs	r6, #0
 8000996:	e9c5 0100 	strd	r0, r1, [r5]
 800099a:	4630      	mov	r0, r6
 800099c:	4631      	mov	r1, r6
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	fab3 f683 	clz	r6, r3
 80009a6:	2e00      	cmp	r6, #0
 80009a8:	d14a      	bne.n	8000a40 <__udivmoddi4+0x160>
 80009aa:	428b      	cmp	r3, r1
 80009ac:	d302      	bcc.n	80009b4 <__udivmoddi4+0xd4>
 80009ae:	4282      	cmp	r2, r0
 80009b0:	f200 80f9 	bhi.w	8000ba6 <__udivmoddi4+0x2c6>
 80009b4:	1a84      	subs	r4, r0, r2
 80009b6:	eb61 0303 	sbc.w	r3, r1, r3
 80009ba:	2001      	movs	r0, #1
 80009bc:	469e      	mov	lr, r3
 80009be:	2d00      	cmp	r5, #0
 80009c0:	d0e0      	beq.n	8000984 <__udivmoddi4+0xa4>
 80009c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80009c6:	e7dd      	b.n	8000984 <__udivmoddi4+0xa4>
 80009c8:	b902      	cbnz	r2, 80009cc <__udivmoddi4+0xec>
 80009ca:	deff      	udf	#255	; 0xff
 80009cc:	fab2 f282 	clz	r2, r2
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	f040 8092 	bne.w	8000afa <__udivmoddi4+0x21a>
 80009d6:	eba1 010c 	sub.w	r1, r1, ip
 80009da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009de:	fa1f fe8c 	uxth.w	lr, ip
 80009e2:	2601      	movs	r6, #1
 80009e4:	0c20      	lsrs	r0, r4, #16
 80009e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ea:	fb07 1113 	mls	r1, r7, r3, r1
 80009ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009f2:	fb0e f003 	mul.w	r0, lr, r3
 80009f6:	4288      	cmp	r0, r1
 80009f8:	d908      	bls.n	8000a0c <__udivmoddi4+0x12c>
 80009fa:	eb1c 0101 	adds.w	r1, ip, r1
 80009fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a02:	d202      	bcs.n	8000a0a <__udivmoddi4+0x12a>
 8000a04:	4288      	cmp	r0, r1
 8000a06:	f200 80cb 	bhi.w	8000ba0 <__udivmoddi4+0x2c0>
 8000a0a:	4643      	mov	r3, r8
 8000a0c:	1a09      	subs	r1, r1, r0
 8000a0e:	b2a4      	uxth	r4, r4
 8000a10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a14:	fb07 1110 	mls	r1, r7, r0, r1
 8000a18:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000a20:	45a6      	cmp	lr, r4
 8000a22:	d908      	bls.n	8000a36 <__udivmoddi4+0x156>
 8000a24:	eb1c 0404 	adds.w	r4, ip, r4
 8000a28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a2c:	d202      	bcs.n	8000a34 <__udivmoddi4+0x154>
 8000a2e:	45a6      	cmp	lr, r4
 8000a30:	f200 80bb 	bhi.w	8000baa <__udivmoddi4+0x2ca>
 8000a34:	4608      	mov	r0, r1
 8000a36:	eba4 040e 	sub.w	r4, r4, lr
 8000a3a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a3e:	e79c      	b.n	800097a <__udivmoddi4+0x9a>
 8000a40:	f1c6 0720 	rsb	r7, r6, #32
 8000a44:	40b3      	lsls	r3, r6
 8000a46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a4e:	fa20 f407 	lsr.w	r4, r0, r7
 8000a52:	fa01 f306 	lsl.w	r3, r1, r6
 8000a56:	431c      	orrs	r4, r3
 8000a58:	40f9      	lsrs	r1, r7
 8000a5a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a5e:	fa00 f306 	lsl.w	r3, r0, r6
 8000a62:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a66:	0c20      	lsrs	r0, r4, #16
 8000a68:	fa1f fe8c 	uxth.w	lr, ip
 8000a6c:	fb09 1118 	mls	r1, r9, r8, r1
 8000a70:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a74:	fb08 f00e 	mul.w	r0, r8, lr
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	fa02 f206 	lsl.w	r2, r2, r6
 8000a7e:	d90b      	bls.n	8000a98 <__udivmoddi4+0x1b8>
 8000a80:	eb1c 0101 	adds.w	r1, ip, r1
 8000a84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a88:	f080 8088 	bcs.w	8000b9c <__udivmoddi4+0x2bc>
 8000a8c:	4288      	cmp	r0, r1
 8000a8e:	f240 8085 	bls.w	8000b9c <__udivmoddi4+0x2bc>
 8000a92:	f1a8 0802 	sub.w	r8, r8, #2
 8000a96:	4461      	add	r1, ip
 8000a98:	1a09      	subs	r1, r1, r0
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000aa0:	fb09 1110 	mls	r1, r9, r0, r1
 8000aa4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aa8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aac:	458e      	cmp	lr, r1
 8000aae:	d908      	bls.n	8000ac2 <__udivmoddi4+0x1e2>
 8000ab0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab8:	d26c      	bcs.n	8000b94 <__udivmoddi4+0x2b4>
 8000aba:	458e      	cmp	lr, r1
 8000abc:	d96a      	bls.n	8000b94 <__udivmoddi4+0x2b4>
 8000abe:	3802      	subs	r0, #2
 8000ac0:	4461      	add	r1, ip
 8000ac2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ac6:	fba0 9402 	umull	r9, r4, r0, r2
 8000aca:	eba1 010e 	sub.w	r1, r1, lr
 8000ace:	42a1      	cmp	r1, r4
 8000ad0:	46c8      	mov	r8, r9
 8000ad2:	46a6      	mov	lr, r4
 8000ad4:	d356      	bcc.n	8000b84 <__udivmoddi4+0x2a4>
 8000ad6:	d053      	beq.n	8000b80 <__udivmoddi4+0x2a0>
 8000ad8:	b15d      	cbz	r5, 8000af2 <__udivmoddi4+0x212>
 8000ada:	ebb3 0208 	subs.w	r2, r3, r8
 8000ade:	eb61 010e 	sbc.w	r1, r1, lr
 8000ae2:	fa01 f707 	lsl.w	r7, r1, r7
 8000ae6:	fa22 f306 	lsr.w	r3, r2, r6
 8000aea:	40f1      	lsrs	r1, r6
 8000aec:	431f      	orrs	r7, r3
 8000aee:	e9c5 7100 	strd	r7, r1, [r5]
 8000af2:	2600      	movs	r6, #0
 8000af4:	4631      	mov	r1, r6
 8000af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afa:	f1c2 0320 	rsb	r3, r2, #32
 8000afe:	40d8      	lsrs	r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	fa21 f303 	lsr.w	r3, r1, r3
 8000b08:	4091      	lsls	r1, r2
 8000b0a:	4301      	orrs	r1, r0
 8000b0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b10:	fa1f fe8c 	uxth.w	lr, ip
 8000b14:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b18:	fb07 3610 	mls	r6, r7, r0, r3
 8000b1c:	0c0b      	lsrs	r3, r1, #16
 8000b1e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b22:	fb00 f60e 	mul.w	r6, r0, lr
 8000b26:	429e      	cmp	r6, r3
 8000b28:	fa04 f402 	lsl.w	r4, r4, r2
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x260>
 8000b2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b36:	d22f      	bcs.n	8000b98 <__udivmoddi4+0x2b8>
 8000b38:	429e      	cmp	r6, r3
 8000b3a:	d92d      	bls.n	8000b98 <__udivmoddi4+0x2b8>
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1b9b      	subs	r3, r3, r6
 8000b42:	b289      	uxth	r1, r1
 8000b44:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b48:	fb07 3316 	mls	r3, r7, r6, r3
 8000b4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b50:	fb06 f30e 	mul.w	r3, r6, lr
 8000b54:	428b      	cmp	r3, r1
 8000b56:	d908      	bls.n	8000b6a <__udivmoddi4+0x28a>
 8000b58:	eb1c 0101 	adds.w	r1, ip, r1
 8000b5c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b60:	d216      	bcs.n	8000b90 <__udivmoddi4+0x2b0>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d914      	bls.n	8000b90 <__udivmoddi4+0x2b0>
 8000b66:	3e02      	subs	r6, #2
 8000b68:	4461      	add	r1, ip
 8000b6a:	1ac9      	subs	r1, r1, r3
 8000b6c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b70:	e738      	b.n	80009e4 <__udivmoddi4+0x104>
 8000b72:	462e      	mov	r6, r5
 8000b74:	4628      	mov	r0, r5
 8000b76:	e705      	b.n	8000984 <__udivmoddi4+0xa4>
 8000b78:	4606      	mov	r6, r0
 8000b7a:	e6e3      	b.n	8000944 <__udivmoddi4+0x64>
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	e6f8      	b.n	8000972 <__udivmoddi4+0x92>
 8000b80:	454b      	cmp	r3, r9
 8000b82:	d2a9      	bcs.n	8000ad8 <__udivmoddi4+0x1f8>
 8000b84:	ebb9 0802 	subs.w	r8, r9, r2
 8000b88:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b8c:	3801      	subs	r0, #1
 8000b8e:	e7a3      	b.n	8000ad8 <__udivmoddi4+0x1f8>
 8000b90:	4646      	mov	r6, r8
 8000b92:	e7ea      	b.n	8000b6a <__udivmoddi4+0x28a>
 8000b94:	4620      	mov	r0, r4
 8000b96:	e794      	b.n	8000ac2 <__udivmoddi4+0x1e2>
 8000b98:	4640      	mov	r0, r8
 8000b9a:	e7d1      	b.n	8000b40 <__udivmoddi4+0x260>
 8000b9c:	46d0      	mov	r8, sl
 8000b9e:	e77b      	b.n	8000a98 <__udivmoddi4+0x1b8>
 8000ba0:	3b02      	subs	r3, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	e732      	b.n	8000a0c <__udivmoddi4+0x12c>
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	e709      	b.n	80009be <__udivmoddi4+0xde>
 8000baa:	4464      	add	r4, ip
 8000bac:	3802      	subs	r0, #2
 8000bae:	e742      	b.n	8000a36 <__udivmoddi4+0x156>

08000bb0 <__aeabi_idiv0>:
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bec <LoopFillZerobss+0x10>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb8:	f000 fdbe 	bl	8001738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bbe:	e003      	b.n	8000bc8 <LoopCopyDataInit>

08000bc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000bc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bc6:	3104      	adds	r1, #4

08000bc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bc8:	480a      	ldr	r0, [pc, #40]	; (8000bf4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000bcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bd0:	d3f6      	bcc.n	8000bc0 <CopyDataInit>
  ldr  r2, =_sbss
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000bd4:	e002      	b.n	8000bdc <LoopFillZerobss>

08000bd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bd8:	f842 3b04 	str.w	r3, [r2], #4

08000bdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000bde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000be0:	d3f9      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000be2:	f014 fb11 	bl	8015208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be6:	f000 fa07 	bl	8000ff8 <main>
  bx  lr    
 8000bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bec:	24020000 	.word	0x24020000
  ldr  r3, =_sidata
 8000bf0:	0801672c 	.word	0x0801672c
  ldr  r0, =_sdata
 8000bf4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000bf8:	24000088 	.word	0x24000088
  ldr  r2, =_sbss
 8000bfc:	240000a0 	.word	0x240000a0
  ldr  r3, = _ebss
 8000c00:	2400f7a4 	.word	0x2400f7a4

08000c04 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC3_IRQHandler>
	...

08000c08 <tx_application_define>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval none
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af08      	add	r7, sp, #32
 8000c0e:	6078      	str	r0, [r7, #4]
  CHAR *pointer;

  if (tx_byte_pool_create(&ModuleManagerBytePool, "Module Manager Byte Pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000c10:	2334      	movs	r3, #52	; 0x34
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c18:	4a28      	ldr	r2, [pc, #160]	; (8000cbc <tx_application_define+0xb4>)
 8000c1a:	4929      	ldr	r1, [pc, #164]	; (8000cc0 <tx_application_define+0xb8>)
 8000c1c:	4829      	ldr	r0, [pc, #164]	; (8000cc4 <tx_application_define+0xbc>)
 8000c1e:	f00b f995 	bl	800bf4c <_txe_byte_pool_create>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d002      	beq.n	8000c2e <tx_application_define+0x26>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Error */
    Error_Handler();
 8000c28:	f000 fad8 	bl	80011dc <Error_Handler>
                        pointer, 16 * sizeof(ULONG)) != TX_SUCCESS)
    {
      Error_Handler();
    }
  }
}
 8000c2c:	e041      	b.n	8000cb2 <tx_application_define+0xaa>
    if (tx_byte_allocate(&ModuleManagerBytePool, (VOID **) &pointer,
 8000c2e:	f107 010c 	add.w	r1, r7, #12
 8000c32:	2300      	movs	r3, #0
 8000c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c38:	4822      	ldr	r0, [pc, #136]	; (8000cc4 <tx_application_define+0xbc>)
 8000c3a:	f00b f913 	bl	800be64 <_txe_byte_allocate>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <tx_application_define+0x40>
      Error_Handler();
 8000c44:	f000 faca 	bl	80011dc <Error_Handler>
    if (tx_thread_create(&ModuleManager, "Module Manager Thread", module_manager_entry, 0,
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	22e8      	movs	r2, #232	; 0xe8
 8000c4c:	9206      	str	r2, [sp, #24]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	9205      	str	r2, [sp, #20]
 8000c52:	2200      	movs	r2, #0
 8000c54:	9204      	str	r2, [sp, #16]
 8000c56:	2204      	movs	r2, #4
 8000c58:	9203      	str	r2, [sp, #12]
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	9202      	str	r2, [sp, #8]
 8000c5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c62:	9201      	str	r2, [sp, #4]
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2300      	movs	r3, #0
 8000c68:	4a17      	ldr	r2, [pc, #92]	; (8000cc8 <tx_application_define+0xc0>)
 8000c6a:	4918      	ldr	r1, [pc, #96]	; (8000ccc <tx_application_define+0xc4>)
 8000c6c:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <tx_application_define+0xc8>)
 8000c6e:	f00c fa21 	bl	800d0b4 <_txe_thread_create>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <tx_application_define+0x74>
      Error_Handler();
 8000c78:	f000 fab0 	bl	80011dc <Error_Handler>
    if (tx_byte_allocate(&ModuleManagerBytePool, (VOID **) &pointer,
 8000c7c:	f107 010c 	add.w	r1, r7, #12
 8000c80:	2300      	movs	r3, #0
 8000c82:	2240      	movs	r2, #64	; 0x40
 8000c84:	480f      	ldr	r0, [pc, #60]	; (8000cc4 <tx_application_define+0xbc>)
 8000c86:	f00b f8ed 	bl	800be64 <_txe_byte_allocate>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <tx_application_define+0x8c>
      Error_Handler();
 8000c90:	f000 faa4 	bl	80011dc <Error_Handler>
    if (tx_queue_create(&ResidentQueue, "Resident Queue", TX_1_ULONG,
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2244      	movs	r2, #68	; 0x44
 8000c98:	9201      	str	r2, [sp, #4]
 8000c9a:	2240      	movs	r2, #64	; 0x40
 8000c9c:	9200      	str	r2, [sp, #0]
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <tx_application_define+0xcc>)
 8000ca2:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <tx_application_define+0xd0>)
 8000ca4:	f00b fdfc 	bl	800c8a0 <_txe_queue_create>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <tx_application_define+0xaa>
      Error_Handler();
 8000cae:	f000 fa95 	bl	80011dc <Error_Handler>
}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2400c6e4 	.word	0x2400c6e4
 8000cc0:	0801629c 	.word	0x0801629c
 8000cc4:	2400eee4 	.word	0x2400eee4
 8000cc8:	08000ce9 	.word	0x08000ce9
 8000ccc:	080162b8 	.word	0x080162b8
 8000cd0:	240000bc 	.word	0x240000bc
 8000cd4:	080162d0 	.word	0x080162d0
 8000cd8:	24000680 	.word	0x24000680

08000cdc <MX_AZURE_RTOS_Init>:
   * @brief  MX_AZURE_RTOS_Init
   * @param  None
   * @retval None
   */
void MX_AZURE_RTOS_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000ce0:	f006 fe6c 	bl	80079bc <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <module_manager_entry>:
  * @brief  Module Manager main thread.
  * @param  thread_input: thread id
  * @retval none
  */
VOID module_manager_entry(ULONG thread_input)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b096      	sub	sp, #88	; 0x58
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  UINT   status;
  CHAR   p_msg[64];
  ULONG  r_msg = PROCESSING_NOT_STARTED;
 8000cf0:	2363      	movs	r3, #99	; 0x63
 8000cf2:	613b      	str	r3, [r7, #16]
  ULONG  module_properties;

  /* Initialize the module manager. */
  status = txm_module_manager_initialize((VOID *) module_data_area, MODULE_DATA_SIZE);
 8000cf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cf8:	486f      	ldr	r0, [pc, #444]	; (8000eb8 <module_manager_entry+0x1d0>)
 8000cfa:	f00d f8a1 	bl	800de40 <_txm_module_manager_initialize>
 8000cfe:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <module_manager_entry+0x22>
  {
    Error_Handler();
 8000d06:	f000 fa69 	bl	80011dc <Error_Handler>
  }

  /* Create a pool for module objects. */
  status = txm_module_manager_object_pool_create(object_memory, OBJECT_MEM_SIZE);
 8000d0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d0e:	486b      	ldr	r0, [pc, #428]	; (8000ebc <module_manager_entry+0x1d4>)
 8000d10:	f012 fd12 	bl	8013738 <_txm_module_manager_object_pool_create>
 8000d14:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <module_manager_entry+0x38>
  {
    Error_Handler();
 8000d1c:	f000 fa5e 	bl	80011dc <Error_Handler>
  }

  /* Register a fault handler. */
  status = txm_module_manager_memory_fault_notify(module_fault_handler);
 8000d20:	4867      	ldr	r0, [pc, #412]	; (8000ec0 <module_manager_entry+0x1d8>)
 8000d22:	f012 f845 	bl	8012db0 <_txm_module_manager_memory_fault_notify>
 8000d26:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <module_manager_entry+0x4a>
  {
    Error_Handler();
 8000d2e:	f000 fa55 	bl	80011dc <Error_Handler>
  }

  /* Load the module from the specified address */
  status = txm_module_manager_in_place_load(&my_module, "my module", (VOID *) MODULE_FLASH_ADDRESS);
 8000d32:	4a64      	ldr	r2, [pc, #400]	; (8000ec4 <module_manager_entry+0x1dc>)
 8000d34:	4964      	ldr	r1, [pc, #400]	; (8000ec8 <module_manager_entry+0x1e0>)
 8000d36:	4865      	ldr	r0, [pc, #404]	; (8000ecc <module_manager_entry+0x1e4>)
 8000d38:	f00d f842 	bl	800ddc0 <_txm_module_manager_in_place_load>
 8000d3c:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <module_manager_entry+0x60>
  {
    Error_Handler();
 8000d44:	f000 fa4a 	bl	80011dc <Error_Handler>
  }

  /* Enable shared memory region for module with read-only access permission. */
  status = txm_module_manager_external_memory_enable(&my_module, (void*)READONLY_REGION, SHARED_MEM_SIZE, 0);
 8000d48:	2300      	movs	r3, #0
 8000d4a:	22ff      	movs	r2, #255	; 0xff
 8000d4c:	4960      	ldr	r1, [pc, #384]	; (8000ed0 <module_manager_entry+0x1e8>)
 8000d4e:	485f      	ldr	r0, [pc, #380]	; (8000ecc <module_manager_entry+0x1e4>)
 8000d50:	f00c ff94 	bl	800dc7c <_txm_module_manager_external_memory_enable>
 8000d54:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <module_manager_entry+0x78>
  {
    Error_Handler();
 8000d5c:	f000 fa3e 	bl	80011dc <Error_Handler>
  }

  /* Enable shared memory region for module with read and write access permission. */
  status = txm_module_manager_external_memory_enable(&my_module, (void*)READWRITE_REGION, SHARED_MEM_SIZE, TXM_MODULE_MANAGER_SHARED_ATTRIBUTE_WRITE);
 8000d60:	2301      	movs	r3, #1
 8000d62:	22ff      	movs	r2, #255	; 0xff
 8000d64:	495b      	ldr	r1, [pc, #364]	; (8000ed4 <module_manager_entry+0x1ec>)
 8000d66:	4859      	ldr	r0, [pc, #356]	; (8000ecc <module_manager_entry+0x1e4>)
 8000d68:	f00c ff88 	bl	800dc7c <_txm_module_manager_external_memory_enable>
 8000d6c:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <module_manager_entry+0x90>
  {
    Error_Handler();
 8000d74:	f000 fa32 	bl	80011dc <Error_Handler>
  }

  /* Get module properties. */
  status = txm_module_manager_properties_get(&my_module, &module_properties);
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4853      	ldr	r0, [pc, #332]	; (8000ecc <module_manager_entry+0x1e4>)
 8000d80:	f012 fcf4 	bl	801376c <_txm_module_manager_properties_get>
 8000d84:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <module_manager_entry+0xa8>
  {
    Error_Handler();
 8000d8c:	f000 fa26 	bl	80011dc <Error_Handler>
  }

  /* Print loaded module info */
  printf("Module <%s> is loaded from address 0x%08X\n", my_module.txm_module_instance_name, MODULE_FLASH_ADDRESS);
 8000d90:	4b4e      	ldr	r3, [pc, #312]	; (8000ecc <module_manager_entry+0x1e4>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	4a4b      	ldr	r2, [pc, #300]	; (8000ec4 <module_manager_entry+0x1dc>)
 8000d96:	4619      	mov	r1, r3
 8000d98:	484f      	ldr	r0, [pc, #316]	; (8000ed8 <module_manager_entry+0x1f0>)
 8000d9a:	f014 fa6f 	bl	801527c <iprintf>
  printf("Module code section size: %i bytes, data section size: %i\n", (int)my_module.txm_module_instance_code_size, (int)my_module.txm_module_instance_data_size);
 8000d9e:	4b4b      	ldr	r3, [pc, #300]	; (8000ecc <module_manager_entry+0x1e4>)
 8000da0:	6a1b      	ldr	r3, [r3, #32]
 8000da2:	4619      	mov	r1, r3
 8000da4:	4b49      	ldr	r3, [pc, #292]	; (8000ecc <module_manager_entry+0x1e4>)
 8000da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da8:	461a      	mov	r2, r3
 8000daa:	484c      	ldr	r0, [pc, #304]	; (8000edc <module_manager_entry+0x1f4>)
 8000dac:	f014 fa66 	bl	801527c <iprintf>
  printf("Module Attributes:\n");
 8000db0:	484b      	ldr	r0, [pc, #300]	; (8000ee0 <module_manager_entry+0x1f8>)
 8000db2:	f014 fae9 	bl	8015388 <puts>
  printf("  - Compiled for %s compiler\n", ((module_properties >> 25) == 1)? "CubeIDE (GNU)" : ((module_properties >> 24) == 1)? "ARM KEIL" : "IAR EW");
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	0e5b      	lsrs	r3, r3, #25
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d007      	beq.n	8000dce <module_manager_entry+0xe6>
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	0e1b      	lsrs	r3, r3, #24
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d101      	bne.n	8000dca <module_manager_entry+0xe2>
 8000dc6:	4b47      	ldr	r3, [pc, #284]	; (8000ee4 <module_manager_entry+0x1fc>)
 8000dc8:	e002      	b.n	8000dd0 <module_manager_entry+0xe8>
 8000dca:	4b47      	ldr	r3, [pc, #284]	; (8000ee8 <module_manager_entry+0x200>)
 8000dcc:	e000      	b.n	8000dd0 <module_manager_entry+0xe8>
 8000dce:	4b47      	ldr	r3, [pc, #284]	; (8000eec <module_manager_entry+0x204>)
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4847      	ldr	r0, [pc, #284]	; (8000ef0 <module_manager_entry+0x208>)
 8000dd4:	f014 fa52 	bl	801527c <iprintf>
  printf("  - Shared/external memory access is %s\n", ((module_properties & 0x04) == 0)? "Disabled" : "Enabled");
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <module_manager_entry+0xfe>
 8000de2:	4b44      	ldr	r3, [pc, #272]	; (8000ef4 <module_manager_entry+0x20c>)
 8000de4:	e000      	b.n	8000de8 <module_manager_entry+0x100>
 8000de6:	4b44      	ldr	r3, [pc, #272]	; (8000ef8 <module_manager_entry+0x210>)
 8000de8:	4619      	mov	r1, r3
 8000dea:	4844      	ldr	r0, [pc, #272]	; (8000efc <module_manager_entry+0x214>)
 8000dec:	f014 fa46 	bl	801527c <iprintf>
  printf("  - MPU protection is %s\n", ((module_properties & 0x02) == 0)? "Disabled" : "Enabled");
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d101      	bne.n	8000dfe <module_manager_entry+0x116>
 8000dfa:	4b3e      	ldr	r3, [pc, #248]	; (8000ef4 <module_manager_entry+0x20c>)
 8000dfc:	e000      	b.n	8000e00 <module_manager_entry+0x118>
 8000dfe:	4b3e      	ldr	r3, [pc, #248]	; (8000ef8 <module_manager_entry+0x210>)
 8000e00:	4619      	mov	r1, r3
 8000e02:	483f      	ldr	r0, [pc, #252]	; (8000f00 <module_manager_entry+0x218>)
 8000e04:	f014 fa3a 	bl	801527c <iprintf>
  printf("  - %s mode execution is enabled for the module\n\n", ((module_properties & 0x01) == 0)? "Privileged" : "User");
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <module_manager_entry+0x12e>
 8000e12:	4b3c      	ldr	r3, [pc, #240]	; (8000f04 <module_manager_entry+0x21c>)
 8000e14:	e000      	b.n	8000e18 <module_manager_entry+0x130>
 8000e16:	4b3c      	ldr	r3, [pc, #240]	; (8000f08 <module_manager_entry+0x220>)
 8000e18:	4619      	mov	r1, r3
 8000e1a:	483c      	ldr	r0, [pc, #240]	; (8000f0c <module_manager_entry+0x224>)
 8000e1c:	f014 fa2e 	bl	801527c <iprintf>

  /* Start the modules. */
  status = txm_module_manager_start(&my_module);
 8000e20:	482a      	ldr	r0, [pc, #168]	; (8000ecc <module_manager_entry+0x1e4>)
 8000e22:	f012 fd7f 	bl	8013924 <_txm_module_manager_start>
 8000e26:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <module_manager_entry+0x14a>
  {
    Error_Handler();
 8000e2e:	f000 f9d5 	bl	80011dc <Error_Handler>
  }

  printf("Module execution is started\n");
 8000e32:	4837      	ldr	r0, [pc, #220]	; (8000f10 <module_manager_entry+0x228>)
 8000e34:	f014 faa8 	bl	8015388 <puts>

  /* Get Module's progress messages */
  while(r_msg != PROCESSING_FINISHED)
 8000e38:	e021      	b.n	8000e7e <module_manager_entry+0x196>
  {
    if(tx_queue_receive(&ResidentQueue, &r_msg, TX_TIMER_TICKS_PER_SECOND) == TX_SUCCESS)
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	2264      	movs	r2, #100	; 0x64
 8000e40:	4619      	mov	r1, r3
 8000e42:	4834      	ldr	r0, [pc, #208]	; (8000f14 <module_manager_entry+0x22c>)
 8000e44:	f00b fec6 	bl	800cbd4 <_txe_queue_receive>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d117      	bne.n	8000e7e <module_manager_entry+0x196>
    {
      /* Convert the message to a user friendly string */
      pretty_msg(p_msg, r_msg);
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f876 	bl	8000f48 <pretty_msg>

      printf("Module is executing: %s\n", p_msg);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	482d      	ldr	r0, [pc, #180]	; (8000f18 <module_manager_entry+0x230>)
 8000e64:	f014 fa0a 	bl	801527c <iprintf>

      /* Check if the last executed operation resulted in memory violation */
      if(memory_faults)
 8000e68:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <module_manager_entry+0x234>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d006      	beq.n	8000e7e <module_manager_entry+0x196>
      {
        /* A memory access fault just occurred */
        printf("A memory fault occurred while module executed: %s\n", p_msg);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	482a      	ldr	r0, [pc, #168]	; (8000f20 <module_manager_entry+0x238>)
 8000e78:	f014 fa00 	bl	801527c <iprintf>
        break;
 8000e7c:	e002      	b.n	8000e84 <module_manager_entry+0x19c>
  while(r_msg != PROCESSING_FINISHED)
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	2b2c      	cmp	r3, #44	; 0x2c
 8000e82:	d1da      	bne.n	8000e3a <module_manager_entry+0x152>
      }
    }
  }

  /* Stop the modules. */
  status = txm_module_manager_stop(&my_module);
 8000e84:	4811      	ldr	r0, [pc, #68]	; (8000ecc <module_manager_entry+0x1e4>)
 8000e86:	f012 fe3f 	bl	8013b08 <_txm_module_manager_stop>
 8000e8a:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <module_manager_entry+0x1ae>
  {
    Error_Handler();
 8000e92:	f000 f9a3 	bl	80011dc <Error_Handler>
  }

  /* Unload the modules. */
  status = txm_module_manager_unload(&my_module);
 8000e96:	480d      	ldr	r0, [pc, #52]	; (8000ecc <module_manager_entry+0x1e4>)
 8000e98:	f013 fc24 	bl	80146e4 <_txm_module_manager_unload>
 8000e9c:	6578      	str	r0, [r7, #84]	; 0x54

  if(status != TX_SUCCESS)
 8000e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <module_manager_entry+0x1c0>
  {
    Error_Handler();
 8000ea4:	f000 f99a 	bl	80011dc <Error_Handler>
  }

  /* Toggle green LED to indicated success of operations */
  while(1) {
    BSP_LED_Toggle(LED_GREEN);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f000 fc27 	bl	80016fc <BSP_LED_Toggle>
    tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 2);
 8000eae:	2032      	movs	r0, #50	; 0x32
 8000eb0:	f009 fbca 	bl	800a648 <_tx_thread_sleep>
    BSP_LED_Toggle(LED_GREEN);
 8000eb4:	e7f8      	b.n	8000ea8 <module_manager_entry+0x1c0>
 8000eb6:	bf00      	nop
 8000eb8:	240006e0 	.word	0x240006e0
 8000ebc:	240086e0 	.word	0x240086e0
 8000ec0:	08000f25 	.word	0x08000f25
 8000ec4:	08020000 	.word	0x08020000
 8000ec8:	080162e0 	.word	0x080162e0
 8000ecc:	240001a4 	.word	0x240001a4
 8000ed0:	24040000 	.word	0x24040000
 8000ed4:	24040100 	.word	0x24040100
 8000ed8:	080162ec 	.word	0x080162ec
 8000edc:	08016318 	.word	0x08016318
 8000ee0:	08016354 	.word	0x08016354
 8000ee4:	08016368 	.word	0x08016368
 8000ee8:	08016374 	.word	0x08016374
 8000eec:	0801637c 	.word	0x0801637c
 8000ef0:	0801638c 	.word	0x0801638c
 8000ef4:	080163ac 	.word	0x080163ac
 8000ef8:	080163b8 	.word	0x080163b8
 8000efc:	080163c0 	.word	0x080163c0
 8000f00:	080163ec 	.word	0x080163ec
 8000f04:	08016408 	.word	0x08016408
 8000f08:	08016414 	.word	0x08016414
 8000f0c:	0801641c 	.word	0x0801641c
 8000f10:	08016450 	.word	0x08016450
 8000f14:	24000680 	.word	0x24000680
 8000f18:	0801646c 	.word	0x0801646c
 8000f1c:	2400c6e0 	.word	0x2400c6e0
 8000f20:	08016488 	.word	0x08016488

08000f24 <module_fault_handler>:
  }
}

VOID module_fault_handler(TX_THREAD *thread, TXM_MODULE_INSTANCE *module)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
    /* Just increment the fault counter.   */
    memory_faults++;
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <module_fault_handler+0x20>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	4a03      	ldr	r2, [pc, #12]	; (8000f44 <module_fault_handler+0x20>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	2400c6e0 	.word	0x2400c6e0

08000f48 <pretty_msg>:

VOID pretty_msg(char *p_msg, ULONG r_msg)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  memset(p_msg, 0, 64);
 8000f52:	2240      	movs	r2, #64	; 0x40
 8000f54:	2100      	movs	r1, #0
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f014 f988 	bl	801526c <memset>

  switch(r_msg)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	2b58      	cmp	r3, #88	; 0x58
 8000f60:	d015      	beq.n	8000f8e <pretty_msg+0x46>
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	2b58      	cmp	r3, #88	; 0x58
 8000f66:	d830      	bhi.n	8000fca <pretty_msg+0x82>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	2b4d      	cmp	r3, #77	; 0x4d
 8000f6c:	d015      	beq.n	8000f9a <pretty_msg+0x52>
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b4d      	cmp	r3, #77	; 0x4d
 8000f72:	d82a      	bhi.n	8000fca <pretty_msg+0x82>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	2b42      	cmp	r3, #66	; 0x42
 8000f78:	d015      	beq.n	8000fa6 <pretty_msg+0x5e>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	2b42      	cmp	r3, #66	; 0x42
 8000f7e:	d824      	bhi.n	8000fca <pretty_msg+0x82>
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	2b2c      	cmp	r3, #44	; 0x2c
 8000f84:	d01b      	beq.n	8000fbe <pretty_msg+0x76>
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	2b37      	cmp	r3, #55	; 0x37
 8000f8a:	d012      	beq.n	8000fb2 <pretty_msg+0x6a>
 8000f8c:	e01d      	b.n	8000fca <pretty_msg+0x82>
  {
  case WRITING_TO_READWRITE:
    memcpy(p_msg, "Writing to ReadWrite Region", 27);
 8000f8e:	221b      	movs	r2, #27
 8000f90:	4913      	ldr	r1, [pc, #76]	; (8000fe0 <pretty_msg+0x98>)
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f014 f95c 	bl	8015250 <memcpy>
    break;
 8000f98:	e01d      	b.n	8000fd6 <pretty_msg+0x8e>
  case WRITING_TO_READONLY:
    memcpy(p_msg, "Writing to ReadOnly Region", 26);
 8000f9a:	221a      	movs	r2, #26
 8000f9c:	4911      	ldr	r1, [pc, #68]	; (8000fe4 <pretty_msg+0x9c>)
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f014 f956 	bl	8015250 <memcpy>
    break;
 8000fa4:	e017      	b.n	8000fd6 <pretty_msg+0x8e>
  case READING_FROM_READWRITE:
    memcpy(p_msg, "Reading from ReadWrite Region", 29);
 8000fa6:	221d      	movs	r2, #29
 8000fa8:	490f      	ldr	r1, [pc, #60]	; (8000fe8 <pretty_msg+0xa0>)
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f014 f950 	bl	8015250 <memcpy>
    break;
 8000fb0:	e011      	b.n	8000fd6 <pretty_msg+0x8e>
  case READING_FROM_READONLY:
    memcpy(p_msg, "Reading from ReadOnly Region", 28);
 8000fb2:	221c      	movs	r2, #28
 8000fb4:	490d      	ldr	r1, [pc, #52]	; (8000fec <pretty_msg+0xa4>)
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f014 f94a 	bl	8015250 <memcpy>
    break;
 8000fbc:	e00b      	b.n	8000fd6 <pretty_msg+0x8e>
  case PROCESSING_FINISHED:
    memcpy(p_msg, "All operations were done", 24);
 8000fbe:	2218      	movs	r2, #24
 8000fc0:	490b      	ldr	r1, [pc, #44]	; (8000ff0 <pretty_msg+0xa8>)
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f014 f944 	bl	8015250 <memcpy>
    break;
 8000fc8:	e005      	b.n	8000fd6 <pretty_msg+0x8e>
  default:
    memcpy(p_msg, "Invalid option", 14);
 8000fca:	220e      	movs	r2, #14
 8000fcc:	4909      	ldr	r1, [pc, #36]	; (8000ff4 <pretty_msg+0xac>)
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f014 f93e 	bl	8015250 <memcpy>
    break;
 8000fd4:	bf00      	nop
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	080164bc 	.word	0x080164bc
 8000fe4:	080164d8 	.word	0x080164d8
 8000fe8:	080164f4 	.word	0x080164f4
 8000fec:	08016514 	.word	0x08016514
 8000ff0:	08016534 	.word	0x08016534
 8000ff4:	08016550 	.word	0x08016550

08000ff8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ffe:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <main+0xec>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d11b      	bne.n	8001042 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800100a:	f3bf 8f4f 	dsb	sy
}
 800100e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001010:	f3bf 8f6f 	isb	sy
}
 8001014:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001016:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <main+0xec>)
 8001018:	2200      	movs	r2, #0
 800101a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800101e:	f3bf 8f4f 	dsb	sy
}
 8001022:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001024:	f3bf 8f6f 	isb	sy
}
 8001028:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800102a:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <main+0xec>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	4a2d      	ldr	r2, [pc, #180]	; (80010e4 <main+0xec>)
 8001030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001034:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001036:	f3bf 8f4f 	dsb	sy
}
 800103a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800103c:	f3bf 8f6f 	isb	sy
}
 8001040:	e000      	b.n	8001044 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001042:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001044:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <main+0xec>)
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d138      	bne.n	80010c2 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001050:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <main+0xec>)
 8001052:	2200      	movs	r2, #0
 8001054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001058:	f3bf 8f4f 	dsb	sy
}
 800105c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <main+0xec>)
 8001060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001064:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	0b5b      	lsrs	r3, r3, #13
 800106a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800106e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	08db      	lsrs	r3, r3, #3
 8001074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001078:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	015a      	lsls	r2, r3, #5
 800107e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001082:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001088:	4916      	ldr	r1, [pc, #88]	; (80010e4 <main+0xec>)
 800108a:	4313      	orrs	r3, r2
 800108c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	1e5a      	subs	r2, r3, #1
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1ef      	bne.n	800107a <main+0x82>
    } while(sets-- != 0U);
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1e5a      	subs	r2, r3, #1
 800109e:	60ba      	str	r2, [r7, #8]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1e5      	bne.n	8001070 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80010a4:	f3bf 8f4f 	dsb	sy
}
 80010a8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <main+0xec>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <main+0xec>)
 80010b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80010b6:	f3bf 8f4f 	dsb	sy
}
 80010ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010bc:	f3bf 8f6f 	isb	sy
}
 80010c0:	e000      	b.n	80010c4 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80010c2:	bf00      	nop

  /* Enable D-Cache */
  SCB_EnableDCache();

  /* STM32H7xx HAL library initialization */
  HAL_Init();
 80010c4:	f000 fbd2 	bl	800186c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c8:	f000 f80e 	bl	80010e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Initialize LEDs */
  BSP_LED_Init(LED_GREEN);
 80010cc:	2000      	movs	r0, #0
 80010ce:	f000 fab3 	bl	8001638 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80010d2:	2002      	movs	r0, #2
 80010d4:	f000 fab0 	bl	8001638 <BSP_LED_Init>

  /* Configure USART */
  UART_Config();
 80010d8:	f000 f8a4 	bl	8001224 <UART_Config>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call ThreadX entry function */
  MX_AZURE_RTOS_Init();
 80010dc:	f7ff fdfe 	bl	8000cdc <MX_AZURE_RTOS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <main+0xe8>
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b09c      	sub	sp, #112	; 0x70
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	224c      	movs	r2, #76	; 0x4c
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f014 f8b8 	bl	801526c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2220      	movs	r2, #32
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f014 f8b2 	bl	801526c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001108:	2004      	movs	r0, #4
 800110a:	f000 feff 	bl	8001f0c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <SystemClock_Config+0xec>)
 8001114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001116:	4a2f      	ldr	r2, [pc, #188]	; (80011d4 <SystemClock_Config+0xec>)
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800111e:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <SystemClock_Config+0xec>)
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <SystemClock_Config+0xf0>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a2a      	ldr	r2, [pc, #168]	; (80011d8 <SystemClock_Config+0xf0>)
 800112e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <SystemClock_Config+0xf0>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001140:	bf00      	nop
 8001142:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <SystemClock_Config+0xf0>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800114a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800114e:	d1f8      	bne.n	8001142 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001150:	2301      	movs	r3, #1
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001154:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115e:	2302      	movs	r3, #2
 8001160:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001162:	2305      	movs	r3, #5
 8001164:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001166:	23a0      	movs	r3, #160	; 0xa0
 8001168:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800116a:	2302      	movs	r3, #2
 800116c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800116e:	2302      	movs	r3, #2
 8001170:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001172:	2302      	movs	r3, #2
 8001174:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001176:	2308      	movs	r3, #8
 8001178:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800117a:	2300      	movs	r3, #0
 800117c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001186:	4618      	mov	r0, r3
 8001188:	f000 ff1a 	bl	8001fc0 <HAL_RCC_OscConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001192:	f000 f823 	bl	80011dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001196:	233f      	movs	r3, #63	; 0x3f
 8001198:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119a:	2303      	movs	r3, #3
 800119c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011a2:	2308      	movs	r3, #8
 80011a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011a6:	2340      	movs	r3, #64	; 0x40
 80011a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011aa:	2340      	movs	r3, #64	; 0x40
 80011ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80011b4:	2340      	movs	r3, #64	; 0x40
 80011b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2102      	movs	r1, #2
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 fb13 	bl	80027e8 <HAL_RCC_ClockConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80011c8:	f000 f808 	bl	80011dc <Error_Handler>
  }
}
 80011cc:	bf00      	nop
 80011ce:	3770      	adds	r7, #112	; 0x70
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	58000400 	.word	0x58000400
 80011d8:	58024800 	.word	0x58024800

080011dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  printf(" Error \n");
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <Error_Handler+0x20>)
 80011e2:	f014 f8d1 	bl	8015388 <puts>
  BSP_LED_Off(LED_GREEN);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 fa6a 	bl	80016c0 <BSP_LED_Off>
  while(1)
  {
    /* Toggle LED_RED: Error */
    BSP_LED_Toggle(LED_RED);
 80011ec:	2002      	movs	r0, #2
 80011ee:	f000 fa85 	bl	80016fc <BSP_LED_Toggle>
    HAL_Delay(400);
 80011f2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80011f6:	f000 fb95 	bl	8001924 <HAL_Delay>
    BSP_LED_Toggle(LED_RED);
 80011fa:	e7f7      	b.n	80011ec <Error_Handler+0x10>
 80011fc:	08016560 	.word	0x08016560

08001200 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001208:	1d39      	adds	r1, r7, #4
 800120a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800120e:	2201      	movs	r2, #1
 8001210:	4803      	ldr	r0, [pc, #12]	; (8001220 <__io_putchar+0x20>)
 8001212:	f003 fd69 	bl	8004ce8 <HAL_UART_Transmit>

  return ch;
 8001216:	687b      	ldr	r3, [r7, #4]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2400ef18 	.word	0x2400ef18

08001224 <UART_Config>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void UART_Config(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <UART_Config+0x90>)
 800122a:	4a23      	ldr	r2, [pc, #140]	; (80012b8 <UART_Config+0x94>)
 800122c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <UART_Config+0x90>)
 8001230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <UART_Config+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <UART_Config+0x90>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <UART_Config+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <UART_Config+0x90>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <UART_Config+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <UART_Config+0x90>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <UART_Config+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <UART_Config+0x90>)
 8001262:	2200      	movs	r2, #0
 8001264:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <UART_Config+0x90>)
 8001268:	2200      	movs	r2, #0
 800126a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800126c:	4811      	ldr	r0, [pc, #68]	; (80012b4 <UART_Config+0x90>)
 800126e:	f003 fceb 	bl	8004c48 <HAL_UART_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <UART_Config+0x58>
  {
    Error_Handler();
 8001278:	f7ff ffb0 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800127c:	2100      	movs	r1, #0
 800127e:	480d      	ldr	r0, [pc, #52]	; (80012b4 <UART_Config+0x90>)
 8001280:	f004 fcd8 	bl	8005c34 <HAL_UARTEx_SetTxFifoThreshold>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <UART_Config+0x6a>
  {
    Error_Handler();
 800128a:	f7ff ffa7 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800128e:	2100      	movs	r1, #0
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <UART_Config+0x90>)
 8001292:	f004 fd0d 	bl	8005cb0 <HAL_UARTEx_SetRxFifoThreshold>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <UART_Config+0x7c>
  {
    Error_Handler();
 800129c:	f7ff ff9e 	bl	80011dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <UART_Config+0x90>)
 80012a2:	f004 fc8e 	bl	8005bc2 <HAL_UARTEx_DisableFifoMode>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <UART_Config+0x8c>
  {
    Error_Handler();
 80012ac:	f7ff ff96 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2400ef18 	.word	0x2400ef18
 80012b8:	40011000 	.word	0x40011000

080012bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d101      	bne.n	80012d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ce:	f000 fb09 	bl	80018e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40001000 	.word	0x40001000

080012e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0ba      	sub	sp, #232	; 0xe8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	22c0      	movs	r2, #192	; 0xc0
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f013 ffb3 	bl	801526c <memset>
  if(huart->Instance==USART1)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a25      	ldr	r2, [pc, #148]	; (80013a0 <HAL_UART_MspInit+0xc0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d142      	bne.n	8001396 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001310:	2301      	movs	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4618      	mov	r0, r3
 8001320:	f001 fe30 	bl	8002f84 <HAL_RCCEx_PeriphCLKConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800132a:	f7ff ff57 	bl	80011dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <HAL_UART_MspInit+0xc4>)
 8001330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <HAL_UART_MspInit+0xc4>)
 8001336:	f043 0310 	orr.w	r3, r3, #16
 800133a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <HAL_UART_MspInit+0xc4>)
 8001340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001344:	f003 0310 	and.w	r3, r3, #16
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <HAL_UART_MspInit+0xc4>)
 800134e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001352:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <HAL_UART_MspInit+0xc4>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_UART_MspInit+0xc4>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800136a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800136e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001384:	2307      	movs	r3, #7
 8001386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <HAL_UART_MspInit+0xc8>)
 8001392:	f000 fbd7 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001396:	bf00      	nop
 8001398:	37e8      	adds	r7, #232	; 0xe8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40011000 	.word	0x40011000
 80013a4:	58024400 	.word	0x58024400
 80013a8:	58020000 	.word	0x58020000

080013ac <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_MspInit+0x30>)
 80013b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013b8:	4a08      	ldr	r2, [pc, #32]	; (80013dc <HAL_MspInit+0x30>)
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_MspInit+0x30>)
 80013c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	58024400 	.word	0x58024400

080013e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b090      	sub	sp, #64	; 0x40
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b0f      	cmp	r3, #15
 80013ec:	d827      	bhi.n	800143e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80013ee:	2200      	movs	r2, #0
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	2036      	movs	r0, #54	; 0x36
 80013f4:	f000 fb7e 	bl	8001af4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013f8:	2036      	movs	r0, #54	; 0x36
 80013fa:	f000 fb95 	bl	8001b28 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80013fe:	4a29      	ldr	r2, [pc, #164]	; (80014a4 <HAL_InitTick+0xc4>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001404:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <HAL_InitTick+0xc8>)
 8001406:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800140a:	4a27      	ldr	r2, [pc, #156]	; (80014a8 <HAL_InitTick+0xc8>)
 800140c:	f043 0310 	orr.w	r3, r3, #16
 8001410:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001414:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <HAL_InitTick+0xc8>)
 8001416:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001422:	f107 0210 	add.w	r2, r7, #16
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f001 fd67 	bl	8002f00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001434:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001438:	2b00      	cmp	r3, #0
 800143a:	d106      	bne.n	800144a <HAL_InitTick+0x6a>
 800143c:	e001      	b.n	8001442 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e02b      	b.n	800149a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001442:	f001 fd31 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 8001446:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001448:	e004      	b.n	8001454 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800144a:	f001 fd2d 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 800144e:	4603      	mov	r3, r0
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001456:	4a15      	ldr	r2, [pc, #84]	; (80014ac <HAL_InitTick+0xcc>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	0c9b      	lsrs	r3, r3, #18
 800145e:	3b01      	subs	r3, #1
 8001460:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <HAL_InitTick+0xd0>)
 8001464:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <HAL_InitTick+0xd4>)
 8001466:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_InitTick+0xd0>)
 800146a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800146e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001470:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <HAL_InitTick+0xd0>)
 8001472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001474:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_InitTick+0xd0>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_InitTick+0xd0>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001482:	480b      	ldr	r0, [pc, #44]	; (80014b0 <HAL_InitTick+0xd0>)
 8001484:	f003 f90e 	bl	80046a4 <HAL_TIM_Base_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d104      	bne.n	8001498 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800148e:	4808      	ldr	r0, [pc, #32]	; (80014b0 <HAL_InitTick+0xd0>)
 8001490:	f003 f96a 	bl	8004768 <HAL_TIM_Base_Start_IT>
 8001494:	4603      	mov	r3, r0
 8001496:	e000      	b.n	800149a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
}
 800149a:	4618      	mov	r0, r3
 800149c:	3740      	adds	r7, #64	; 0x40
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	24000018 	.word	0x24000018
 80014a8:	58024400 	.word	0x58024400
 80014ac:	431bde83 	.word	0x431bde83
 80014b0:	2400efa8 	.word	0x2400efa8
 80014b4:	40001000 	.word	0x40001000

080014b8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <HardFault_Handler+0x4>

080014cc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <TIM6_DAC_IRQHandler+0x10>)
 80014e2:	f003 f9b1 	bl	8004848 <HAL_TIM_IRQHandler>
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2400efa8 	.word	0x2400efa8

080014f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e00a      	b.n	8001518 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001502:	f3af 8000 	nop.w
 8001506:	4601      	mov	r1, r0
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60ba      	str	r2, [r7, #8]
 800150e:	b2ca      	uxtb	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	dbf0      	blt.n	8001502 <_read+0x12>
	}

return len;
 8001520:	687b      	ldr	r3, [r7, #4]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	e009      	b.n	8001550 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	60ba      	str	r2, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fe5b 	bl	8001200 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf1      	blt.n	800153c <_write+0x12>
	}
	return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_close>:

int _close(int file)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
	return -1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158a:	605a      	str	r2, [r3, #4]
	return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_isatty>:

int _isatty(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	return 1;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
	return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <_sbrk+0x5c>)
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <_sbrk+0x60>)
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <_sbrk+0x64>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <_sbrk+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d207      	bcs.n	800160c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015fc:	f013 fdfe 	bl	80151fc <__errno>
 8001600:	4603      	mov	r3, r0
 8001602:	220c      	movs	r2, #12
 8001604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	e009      	b.n	8001620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <_sbrk+0x64>)
 800161c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	24020000 	.word	0x24020000
 800162c:	00000400 	.word	0x00000400
 8001630:	2400eff4 	.word	0x2400eff4
 8001634:	2400f7a8 	.word	0x2400f7a8

08001638 <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001642:	2300      	movs	r3, #0
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 8001646:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <BSP_LED_Init+0x7c>)
 8001648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164c:	4a19      	ldr	r2, [pc, #100]	; (80016b4 <BSP_LED_Init+0x7c>)
 800164e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001652:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <BSP_LED_Init+0x7c>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <BSP_LED_Init+0x80>)
 8001668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001672:	2301      	movs	r3, #1
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001676:	2303      	movs	r3, #3
 8001678:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <BSP_LED_Init+0x84>)
 800167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001682:	f107 0210 	add.w	r2, r7, #16
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fa5b 	bl	8001b44 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <BSP_LED_Init+0x84>)
 8001692:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <BSP_LED_Init+0x80>)
 800169a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	2201      	movs	r2, #1
 80016a2:	4619      	mov	r1, r3
 80016a4:	f000 fbfe 	bl	8001ea4 <HAL_GPIO_WritePin>
 return ret;
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3728      	adds	r7, #40	; 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	58024400 	.word	0x58024400
 80016b8:	0801663c 	.word	0x0801663c
 80016bc:	24000000 	.word	0x24000000

080016c0 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Off(Led_TypeDef Led)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <BSP_LED_Off+0x34>)
 80016d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <BSP_LED_Off+0x38>)
 80016da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	2201      	movs	r2, #1
 80016e2:	4619      	mov	r1, r3
 80016e4:	f000 fbde 	bl	8001ea4 <HAL_GPIO_WritePin>
  return ret;
 80016e8:	68fb      	ldr	r3, [r7, #12]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	24000000 	.word	0x24000000
 80016f8:	0801663c 	.word	0x0801663c

080016fc <BSP_LED_Toggle>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Toggle(Led_TypeDef Led)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	4a08      	ldr	r2, [pc, #32]	; (8001730 <BSP_LED_Toggle+0x34>)
 800170e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	4907      	ldr	r1, [pc, #28]	; (8001734 <BSP_LED_Toggle+0x38>)
 8001716:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800171a:	b29b      	uxth	r3, r3
 800171c:	4619      	mov	r1, r3
 800171e:	4610      	mov	r0, r2
 8001720:	f000 fbd9 	bl	8001ed6 <HAL_GPIO_TogglePin>
  return ret;
 8001724:	68fb      	ldr	r3, [r7, #12]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	24000000 	.word	0x24000000
 8001734:	0801663c 	.word	0x0801663c

08001738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800173c:	4b3f      	ldr	r3, [pc, #252]	; (800183c <SystemInit+0x104>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001742:	4a3e      	ldr	r2, [pc, #248]	; (800183c <SystemInit+0x104>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800174c:	4b3b      	ldr	r3, [pc, #236]	; (800183c <SystemInit+0x104>)
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	4a3a      	ldr	r2, [pc, #232]	; (800183c <SystemInit+0x104>)
 8001752:	f043 0310 	orr.w	r3, r3, #16
 8001756:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001758:	4b39      	ldr	r3, [pc, #228]	; (8001840 <SystemInit+0x108>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	2b06      	cmp	r3, #6
 8001762:	d807      	bhi.n	8001774 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001764:	4b36      	ldr	r3, [pc, #216]	; (8001840 <SystemInit+0x108>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 030f 	bic.w	r3, r3, #15
 800176c:	4a34      	ldr	r2, [pc, #208]	; (8001840 <SystemInit+0x108>)
 800176e:	f043 0307 	orr.w	r3, r3, #7
 8001772:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001774:	4b33      	ldr	r3, [pc, #204]	; (8001844 <SystemInit+0x10c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a32      	ldr	r2, [pc, #200]	; (8001844 <SystemInit+0x10c>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001780:	4b30      	ldr	r3, [pc, #192]	; (8001844 <SystemInit+0x10c>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001786:	4b2f      	ldr	r3, [pc, #188]	; (8001844 <SystemInit+0x10c>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	492e      	ldr	r1, [pc, #184]	; (8001844 <SystemInit+0x10c>)
 800178c:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <SystemInit+0x110>)
 800178e:	4013      	ands	r3, r2
 8001790:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001792:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <SystemInit+0x108>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800179e:	4b28      	ldr	r3, [pc, #160]	; (8001840 <SystemInit+0x108>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 030f 	bic.w	r3, r3, #15
 80017a6:	4a26      	ldr	r2, [pc, #152]	; (8001840 <SystemInit+0x108>)
 80017a8:	f043 0307 	orr.w	r3, r3, #7
 80017ac:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017ae:	4b25      	ldr	r3, [pc, #148]	; (8001844 <SystemInit+0x10c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80017b4:	4b23      	ldr	r3, [pc, #140]	; (8001844 <SystemInit+0x10c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017ba:	4b22      	ldr	r3, [pc, #136]	; (8001844 <SystemInit+0x10c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017c0:	4b20      	ldr	r3, [pc, #128]	; (8001844 <SystemInit+0x10c>)
 80017c2:	4a22      	ldr	r2, [pc, #136]	; (800184c <SystemInit+0x114>)
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017c6:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <SystemInit+0x10c>)
 80017c8:	4a21      	ldr	r2, [pc, #132]	; (8001850 <SystemInit+0x118>)
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <SystemInit+0x10c>)
 80017ce:	4a21      	ldr	r2, [pc, #132]	; (8001854 <SystemInit+0x11c>)
 80017d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <SystemInit+0x10c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <SystemInit+0x10c>)
 80017da:	4a1e      	ldr	r2, [pc, #120]	; (8001854 <SystemInit+0x11c>)
 80017dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <SystemInit+0x10c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <SystemInit+0x10c>)
 80017e6:	4a1b      	ldr	r2, [pc, #108]	; (8001854 <SystemInit+0x11c>)
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <SystemInit+0x10c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <SystemInit+0x10c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a13      	ldr	r2, [pc, #76]	; (8001844 <SystemInit+0x10c>)
 80017f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <SystemInit+0x10c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <SystemInit+0x120>)
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	4a14      	ldr	r2, [pc, #80]	; (8001858 <SystemInit+0x120>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800180c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800180e:	4b13      	ldr	r3, [pc, #76]	; (800185c <SystemInit+0x124>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <SystemInit+0x128>)
 8001814:	4013      	ands	r3, r2
 8001816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800181a:	d202      	bcs.n	8001822 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <SystemInit+0x12c>)
 800181e:	2201      	movs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <SystemInit+0x130>)
 8001824:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001828:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <SystemInit+0x104>)
 800182c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001830:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00
 8001840:	52002000 	.word	0x52002000
 8001844:	58024400 	.word	0x58024400
 8001848:	eaf6ed7f 	.word	0xeaf6ed7f
 800184c:	02020200 	.word	0x02020200
 8001850:	01ff0000 	.word	0x01ff0000
 8001854:	01010280 	.word	0x01010280
 8001858:	580000c0 	.word	0x580000c0
 800185c:	5c001000 	.word	0x5c001000
 8001860:	ffff0000 	.word	0xffff0000
 8001864:	51008108 	.word	0x51008108
 8001868:	52004000 	.word	0x52004000

0800186c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001872:	2003      	movs	r0, #3
 8001874:	f000 f933 	bl	8001ade <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001878:	f001 f96c 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 800187c:	4602      	mov	r2, r0
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_Init+0x68>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	0a1b      	lsrs	r3, r3, #8
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	4913      	ldr	r1, [pc, #76]	; (80018d8 <HAL_Init+0x6c>)
 800188a:	5ccb      	ldrb	r3, [r1, r3]
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
 8001894:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_Init+0x68>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <HAL_Init+0x6c>)
 80018a0:	5cd3      	ldrb	r3, [r2, r3]
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ac:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <HAL_Init+0x70>)
 80018ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018b0:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <HAL_Init+0x74>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b6:	200f      	movs	r0, #15
 80018b8:	f7ff fd92 	bl	80013e0 <HAL_InitTick>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e002      	b.n	80018cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018c6:	f7ff fd71 	bl	80013ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	58024400 	.word	0x58024400
 80018d8:	0801664c 	.word	0x0801664c
 80018dc:	24000014 	.word	0x24000014
 80018e0:	24000010 	.word	0x24000010

080018e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x20>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x24>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <HAL_IncTick+0x24>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	2400001c 	.word	0x2400001c
 8001908:	2400eff8 	.word	0x2400eff8

0800190c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_GetTick+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	2400eff8 	.word	0x2400eff8

08001924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff ffee 	bl	800190c <HAL_GetTick>
 8001930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193c:	d005      	beq.n	800194a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_Delay+0x44>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800194a:	bf00      	nop
 800194c:	f7ff ffde 	bl	800190c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	429a      	cmp	r2, r3
 800195a:	d8f7      	bhi.n	800194c <HAL_Delay+0x28>
  {
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2400001c 	.word	0x2400001c

0800196c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_GetREVID+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	0c1b      	lsrs	r3, r3, #16
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	5c001000 	.word	0x5c001000

08001984 <__NVIC_SetPriorityGrouping>:
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a0:	4013      	ands	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b2:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <__NVIC_SetPriorityGrouping+0x40>)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	60d3      	str	r3, [r2, #12]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00
 80019c8:	05fa0000 	.word	0x05fa0000

080019cc <__NVIC_GetPriorityGrouping>:
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <__NVIC_GetPriorityGrouping+0x18>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	f003 0307 	and.w	r3, r3, #7
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_EnableIRQ>:
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db0b      	blt.n	8001a12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <__NVIC_EnableIRQ+0x38>)
 8001a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2001      	movs	r0, #1
 8001a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ff4c 	bl	8001984 <__NVIC_SetPriorityGrouping>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b02:	f7ff ff63 	bl	80019cc <__NVIC_GetPriorityGrouping>
 8001b06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	6978      	ldr	r0, [r7, #20]
 8001b0e:	f7ff ffb3 	bl	8001a78 <NVIC_EncodePriority>
 8001b12:	4602      	mov	r2, r0
 8001b14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b18:	4611      	mov	r1, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ff82 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b20:	bf00      	nop
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff ff56 	bl	80019e8 <__NVIC_EnableIRQ>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b52:	4b89      	ldr	r3, [pc, #548]	; (8001d78 <HAL_GPIO_Init+0x234>)
 8001b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b56:	e194      	b.n	8001e82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8186 	beq.w	8001e7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d00b      	beq.n	8001b90 <HAL_GPIO_Init+0x4c>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d007      	beq.n	8001b90 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b84:	2b11      	cmp	r3, #17
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b12      	cmp	r3, #18
 8001b8e:	d130      	bne.n	8001bf2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	091b      	lsrs	r3, r3, #4
 8001bdc:	f003 0201 	and.w	r2, r3, #1
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0xee>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b12      	cmp	r3, #18
 8001c30:	d123      	bne.n	8001c7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	08da      	lsrs	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3208      	adds	r2, #8
 8001c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	220f      	movs	r2, #15
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	08da      	lsrs	r2, r3, #3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3208      	adds	r2, #8
 8001c74:	69b9      	ldr	r1, [r7, #24]
 8001c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0203 	and.w	r2, r3, #3
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 80e0 	beq.w	8001e7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbc:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <HAL_GPIO_Init+0x238>)
 8001cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cc2:	4a2e      	ldr	r2, [pc, #184]	; (8001d7c <HAL_GPIO_Init+0x238>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_GPIO_Init+0x238>)
 8001cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cda:	4a29      	ldr	r2, [pc, #164]	; (8001d80 <HAL_GPIO_Init+0x23c>)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a20      	ldr	r2, [pc, #128]	; (8001d84 <HAL_GPIO_Init+0x240>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d052      	beq.n	8001dac <HAL_GPIO_Init+0x268>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_GPIO_Init+0x244>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d031      	beq.n	8001d72 <HAL_GPIO_Init+0x22e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <HAL_GPIO_Init+0x248>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d02b      	beq.n	8001d6e <HAL_GPIO_Init+0x22a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <HAL_GPIO_Init+0x24c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d025      	beq.n	8001d6a <HAL_GPIO_Init+0x226>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_GPIO_Init+0x250>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d01f      	beq.n	8001d66 <HAL_GPIO_Init+0x222>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <HAL_GPIO_Init+0x254>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d019      	beq.n	8001d62 <HAL_GPIO_Init+0x21e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a1a      	ldr	r2, [pc, #104]	; (8001d9c <HAL_GPIO_Init+0x258>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d013      	beq.n	8001d5e <HAL_GPIO_Init+0x21a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a19      	ldr	r2, [pc, #100]	; (8001da0 <HAL_GPIO_Init+0x25c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00d      	beq.n	8001d5a <HAL_GPIO_Init+0x216>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a18      	ldr	r2, [pc, #96]	; (8001da4 <HAL_GPIO_Init+0x260>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d007      	beq.n	8001d56 <HAL_GPIO_Init+0x212>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <HAL_GPIO_Init+0x264>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_GPIO_Init+0x20e>
 8001d4e:	2309      	movs	r3, #9
 8001d50:	e02d      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d52:	230a      	movs	r3, #10
 8001d54:	e02b      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d56:	2308      	movs	r3, #8
 8001d58:	e029      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d5a:	2307      	movs	r3, #7
 8001d5c:	e027      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d5e:	2306      	movs	r3, #6
 8001d60:	e025      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d62:	2305      	movs	r3, #5
 8001d64:	e023      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d66:	2304      	movs	r3, #4
 8001d68:	e021      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e01f      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e01d      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e01b      	b.n	8001dae <HAL_GPIO_Init+0x26a>
 8001d76:	bf00      	nop
 8001d78:	58000080 	.word	0x58000080
 8001d7c:	58024400 	.word	0x58024400
 8001d80:	58000400 	.word	0x58000400
 8001d84:	58020000 	.word	0x58020000
 8001d88:	58020400 	.word	0x58020400
 8001d8c:	58020800 	.word	0x58020800
 8001d90:	58020c00 	.word	0x58020c00
 8001d94:	58021000 	.word	0x58021000
 8001d98:	58021400 	.word	0x58021400
 8001d9c:	58021800 	.word	0x58021800
 8001da0:	58021c00 	.word	0x58021c00
 8001da4:	58022000 	.word	0x58022000
 8001da8:	58022400 	.word	0x58022400
 8001dac:	2300      	movs	r3, #0
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	f002 0203 	and.w	r2, r2, #3
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	4093      	lsls	r3, r2
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dbe:	4938      	ldr	r1, [pc, #224]	; (8001ea0 <HAL_GPIO_Init+0x35c>)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f47f ae63 	bne.w	8001b58 <HAL_GPIO_Init+0x14>
  }
}
 8001e92:	bf00      	nop
 8001e94:	bf00      	nop
 8001e96:	3724      	adds	r7, #36	; 0x24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	58000400 	.word	0x58000400

08001ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	807b      	strh	r3, [r7, #2]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eb4:	787b      	ldrb	r3, [r7, #1]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eba:	887a      	ldrh	r2, [r7, #2]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001ec0:	e003      	b.n	8001eca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ec2:	887b      	ldrh	r3, [r7, #2]
 8001ec4:	041a      	lsls	r2, r3, #16
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	619a      	str	r2, [r3, #24]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b085      	sub	sp, #20
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ee8:	887a      	ldrh	r2, [r7, #2]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4013      	ands	r3, r2
 8001eee:	041a      	lsls	r2, r3, #16
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	887b      	ldrh	r3, [r7, #2]
 8001ef6:	400b      	ands	r3, r1
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	619a      	str	r2, [r3, #24]
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	2b06      	cmp	r3, #6
 8001f1e:	d00a      	beq.n	8001f36 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f20:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d001      	beq.n	8001f32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e040      	b.n	8001fb4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e03e      	b.n	8001fb4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001f3e:	491f      	ldr	r1, [pc, #124]	; (8001fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001f46:	f7ff fce1 	bl	800190c <HAL_GetTick>
 8001f4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f4c:	e009      	b.n	8001f62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f4e:	f7ff fcdd 	bl	800190c <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f5c:	d901      	bls.n	8001f62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e028      	b.n	8001fb4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f62:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f6e:	d1ee      	bne.n	8001f4e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b1e      	cmp	r3, #30
 8001f74:	d008      	beq.n	8001f88 <HAL_PWREx_ConfigSupply+0x7c>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b2e      	cmp	r3, #46	; 0x2e
 8001f7a:	d005      	beq.n	8001f88 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b1d      	cmp	r3, #29
 8001f80:	d002      	beq.n	8001f88 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b2d      	cmp	r3, #45	; 0x2d
 8001f86:	d114      	bne.n	8001fb2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001f88:	f7ff fcc0 	bl	800190c <HAL_GetTick>
 8001f8c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001f8e:	e009      	b.n	8001fa4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f90:	f7ff fcbc 	bl	800190c <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f9e:	d901      	bls.n	8001fa4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e007      	b.n	8001fb4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb0:	d1ee      	bne.n	8001f90 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	58024800 	.word	0x58024800

08001fc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d102      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f000 bc03 	b.w	80027da <HAL_RCC_OscConfig+0x81a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 808b 	beq.w	80020f8 <HAL_RCC_OscConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fe2:	4b97      	ldr	r3, [pc, #604]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fec:	4b94      	ldr	r3, [pc, #592]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8001fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff4:	2b10      	cmp	r3, #16
 8001ff6:	d007      	beq.n	8002008 <HAL_RCC_OscConfig+0x48>
 8001ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffa:	2b18      	cmp	r3, #24
 8001ffc:	d110      	bne.n	8002020 <HAL_RCC_OscConfig+0x60>
 8001ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d10b      	bne.n	8002020 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	4b8d      	ldr	r3, [pc, #564]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d070      	beq.n	80020f6 <HAL_RCC_OscConfig+0x136>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d16c      	bne.n	80020f6 <HAL_RCC_OscConfig+0x136>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e3dc      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002028:	d106      	bne.n	8002038 <HAL_RCC_OscConfig+0x78>
 800202a:	4b85      	ldr	r3, [pc, #532]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a84      	ldr	r2, [pc, #528]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e02e      	b.n	8002096 <HAL_RCC_OscConfig+0xd6>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10c      	bne.n	800205a <HAL_RCC_OscConfig+0x9a>
 8002040:	4b7f      	ldr	r3, [pc, #508]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a7e      	ldr	r2, [pc, #504]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	4b7c      	ldr	r3, [pc, #496]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a7b      	ldr	r2, [pc, #492]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	e01d      	b.n	8002096 <HAL_RCC_OscConfig+0xd6>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002062:	d10c      	bne.n	800207e <HAL_RCC_OscConfig+0xbe>
 8002064:	4b76      	ldr	r3, [pc, #472]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a75      	ldr	r2, [pc, #468]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 800206a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b73      	ldr	r3, [pc, #460]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a72      	ldr	r2, [pc, #456]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	e00b      	b.n	8002096 <HAL_RCC_OscConfig+0xd6>
 800207e:	4b70      	ldr	r3, [pc, #448]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a6f      	ldr	r2, [pc, #444]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b6d      	ldr	r3, [pc, #436]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a6c      	ldr	r2, [pc, #432]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002094:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d015      	beq.n	80020ca <HAL_RCC_OscConfig+0x10a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209e:	f7ff fc35 	bl	800190c <HAL_GetTick>
 80020a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_OscConfig+0xfc>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a6:	f7ff fc31 	bl	800190c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0xfc>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e38e      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020bc:	4b60      	ldr	r3, [pc, #384]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0ee      	beq.n	80020a6 <HAL_RCC_OscConfig+0xe6>
 80020c8:	e016      	b.n	80020f8 <HAL_RCC_OscConfig+0x138>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ca:	f7ff fc1f 	bl	800190c <HAL_GetTick>
 80020ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_OscConfig+0x128>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d2:	f7ff fc1b 	bl	800190c <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x128>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e378      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020e8:	4b55      	ldr	r3, [pc, #340]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1ee      	bne.n	80020d2 <HAL_RCC_OscConfig+0x112>
 80020f4:	e000      	b.n	80020f8 <HAL_RCC_OscConfig+0x138>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80ae 	beq.w	8002262 <HAL_RCC_OscConfig+0x2a2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002106:	4b4e      	ldr	r3, [pc, #312]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800210e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002110:	4b4b      	ldr	r3, [pc, #300]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d007      	beq.n	800212c <HAL_RCC_OscConfig+0x16c>
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	2b18      	cmp	r3, #24
 8002120:	d13a      	bne.n	8002198 <HAL_RCC_OscConfig+0x1d8>
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d135      	bne.n	8002198 <HAL_RCC_OscConfig+0x1d8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800212c:	4b44      	ldr	r3, [pc, #272]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_OscConfig+0x184>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e34a      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002144:	f7ff fc12 	bl	800196c <HAL_GetREVID>
 8002148:	4603      	mov	r3, r0
 800214a:	f241 0203 	movw	r2, #4099	; 0x1003
 800214e:	4293      	cmp	r3, r2
 8002150:	d817      	bhi.n	8002182 <HAL_RCC_OscConfig+0x1c2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d108      	bne.n	800216c <HAL_RCC_OscConfig+0x1ac>
 800215a:	4b39      	ldr	r3, [pc, #228]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002162:	4a37      	ldr	r2, [pc, #220]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002168:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800216a:	e07a      	b.n	8002262 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216c:	4b34      	ldr	r3, [pc, #208]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	031b      	lsls	r3, r3, #12
 800217a:	4931      	ldr	r1, [pc, #196]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002180:	e06f      	b.n	8002262 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002182:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	061b      	lsls	r3, r3, #24
 8002190:	492b      	ldr	r1, [pc, #172]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002196:	e064      	b.n	8002262 <HAL_RCC_OscConfig+0x2a2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d045      	beq.n	800222c <HAL_RCC_OscConfig+0x26c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021a0:	4b27      	ldr	r3, [pc, #156]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f023 0219 	bic.w	r2, r3, #25
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4924      	ldr	r1, [pc, #144]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7ff fbab 	bl	800190c <HAL_GetTick>
 80021b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x20c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ba:	f7ff fba7 	bl	800190c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x20c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e306      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021cc:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x1fa>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d8:	f7ff fbc8 	bl	800196c <HAL_GetREVID>
 80021dc:	4603      	mov	r3, r0
 80021de:	f241 0203 	movw	r2, #4099	; 0x1003
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d817      	bhi.n	8002216 <HAL_RCC_OscConfig+0x256>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b40      	cmp	r3, #64	; 0x40
 80021ec:	d108      	bne.n	8002200 <HAL_RCC_OscConfig+0x240>
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 80021f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fc:	6053      	str	r3, [r2, #4]
 80021fe:	e030      	b.n	8002262 <HAL_RCC_OscConfig+0x2a2>
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	031b      	lsls	r3, r3, #12
 800220e:	490c      	ldr	r1, [pc, #48]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
 8002214:	e025      	b.n	8002262 <HAL_RCC_OscConfig+0x2a2>
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	061b      	lsls	r3, r3, #24
 8002224:	4906      	ldr	r1, [pc, #24]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
 800222a:	e01a      	b.n	8002262 <HAL_RCC_OscConfig+0x2a2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a03      	ldr	r2, [pc, #12]	; (8002240 <HAL_RCC_OscConfig+0x280>)
 8002232:	f023 0301 	bic.w	r3, r3, #1
 8002236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7ff fb68 	bl	800190c <HAL_GetTick>
 800223c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800223e:	e00a      	b.n	8002256 <HAL_RCC_OscConfig+0x296>
 8002240:	58024400 	.word	0x58024400
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002244:	f7ff fb62 	bl	800190c <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x296>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e2c1      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002256:	4b95      	ldr	r3, [pc, #596]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 80a9 	beq.w	80023c2 <HAL_RCC_OscConfig+0x402>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002270:	4b8e      	ldr	r3, [pc, #568]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002278:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800227a:	4b8c      	ldr	r3, [pc, #560]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	2b08      	cmp	r3, #8
 8002284:	d007      	beq.n	8002296 <HAL_RCC_OscConfig+0x2d6>
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	2b18      	cmp	r3, #24
 800228a:	d13a      	bne.n	8002302 <HAL_RCC_OscConfig+0x342>
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b01      	cmp	r3, #1
 8002294:	d135      	bne.n	8002302 <HAL_RCC_OscConfig+0x342>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002296:	4b85      	ldr	r3, [pc, #532]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_RCC_OscConfig+0x2ee>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	2b80      	cmp	r3, #128	; 0x80
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_OscConfig+0x2ee>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e295      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022ae:	f7ff fb5d 	bl	800196c <HAL_GetREVID>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d817      	bhi.n	80022ec <HAL_RCC_OscConfig+0x32c>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	2b20      	cmp	r3, #32
 80022c2:	d108      	bne.n	80022d6 <HAL_RCC_OscConfig+0x316>
 80022c4:	4b79      	ldr	r3, [pc, #484]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80022cc:	4a77      	ldr	r2, [pc, #476]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 80022ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022d2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022d4:	e075      	b.n	80023c2 <HAL_RCC_OscConfig+0x402>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022d6:	4b75      	ldr	r3, [pc, #468]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	069b      	lsls	r3, r3, #26
 80022e4:	4971      	ldr	r1, [pc, #452]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022ea:	e06a      	b.n	80023c2 <HAL_RCC_OscConfig+0x402>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022ec:	4b6f      	ldr	r3, [pc, #444]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	061b      	lsls	r3, r3, #24
 80022fa:	496c      	ldr	r1, [pc, #432]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002300:	e05f      	b.n	80023c2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d042      	beq.n	8002390 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800230a:	4b68      	ldr	r3, [pc, #416]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a67      	ldr	r2, [pc, #412]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 8002310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7ff faf9 	bl	800190c <HAL_GetTick>
 800231a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800231e:	f7ff faf5 	bl	800190c <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e254      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002330:	4b5e      	ldr	r3, [pc, #376]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800233c:	f7ff fb16 	bl	800196c <HAL_GetREVID>
 8002340:	4603      	mov	r3, r0
 8002342:	f241 0203 	movw	r2, #4099	; 0x1003
 8002346:	4293      	cmp	r3, r2
 8002348:	d817      	bhi.n	800237a <HAL_RCC_OscConfig+0x3ba>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	2b20      	cmp	r3, #32
 8002350:	d108      	bne.n	8002364 <HAL_RCC_OscConfig+0x3a4>
 8002352:	4b56      	ldr	r3, [pc, #344]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800235a:	4a54      	ldr	r2, [pc, #336]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 800235c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002360:	6053      	str	r3, [r2, #4]
 8002362:	e02e      	b.n	80023c2 <HAL_RCC_OscConfig+0x402>
 8002364:	4b51      	ldr	r3, [pc, #324]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	069b      	lsls	r3, r3, #26
 8002372:	494e      	ldr	r1, [pc, #312]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]
 8002378:	e023      	b.n	80023c2 <HAL_RCC_OscConfig+0x402>
 800237a:	4b4c      	ldr	r3, [pc, #304]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	061b      	lsls	r3, r3, #24
 8002388:	4948      	ldr	r1, [pc, #288]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 800238a:	4313      	orrs	r3, r2
 800238c:	60cb      	str	r3, [r1, #12]
 800238e:	e018      	b.n	80023c2 <HAL_RCC_OscConfig+0x402>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002390:	4b46      	ldr	r3, [pc, #280]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a45      	ldr	r2, [pc, #276]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 8002396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800239a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239c:	f7ff fab6 	bl	800190c <HAL_GetTick>
 80023a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x3f6>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80023a4:	f7ff fab2 	bl	800190c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x3f6>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e211      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023b6:	4b3d      	ldr	r3, [pc, #244]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x3e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d036      	beq.n	800243c <HAL_RCC_OscConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d019      	beq.n	800240a <HAL_RCC_OscConfig+0x44a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d6:	4b35      	ldr	r3, [pc, #212]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 80023d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023da:	4a34      	ldr	r2, [pc, #208]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e2:	f7ff fa93 	bl	800190c <HAL_GetTick>
 80023e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x43c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ea:	f7ff fa8f 	bl	800190c <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e1ee      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023fc:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 80023fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x42a>
 8002408:	e018      	b.n	800243c <HAL_RCC_OscConfig+0x47c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240a:	4b28      	ldr	r3, [pc, #160]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 800240c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240e:	4a27      	ldr	r2, [pc, #156]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002416:	f7ff fa79 	bl	800190c <HAL_GetTick>
 800241a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x470>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241e:	f7ff fa75 	bl	800190c <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x470>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e1d4      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002430:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 8002432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f0      	bne.n	800241e <HAL_RCC_OscConfig+0x45e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0320 	and.w	r3, r3, #32
 8002444:	2b00      	cmp	r3, #0
 8002446:	d039      	beq.n	80024bc <HAL_RCC_OscConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d019      	beq.n	8002484 <HAL_RCC_OscConfig+0x4c4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002450:	4b16      	ldr	r3, [pc, #88]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a15      	ldr	r2, [pc, #84]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 8002456:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800245a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800245c:	f7ff fa56 	bl	800190c <HAL_GetTick>
 8002460:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x4b6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002464:	f7ff fa52 	bl	800190c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e1b1      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x4a4>
 8002482:	e01b      	b.n	80024bc <HAL_RCC_OscConfig+0x4fc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a08      	ldr	r2, [pc, #32]	; (80024ac <HAL_RCC_OscConfig+0x4ec>)
 800248a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800248e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002490:	f7ff fa3c 	bl	800190c <HAL_GetTick>
 8002494:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002496:	e00b      	b.n	80024b0 <HAL_RCC_OscConfig+0x4f0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002498:	f7ff fa38 	bl	800190c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d904      	bls.n	80024b0 <HAL_RCC_OscConfig+0x4f0>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e197      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
 80024aa:	bf00      	nop
 80024ac:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024b0:	4b99      	ldr	r3, [pc, #612]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1ed      	bne.n	8002498 <HAL_RCC_OscConfig+0x4d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8081 	beq.w	80025cc <HAL_RCC_OscConfig+0x60c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024ca:	4b94      	ldr	r3, [pc, #592]	; (800271c <HAL_RCC_OscConfig+0x75c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a93      	ldr	r2, [pc, #588]	; (800271c <HAL_RCC_OscConfig+0x75c>)
 80024d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024d6:	f7ff fa19 	bl	800190c <HAL_GetTick>
 80024da:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x530>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80024de:	f7ff fa15 	bl	800190c <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b64      	cmp	r3, #100	; 0x64
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x530>
      {
        return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e174      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024f0:	4b8a      	ldr	r3, [pc, #552]	; (800271c <HAL_RCC_OscConfig+0x75c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x51e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x552>
 8002504:	4b84      	ldr	r3, [pc, #528]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002508:	4a83      	ldr	r2, [pc, #524]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6713      	str	r3, [r2, #112]	; 0x70
 8002510:	e02d      	b.n	800256e <HAL_RCC_OscConfig+0x5ae>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10c      	bne.n	8002534 <HAL_RCC_OscConfig+0x574>
 800251a:	4b7f      	ldr	r3, [pc, #508]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251e:	4a7e      	ldr	r2, [pc, #504]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6713      	str	r3, [r2, #112]	; 0x70
 8002526:	4b7c      	ldr	r3, [pc, #496]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 8002528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252a:	4a7b      	ldr	r2, [pc, #492]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 800252c:	f023 0304 	bic.w	r3, r3, #4
 8002530:	6713      	str	r3, [r2, #112]	; 0x70
 8002532:	e01c      	b.n	800256e <HAL_RCC_OscConfig+0x5ae>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b05      	cmp	r3, #5
 800253a:	d10c      	bne.n	8002556 <HAL_RCC_OscConfig+0x596>
 800253c:	4b76      	ldr	r3, [pc, #472]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002540:	4a75      	ldr	r2, [pc, #468]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	6713      	str	r3, [r2, #112]	; 0x70
 8002548:	4b73      	ldr	r3, [pc, #460]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 800254a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254c:	4a72      	ldr	r2, [pc, #456]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6713      	str	r3, [r2, #112]	; 0x70
 8002554:	e00b      	b.n	800256e <HAL_RCC_OscConfig+0x5ae>
 8002556:	4b70      	ldr	r3, [pc, #448]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255a:	4a6f      	ldr	r2, [pc, #444]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	6713      	str	r3, [r2, #112]	; 0x70
 8002562:	4b6d      	ldr	r3, [pc, #436]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 8002564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002566:	4a6c      	ldr	r2, [pc, #432]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d015      	beq.n	80025a2 <HAL_RCC_OscConfig+0x5e2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002576:	f7ff f9c9 	bl	800190c <HAL_GetTick>
 800257a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x5d4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7ff f9c5 	bl	800190c <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f241 3288 	movw	r2, #5000	; 0x1388
 800258c:	4293      	cmp	r3, r2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x5d4>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e122      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002594:	4b60      	ldr	r3, [pc, #384]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ee      	beq.n	800257e <HAL_RCC_OscConfig+0x5be>
 80025a0:	e014      	b.n	80025cc <HAL_RCC_OscConfig+0x60c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a2:	f7ff f9b3 	bl	800190c <HAL_GetTick>
 80025a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025a8:	e00a      	b.n	80025c0 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7ff f9af 	bl	800190c <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e10c      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025c0:	4b55      	ldr	r3, [pc, #340]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1ee      	bne.n	80025aa <HAL_RCC_OscConfig+0x5ea>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8101 	beq.w	80027d8 <HAL_RCC_OscConfig+0x818>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80025d6:	4b50      	ldr	r3, [pc, #320]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025de:	2b18      	cmp	r3, #24
 80025e0:	f000 80bc 	beq.w	800275c <HAL_RCC_OscConfig+0x79c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	f040 809d 	bne.w	8002728 <HAL_RCC_OscConfig+0x768>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ee:	4b4a      	ldr	r3, [pc, #296]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a49      	ldr	r2, [pc, #292]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 80025f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fa:	f7ff f987 	bl	800190c <HAL_GetTick>
 80025fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x654>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002602:	f7ff f983 	bl	800190c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x654>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e0e2      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002614:	4b40      	ldr	r3, [pc, #256]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x642>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002620:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 8002622:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002624:	4b3e      	ldr	r3, [pc, #248]	; (8002720 <HAL_RCC_OscConfig+0x760>)
 8002626:	4013      	ands	r3, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002630:	0112      	lsls	r2, r2, #4
 8002632:	430a      	orrs	r2, r1
 8002634:	4938      	ldr	r1, [pc, #224]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 8002636:	4313      	orrs	r3, r2
 8002638:	628b      	str	r3, [r1, #40]	; 0x28
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	3b01      	subs	r3, #1
 8002640:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002648:	3b01      	subs	r3, #1
 800264a:	025b      	lsls	r3, r3, #9
 800264c:	b29b      	uxth	r3, r3
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002654:	3b01      	subs	r3, #1
 8002656:	041b      	lsls	r3, r3, #16
 8002658:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002662:	3b01      	subs	r3, #1
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800266a:	492b      	ldr	r1, [pc, #172]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 800266c:	4313      	orrs	r3, r2
 800266e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002670:	4b29      	ldr	r3, [pc, #164]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	4a28      	ldr	r2, [pc, #160]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800267c:	4b26      	ldr	r3, [pc, #152]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 800267e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002680:	4b28      	ldr	r3, [pc, #160]	; (8002724 <HAL_RCC_OscConfig+0x764>)
 8002682:	4013      	ands	r3, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002688:	00d2      	lsls	r2, r2, #3
 800268a:	4923      	ldr	r1, [pc, #140]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 800268c:	4313      	orrs	r3, r2
 800268e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002690:	4b21      	ldr	r3, [pc, #132]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	f023 020c 	bic.w	r2, r3, #12
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	491e      	ldr	r1, [pc, #120]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80026a2:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	f023 0202 	bic.w	r2, r3, #2
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	491a      	ldr	r1, [pc, #104]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80026b4:	4b18      	ldr	r3, [pc, #96]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	4a17      	ldr	r2, [pc, #92]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 80026ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026c0:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 80026c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	4a11      	ldr	r2, [pc, #68]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 80026d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	4a0e      	ldr	r2, [pc, #56]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a0b      	ldr	r2, [pc, #44]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 80026ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7ff f90c 	bl	800190c <HAL_GetTick>
 80026f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x74a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f8:	f7ff f908 	bl	800190c <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x74a>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e067      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800270a:	4b03      	ldr	r3, [pc, #12]	; (8002718 <HAL_RCC_OscConfig+0x758>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0x738>
 8002716:	e05f      	b.n	80027d8 <HAL_RCC_OscConfig+0x818>
 8002718:	58024400 	.word	0x58024400
 800271c:	58024800 	.word	0x58024800
 8002720:	fffffc0c 	.word	0xfffffc0c
 8002724:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002728:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <HAL_RCC_OscConfig+0x824>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a2d      	ldr	r2, [pc, #180]	; (80027e4 <HAL_RCC_OscConfig+0x824>)
 800272e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002734:	f7ff f8ea 	bl	800190c <HAL_GetTick>
 8002738:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x78e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273c:	f7ff f8e6 	bl	800190c <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e045      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800274e:	4b25      	ldr	r3, [pc, #148]	; (80027e4 <HAL_RCC_OscConfig+0x824>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x77c>
 800275a:	e03d      	b.n	80027d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800275c:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <HAL_RCC_OscConfig+0x824>)
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002762:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <HAL_RCC_OscConfig+0x824>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2b01      	cmp	r3, #1
 800276e:	d031      	beq.n	80027d4 <HAL_RCC_OscConfig+0x814>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f003 0203 	and.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800277a:	429a      	cmp	r2, r3
 800277c:	d12a      	bne.n	80027d4 <HAL_RCC_OscConfig+0x814>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d122      	bne.n	80027d4 <HAL_RCC_OscConfig+0x814>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d11a      	bne.n	80027d4 <HAL_RCC_OscConfig+0x814>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	0a5b      	lsrs	r3, r3, #9
 80027a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027aa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d111      	bne.n	80027d4 <HAL_RCC_OscConfig+0x814>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	0c1b      	lsrs	r3, r3, #16
 80027b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d108      	bne.n	80027d4 <HAL_RCC_OscConfig+0x814>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	0e1b      	lsrs	r3, r3, #24
 80027c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_OscConfig+0x818>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <HAL_RCC_OscConfig+0x81a>
      }
    }
  }
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3730      	adds	r7, #48	; 0x30
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	58024400 	.word	0x58024400

080027e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e19c      	b.n	8002b36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027fc:	4b8a      	ldr	r3, [pc, #552]	; (8002a28 <HAL_RCC_ClockConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d910      	bls.n	800282c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b87      	ldr	r3, [pc, #540]	; (8002a28 <HAL_RCC_ClockConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 020f 	bic.w	r2, r3, #15
 8002812:	4985      	ldr	r1, [pc, #532]	; (8002a28 <HAL_RCC_ClockConfig+0x240>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b83      	ldr	r3, [pc, #524]	; (8002a28 <HAL_RCC_ClockConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e184      	b.n	8002b36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d010      	beq.n	800285a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	4b7b      	ldr	r3, [pc, #492]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002844:	429a      	cmp	r2, r3
 8002846:	d908      	bls.n	800285a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002848:	4b78      	ldr	r3, [pc, #480]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	4975      	ldr	r1, [pc, #468]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 8002856:	4313      	orrs	r3, r2
 8002858:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d010      	beq.n	8002888 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	4b70      	ldr	r3, [pc, #448]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002872:	429a      	cmp	r2, r3
 8002874:	d908      	bls.n	8002888 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002876:	4b6d      	ldr	r3, [pc, #436]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	496a      	ldr	r1, [pc, #424]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 8002884:	4313      	orrs	r3, r2
 8002886:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0310 	and.w	r3, r3, #16
 8002890:	2b00      	cmp	r3, #0
 8002892:	d010      	beq.n	80028b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699a      	ldr	r2, [r3, #24]
 8002898:	4b64      	ldr	r3, [pc, #400]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d908      	bls.n	80028b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028a4:	4b61      	ldr	r3, [pc, #388]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	495e      	ldr	r1, [pc, #376]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d010      	beq.n	80028e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69da      	ldr	r2, [r3, #28]
 80028c6:	4b59      	ldr	r3, [pc, #356]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d908      	bls.n	80028e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80028d2:	4b56      	ldr	r3, [pc, #344]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4953      	ldr	r1, [pc, #332]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d010      	beq.n	8002912 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	4b4d      	ldr	r3, [pc, #308]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d908      	bls.n	8002912 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002900:	4b4a      	ldr	r3, [pc, #296]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f023 020f 	bic.w	r2, r3, #15
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4947      	ldr	r1, [pc, #284]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800290e:	4313      	orrs	r3, r2
 8002910:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d055      	beq.n	80029ca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800291e:	4b43      	ldr	r3, [pc, #268]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4940      	ldr	r1, [pc, #256]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800292c:	4313      	orrs	r3, r2
 800292e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d107      	bne.n	8002948 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002938:	4b3c      	ldr	r3, [pc, #240]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d121      	bne.n	8002988 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0f6      	b.n	8002b36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d107      	bne.n	8002960 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002950:	4b36      	ldr	r3, [pc, #216]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d115      	bne.n	8002988 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0ea      	b.n	8002b36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d107      	bne.n	8002978 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002968:	4b30      	ldr	r3, [pc, #192]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0de      	b.n	8002b36 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002978:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0d6      	b.n	8002b36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002988:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	f023 0207 	bic.w	r2, r3, #7
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4925      	ldr	r1, [pc, #148]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 8002996:	4313      	orrs	r3, r2
 8002998:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299a:	f7fe ffb7 	bl	800190c <HAL_GetTick>
 800299e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a0:	e00a      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a2:	f7fe ffb3 	bl	800190c <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e0be      	b.n	8002b36 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b8:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d1eb      	bne.n	80029a2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d010      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d208      	bcs.n	80029f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f023 020f 	bic.w	r2, r3, #15
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	490e      	ldr	r1, [pc, #56]	; (8002a2c <HAL_RCC_ClockConfig+0x244>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_ClockConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 030f 	and.w	r3, r3, #15
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d214      	bcs.n	8002a30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <HAL_RCC_ClockConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 020f 	bic.w	r2, r3, #15
 8002a0e:	4906      	ldr	r1, [pc, #24]	; (8002a28 <HAL_RCC_ClockConfig+0x240>)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <HAL_RCC_ClockConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e086      	b.n	8002b36 <HAL_RCC_ClockConfig+0x34e>
 8002a28:	52002000 	.word	0x52002000
 8002a2c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d010      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	4b3f      	ldr	r3, [pc, #252]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d208      	bcs.n	8002a5e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a4c:	4b3c      	ldr	r3, [pc, #240]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	4939      	ldr	r1, [pc, #228]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d010      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	4b34      	ldr	r3, [pc, #208]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d208      	bcs.n	8002a8c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a7a:	4b31      	ldr	r3, [pc, #196]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	492e      	ldr	r1, [pc, #184]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d010      	beq.n	8002aba <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699a      	ldr	r2, [r3, #24]
 8002a9c:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d208      	bcs.n	8002aba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002aa8:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4922      	ldr	r1, [pc, #136]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d010      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d208      	bcs.n	8002ae8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ad6:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4917      	ldr	r1, [pc, #92]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ae8:	f000 f834 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	4912      	ldr	r1, [pc, #72]	; (8002b44 <HAL_RCC_ClockConfig+0x35c>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
 8002b04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b06:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <HAL_RCC_ClockConfig+0x358>)
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <HAL_RCC_ClockConfig+0x35c>)
 8002b10:	5cd3      	ldrb	r3, [r2, r3]
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1c:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <HAL_RCC_ClockConfig+0x360>)
 8002b1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b20:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <HAL_RCC_ClockConfig+0x364>)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002b26:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <HAL_RCC_ClockConfig+0x368>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fc58 	bl	80013e0 <HAL_InitTick>
 8002b30:	4603      	mov	r3, r0
 8002b32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	58024400 	.word	0x58024400
 8002b44:	0801664c 	.word	0x0801664c
 8002b48:	24000014 	.word	0x24000014
 8002b4c:	24000010 	.word	0x24000010
 8002b50:	24000018 	.word	0x24000018

08002b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b089      	sub	sp, #36	; 0x24
 8002b58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b5a:	4bb3      	ldr	r3, [pc, #716]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b62:	2b18      	cmp	r3, #24
 8002b64:	f200 8155 	bhi.w	8002e12 <HAL_RCC_GetSysClockFreq+0x2be>
 8002b68:	a201      	add	r2, pc, #4	; (adr r2, 8002b70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6e:	bf00      	nop
 8002b70:	08002bd5 	.word	0x08002bd5
 8002b74:	08002e13 	.word	0x08002e13
 8002b78:	08002e13 	.word	0x08002e13
 8002b7c:	08002e13 	.word	0x08002e13
 8002b80:	08002e13 	.word	0x08002e13
 8002b84:	08002e13 	.word	0x08002e13
 8002b88:	08002e13 	.word	0x08002e13
 8002b8c:	08002e13 	.word	0x08002e13
 8002b90:	08002bfb 	.word	0x08002bfb
 8002b94:	08002e13 	.word	0x08002e13
 8002b98:	08002e13 	.word	0x08002e13
 8002b9c:	08002e13 	.word	0x08002e13
 8002ba0:	08002e13 	.word	0x08002e13
 8002ba4:	08002e13 	.word	0x08002e13
 8002ba8:	08002e13 	.word	0x08002e13
 8002bac:	08002e13 	.word	0x08002e13
 8002bb0:	08002c01 	.word	0x08002c01
 8002bb4:	08002e13 	.word	0x08002e13
 8002bb8:	08002e13 	.word	0x08002e13
 8002bbc:	08002e13 	.word	0x08002e13
 8002bc0:	08002e13 	.word	0x08002e13
 8002bc4:	08002e13 	.word	0x08002e13
 8002bc8:	08002e13 	.word	0x08002e13
 8002bcc:	08002e13 	.word	0x08002e13
 8002bd0:	08002c07 	.word	0x08002c07
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bd4:	4b94      	ldr	r3, [pc, #592]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d009      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002be0:	4b91      	ldr	r3, [pc, #580]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	08db      	lsrs	r3, r3, #3
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	4a90      	ldr	r2, [pc, #576]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002bf2:	e111      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002bf4:	4b8d      	ldr	r3, [pc, #564]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002bf6:	61bb      	str	r3, [r7, #24]
    break;
 8002bf8:	e10e      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002bfa:	4b8d      	ldr	r3, [pc, #564]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002bfc:	61bb      	str	r3, [r7, #24]
    break;
 8002bfe:	e10b      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002c00:	4b8c      	ldr	r3, [pc, #560]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c02:	61bb      	str	r3, [r7, #24]
    break;
 8002c04:	e108      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c06:	4b88      	ldr	r3, [pc, #544]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002c10:	4b85      	ldr	r3, [pc, #532]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c1a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c1c:	4b82      	ldr	r3, [pc, #520]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002c26:	4b80      	ldr	r3, [pc, #512]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2a:	08db      	lsrs	r3, r3, #3
 8002c2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c3e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80e1 	beq.w	8002e0c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	f000 8083 	beq.w	8002d58 <HAL_RCC_GetSysClockFreq+0x204>
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	f200 80a1 	bhi.w	8002d9c <HAL_RCC_GetSysClockFreq+0x248>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x114>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d056      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002c66:	e099      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c68:	4b6f      	ldr	r3, [pc, #444]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d02d      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c74:	4b6c      	ldr	r3, [pc, #432]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	08db      	lsrs	r3, r3, #3
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	4a6b      	ldr	r2, [pc, #428]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
 8002c84:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	ee07 3a90 	vmov	s15, r3
 8002c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	ee07 3a90 	vmov	s15, r3
 8002c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c9e:	4b62      	ldr	r3, [pc, #392]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca6:	ee07 3a90 	vmov	s15, r3
 8002caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cb2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002cce:	e087      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	ee07 3a90 	vmov	s15, r3
 8002cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cda:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002e3c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ce2:	4b51      	ldr	r3, [pc, #324]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cea:	ee07 3a90 	vmov	s15, r3
 8002cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cf6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d12:	e065      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	ee07 3a90 	vmov	s15, r3
 8002d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d1e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002e40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d26:	4b40      	ldr	r3, [pc, #256]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2e:	ee07 3a90 	vmov	s15, r3
 8002d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d36:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d3a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d56:	e043      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	ee07 3a90 	vmov	s15, r3
 8002d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d62:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002e44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d6a:	4b2f      	ldr	r3, [pc, #188]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d72:	ee07 3a90 	vmov	s15, r3
 8002d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d7e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d9a:	e021      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	ee07 3a90 	vmov	s15, r3
 8002da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002e40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dae:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dc2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002e38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002dde:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	0a5b      	lsrs	r3, r3, #9
 8002de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dea:	3301      	adds	r3, #1
 8002dec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	ee07 3a90 	vmov	s15, r3
 8002df4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002df8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e04:	ee17 3a90 	vmov	r3, s15
 8002e08:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002e0a:	e005      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61bb      	str	r3, [r7, #24]
    break;
 8002e10:	e002      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e14:	61bb      	str	r3, [r7, #24]
    break;
 8002e16:	bf00      	nop
  }

  return sysclockfreq;
 8002e18:	69bb      	ldr	r3, [r7, #24]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3724      	adds	r7, #36	; 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	58024400 	.word	0x58024400
 8002e2c:	03d09000 	.word	0x03d09000
 8002e30:	003d0900 	.word	0x003d0900
 8002e34:	017d7840 	.word	0x017d7840
 8002e38:	46000000 	.word	0x46000000
 8002e3c:	4c742400 	.word	0x4c742400
 8002e40:	4a742400 	.word	0x4a742400
 8002e44:	4bbebc20 	.word	0x4bbebc20

08002e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002e4e:	f7ff fe81 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002e52:	4602      	mov	r2, r0
 8002e54:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_RCC_GetHCLKFreq+0x50>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	490f      	ldr	r1, [pc, #60]	; (8002e9c <HAL_RCC_GetHCLKFreq+0x54>)
 8002e60:	5ccb      	ldrb	r3, [r1, r3]
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <HAL_RCC_GetHCLKFreq+0x50>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	4a09      	ldr	r2, [pc, #36]	; (8002e9c <HAL_RCC_GetHCLKFreq+0x54>)
 8002e76:	5cd3      	ldrb	r3, [r2, r3]
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e82:	4a07      	ldr	r2, [pc, #28]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002e84:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e86:	4a07      	ldr	r2, [pc, #28]	; (8002ea4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	58024400 	.word	0x58024400
 8002e9c:	0801664c 	.word	0x0801664c
 8002ea0:	24000014 	.word	0x24000014
 8002ea4:	24000010 	.word	0x24000010

08002ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002eac:	f7ff ffcc 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	091b      	lsrs	r3, r3, #4
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	4904      	ldr	r1, [pc, #16]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	58024400 	.word	0x58024400
 8002ed0:	0801664c 	.word	0x0801664c

08002ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002ed8:	f7ff ffb6 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002edc:	4602      	mov	r2, r0
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	4904      	ldr	r1, [pc, #16]	; (8002efc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eea:	5ccb      	ldrb	r3, [r1, r3]
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	58024400 	.word	0x58024400
 8002efc:	0801664c 	.word	0x0801664c

08002f00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	223f      	movs	r2, #63	; 0x3f
 8002f0e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f10:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <HAL_RCC_GetClockConfig+0x7c>)
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f003 0207 	and.w	r2, r3, #7
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002f1c:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <HAL_RCC_GetClockConfig+0x7c>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002f28:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <HAL_RCC_GetClockConfig+0x7c>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f003 020f 	and.w	r2, r3, #15
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002f34:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <HAL_RCC_GetClockConfig+0x7c>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <HAL_RCC_GetClockConfig+0x7c>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_RCC_GetClockConfig+0x7c>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <HAL_RCC_GetClockConfig+0x7c>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_RCC_GetClockConfig+0x80>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 020f 	and.w	r2, r3, #15
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	601a      	str	r2, [r3, #0]
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	58024400 	.word	0x58024400
 8002f80:	52002000 	.word	0x52002000

08002f84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f90:	2300      	movs	r3, #0
 8002f92:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d03f      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fa4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fa8:	d02a      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002faa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fae:	d824      	bhi.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fb4:	d018      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fba:	d81e      	bhi.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fc4:	d007      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fc6:	e018      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fc8:	4ba3      	ldr	r3, [pc, #652]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	4aa2      	ldr	r2, [pc, #648]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002fd4:	e015      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	2102      	movs	r1, #2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 f9fd 	bl	80043dc <RCCEx_PLL2_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002fe6:	e00c      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3324      	adds	r3, #36	; 0x24
 8002fec:	2102      	movs	r1, #2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f001 faa6 	bl	8004540 <RCCEx_PLL3_Config>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002ff8:	e003      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8002ffe:	e000      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d109      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003008:	4b93      	ldr	r3, [pc, #588]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800300a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003014:	4990      	ldr	r1, [pc, #576]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003016:	4313      	orrs	r3, r2
 8003018:	650b      	str	r3, [r1, #80]	; 0x50
 800301a:	e001      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301c:	7dfb      	ldrb	r3, [r7, #23]
 800301e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003028:	2b00      	cmp	r3, #0
 800302a:	d03d      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003030:	2b04      	cmp	r3, #4
 8003032:	d826      	bhi.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003034:	a201      	add	r2, pc, #4	; (adr r2, 800303c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	08003051 	.word	0x08003051
 8003040:	0800305f 	.word	0x0800305f
 8003044:	08003071 	.word	0x08003071
 8003048:	08003089 	.word	0x08003089
 800304c:	08003089 	.word	0x08003089
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003050:	4b81      	ldr	r3, [pc, #516]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	4a80      	ldr	r2, [pc, #512]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800305c:	e015      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3304      	adds	r3, #4
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f001 f9b9 	bl	80043dc <RCCEx_PLL2_Config>
 800306a:	4603      	mov	r3, r0
 800306c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800306e:	e00c      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3324      	adds	r3, #36	; 0x24
 8003074:	2100      	movs	r1, #0
 8003076:	4618      	mov	r0, r3
 8003078:	f001 fa62 	bl	8004540 <RCCEx_PLL3_Config>
 800307c:	4603      	mov	r3, r0
 800307e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003080:	e003      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	75fb      	strb	r3, [r7, #23]
      break;
 8003086:	e000      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d109      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003090:	4b71      	ldr	r3, [pc, #452]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003094:	f023 0207 	bic.w	r2, r3, #7
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309c:	496e      	ldr	r1, [pc, #440]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	650b      	str	r3, [r1, #80]	; 0x50
 80030a2:	e001      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a4:	7dfb      	ldrb	r3, [r7, #23]
 80030a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d042      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030bc:	d02b      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80030be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c2:	d825      	bhi.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80030c4:	2bc0      	cmp	r3, #192	; 0xc0
 80030c6:	d028      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80030c8:	2bc0      	cmp	r3, #192	; 0xc0
 80030ca:	d821      	bhi.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80030cc:	2b80      	cmp	r3, #128	; 0x80
 80030ce:	d016      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80030d0:	2b80      	cmp	r3, #128	; 0x80
 80030d2:	d81d      	bhi.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80030d8:	2b40      	cmp	r3, #64	; 0x40
 80030da:	d007      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x168>
 80030dc:	e018      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030de:	4b5e      	ldr	r3, [pc, #376]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	4a5d      	ldr	r2, [pc, #372]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80030e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80030ea:	e017      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3304      	adds	r3, #4
 80030f0:	2100      	movs	r1, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	f001 f972 	bl	80043dc <RCCEx_PLL2_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80030fc:	e00e      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3324      	adds	r3, #36	; 0x24
 8003102:	2100      	movs	r1, #0
 8003104:	4618      	mov	r0, r3
 8003106:	f001 fa1b 	bl	8004540 <RCCEx_PLL3_Config>
 800310a:	4603      	mov	r3, r0
 800310c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800310e:	e005      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	75fb      	strb	r3, [r7, #23]
      break;
 8003114:	e002      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003116:	bf00      	nop
 8003118:	e000      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800311a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800311c:	7dfb      	ldrb	r3, [r7, #23]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d109      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003122:	4b4d      	ldr	r3, [pc, #308]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003126:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	494a      	ldr	r1, [pc, #296]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003130:	4313      	orrs	r3, r2
 8003132:	650b      	str	r3, [r1, #80]	; 0x50
 8003134:	e001      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003136:	7dfb      	ldrb	r3, [r7, #23]
 8003138:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003142:	2b00      	cmp	r3, #0
 8003144:	d049      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800314c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003150:	d030      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003152:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003156:	d82a      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003158:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800315c:	d02c      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800315e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003162:	d824      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003168:	d018      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800316a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800316e:	d81e      	bhi.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003174:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003178:	d007      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800317a:	e018      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800317c:	4b36      	ldr	r3, [pc, #216]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	4a35      	ldr	r2, [pc, #212]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003186:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003188:	e017      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3304      	adds	r3, #4
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f001 f923 	bl	80043dc <RCCEx_PLL2_Config>
 8003196:	4603      	mov	r3, r0
 8003198:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800319a:	e00e      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3324      	adds	r3, #36	; 0x24
 80031a0:	2100      	movs	r1, #0
 80031a2:	4618      	mov	r0, r3
 80031a4:	f001 f9cc 	bl	8004540 <RCCEx_PLL3_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031ac:	e005      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	75fb      	strb	r3, [r7, #23]
      break;
 80031b2:	e002      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80031b4:	bf00      	nop
 80031b6:	e000      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80031b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10a      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80031c0:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80031ce:	4922      	ldr	r1, [pc, #136]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	658b      	str	r3, [r1, #88]	; 0x58
 80031d4:	e001      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
 80031d8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d04b      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031f0:	d030      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80031f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031f6:	d82a      	bhi.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80031f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031fc:	d02e      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80031fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003202:	d824      	bhi.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003204:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003208:	d018      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800320a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800320e:	d81e      	bhi.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003218:	d007      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800321a:	e018      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800321c:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	4a0d      	ldr	r2, [pc, #52]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003226:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003228:	e019      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3304      	adds	r3, #4
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f001 f8d3 	bl	80043dc <RCCEx_PLL2_Config>
 8003236:	4603      	mov	r3, r0
 8003238:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800323a:	e010      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3324      	adds	r3, #36	; 0x24
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f001 f97c 	bl	8004540 <RCCEx_PLL3_Config>
 8003248:	4603      	mov	r3, r0
 800324a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800324c:	e007      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	75fb      	strb	r3, [r7, #23]
      break;
 8003252:	e004      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003254:	bf00      	nop
 8003256:	e002      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003258:	58024400 	.word	0x58024400
      break;
 800325c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800325e:	7dfb      	ldrb	r3, [r7, #23]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003264:	4b99      	ldr	r3, [pc, #612]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003272:	4996      	ldr	r1, [pc, #600]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003274:	4313      	orrs	r3, r2
 8003276:	658b      	str	r3, [r1, #88]	; 0x58
 8003278:	e001      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327a:	7dfb      	ldrb	r3, [r7, #23]
 800327c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d032      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328e:	2b30      	cmp	r3, #48	; 0x30
 8003290:	d01c      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003292:	2b30      	cmp	r3, #48	; 0x30
 8003294:	d817      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003296:	2b20      	cmp	r3, #32
 8003298:	d00c      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800329a:	2b20      	cmp	r3, #32
 800329c:	d813      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d016      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d10f      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a6:	4b89      	ldr	r3, [pc, #548]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	4a88      	ldr	r2, [pc, #544]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80032b2:	e00e      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3304      	adds	r3, #4
 80032b8:	2102      	movs	r1, #2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f001 f88e 	bl	80043dc <RCCEx_PLL2_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80032c4:	e005      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	75fb      	strb	r3, [r7, #23]
      break;
 80032ca:	e002      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80032cc:	bf00      	nop
 80032ce:	e000      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80032d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032d2:	7dfb      	ldrb	r3, [r7, #23]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d109      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80032d8:	4b7c      	ldr	r3, [pc, #496]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e4:	4979      	ldr	r1, [pc, #484]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80032ea:	e001      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
 80032ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d047      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003304:	d030      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800330a:	d82a      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800330c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003310:	d02c      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003312:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003316:	d824      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331c:	d018      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800331e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003322:	d81e      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332c:	d007      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800332e:	e018      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003330:	4b66      	ldr	r3, [pc, #408]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	4a65      	ldr	r2, [pc, #404]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800333c:	e017      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3304      	adds	r3, #4
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f001 f849 	bl	80043dc <RCCEx_PLL2_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800334e:	e00e      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3324      	adds	r3, #36	; 0x24
 8003354:	2100      	movs	r1, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f001 f8f2 	bl	8004540 <RCCEx_PLL3_Config>
 800335c:	4603      	mov	r3, r0
 800335e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003360:	e005      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	75fb      	strb	r3, [r7, #23]
      break;
 8003366:	e002      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003368:	bf00      	nop
 800336a:	e000      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800336c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800336e:	7dfb      	ldrb	r3, [r7, #23]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003374:	4b55      	ldr	r3, [pc, #340]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003378:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003380:	4952      	ldr	r1, [pc, #328]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003382:	4313      	orrs	r3, r2
 8003384:	650b      	str	r3, [r1, #80]	; 0x50
 8003386:	e001      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d049      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800339c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a0:	d02e      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80033a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a6:	d828      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80033a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033ac:	d02a      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80033ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033b2:	d822      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80033b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033b8:	d026      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80033ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033be:	d81c      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80033c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033c4:	d010      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80033c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033ca:	d816      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x476>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01d      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x488>
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d4:	d111      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3304      	adds	r3, #4
 80033da:	2101      	movs	r1, #1
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fffd 	bl	80043dc <RCCEx_PLL2_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80033e6:	e012      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3324      	adds	r3, #36	; 0x24
 80033ec:	2101      	movs	r1, #1
 80033ee:	4618      	mov	r0, r3
 80033f0:	f001 f8a6 	bl	8004540 <RCCEx_PLL3_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80033f8:	e009      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	75fb      	strb	r3, [r7, #23]
      break;
 80033fe:	e006      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003400:	bf00      	nop
 8003402:	e004      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003404:	bf00      	nop
 8003406:	e002      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003408:	bf00      	nop
 800340a:	e000      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800340c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800340e:	7dfb      	ldrb	r3, [r7, #23]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d109      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003414:	4b2d      	ldr	r3, [pc, #180]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003418:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003420:	492a      	ldr	r1, [pc, #168]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003422:	4313      	orrs	r3, r2
 8003424:	650b      	str	r3, [r1, #80]	; 0x50
 8003426:	e001      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	7dfb      	ldrb	r3, [r7, #23]
 800342a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d04d      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800343e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003442:	d02e      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003444:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003448:	d828      	bhi.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800344a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344e:	d02a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003454:	d822      	bhi.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003456:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800345a:	d026      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x526>
 800345c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003460:	d81c      	bhi.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003466:	d010      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800346c:	d816      	bhi.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d01d      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003472:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003476:	d111      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3304      	adds	r3, #4
 800347c:	2101      	movs	r1, #1
 800347e:	4618      	mov	r0, r3
 8003480:	f000 ffac 	bl	80043dc <RCCEx_PLL2_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003488:	e012      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3324      	adds	r3, #36	; 0x24
 800348e:	2101      	movs	r1, #1
 8003490:	4618      	mov	r0, r3
 8003492:	f001 f855 	bl	8004540 <RCCEx_PLL3_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800349a:	e009      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	75fb      	strb	r3, [r7, #23]
      break;
 80034a0:	e006      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80034a2:	bf00      	nop
 80034a4:	e004      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80034a6:	bf00      	nop
 80034a8:	e002      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80034aa:	bf00      	nop
 80034ac:	e000      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80034ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80034c4:	4901      	ldr	r1, [pc, #4]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	658b      	str	r3, [r1, #88]	; 0x58
 80034ca:	e003      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80034cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d022      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    switch(PeriphClkInit->DsiClockSelection)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00e      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80034e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ec:	d108      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3304      	adds	r3, #4
 80034f2:	2101      	movs	r1, #1
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 ff71 	bl	80043dc <RCCEx_PLL2_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 80034fe:	e003      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x584>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	75fb      	strb	r3, [r7, #23]
      break;
 8003504:	e000      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x584>
      break;
 8003506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003508:	7dfb      	ldrb	r3, [r7, #23]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d109      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800350e:	4b82      	ldr	r3, [pc, #520]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351a:	497f      	ldr	r1, [pc, #508]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800351c:	4313      	orrs	r3, r2
 800351e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003520:	e001      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d02f      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x60e>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800353a:	d00e      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 800353c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003540:	d814      	bhi.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d015      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 8003546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800354a:	d10f      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354c:	4b72      	ldr	r3, [pc, #456]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	4a71      	ldr	r2, [pc, #452]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003556:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003558:	e00c      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x5f0>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3304      	adds	r3, #4
 800355e:	2101      	movs	r1, #1
 8003560:	4618      	mov	r0, r3
 8003562:	f000 ff3b 	bl	80043dc <RCCEx_PLL2_Config>
 8003566:	4603      	mov	r3, r0
 8003568:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800356a:	e003      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	75fb      	strb	r3, [r7, #23]
      break;
 8003570:	e000      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      break;
 8003572:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003574:	7dfb      	ldrb	r3, [r7, #23]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x60a>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800357a:	4b67      	ldr	r3, [pc, #412]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800357c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	4964      	ldr	r1, [pc, #400]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003588:	4313      	orrs	r3, r2
 800358a:	650b      	str	r3, [r1, #80]	; 0x50
 800358c:	e001      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358e:	7dfb      	ldrb	r3, [r7, #23]
 8003590:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d031      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x67e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d81a      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x658>
 80035a6:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <HAL_RCCEx_PeriphCLKConfig+0x628>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	080035e3 	.word	0x080035e3
 80035b0:	080035bd 	.word	0x080035bd
 80035b4:	080035cb 	.word	0x080035cb
 80035b8:	080035e3 	.word	0x080035e3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035bc:	4b56      	ldr	r3, [pc, #344]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	4a55      	ldr	r2, [pc, #340]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80035c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80035c8:	e00c      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x660>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3304      	adds	r3, #4
 80035ce:	2102      	movs	r1, #2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 ff03 	bl	80043dc <RCCEx_PLL2_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80035da:	e003      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	75fb      	strb	r3, [r7, #23]
      break;
 80035e0:	e000      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      break;
 80035e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x67a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80035ea:	4b4b      	ldr	r3, [pc, #300]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80035ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ee:	f023 0203 	bic.w	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	4948      	ldr	r1, [pc, #288]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80035fc:	e001      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fe:	7dfb      	ldrb	r3, [r7, #23]
 8003600:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 808c 	beq.w	8003728 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003610:	4b42      	ldr	r3, [pc, #264]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a41      	ldr	r2, [pc, #260]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8003616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800361c:	f7fe f976 	bl	800190c <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003622:	e009      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003624:	f7fe f972 	bl	800190c <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	; 0x64
 8003630:	d902      	bls.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
      {
        ret = HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	75fb      	strb	r3, [r7, #23]
        break;
 8003636:	e005      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003638:	4b38      	ldr	r3, [pc, #224]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0ef      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      }
    }

    if(ret == HAL_OK)
 8003644:	7dfb      	ldrb	r3, [r7, #23]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d16c      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800364a:	4b33      	ldr	r3, [pc, #204]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800364c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003654:	4053      	eors	r3, r2
 8003656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365a:	2b00      	cmp	r3, #0
 800365c:	d013      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x702>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800365e:	4b2e      	ldr	r3, [pc, #184]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003666:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003668:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4a2a      	ldr	r2, [pc, #168]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800366e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003672:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003674:	4b28      	ldr	r3, [pc, #160]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	4a27      	ldr	r2, [pc, #156]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800367a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800367e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003680:	4a25      	ldr	r2, [pc, #148]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800368c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003690:	d115      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x73a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003692:	f7fe f93b 	bl	800190c <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003698:	e00b      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fe f937 	bl	800190c <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d902      	bls.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x72e>
          {
            ret = HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	75fb      	strb	r3, [r7, #23]
            break;
 80036b0:	e005      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x73a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036b2:	4b19      	ldr	r3, [pc, #100]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0ed      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x716>
          }
        }
      }

      if(ret == HAL_OK)
 80036be:	7dfb      	ldrb	r3, [r7, #23]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d126      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036d2:	d10d      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x76c>
 80036d4:	4b10      	ldr	r3, [pc, #64]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036e2:	0919      	lsrs	r1, r3, #4
 80036e4:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 80036e6:	400b      	ands	r3, r1
 80036e8:	490b      	ldr	r1, [pc, #44]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	610b      	str	r3, [r1, #16]
 80036ee:	e005      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x778>
 80036f0:	4b09      	ldr	r3, [pc, #36]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	4a08      	ldr	r2, [pc, #32]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80036f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036fa:	6113      	str	r3, [r2, #16]
 80036fc:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80036fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370a:	4903      	ldr	r1, [pc, #12]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800370c:	4313      	orrs	r3, r2
 800370e:	670b      	str	r3, [r1, #112]	; 0x70
 8003710:	e00a      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003712:	7dfb      	ldrb	r3, [r7, #23]
 8003714:	75bb      	strb	r3, [r7, #22]
 8003716:	e007      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 8003718:	58024400 	.word	0x58024400
 800371c:	58024800 	.word	0x58024800
 8003720:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d07e      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003738:	2b28      	cmp	r3, #40	; 0x28
 800373a:	d867      	bhi.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x888>
 800373c:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003813 	.word	0x08003813
 8003748:	0800380d 	.word	0x0800380d
 800374c:	0800380d 	.word	0x0800380d
 8003750:	0800380d 	.word	0x0800380d
 8003754:	0800380d 	.word	0x0800380d
 8003758:	0800380d 	.word	0x0800380d
 800375c:	0800380d 	.word	0x0800380d
 8003760:	0800380d 	.word	0x0800380d
 8003764:	080037e9 	.word	0x080037e9
 8003768:	0800380d 	.word	0x0800380d
 800376c:	0800380d 	.word	0x0800380d
 8003770:	0800380d 	.word	0x0800380d
 8003774:	0800380d 	.word	0x0800380d
 8003778:	0800380d 	.word	0x0800380d
 800377c:	0800380d 	.word	0x0800380d
 8003780:	0800380d 	.word	0x0800380d
 8003784:	080037fb 	.word	0x080037fb
 8003788:	0800380d 	.word	0x0800380d
 800378c:	0800380d 	.word	0x0800380d
 8003790:	0800380d 	.word	0x0800380d
 8003794:	0800380d 	.word	0x0800380d
 8003798:	0800380d 	.word	0x0800380d
 800379c:	0800380d 	.word	0x0800380d
 80037a0:	0800380d 	.word	0x0800380d
 80037a4:	08003813 	.word	0x08003813
 80037a8:	0800380d 	.word	0x0800380d
 80037ac:	0800380d 	.word	0x0800380d
 80037b0:	0800380d 	.word	0x0800380d
 80037b4:	0800380d 	.word	0x0800380d
 80037b8:	0800380d 	.word	0x0800380d
 80037bc:	0800380d 	.word	0x0800380d
 80037c0:	0800380d 	.word	0x0800380d
 80037c4:	08003813 	.word	0x08003813
 80037c8:	0800380d 	.word	0x0800380d
 80037cc:	0800380d 	.word	0x0800380d
 80037d0:	0800380d 	.word	0x0800380d
 80037d4:	0800380d 	.word	0x0800380d
 80037d8:	0800380d 	.word	0x0800380d
 80037dc:	0800380d 	.word	0x0800380d
 80037e0:	0800380d 	.word	0x0800380d
 80037e4:	08003813 	.word	0x08003813
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	2101      	movs	r1, #1
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fdf4 	bl	80043dc <RCCEx_PLL2_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80037f8:	e00c      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x890>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3324      	adds	r3, #36	; 0x24
 80037fe:	2101      	movs	r1, #1
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fe9d 	bl	8004540 <RCCEx_PLL3_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800380a:	e003      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x890>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	75fb      	strb	r3, [r7, #23]
      break;
 8003810:	e000      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x890>
      break;
 8003812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800381a:	4b96      	ldr	r3, [pc, #600]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 800381c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003826:	4993      	ldr	r1, [pc, #588]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003828:	4313      	orrs	r3, r2
 800382a:	654b      	str	r3, [r1, #84]	; 0x54
 800382c:	e001      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382e:	7dfb      	ldrb	r3, [r7, #23]
 8003830:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d037      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x92a>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003842:	2b05      	cmp	r3, #5
 8003844:	d820      	bhi.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x904>
 8003846:	a201      	add	r2, pc, #4	; (adr r2, 800384c <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 8003848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384c:	0800388f 	.word	0x0800388f
 8003850:	08003865 	.word	0x08003865
 8003854:	08003877 	.word	0x08003877
 8003858:	0800388f 	.word	0x0800388f
 800385c:	0800388f 	.word	0x0800388f
 8003860:	0800388f 	.word	0x0800388f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3304      	adds	r3, #4
 8003868:	2101      	movs	r1, #1
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fdb6 	bl	80043dc <RCCEx_PLL2_Config>
 8003870:	4603      	mov	r3, r0
 8003872:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003874:	e00c      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x90c>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3324      	adds	r3, #36	; 0x24
 800387a:	2101      	movs	r1, #1
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fe5f 	bl	8004540 <RCCEx_PLL3_Config>
 8003882:	4603      	mov	r3, r0
 8003884:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003886:	e003      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	75fb      	strb	r3, [r7, #23]
      break;
 800388c:	e000      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      break;
 800388e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003890:	7dfb      	ldrb	r3, [r7, #23]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x926>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003896:	4b77      	ldr	r3, [pc, #476]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389a:	f023 0207 	bic.w	r2, r3, #7
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038a2:	4974      	ldr	r1, [pc, #464]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	654b      	str	r3, [r1, #84]	; 0x54
 80038a8:	e001      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x92a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
 80038ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d03a      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c0:	2b05      	cmp	r3, #5
 80038c2:	d821      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80038c4:	a201      	add	r2, pc, #4	; (adr r2, 80038cc <HAL_RCCEx_PeriphCLKConfig+0x948>)
 80038c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ca:	bf00      	nop
 80038cc:	0800390f 	.word	0x0800390f
 80038d0:	080038e5 	.word	0x080038e5
 80038d4:	080038f7 	.word	0x080038f7
 80038d8:	0800390f 	.word	0x0800390f
 80038dc:	0800390f 	.word	0x0800390f
 80038e0:	0800390f 	.word	0x0800390f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3304      	adds	r3, #4
 80038e8:	2101      	movs	r1, #1
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fd76 	bl	80043dc <RCCEx_PLL2_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80038f4:	e00c      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x98c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3324      	adds	r3, #36	; 0x24
 80038fa:	2101      	movs	r1, #1
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fe1f 	bl	8004540 <RCCEx_PLL3_Config>
 8003902:	4603      	mov	r3, r0
 8003904:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003906:	e003      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	75fb      	strb	r3, [r7, #23]
      break;
 800390c:	e000      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      break;
 800390e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003910:	7dfb      	ldrb	r3, [r7, #23]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003916:	4b57      	ldr	r3, [pc, #348]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391a:	f023 0207 	bic.w	r2, r3, #7
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003924:	4953      	ldr	r1, [pc, #332]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003926:	4313      	orrs	r3, r2
 8003928:	658b      	str	r3, [r1, #88]	; 0x58
 800392a:	e001      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d04b      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003942:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003946:	d02e      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8003948:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800394c:	d828      	bhi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800394e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003952:	d02a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8003954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003958:	d822      	bhi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800395a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800395e:	d026      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8003960:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003964:	d81c      	bhi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8003966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800396a:	d010      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800396c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003970:	d816      	bhi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 8003972:	2b00      	cmp	r3, #0
 8003974:	d01d      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8003976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800397a:	d111      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	2100      	movs	r1, #0
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fd2a 	bl	80043dc <RCCEx_PLL2_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800398c:	e012      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3324      	adds	r3, #36	; 0x24
 8003992:	2102      	movs	r1, #2
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fdd3 	bl	8004540 <RCCEx_PLL3_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800399e:	e009      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	75fb      	strb	r3, [r7, #23]
      break;
 80039a4:	e006      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 80039a6:	bf00      	nop
 80039a8:	e004      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 80039aa:	bf00      	nop
 80039ac:	e002      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 80039b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039ba:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c8:	492a      	ldr	r1, [pc, #168]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	654b      	str	r3, [r1, #84]	; 0x54
 80039ce:	e001      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	7dfb      	ldrb	r3, [r7, #23]
 80039d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d04d      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80039ea:	d02e      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xac6>
 80039ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80039f0:	d828      	bhi.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 80039f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f6:	d02a      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80039f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039fc:	d822      	bhi.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 80039fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a02:	d026      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8003a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a08:	d81c      	bhi.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8003a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a0e:	d010      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a14:	d816      	bhi.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01d      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8003a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1e:	d111      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xac0>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fcd8 	bl	80043dc <RCCEx_PLL2_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003a30:	e012      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xad4>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3324      	adds	r3, #36	; 0x24
 8003a36:	2102      	movs	r1, #2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fd81 	bl	8004540 <RCCEx_PLL3_Config>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003a42:	e009      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	75fb      	strb	r3, [r7, #23]
      break;
 8003a48:	e006      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8003a4a:	bf00      	nop
 8003a4c:	e004      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8003a4e:	bf00      	nop
 8003a50:	e002      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8003a52:	bf00      	nop
 8003a54:	e000      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 8003a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a5e:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a62:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a6c:	4901      	ldr	r1, [pc, #4]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	658b      	str	r3, [r1, #88]	; 0x58
 8003a72:	e003      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 8003a74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
 8003a7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d04b      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a8e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a92:	d02e      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8003a94:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a98:	d828      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a9e:	d02a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8003aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa4:	d822      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003aa6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003aaa:	d026      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8003aac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ab0:	d81c      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab6:	d010      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8003ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003abc:	d816      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01d      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8003ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac6:	d111      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3304      	adds	r3, #4
 8003acc:	2100      	movs	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fc84 	bl	80043dc <RCCEx_PLL2_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ad8:	e012      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3324      	adds	r3, #36	; 0x24
 8003ade:	2102      	movs	r1, #2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fd2d 	bl	8004540 <RCCEx_PLL3_Config>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003aea:	e009      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	75fb      	strb	r3, [r7, #23]
      break;
 8003af0:	e006      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003af2:	bf00      	nop
 8003af4:	e004      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003af6:	bf00      	nop
 8003af8:	e002      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003afa:	bf00      	nop
 8003afc:	e000      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b06:	4b9e      	ldr	r3, [pc, #632]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b14:	499a      	ldr	r1, [pc, #616]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	658b      	str	r3, [r1, #88]	; 0x58
 8003b1a:	e001      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xbde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b36:	d10a      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3324      	adds	r3, #36	; 0x24
 8003b3c:	2102      	movs	r1, #2
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fcfe 	bl	8004540 <RCCEx_PLL3_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xbca>
        {
          status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b4e:	4b8c      	ldr	r3, [pc, #560]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5c:	4988      	ldr	r1, [pc, #544]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b78:	d10a      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3324      	adds	r3, #36	; 0x24
 8003b7e:	2102      	movs	r1, #2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fcdd 	bl	8004540 <RCCEx_PLL3_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
      {
        status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b90:	4b7b      	ldr	r3, [pc, #492]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b9e:	4978      	ldr	r1, [pc, #480]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d034      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xc96>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bba:	d01d      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003bbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bc0:	d817      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xc6e>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
 8003bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bca:	d009      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003bcc:	e011      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xc6e>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fc01 	bl	80043dc <RCCEx_PLL2_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003bde:	e00c      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xc76>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3324      	adds	r3, #36	; 0x24
 8003be4:	2102      	movs	r1, #2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fcaa 	bl	8004540 <RCCEx_PLL3_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003bf0:	e003      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xc76>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8003bf6:	e000      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xc76>
      break;
 8003bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bfa:	7dfb      	ldrb	r3, [r7, #23]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c00:	4b5f      	ldr	r3, [pc, #380]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c0e:	495c      	ldr	r1, [pc, #368]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	658b      	str	r3, [r1, #88]	; 0x58
 8003c14:	e001      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
 8003c18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d033      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xd0a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c30:	d01c      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003c32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c36:	d816      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xce2>
 8003c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c3c:	d003      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003c3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c42:	d007      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8003c44:	e00f      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xce2>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c46:	4b4e      	ldr	r3, [pc, #312]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	4a4d      	ldr	r2, [pc, #308]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003c52:	e00c      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xcea>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3324      	adds	r3, #36	; 0x24
 8003c58:	2101      	movs	r1, #1
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fc70 	bl	8004540 <RCCEx_PLL3_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003c64:	e003      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xcea>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	75fb      	strb	r3, [r7, #23]
      break;
 8003c6a:	e000      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xcea>
      break;
 8003c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xd06>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c74:	4b42      	ldr	r3, [pc, #264]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	493f      	ldr	r1, [pc, #252]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	654b      	str	r3, [r1, #84]	; 0x54
 8003c88:	e001      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
 8003c8c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d029      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xd6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xd26>
 8003ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca6:	d007      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 8003ca8:	e00f      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xd46>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003caa:	4b35      	ldr	r3, [pc, #212]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	4a34      	ldr	r2, [pc, #208]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003cb6:	e00b      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fb8c 	bl	80043dc <RCCEx_PLL2_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003cc8:	e002      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    default:
      ret = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8003cce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd0:	7dfb      	ldrb	r3, [r7, #23]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xd66>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003cd6:	4b2a      	ldr	r3, [pc, #168]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce2:	4927      	ldr	r1, [pc, #156]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ce8:	e001      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
 8003cec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3324      	adds	r3, #36	; 0x24
 8003cfe:	2102      	movs	r1, #2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fc1d 	bl	8004540 <RCCEx_PLL3_Config>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
    {
      status=HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d035      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xe04>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d26:	d017      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
 8003d28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d2c:	d811      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8003d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d32:	d013      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8003d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d38:	d80b      	bhi.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d010      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8003d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d42:	d106      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xdce>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	4a0d      	ldr	r2, [pc, #52]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003d50:	e007      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	75fb      	strb	r3, [r7, #23]
      break;
 8003d56:	e004      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8003d58:	bf00      	nop
 8003d5a:	e002      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8003d5c:	bf00      	nop
 8003d5e:	e000      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 8003d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d62:	7dfb      	ldrb	r3, [r7, #23]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10d      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe00>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d76:	4902      	ldr	r1, [pc, #8]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	654b      	str	r3, [r1, #84]	; 0x54
 8003d7c:	e004      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 8003d7e:	bf00      	nop
 8003d80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
 8003d86:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xe22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d94:	4b31      	ldr	r3, [pc, #196]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da0:	492e      	ldr	r1, [pc, #184]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d009      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xe42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003db2:	4b2a      	ldr	r3, [pc, #168]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003dc0:	4926      	ldr	r1, [pc, #152]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dd2:	4b22      	ldr	r3, [pc, #136]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dde:	491f      	ldr	r1, [pc, #124]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00d      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xe88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003df0:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	4a19      	ldr	r2, [pc, #100]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003df6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dfa:	6113      	str	r3, [r2, #16]
 8003dfc:	4b17      	ldr	r3, [pc, #92]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003e06:	4915      	ldr	r1, [pc, #84]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	da08      	bge.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xea2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e14:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e20:	490e      	ldr	r1, [pc, #56]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d009      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xec2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e40:	4906      	ldr	r1, [pc, #24]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003e46:	7dbb      	ldrb	r3, [r7, #22]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xece>
  }
  return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	58024400 	.word	0x58024400

08003e60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003e64:	f7fe fff0 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	4904      	ldr	r1, [pc, #16]	; (8003e88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	58024400 	.word	0x58024400
 8003e88:	0801664c 	.word	0x0801664c

08003e8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b089      	sub	sp, #36	; 0x24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e94:	4ba1      	ldr	r3, [pc, #644]	; (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003e9e:	4b9f      	ldr	r3, [pc, #636]	; (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	0b1b      	lsrs	r3, r3, #12
 8003ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003eaa:	4b9c      	ldr	r3, [pc, #624]	; (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003eb6:	4b99      	ldr	r3, [pc, #612]	; (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	08db      	lsrs	r3, r3, #3
 8003ebc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	fb02 f303 	mul.w	r3, r2, r3
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ece:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8111 	beq.w	80040fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	f000 8083 	beq.w	8003fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	f200 80a1 	bhi.w	800402c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d056      	beq.n	8003fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003ef6:	e099      	b.n	800402c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ef8:	4b88      	ldr	r3, [pc, #544]	; (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0320 	and.w	r3, r3, #32
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d02d      	beq.n	8003f60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f04:	4b85      	ldr	r3, [pc, #532]	; (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	08db      	lsrs	r3, r3, #3
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	4a84      	ldr	r2, [pc, #528]	; (8004120 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003f10:	fa22 f303 	lsr.w	r3, r2, r3
 8003f14:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	ee07 3a90 	vmov	s15, r3
 8003f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f2e:	4b7b      	ldr	r3, [pc, #492]	; (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004124 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003f5e:	e087      	b.n	8004070 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	ee07 3a90 	vmov	s15, r3
 8003f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004128 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f72:	4b6a      	ldr	r3, [pc, #424]	; (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004124 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fa2:	e065      	b.n	8004070 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	ee07 3a90 	vmov	s15, r3
 8003faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800412c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fb6:	4b59      	ldr	r3, [pc, #356]	; (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004124 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fe6:	e043      	b.n	8004070 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	ee07 3a90 	vmov	s15, r3
 8003fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004130 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ffa:	4b48      	ldr	r3, [pc, #288]	; (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400a:	ed97 6a03 	vldr	s12, [r7, #12]
 800400e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004124 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800401a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800401e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800402a:	e021      	b.n	8004070 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004036:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800412c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800403a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800403e:	4b37      	ldr	r3, [pc, #220]	; (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800404e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004052:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004124 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800405a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800405e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800406e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004070:	4b2a      	ldr	r3, [pc, #168]	; (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	0a5b      	lsrs	r3, r3, #9
 8004076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800407a:	ee07 3a90 	vmov	s15, r3
 800407e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004086:	ee37 7a87 	vadd.f32	s14, s15, s14
 800408a:	edd7 6a07 	vldr	s13, [r7, #28]
 800408e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004096:	ee17 2a90 	vmov	r2, s15
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800409e:	4b1f      	ldr	r3, [pc, #124]	; (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	0c1b      	lsrs	r3, r3, #16
 80040a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a8:	ee07 3a90 	vmov	s15, r3
 80040ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80040bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040c4:	ee17 2a90 	vmov	r2, s15
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80040cc:	4b13      	ldr	r3, [pc, #76]	; (800411c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	0e1b      	lsrs	r3, r3, #24
 80040d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80040ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f2:	ee17 2a90 	vmov	r2, s15
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80040fa:	e008      	b.n	800410e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
}
 800410e:	bf00      	nop
 8004110:	3724      	adds	r7, #36	; 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	58024400 	.word	0x58024400
 8004120:	03d09000 	.word	0x03d09000
 8004124:	46000000 	.word	0x46000000
 8004128:	4c742400 	.word	0x4c742400
 800412c:	4a742400 	.word	0x4a742400
 8004130:	4bbebc20 	.word	0x4bbebc20

08004134 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004134:	b480      	push	{r7}
 8004136:	b089      	sub	sp, #36	; 0x24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800413c:	4ba1      	ldr	r3, [pc, #644]	; (80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	f003 0303 	and.w	r3, r3, #3
 8004144:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004146:	4b9f      	ldr	r3, [pc, #636]	; (80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	0d1b      	lsrs	r3, r3, #20
 800414c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004150:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004152:	4b9c      	ldr	r3, [pc, #624]	; (80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800415e:	4b99      	ldr	r3, [pc, #612]	; (80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	08db      	lsrs	r3, r3, #3
 8004164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004176:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 8111 	beq.w	80043a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b02      	cmp	r3, #2
 8004186:	f000 8083 	beq.w	8004290 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b02      	cmp	r3, #2
 800418e:	f200 80a1 	bhi.w	80042d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d056      	beq.n	800424c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800419e:	e099      	b.n	80042d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041a0:	4b88      	ldr	r3, [pc, #544]	; (80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d02d      	beq.n	8004208 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041ac:	4b85      	ldr	r3, [pc, #532]	; (80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	08db      	lsrs	r3, r3, #3
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	4a84      	ldr	r2, [pc, #528]	; (80043c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80041b8:	fa22 f303 	lsr.w	r3, r2, r3
 80041bc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	ee07 3a90 	vmov	s15, r3
 80041c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041d6:	4b7b      	ldr	r3, [pc, #492]	; (80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80043cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004202:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004206:	e087      	b.n	8004318 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004212:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80043d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800421a:	4b6a      	ldr	r3, [pc, #424]	; (80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800422a:	ed97 6a03 	vldr	s12, [r7, #12]
 800422e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80043cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800423a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800423e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004246:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800424a:	e065      	b.n	8004318 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004256:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800425a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800425e:	4b59      	ldr	r3, [pc, #356]	; (80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800426e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004272:	eddf 5a56 	vldr	s11, [pc, #344]	; 80043cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800427a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800427e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800428e:	e043      	b.n	8004318 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80043d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800429e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042a2:	4b48      	ldr	r3, [pc, #288]	; (80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80043cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042d2:	e021      	b.n	8004318 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80042e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042e6:	4b37      	ldr	r3, [pc, #220]	; (80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80042fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80043cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800430a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800430e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004312:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004316:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004318:	4b2a      	ldr	r3, [pc, #168]	; (80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	0a5b      	lsrs	r3, r3, #9
 800431e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800432e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004332:	edd7 6a07 	vldr	s13, [r7, #28]
 8004336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800433a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800433e:	ee17 2a90 	vmov	r2, s15
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004346:	4b1f      	ldr	r3, [pc, #124]	; (80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	0c1b      	lsrs	r3, r3, #16
 800434c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004350:	ee07 3a90 	vmov	s15, r3
 8004354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004358:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800435c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004360:	edd7 6a07 	vldr	s13, [r7, #28]
 8004364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800436c:	ee17 2a90 	vmov	r2, s15
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004374:	4b13      	ldr	r3, [pc, #76]	; (80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	0e1b      	lsrs	r3, r3, #24
 800437a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004386:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800438a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800438e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800439a:	ee17 2a90 	vmov	r2, s15
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80043a2:	e008      	b.n	80043b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	609a      	str	r2, [r3, #8]
}
 80043b6:	bf00      	nop
 80043b8:	3724      	adds	r7, #36	; 0x24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	58024400 	.word	0x58024400
 80043c8:	03d09000 	.word	0x03d09000
 80043cc:	46000000 	.word	0x46000000
 80043d0:	4c742400 	.word	0x4c742400
 80043d4:	4a742400 	.word	0x4a742400
 80043d8:	4bbebc20 	.word	0x4bbebc20

080043dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043ea:	4b53      	ldr	r3, [pc, #332]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 80043ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d101      	bne.n	80043fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e099      	b.n	800452e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80043fa:	4b4f      	ldr	r3, [pc, #316]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a4e      	ldr	r2, [pc, #312]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 8004400:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004406:	f7fd fa81 	bl	800190c <HAL_GetTick>
 800440a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800440c:	e008      	b.n	8004420 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800440e:	f7fd fa7d 	bl	800190c <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e086      	b.n	800452e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004420:	4b45      	ldr	r3, [pc, #276]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f0      	bne.n	800440e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800442c:	4b42      	ldr	r3, [pc, #264]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	031b      	lsls	r3, r3, #12
 800443a:	493f      	ldr	r1, [pc, #252]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 800443c:	4313      	orrs	r3, r2
 800443e:	628b      	str	r3, [r1, #40]	; 0x28
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	3b01      	subs	r3, #1
 8004446:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	3b01      	subs	r3, #1
 8004450:	025b      	lsls	r3, r3, #9
 8004452:	b29b      	uxth	r3, r3
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	3b01      	subs	r3, #1
 800445c:	041b      	lsls	r3, r3, #16
 800445e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	3b01      	subs	r3, #1
 800446a:	061b      	lsls	r3, r3, #24
 800446c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004470:	4931      	ldr	r1, [pc, #196]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 8004472:	4313      	orrs	r3, r2
 8004474:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004476:	4b30      	ldr	r3, [pc, #192]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	492d      	ldr	r1, [pc, #180]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 8004484:	4313      	orrs	r3, r2
 8004486:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004488:	4b2b      	ldr	r3, [pc, #172]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	f023 0220 	bic.w	r2, r3, #32
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	4928      	ldr	r1, [pc, #160]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 8004496:	4313      	orrs	r3, r2
 8004498:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800449a:	4b27      	ldr	r3, [pc, #156]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449e:	4a26      	ldr	r2, [pc, #152]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 80044a0:	f023 0310 	bic.w	r3, r3, #16
 80044a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044a6:	4b24      	ldr	r3, [pc, #144]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 80044a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044aa:	4b24      	ldr	r3, [pc, #144]	; (800453c <RCCEx_PLL2_Config+0x160>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	69d2      	ldr	r2, [r2, #28]
 80044b2:	00d2      	lsls	r2, r2, #3
 80044b4:	4920      	ldr	r1, [pc, #128]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80044ba:	4b1f      	ldr	r3, [pc, #124]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	4a1e      	ldr	r2, [pc, #120]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 80044c0:	f043 0310 	orr.w	r3, r3, #16
 80044c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d106      	bne.n	80044da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044cc:	4b1a      	ldr	r3, [pc, #104]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	4a19      	ldr	r2, [pc, #100]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 80044d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044d8:	e00f      	b.n	80044fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d106      	bne.n	80044ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80044e0:	4b15      	ldr	r3, [pc, #84]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	4a14      	ldr	r2, [pc, #80]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 80044e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044ec:	e005      	b.n	80044fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80044ee:	4b12      	ldr	r3, [pc, #72]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	4a11      	ldr	r2, [pc, #68]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 80044f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80044fa:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a0e      	ldr	r2, [pc, #56]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 8004500:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004506:	f7fd fa01 	bl	800190c <HAL_GetTick>
 800450a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800450c:	e008      	b.n	8004520 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800450e:	f7fd f9fd 	bl	800190c <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e006      	b.n	800452e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <RCCEx_PLL2_Config+0x15c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0f0      	beq.n	800450e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	58024400 	.word	0x58024400
 800453c:	ffff0007 	.word	0xffff0007

08004540 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800454e:	4b53      	ldr	r3, [pc, #332]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b03      	cmp	r3, #3
 8004558:	d101      	bne.n	800455e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e099      	b.n	8004692 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800455e:	4b4f      	ldr	r3, [pc, #316]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a4e      	ldr	r2, [pc, #312]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 8004564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004568:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800456a:	f7fd f9cf 	bl	800190c <HAL_GetTick>
 800456e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004570:	e008      	b.n	8004584 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004572:	f7fd f9cb 	bl	800190c <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e086      	b.n	8004692 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004584:	4b45      	ldr	r3, [pc, #276]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f0      	bne.n	8004572 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004590:	4b42      	ldr	r3, [pc, #264]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	051b      	lsls	r3, r3, #20
 800459e:	493f      	ldr	r1, [pc, #252]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	628b      	str	r3, [r1, #40]	; 0x28
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	025b      	lsls	r3, r3, #9
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	3b01      	subs	r3, #1
 80045c0:	041b      	lsls	r3, r3, #16
 80045c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	061b      	lsls	r3, r3, #24
 80045d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045d4:	4931      	ldr	r1, [pc, #196]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80045da:	4b30      	ldr	r3, [pc, #192]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	492d      	ldr	r1, [pc, #180]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80045ec:	4b2b      	ldr	r3, [pc, #172]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	4928      	ldr	r1, [pc, #160]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80045fe:	4b27      	ldr	r3, [pc, #156]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	4a26      	ldr	r2, [pc, #152]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 8004604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004608:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800460a:	4b24      	ldr	r3, [pc, #144]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 800460c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800460e:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <RCCEx_PLL3_Config+0x160>)
 8004610:	4013      	ands	r3, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	69d2      	ldr	r2, [r2, #28]
 8004616:	00d2      	lsls	r2, r2, #3
 8004618:	4920      	ldr	r1, [pc, #128]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 800461a:	4313      	orrs	r3, r2
 800461c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800461e:	4b1f      	ldr	r3, [pc, #124]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	4a1e      	ldr	r2, [pc, #120]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 8004624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004628:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d106      	bne.n	800463e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004630:	4b1a      	ldr	r3, [pc, #104]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	4a19      	ldr	r2, [pc, #100]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 8004636:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800463a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800463c:	e00f      	b.n	800465e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d106      	bne.n	8004652 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004644:	4b15      	ldr	r3, [pc, #84]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	4a14      	ldr	r2, [pc, #80]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 800464a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800464e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004650:	e005      	b.n	800465e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004652:	4b12      	ldr	r3, [pc, #72]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	4a11      	ldr	r2, [pc, #68]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 8004658:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800465c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800465e:	4b0f      	ldr	r3, [pc, #60]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a0e      	ldr	r2, [pc, #56]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 8004664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800466a:	f7fd f94f 	bl	800190c <HAL_GetTick>
 800466e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004670:	e008      	b.n	8004684 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004672:	f7fd f94b 	bl	800190c <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e006      	b.n	8004692 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004684:	4b05      	ldr	r3, [pc, #20]	; (800469c <RCCEx_PLL3_Config+0x15c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0f0      	beq.n	8004672 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004690:	7bfb      	ldrb	r3, [r7, #15]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	58024400 	.word	0x58024400
 80046a0:	ffff0007 	.word	0xffff0007

080046a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e049      	b.n	800474a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f841 	bl	8004752 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3304      	adds	r3, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	4610      	mov	r0, r2
 80046e4:	f000 f9f8 	bl	8004ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b01      	cmp	r3, #1
 800477a:	d001      	beq.n	8004780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e04f      	b.n	8004820 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a23      	ldr	r2, [pc, #140]	; (800482c <HAL_TIM_Base_Start_IT+0xc4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d01d      	beq.n	80047de <HAL_TIM_Base_Start_IT+0x76>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047aa:	d018      	beq.n	80047de <HAL_TIM_Base_Start_IT+0x76>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <HAL_TIM_Base_Start_IT+0xc8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <HAL_TIM_Base_Start_IT+0x76>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1e      	ldr	r2, [pc, #120]	; (8004834 <HAL_TIM_Base_Start_IT+0xcc>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00e      	beq.n	80047de <HAL_TIM_Base_Start_IT+0x76>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <HAL_TIM_Base_Start_IT+0xd0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d009      	beq.n	80047de <HAL_TIM_Base_Start_IT+0x76>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1b      	ldr	r2, [pc, #108]	; (800483c <HAL_TIM_Base_Start_IT+0xd4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d004      	beq.n	80047de <HAL_TIM_Base_Start_IT+0x76>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a19      	ldr	r2, [pc, #100]	; (8004840 <HAL_TIM_Base_Start_IT+0xd8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d115      	bne.n	800480a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	4b17      	ldr	r3, [pc, #92]	; (8004844 <HAL_TIM_Base_Start_IT+0xdc>)
 80047e6:	4013      	ands	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b06      	cmp	r3, #6
 80047ee:	d015      	beq.n	800481c <HAL_TIM_Base_Start_IT+0xb4>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f6:	d011      	beq.n	800481c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004808:	e008      	b.n	800481c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e000      	b.n	800481e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	40010000 	.word	0x40010000
 8004830:	40000400 	.word	0x40000400
 8004834:	40000800 	.word	0x40000800
 8004838:	40000c00 	.word	0x40000c00
 800483c:	40010400 	.word	0x40010400
 8004840:	40001800 	.word	0x40001800
 8004844:	00010007 	.word	0x00010007

08004848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b02      	cmp	r3, #2
 800485c:	d122      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b02      	cmp	r3, #2
 800486a:	d11b      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0202 	mvn.w	r2, #2
 8004874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f905 	bl	8004a9a <HAL_TIM_IC_CaptureCallback>
 8004890:	e005      	b.n	800489e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f8f7 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f908 	bl	8004aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d122      	bne.n	80048f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d11b      	bne.n	80048f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0204 	mvn.w	r2, #4
 80048c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f8db 	bl	8004a9a <HAL_TIM_IC_CaptureCallback>
 80048e4:	e005      	b.n	80048f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f8cd 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f8de 	bl	8004aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b08      	cmp	r3, #8
 8004904:	d122      	bne.n	800494c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b08      	cmp	r3, #8
 8004912:	d11b      	bne.n	800494c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0208 	mvn.w	r2, #8
 800491c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2204      	movs	r2, #4
 8004922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f8b1 	bl	8004a9a <HAL_TIM_IC_CaptureCallback>
 8004938:	e005      	b.n	8004946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f8a3 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f8b4 	bl	8004aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b10      	cmp	r3, #16
 8004958:	d122      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b10      	cmp	r3, #16
 8004966:	d11b      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0210 	mvn.w	r2, #16
 8004970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2208      	movs	r2, #8
 8004976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f887 	bl	8004a9a <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f879 	bl	8004a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f88a 	bl	8004aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d10e      	bne.n	80049cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d107      	bne.n	80049cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0201 	mvn.w	r2, #1
 80049c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fc fc78 	bl	80012bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b80      	cmp	r3, #128	; 0x80
 80049d8:	d10e      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e4:	2b80      	cmp	r3, #128	; 0x80
 80049e6:	d107      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f914 	bl	8004c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a06:	d10e      	bne.n	8004a26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a12:	2b80      	cmp	r3, #128	; 0x80
 8004a14:	d107      	bne.n	8004a26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f907 	bl	8004c34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a30:	2b40      	cmp	r3, #64	; 0x40
 8004a32:	d10e      	bne.n	8004a52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d107      	bne.n	8004a52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f838 	bl	8004ac2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f003 0320 	and.w	r3, r3, #32
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d10e      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	d107      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f06f 0220 	mvn.w	r2, #32
 8004a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f8c7 	bl	8004c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
	...

08004ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a40      	ldr	r2, [pc, #256]	; (8004bec <TIM_Base_SetConfig+0x114>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d013      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af6:	d00f      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a3d      	ldr	r2, [pc, #244]	; (8004bf0 <TIM_Base_SetConfig+0x118>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00b      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a3c      	ldr	r2, [pc, #240]	; (8004bf4 <TIM_Base_SetConfig+0x11c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d007      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a3b      	ldr	r2, [pc, #236]	; (8004bf8 <TIM_Base_SetConfig+0x120>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d003      	beq.n	8004b18 <TIM_Base_SetConfig+0x40>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a3a      	ldr	r2, [pc, #232]	; (8004bfc <TIM_Base_SetConfig+0x124>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d108      	bne.n	8004b2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a2f      	ldr	r2, [pc, #188]	; (8004bec <TIM_Base_SetConfig+0x114>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d01f      	beq.n	8004b72 <TIM_Base_SetConfig+0x9a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b38:	d01b      	beq.n	8004b72 <TIM_Base_SetConfig+0x9a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a2c      	ldr	r2, [pc, #176]	; (8004bf0 <TIM_Base_SetConfig+0x118>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d017      	beq.n	8004b72 <TIM_Base_SetConfig+0x9a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a2b      	ldr	r2, [pc, #172]	; (8004bf4 <TIM_Base_SetConfig+0x11c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d013      	beq.n	8004b72 <TIM_Base_SetConfig+0x9a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a2a      	ldr	r2, [pc, #168]	; (8004bf8 <TIM_Base_SetConfig+0x120>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d00f      	beq.n	8004b72 <TIM_Base_SetConfig+0x9a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a29      	ldr	r2, [pc, #164]	; (8004bfc <TIM_Base_SetConfig+0x124>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00b      	beq.n	8004b72 <TIM_Base_SetConfig+0x9a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a28      	ldr	r2, [pc, #160]	; (8004c00 <TIM_Base_SetConfig+0x128>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d007      	beq.n	8004b72 <TIM_Base_SetConfig+0x9a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a27      	ldr	r2, [pc, #156]	; (8004c04 <TIM_Base_SetConfig+0x12c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d003      	beq.n	8004b72 <TIM_Base_SetConfig+0x9a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a26      	ldr	r2, [pc, #152]	; (8004c08 <TIM_Base_SetConfig+0x130>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d108      	bne.n	8004b84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a10      	ldr	r2, [pc, #64]	; (8004bec <TIM_Base_SetConfig+0x114>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00f      	beq.n	8004bd0 <TIM_Base_SetConfig+0xf8>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a12      	ldr	r2, [pc, #72]	; (8004bfc <TIM_Base_SetConfig+0x124>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00b      	beq.n	8004bd0 <TIM_Base_SetConfig+0xf8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a11      	ldr	r2, [pc, #68]	; (8004c00 <TIM_Base_SetConfig+0x128>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d007      	beq.n	8004bd0 <TIM_Base_SetConfig+0xf8>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a10      	ldr	r2, [pc, #64]	; (8004c04 <TIM_Base_SetConfig+0x12c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_Base_SetConfig+0xf8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a0f      	ldr	r2, [pc, #60]	; (8004c08 <TIM_Base_SetConfig+0x130>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d103      	bne.n	8004bd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	615a      	str	r2, [r3, #20]
}
 8004bde:	bf00      	nop
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40000c00 	.word	0x40000c00
 8004bfc:	40010400 	.word	0x40010400
 8004c00:	40014000 	.word	0x40014000
 8004c04:	40014400 	.word	0x40014400
 8004c08:	40014800 	.word	0x40014800

08004c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e042      	b.n	8004ce0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d106      	bne.n	8004c72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7fc fb37 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2224      	movs	r2, #36	; 0x24
 8004c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0201 	bic.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f8c2 	bl	8004e14 <UART_SetConfig>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e022      	b.n	8004ce0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fe20 	bl	80058e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fea7 	bl	8005a2c <UART_CheckIdleState>
 8004cde:	4603      	mov	r3, r0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	; 0x28
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	f040 8083 	bne.w	8004e0a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_UART_Transmit+0x28>
 8004d0a:	88fb      	ldrh	r3, [r7, #6]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e07b      	b.n	8004e0c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_UART_Transmit+0x3a>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e074      	b.n	8004e0c <HAL_UART_Transmit+0x124>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2221      	movs	r2, #33	; 0x21
 8004d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d3a:	f7fc fde7 	bl	800190c <HAL_GetTick>
 8004d3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	88fa      	ldrh	r2, [r7, #6]
 8004d44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	88fa      	ldrh	r2, [r7, #6]
 8004d4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d58:	d108      	bne.n	8004d6c <HAL_UART_Transmit+0x84>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d104      	bne.n	8004d6c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	61bb      	str	r3, [r7, #24]
 8004d6a:	e003      	b.n	8004d74 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004d7c:	e02c      	b.n	8004dd8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2200      	movs	r2, #0
 8004d86:	2180      	movs	r1, #128	; 0x80
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 fe9a 	bl	8005ac2 <UART_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e039      	b.n	8004e0c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10b      	bne.n	8004db6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	3302      	adds	r3, #2
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	e007      	b.n	8004dc6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	781a      	ldrb	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1cc      	bne.n	8004d7e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2200      	movs	r2, #0
 8004dec:	2140      	movs	r1, #64	; 0x40
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 fe67 	bl	8005ac2 <UART_WaitOnFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e006      	b.n	8004e0c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	e000      	b.n	8004e0c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004e0a:	2302      	movs	r3, #2
  }
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e18:	b092      	sub	sp, #72	; 0x48
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4bbe      	ldr	r3, [pc, #760]	; (800513c <UART_SetConfig+0x328>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4ab3      	ldr	r2, [pc, #716]	; (8005140 <UART_SetConfig+0x32c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d004      	beq.n	8004e80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	4baf      	ldr	r3, [pc, #700]	; (8005144 <UART_SetConfig+0x330>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	6812      	ldr	r2, [r2, #0]
 8004e8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e90:	430b      	orrs	r3, r1
 8004e92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	f023 010f 	bic.w	r1, r3, #15
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4aa6      	ldr	r2, [pc, #664]	; (8005148 <UART_SetConfig+0x334>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d177      	bne.n	8004fa4 <UART_SetConfig+0x190>
 8004eb4:	4ba5      	ldr	r3, [pc, #660]	; (800514c <UART_SetConfig+0x338>)
 8004eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ebc:	2b28      	cmp	r3, #40	; 0x28
 8004ebe:	d86d      	bhi.n	8004f9c <UART_SetConfig+0x188>
 8004ec0:	a201      	add	r2, pc, #4	; (adr r2, 8004ec8 <UART_SetConfig+0xb4>)
 8004ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec6:	bf00      	nop
 8004ec8:	08004f6d 	.word	0x08004f6d
 8004ecc:	08004f9d 	.word	0x08004f9d
 8004ed0:	08004f9d 	.word	0x08004f9d
 8004ed4:	08004f9d 	.word	0x08004f9d
 8004ed8:	08004f9d 	.word	0x08004f9d
 8004edc:	08004f9d 	.word	0x08004f9d
 8004ee0:	08004f9d 	.word	0x08004f9d
 8004ee4:	08004f9d 	.word	0x08004f9d
 8004ee8:	08004f75 	.word	0x08004f75
 8004eec:	08004f9d 	.word	0x08004f9d
 8004ef0:	08004f9d 	.word	0x08004f9d
 8004ef4:	08004f9d 	.word	0x08004f9d
 8004ef8:	08004f9d 	.word	0x08004f9d
 8004efc:	08004f9d 	.word	0x08004f9d
 8004f00:	08004f9d 	.word	0x08004f9d
 8004f04:	08004f9d 	.word	0x08004f9d
 8004f08:	08004f7d 	.word	0x08004f7d
 8004f0c:	08004f9d 	.word	0x08004f9d
 8004f10:	08004f9d 	.word	0x08004f9d
 8004f14:	08004f9d 	.word	0x08004f9d
 8004f18:	08004f9d 	.word	0x08004f9d
 8004f1c:	08004f9d 	.word	0x08004f9d
 8004f20:	08004f9d 	.word	0x08004f9d
 8004f24:	08004f9d 	.word	0x08004f9d
 8004f28:	08004f85 	.word	0x08004f85
 8004f2c:	08004f9d 	.word	0x08004f9d
 8004f30:	08004f9d 	.word	0x08004f9d
 8004f34:	08004f9d 	.word	0x08004f9d
 8004f38:	08004f9d 	.word	0x08004f9d
 8004f3c:	08004f9d 	.word	0x08004f9d
 8004f40:	08004f9d 	.word	0x08004f9d
 8004f44:	08004f9d 	.word	0x08004f9d
 8004f48:	08004f8d 	.word	0x08004f8d
 8004f4c:	08004f9d 	.word	0x08004f9d
 8004f50:	08004f9d 	.word	0x08004f9d
 8004f54:	08004f9d 	.word	0x08004f9d
 8004f58:	08004f9d 	.word	0x08004f9d
 8004f5c:	08004f9d 	.word	0x08004f9d
 8004f60:	08004f9d 	.word	0x08004f9d
 8004f64:	08004f9d 	.word	0x08004f9d
 8004f68:	08004f95 	.word	0x08004f95
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f72:	e222      	b.n	80053ba <UART_SetConfig+0x5a6>
 8004f74:	2304      	movs	r3, #4
 8004f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f7a:	e21e      	b.n	80053ba <UART_SetConfig+0x5a6>
 8004f7c:	2308      	movs	r3, #8
 8004f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f82:	e21a      	b.n	80053ba <UART_SetConfig+0x5a6>
 8004f84:	2310      	movs	r3, #16
 8004f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f8a:	e216      	b.n	80053ba <UART_SetConfig+0x5a6>
 8004f8c:	2320      	movs	r3, #32
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f92:	e212      	b.n	80053ba <UART_SetConfig+0x5a6>
 8004f94:	2340      	movs	r3, #64	; 0x40
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9a:	e20e      	b.n	80053ba <UART_SetConfig+0x5a6>
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa2:	e20a      	b.n	80053ba <UART_SetConfig+0x5a6>
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a69      	ldr	r2, [pc, #420]	; (8005150 <UART_SetConfig+0x33c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d130      	bne.n	8005010 <UART_SetConfig+0x1fc>
 8004fae:	4b67      	ldr	r3, [pc, #412]	; (800514c <UART_SetConfig+0x338>)
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	2b05      	cmp	r3, #5
 8004fb8:	d826      	bhi.n	8005008 <UART_SetConfig+0x1f4>
 8004fba:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <UART_SetConfig+0x1ac>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08004fd9 	.word	0x08004fd9
 8004fc4:	08004fe1 	.word	0x08004fe1
 8004fc8:	08004fe9 	.word	0x08004fe9
 8004fcc:	08004ff1 	.word	0x08004ff1
 8004fd0:	08004ff9 	.word	0x08004ff9
 8004fd4:	08005001 	.word	0x08005001
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fde:	e1ec      	b.n	80053ba <UART_SetConfig+0x5a6>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fe6:	e1e8      	b.n	80053ba <UART_SetConfig+0x5a6>
 8004fe8:	2308      	movs	r3, #8
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fee:	e1e4      	b.n	80053ba <UART_SetConfig+0x5a6>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ff6:	e1e0      	b.n	80053ba <UART_SetConfig+0x5a6>
 8004ff8:	2320      	movs	r3, #32
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ffe:	e1dc      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005000:	2340      	movs	r3, #64	; 0x40
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005006:	e1d8      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005008:	2380      	movs	r3, #128	; 0x80
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500e:	e1d4      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a4f      	ldr	r2, [pc, #316]	; (8005154 <UART_SetConfig+0x340>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d130      	bne.n	800507c <UART_SetConfig+0x268>
 800501a:	4b4c      	ldr	r3, [pc, #304]	; (800514c <UART_SetConfig+0x338>)
 800501c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	2b05      	cmp	r3, #5
 8005024:	d826      	bhi.n	8005074 <UART_SetConfig+0x260>
 8005026:	a201      	add	r2, pc, #4	; (adr r2, 800502c <UART_SetConfig+0x218>)
 8005028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502c:	08005045 	.word	0x08005045
 8005030:	0800504d 	.word	0x0800504d
 8005034:	08005055 	.word	0x08005055
 8005038:	0800505d 	.word	0x0800505d
 800503c:	08005065 	.word	0x08005065
 8005040:	0800506d 	.word	0x0800506d
 8005044:	2300      	movs	r3, #0
 8005046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800504a:	e1b6      	b.n	80053ba <UART_SetConfig+0x5a6>
 800504c:	2304      	movs	r3, #4
 800504e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005052:	e1b2      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005054:	2308      	movs	r3, #8
 8005056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800505a:	e1ae      	b.n	80053ba <UART_SetConfig+0x5a6>
 800505c:	2310      	movs	r3, #16
 800505e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005062:	e1aa      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005064:	2320      	movs	r3, #32
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800506a:	e1a6      	b.n	80053ba <UART_SetConfig+0x5a6>
 800506c:	2340      	movs	r3, #64	; 0x40
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005072:	e1a2      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005074:	2380      	movs	r3, #128	; 0x80
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507a:	e19e      	b.n	80053ba <UART_SetConfig+0x5a6>
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a35      	ldr	r2, [pc, #212]	; (8005158 <UART_SetConfig+0x344>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d130      	bne.n	80050e8 <UART_SetConfig+0x2d4>
 8005086:	4b31      	ldr	r3, [pc, #196]	; (800514c <UART_SetConfig+0x338>)
 8005088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	2b05      	cmp	r3, #5
 8005090:	d826      	bhi.n	80050e0 <UART_SetConfig+0x2cc>
 8005092:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <UART_SetConfig+0x284>)
 8005094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005098:	080050b1 	.word	0x080050b1
 800509c:	080050b9 	.word	0x080050b9
 80050a0:	080050c1 	.word	0x080050c1
 80050a4:	080050c9 	.word	0x080050c9
 80050a8:	080050d1 	.word	0x080050d1
 80050ac:	080050d9 	.word	0x080050d9
 80050b0:	2300      	movs	r3, #0
 80050b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b6:	e180      	b.n	80053ba <UART_SetConfig+0x5a6>
 80050b8:	2304      	movs	r3, #4
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050be:	e17c      	b.n	80053ba <UART_SetConfig+0x5a6>
 80050c0:	2308      	movs	r3, #8
 80050c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050c6:	e178      	b.n	80053ba <UART_SetConfig+0x5a6>
 80050c8:	2310      	movs	r3, #16
 80050ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ce:	e174      	b.n	80053ba <UART_SetConfig+0x5a6>
 80050d0:	2320      	movs	r3, #32
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050d6:	e170      	b.n	80053ba <UART_SetConfig+0x5a6>
 80050d8:	2340      	movs	r3, #64	; 0x40
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050de:	e16c      	b.n	80053ba <UART_SetConfig+0x5a6>
 80050e0:	2380      	movs	r3, #128	; 0x80
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e6:	e168      	b.n	80053ba <UART_SetConfig+0x5a6>
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1b      	ldr	r2, [pc, #108]	; (800515c <UART_SetConfig+0x348>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d142      	bne.n	8005178 <UART_SetConfig+0x364>
 80050f2:	4b16      	ldr	r3, [pc, #88]	; (800514c <UART_SetConfig+0x338>)
 80050f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	2b05      	cmp	r3, #5
 80050fc:	d838      	bhi.n	8005170 <UART_SetConfig+0x35c>
 80050fe:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <UART_SetConfig+0x2f0>)
 8005100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005104:	0800511d 	.word	0x0800511d
 8005108:	08005125 	.word	0x08005125
 800510c:	0800512d 	.word	0x0800512d
 8005110:	08005135 	.word	0x08005135
 8005114:	08005161 	.word	0x08005161
 8005118:	08005169 	.word	0x08005169
 800511c:	2300      	movs	r3, #0
 800511e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005122:	e14a      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005124:	2304      	movs	r3, #4
 8005126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800512a:	e146      	b.n	80053ba <UART_SetConfig+0x5a6>
 800512c:	2308      	movs	r3, #8
 800512e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005132:	e142      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005134:	2310      	movs	r3, #16
 8005136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800513a:	e13e      	b.n	80053ba <UART_SetConfig+0x5a6>
 800513c:	cfff69f3 	.word	0xcfff69f3
 8005140:	58000c00 	.word	0x58000c00
 8005144:	11fff4ff 	.word	0x11fff4ff
 8005148:	40011000 	.word	0x40011000
 800514c:	58024400 	.word	0x58024400
 8005150:	40004400 	.word	0x40004400
 8005154:	40004800 	.word	0x40004800
 8005158:	40004c00 	.word	0x40004c00
 800515c:	40005000 	.word	0x40005000
 8005160:	2320      	movs	r3, #32
 8005162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005166:	e128      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005168:	2340      	movs	r3, #64	; 0x40
 800516a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516e:	e124      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005176:	e120      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4acb      	ldr	r2, [pc, #812]	; (80054ac <UART_SetConfig+0x698>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d176      	bne.n	8005270 <UART_SetConfig+0x45c>
 8005182:	4bcb      	ldr	r3, [pc, #812]	; (80054b0 <UART_SetConfig+0x69c>)
 8005184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005186:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800518a:	2b28      	cmp	r3, #40	; 0x28
 800518c:	d86c      	bhi.n	8005268 <UART_SetConfig+0x454>
 800518e:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <UART_SetConfig+0x380>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	08005239 	.word	0x08005239
 8005198:	08005269 	.word	0x08005269
 800519c:	08005269 	.word	0x08005269
 80051a0:	08005269 	.word	0x08005269
 80051a4:	08005269 	.word	0x08005269
 80051a8:	08005269 	.word	0x08005269
 80051ac:	08005269 	.word	0x08005269
 80051b0:	08005269 	.word	0x08005269
 80051b4:	08005241 	.word	0x08005241
 80051b8:	08005269 	.word	0x08005269
 80051bc:	08005269 	.word	0x08005269
 80051c0:	08005269 	.word	0x08005269
 80051c4:	08005269 	.word	0x08005269
 80051c8:	08005269 	.word	0x08005269
 80051cc:	08005269 	.word	0x08005269
 80051d0:	08005269 	.word	0x08005269
 80051d4:	08005249 	.word	0x08005249
 80051d8:	08005269 	.word	0x08005269
 80051dc:	08005269 	.word	0x08005269
 80051e0:	08005269 	.word	0x08005269
 80051e4:	08005269 	.word	0x08005269
 80051e8:	08005269 	.word	0x08005269
 80051ec:	08005269 	.word	0x08005269
 80051f0:	08005269 	.word	0x08005269
 80051f4:	08005251 	.word	0x08005251
 80051f8:	08005269 	.word	0x08005269
 80051fc:	08005269 	.word	0x08005269
 8005200:	08005269 	.word	0x08005269
 8005204:	08005269 	.word	0x08005269
 8005208:	08005269 	.word	0x08005269
 800520c:	08005269 	.word	0x08005269
 8005210:	08005269 	.word	0x08005269
 8005214:	08005259 	.word	0x08005259
 8005218:	08005269 	.word	0x08005269
 800521c:	08005269 	.word	0x08005269
 8005220:	08005269 	.word	0x08005269
 8005224:	08005269 	.word	0x08005269
 8005228:	08005269 	.word	0x08005269
 800522c:	08005269 	.word	0x08005269
 8005230:	08005269 	.word	0x08005269
 8005234:	08005261 	.word	0x08005261
 8005238:	2301      	movs	r3, #1
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523e:	e0bc      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005240:	2304      	movs	r3, #4
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005246:	e0b8      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005248:	2308      	movs	r3, #8
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524e:	e0b4      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005250:	2310      	movs	r3, #16
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005256:	e0b0      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005258:	2320      	movs	r3, #32
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525e:	e0ac      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005260:	2340      	movs	r3, #64	; 0x40
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005266:	e0a8      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005268:	2380      	movs	r3, #128	; 0x80
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800526e:	e0a4      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a8f      	ldr	r2, [pc, #572]	; (80054b4 <UART_SetConfig+0x6a0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d130      	bne.n	80052dc <UART_SetConfig+0x4c8>
 800527a:	4b8d      	ldr	r3, [pc, #564]	; (80054b0 <UART_SetConfig+0x69c>)
 800527c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	2b05      	cmp	r3, #5
 8005284:	d826      	bhi.n	80052d4 <UART_SetConfig+0x4c0>
 8005286:	a201      	add	r2, pc, #4	; (adr r2, 800528c <UART_SetConfig+0x478>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	080052a5 	.word	0x080052a5
 8005290:	080052ad 	.word	0x080052ad
 8005294:	080052b5 	.word	0x080052b5
 8005298:	080052bd 	.word	0x080052bd
 800529c:	080052c5 	.word	0x080052c5
 80052a0:	080052cd 	.word	0x080052cd
 80052a4:	2300      	movs	r3, #0
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052aa:	e086      	b.n	80053ba <UART_SetConfig+0x5a6>
 80052ac:	2304      	movs	r3, #4
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b2:	e082      	b.n	80053ba <UART_SetConfig+0x5a6>
 80052b4:	2308      	movs	r3, #8
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ba:	e07e      	b.n	80053ba <UART_SetConfig+0x5a6>
 80052bc:	2310      	movs	r3, #16
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c2:	e07a      	b.n	80053ba <UART_SetConfig+0x5a6>
 80052c4:	2320      	movs	r3, #32
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ca:	e076      	b.n	80053ba <UART_SetConfig+0x5a6>
 80052cc:	2340      	movs	r3, #64	; 0x40
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d2:	e072      	b.n	80053ba <UART_SetConfig+0x5a6>
 80052d4:	2380      	movs	r3, #128	; 0x80
 80052d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052da:	e06e      	b.n	80053ba <UART_SetConfig+0x5a6>
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a75      	ldr	r2, [pc, #468]	; (80054b8 <UART_SetConfig+0x6a4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d130      	bne.n	8005348 <UART_SetConfig+0x534>
 80052e6:	4b72      	ldr	r3, [pc, #456]	; (80054b0 <UART_SetConfig+0x69c>)
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	2b05      	cmp	r3, #5
 80052f0:	d826      	bhi.n	8005340 <UART_SetConfig+0x52c>
 80052f2:	a201      	add	r2, pc, #4	; (adr r2, 80052f8 <UART_SetConfig+0x4e4>)
 80052f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f8:	08005311 	.word	0x08005311
 80052fc:	08005319 	.word	0x08005319
 8005300:	08005321 	.word	0x08005321
 8005304:	08005329 	.word	0x08005329
 8005308:	08005331 	.word	0x08005331
 800530c:	08005339 	.word	0x08005339
 8005310:	2300      	movs	r3, #0
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005316:	e050      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005318:	2304      	movs	r3, #4
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531e:	e04c      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005320:	2308      	movs	r3, #8
 8005322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005326:	e048      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005328:	2310      	movs	r3, #16
 800532a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800532e:	e044      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005330:	2320      	movs	r3, #32
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005336:	e040      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005338:	2340      	movs	r3, #64	; 0x40
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800533e:	e03c      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005346:	e038      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a5b      	ldr	r2, [pc, #364]	; (80054bc <UART_SetConfig+0x6a8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d130      	bne.n	80053b4 <UART_SetConfig+0x5a0>
 8005352:	4b57      	ldr	r3, [pc, #348]	; (80054b0 <UART_SetConfig+0x69c>)
 8005354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	2b05      	cmp	r3, #5
 800535c:	d826      	bhi.n	80053ac <UART_SetConfig+0x598>
 800535e:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <UART_SetConfig+0x550>)
 8005360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005364:	0800537d 	.word	0x0800537d
 8005368:	08005385 	.word	0x08005385
 800536c:	0800538d 	.word	0x0800538d
 8005370:	08005395 	.word	0x08005395
 8005374:	0800539d 	.word	0x0800539d
 8005378:	080053a5 	.word	0x080053a5
 800537c:	2302      	movs	r3, #2
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005382:	e01a      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005384:	2304      	movs	r3, #4
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538a:	e016      	b.n	80053ba <UART_SetConfig+0x5a6>
 800538c:	2308      	movs	r3, #8
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005392:	e012      	b.n	80053ba <UART_SetConfig+0x5a6>
 8005394:	2310      	movs	r3, #16
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800539a:	e00e      	b.n	80053ba <UART_SetConfig+0x5a6>
 800539c:	2320      	movs	r3, #32
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053a2:	e00a      	b.n	80053ba <UART_SetConfig+0x5a6>
 80053a4:	2340      	movs	r3, #64	; 0x40
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053aa:	e006      	b.n	80053ba <UART_SetConfig+0x5a6>
 80053ac:	2380      	movs	r3, #128	; 0x80
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b2:	e002      	b.n	80053ba <UART_SetConfig+0x5a6>
 80053b4:	2380      	movs	r3, #128	; 0x80
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a3f      	ldr	r2, [pc, #252]	; (80054bc <UART_SetConfig+0x6a8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	f040 80f8 	bne.w	80055b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	dc46      	bgt.n	800545c <UART_SetConfig+0x648>
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	f2c0 8082 	blt.w	80054d8 <UART_SetConfig+0x6c4>
 80053d4:	3b02      	subs	r3, #2
 80053d6:	2b1e      	cmp	r3, #30
 80053d8:	d87e      	bhi.n	80054d8 <UART_SetConfig+0x6c4>
 80053da:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <UART_SetConfig+0x5cc>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	08005463 	.word	0x08005463
 80053e4:	080054d9 	.word	0x080054d9
 80053e8:	0800546b 	.word	0x0800546b
 80053ec:	080054d9 	.word	0x080054d9
 80053f0:	080054d9 	.word	0x080054d9
 80053f4:	080054d9 	.word	0x080054d9
 80053f8:	0800547b 	.word	0x0800547b
 80053fc:	080054d9 	.word	0x080054d9
 8005400:	080054d9 	.word	0x080054d9
 8005404:	080054d9 	.word	0x080054d9
 8005408:	080054d9 	.word	0x080054d9
 800540c:	080054d9 	.word	0x080054d9
 8005410:	080054d9 	.word	0x080054d9
 8005414:	080054d9 	.word	0x080054d9
 8005418:	0800548b 	.word	0x0800548b
 800541c:	080054d9 	.word	0x080054d9
 8005420:	080054d9 	.word	0x080054d9
 8005424:	080054d9 	.word	0x080054d9
 8005428:	080054d9 	.word	0x080054d9
 800542c:	080054d9 	.word	0x080054d9
 8005430:	080054d9 	.word	0x080054d9
 8005434:	080054d9 	.word	0x080054d9
 8005438:	080054d9 	.word	0x080054d9
 800543c:	080054d9 	.word	0x080054d9
 8005440:	080054d9 	.word	0x080054d9
 8005444:	080054d9 	.word	0x080054d9
 8005448:	080054d9 	.word	0x080054d9
 800544c:	080054d9 	.word	0x080054d9
 8005450:	080054d9 	.word	0x080054d9
 8005454:	080054d9 	.word	0x080054d9
 8005458:	080054cb 	.word	0x080054cb
 800545c:	2b40      	cmp	r3, #64	; 0x40
 800545e:	d037      	beq.n	80054d0 <UART_SetConfig+0x6bc>
 8005460:	e03a      	b.n	80054d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005462:	f7fe fcfd 	bl	8003e60 <HAL_RCCEx_GetD3PCLK1Freq>
 8005466:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005468:	e03c      	b.n	80054e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800546a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe fd0c 	bl	8003e8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005478:	e034      	b.n	80054e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800547a:	f107 0318 	add.w	r3, r7, #24
 800547e:	4618      	mov	r0, r3
 8005480:	f7fe fe58 	bl	8004134 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005488:	e02c      	b.n	80054e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800548a:	4b09      	ldr	r3, [pc, #36]	; (80054b0 <UART_SetConfig+0x69c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d016      	beq.n	80054c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005496:	4b06      	ldr	r3, [pc, #24]	; (80054b0 <UART_SetConfig+0x69c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	08db      	lsrs	r3, r3, #3
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	4a07      	ldr	r2, [pc, #28]	; (80054c0 <UART_SetConfig+0x6ac>)
 80054a2:	fa22 f303 	lsr.w	r3, r2, r3
 80054a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054a8:	e01c      	b.n	80054e4 <UART_SetConfig+0x6d0>
 80054aa:	bf00      	nop
 80054ac:	40011400 	.word	0x40011400
 80054b0:	58024400 	.word	0x58024400
 80054b4:	40007800 	.word	0x40007800
 80054b8:	40007c00 	.word	0x40007c00
 80054bc:	58000c00 	.word	0x58000c00
 80054c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80054c4:	4b9e      	ldr	r3, [pc, #632]	; (8005740 <UART_SetConfig+0x92c>)
 80054c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054c8:	e00c      	b.n	80054e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054ca:	4b9e      	ldr	r3, [pc, #632]	; (8005744 <UART_SetConfig+0x930>)
 80054cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054ce:	e009      	b.n	80054e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054d6:	e005      	b.n	80054e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80054e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 81e0 	beq.w	80058ac <UART_SetConfig+0xa98>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	4a95      	ldr	r2, [pc, #596]	; (8005748 <UART_SetConfig+0x934>)
 80054f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054f6:	461a      	mov	r2, r3
 80054f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80054fe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	4613      	mov	r3, r2
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	4413      	add	r3, r2
 800550a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800550c:	429a      	cmp	r2, r3
 800550e:	d305      	bcc.n	800551c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005518:	429a      	cmp	r2, r3
 800551a:	d903      	bls.n	8005524 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005522:	e1c3      	b.n	80058ac <UART_SetConfig+0xa98>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005526:	2200      	movs	r2, #0
 8005528:	60bb      	str	r3, [r7, #8]
 800552a:	60fa      	str	r2, [r7, #12]
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	4a85      	ldr	r2, [pc, #532]	; (8005748 <UART_SetConfig+0x934>)
 8005532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005536:	b29b      	uxth	r3, r3
 8005538:	2200      	movs	r2, #0
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005542:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005546:	f7fb f9b3 	bl	80008b0 <__aeabi_uldivmod>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4610      	mov	r0, r2
 8005550:	4619      	mov	r1, r3
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	f04f 0300 	mov.w	r3, #0
 800555a:	020b      	lsls	r3, r1, #8
 800555c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005560:	0202      	lsls	r2, r0, #8
 8005562:	6979      	ldr	r1, [r7, #20]
 8005564:	6849      	ldr	r1, [r1, #4]
 8005566:	0849      	lsrs	r1, r1, #1
 8005568:	2000      	movs	r0, #0
 800556a:	460c      	mov	r4, r1
 800556c:	4605      	mov	r5, r0
 800556e:	eb12 0804 	adds.w	r8, r2, r4
 8005572:	eb43 0905 	adc.w	r9, r3, r5
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	469a      	mov	sl, r3
 800557e:	4693      	mov	fp, r2
 8005580:	4652      	mov	r2, sl
 8005582:	465b      	mov	r3, fp
 8005584:	4640      	mov	r0, r8
 8005586:	4649      	mov	r1, r9
 8005588:	f7fb f992 	bl	80008b0 <__aeabi_uldivmod>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4613      	mov	r3, r2
 8005592:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800559a:	d308      	bcc.n	80055ae <UART_SetConfig+0x79a>
 800559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a2:	d204      	bcs.n	80055ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055aa:	60da      	str	r2, [r3, #12]
 80055ac:	e17e      	b.n	80058ac <UART_SetConfig+0xa98>
        }
        else
        {
          ret = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80055b4:	e17a      	b.n	80058ac <UART_SetConfig+0xa98>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055be:	f040 80c7 	bne.w	8005750 <UART_SetConfig+0x93c>
  {
    switch (clocksource)
 80055c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055c6:	2b20      	cmp	r3, #32
 80055c8:	dc48      	bgt.n	800565c <UART_SetConfig+0x848>
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	db7b      	blt.n	80056c6 <UART_SetConfig+0x8b2>
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d879      	bhi.n	80056c6 <UART_SetConfig+0x8b2>
 80055d2:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <UART_SetConfig+0x7c4>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	08005663 	.word	0x08005663
 80055dc:	0800566b 	.word	0x0800566b
 80055e0:	080056c7 	.word	0x080056c7
 80055e4:	080056c7 	.word	0x080056c7
 80055e8:	08005673 	.word	0x08005673
 80055ec:	080056c7 	.word	0x080056c7
 80055f0:	080056c7 	.word	0x080056c7
 80055f4:	080056c7 	.word	0x080056c7
 80055f8:	08005683 	.word	0x08005683
 80055fc:	080056c7 	.word	0x080056c7
 8005600:	080056c7 	.word	0x080056c7
 8005604:	080056c7 	.word	0x080056c7
 8005608:	080056c7 	.word	0x080056c7
 800560c:	080056c7 	.word	0x080056c7
 8005610:	080056c7 	.word	0x080056c7
 8005614:	080056c7 	.word	0x080056c7
 8005618:	08005693 	.word	0x08005693
 800561c:	080056c7 	.word	0x080056c7
 8005620:	080056c7 	.word	0x080056c7
 8005624:	080056c7 	.word	0x080056c7
 8005628:	080056c7 	.word	0x080056c7
 800562c:	080056c7 	.word	0x080056c7
 8005630:	080056c7 	.word	0x080056c7
 8005634:	080056c7 	.word	0x080056c7
 8005638:	080056c7 	.word	0x080056c7
 800563c:	080056c7 	.word	0x080056c7
 8005640:	080056c7 	.word	0x080056c7
 8005644:	080056c7 	.word	0x080056c7
 8005648:	080056c7 	.word	0x080056c7
 800564c:	080056c7 	.word	0x080056c7
 8005650:	080056c7 	.word	0x080056c7
 8005654:	080056c7 	.word	0x080056c7
 8005658:	080056b9 	.word	0x080056b9
 800565c:	2b40      	cmp	r3, #64	; 0x40
 800565e:	d02e      	beq.n	80056be <UART_SetConfig+0x8aa>
 8005660:	e031      	b.n	80056c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005662:	f7fd fc21 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 8005666:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005668:	e033      	b.n	80056d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800566a:	f7fd fc33 	bl	8002ed4 <HAL_RCC_GetPCLK2Freq>
 800566e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005670:	e02f      	b.n	80056d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005676:	4618      	mov	r0, r3
 8005678:	f7fe fc08 	bl	8003e8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005680:	e027      	b.n	80056d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005682:	f107 0318 	add.w	r3, r7, #24
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe fd54 	bl	8004134 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005690:	e01f      	b.n	80056d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005692:	4b2e      	ldr	r3, [pc, #184]	; (800574c <UART_SetConfig+0x938>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b00      	cmp	r3, #0
 800569c:	d009      	beq.n	80056b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800569e:	4b2b      	ldr	r3, [pc, #172]	; (800574c <UART_SetConfig+0x938>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	08db      	lsrs	r3, r3, #3
 80056a4:	f003 0303 	and.w	r3, r3, #3
 80056a8:	4a25      	ldr	r2, [pc, #148]	; (8005740 <UART_SetConfig+0x92c>)
 80056aa:	fa22 f303 	lsr.w	r3, r2, r3
 80056ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056b0:	e00f      	b.n	80056d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80056b2:	4b23      	ldr	r3, [pc, #140]	; (8005740 <UART_SetConfig+0x92c>)
 80056b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056b6:	e00c      	b.n	80056d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056b8:	4b22      	ldr	r3, [pc, #136]	; (8005744 <UART_SetConfig+0x930>)
 80056ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056bc:	e009      	b.n	80056d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056c4:	e005      	b.n	80056d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80056d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 80e9 	beq.w	80058ac <UART_SetConfig+0xa98>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	4a1a      	ldr	r2, [pc, #104]	; (8005748 <UART_SetConfig+0x934>)
 80056e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056e4:	461a      	mov	r2, r3
 80056e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80056ec:	005a      	lsls	r2, r3, #1
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	085b      	lsrs	r3, r3, #1
 80056f4:	441a      	add	r2, r3
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fe:	b29b      	uxth	r3, r3
 8005700:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	2b0f      	cmp	r3, #15
 8005706:	d916      	bls.n	8005736 <UART_SetConfig+0x922>
 8005708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570e:	d212      	bcs.n	8005736 <UART_SetConfig+0x922>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005712:	b29b      	uxth	r3, r3
 8005714:	f023 030f 	bic.w	r3, r3, #15
 8005718:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800571a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571c:	085b      	lsrs	r3, r3, #1
 800571e:	b29b      	uxth	r3, r3
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	b29a      	uxth	r2, r3
 8005726:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005728:	4313      	orrs	r3, r2
 800572a:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005732:	60da      	str	r2, [r3, #12]
 8005734:	e0ba      	b.n	80058ac <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800573c:	e0b6      	b.n	80058ac <UART_SetConfig+0xa98>
 800573e:	bf00      	nop
 8005740:	03d09000 	.word	0x03d09000
 8005744:	003d0900 	.word	0x003d0900
 8005748:	0801665c 	.word	0x0801665c
 800574c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005750:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005754:	2b20      	cmp	r3, #32
 8005756:	dc49      	bgt.n	80057ec <UART_SetConfig+0x9d8>
 8005758:	2b00      	cmp	r3, #0
 800575a:	db7c      	blt.n	8005856 <UART_SetConfig+0xa42>
 800575c:	2b20      	cmp	r3, #32
 800575e:	d87a      	bhi.n	8005856 <UART_SetConfig+0xa42>
 8005760:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <UART_SetConfig+0x954>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	080057f3 	.word	0x080057f3
 800576c:	080057fb 	.word	0x080057fb
 8005770:	08005857 	.word	0x08005857
 8005774:	08005857 	.word	0x08005857
 8005778:	08005803 	.word	0x08005803
 800577c:	08005857 	.word	0x08005857
 8005780:	08005857 	.word	0x08005857
 8005784:	08005857 	.word	0x08005857
 8005788:	08005813 	.word	0x08005813
 800578c:	08005857 	.word	0x08005857
 8005790:	08005857 	.word	0x08005857
 8005794:	08005857 	.word	0x08005857
 8005798:	08005857 	.word	0x08005857
 800579c:	08005857 	.word	0x08005857
 80057a0:	08005857 	.word	0x08005857
 80057a4:	08005857 	.word	0x08005857
 80057a8:	08005823 	.word	0x08005823
 80057ac:	08005857 	.word	0x08005857
 80057b0:	08005857 	.word	0x08005857
 80057b4:	08005857 	.word	0x08005857
 80057b8:	08005857 	.word	0x08005857
 80057bc:	08005857 	.word	0x08005857
 80057c0:	08005857 	.word	0x08005857
 80057c4:	08005857 	.word	0x08005857
 80057c8:	08005857 	.word	0x08005857
 80057cc:	08005857 	.word	0x08005857
 80057d0:	08005857 	.word	0x08005857
 80057d4:	08005857 	.word	0x08005857
 80057d8:	08005857 	.word	0x08005857
 80057dc:	08005857 	.word	0x08005857
 80057e0:	08005857 	.word	0x08005857
 80057e4:	08005857 	.word	0x08005857
 80057e8:	08005849 	.word	0x08005849
 80057ec:	2b40      	cmp	r3, #64	; 0x40
 80057ee:	d02e      	beq.n	800584e <UART_SetConfig+0xa3a>
 80057f0:	e031      	b.n	8005856 <UART_SetConfig+0xa42>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057f2:	f7fd fb59 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 80057f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057f8:	e033      	b.n	8005862 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057fa:	f7fd fb6b 	bl	8002ed4 <HAL_RCC_GetPCLK2Freq>
 80057fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005800:	e02f      	b.n	8005862 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005806:	4618      	mov	r0, r3
 8005808:	f7fe fb40 	bl	8003e8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005810:	e027      	b.n	8005862 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005812:	f107 0318 	add.w	r3, r7, #24
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe fc8c 	bl	8004134 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005820:	e01f      	b.n	8005862 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005822:	4b2d      	ldr	r3, [pc, #180]	; (80058d8 <UART_SetConfig+0xac4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b00      	cmp	r3, #0
 800582c:	d009      	beq.n	8005842 <UART_SetConfig+0xa2e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800582e:	4b2a      	ldr	r3, [pc, #168]	; (80058d8 <UART_SetConfig+0xac4>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	08db      	lsrs	r3, r3, #3
 8005834:	f003 0303 	and.w	r3, r3, #3
 8005838:	4a28      	ldr	r2, [pc, #160]	; (80058dc <UART_SetConfig+0xac8>)
 800583a:	fa22 f303 	lsr.w	r3, r2, r3
 800583e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005840:	e00f      	b.n	8005862 <UART_SetConfig+0xa4e>
          pclk = (uint32_t) HSI_VALUE;
 8005842:	4b26      	ldr	r3, [pc, #152]	; (80058dc <UART_SetConfig+0xac8>)
 8005844:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005846:	e00c      	b.n	8005862 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005848:	4b25      	ldr	r3, [pc, #148]	; (80058e0 <UART_SetConfig+0xacc>)
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800584c:	e009      	b.n	8005862 <UART_SetConfig+0xa4e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800584e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005854:	e005      	b.n	8005862 <UART_SetConfig+0xa4e>
      default:
        pclk = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005860:	bf00      	nop
    }

    if (pclk != 0U)
 8005862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005864:	2b00      	cmp	r3, #0
 8005866:	d021      	beq.n	80058ac <UART_SetConfig+0xa98>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	4a1d      	ldr	r2, [pc, #116]	; (80058e4 <UART_SetConfig+0xad0>)
 800586e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005872:	461a      	mov	r2, r3
 8005874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005876:	fbb3 f2f2 	udiv	r2, r3, r2
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	441a      	add	r2, r3
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	fbb2 f3f3 	udiv	r3, r2, r3
 800588a:	b29b      	uxth	r3, r3
 800588c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	2b0f      	cmp	r3, #15
 8005892:	d908      	bls.n	80058a6 <UART_SetConfig+0xa92>
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800589a:	d204      	bcs.n	80058a6 <UART_SetConfig+0xa92>
      {
        huart->Instance->BRR = usartdiv;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058a2:	60da      	str	r2, [r3, #12]
 80058a4:	e002      	b.n	80058ac <UART_SetConfig+0xa98>
      }
      else
      {
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2200      	movs	r2, #0
 80058c0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2200      	movs	r2, #0
 80058c6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80058c8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3748      	adds	r7, #72	; 0x48
 80058d0:	46bd      	mov	sp, r7
 80058d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058d6:	bf00      	nop
 80058d8:	58024400 	.word	0x58024400
 80058dc:	03d09000 	.word	0x03d09000
 80058e0:	003d0900 	.word	0x003d0900
 80058e4:	0801665c 	.word	0x0801665c

080058e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01a      	beq.n	80059fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059e6:	d10a      	bne.n	80059fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	605a      	str	r2, [r3, #4]
  }
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a3c:	f7fb ff66 	bl	800190c <HAL_GetTick>
 8005a40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d10e      	bne.n	8005a6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f82f 	bl	8005ac2 <UART_WaitOnFlagUntilTimeout>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e025      	b.n	8005aba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d10e      	bne.n	8005a9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f819 	bl	8005ac2 <UART_WaitOnFlagUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e00f      	b.n	8005aba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	603b      	str	r3, [r7, #0]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad2:	e062      	b.n	8005b9a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ada:	d05e      	beq.n	8005b9a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005adc:	f7fb ff16 	bl	800190c <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d302      	bcc.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d11d      	bne.n	8005b2e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b00:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0201 	bic.w	r2, r2, #1
 8005b10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e045      	b.n	8005bba <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d02e      	beq.n	8005b9a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b4a:	d126      	bne.n	8005b9a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b64:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0201 	bic.w	r2, r2, #1
 8005b74:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e00f      	b.n	8005bba <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69da      	ldr	r2, [r3, #28]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	bf0c      	ite	eq
 8005baa:	2301      	moveq	r3, #1
 8005bac:	2300      	movne	r3, #0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	79fb      	ldrb	r3, [r7, #7]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d08d      	beq.n	8005ad4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b085      	sub	sp, #20
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	e027      	b.n	8005c28 <HAL_UARTEx_DisableFifoMode+0x66>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2224      	movs	r2, #36	; 0x24
 8005be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0201 	bic.w	r2, r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c06:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e02d      	b.n	8005ca8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2224      	movs	r2, #36	; 0x24
 8005c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0201 	bic.w	r2, r2, #1
 8005c72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f84f 	bl	8005d2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e02d      	b.n	8005d24 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2224      	movs	r2, #36	; 0x24
 8005cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f811 	bl	8005d2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d108      	bne.n	8005d4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d4c:	e031      	b.n	8005db2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d4e:	2310      	movs	r3, #16
 8005d50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d52:	2310      	movs	r3, #16
 8005d54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	0e5b      	lsrs	r3, r3, #25
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	f003 0307 	and.w	r3, r3, #7
 8005d64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	0f5b      	lsrs	r3, r3, #29
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d76:	7bbb      	ldrb	r3, [r7, #14]
 8005d78:	7b3a      	ldrb	r2, [r7, #12]
 8005d7a:	4911      	ldr	r1, [pc, #68]	; (8005dc0 <UARTEx_SetNbDataToProcess+0x94>)
 8005d7c:	5c8a      	ldrb	r2, [r1, r2]
 8005d7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d82:	7b3a      	ldrb	r2, [r7, #12]
 8005d84:	490f      	ldr	r1, [pc, #60]	; (8005dc4 <UARTEx_SetNbDataToProcess+0x98>)
 8005d86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d88:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	7b7a      	ldrb	r2, [r7, #13]
 8005d98:	4909      	ldr	r1, [pc, #36]	; (8005dc0 <UARTEx_SetNbDataToProcess+0x94>)
 8005d9a:	5c8a      	ldrb	r2, [r1, r2]
 8005d9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005da0:	7b7a      	ldrb	r2, [r7, #13]
 8005da2:	4908      	ldr	r1, [pc, #32]	; (8005dc4 <UARTEx_SetNbDataToProcess+0x98>)
 8005da4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005da6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	08016674 	.word	0x08016674
 8005dc4:	0801667c 	.word	0x0801667c

08005dc8 <_tx_block_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_allocate(TX_BLOCK_POOL *pool_ptr, VOID **block_ptr, ULONG wait_option)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b094      	sub	sp, #80	; 0x50
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005dda:	b672      	cpsid	i
    return(primask_value);
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
ULONG                       lower_tbu;
#endif


    /* Disable interrupts to get a block from the pool.  */
    TX_DISABLE
 8005dde:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Determine if there is an available block.  */
    if (pool_ptr -> tx_block_pool_available != ((UINT) 0))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d022      	beq.n	8005e2e <_tx_block_allocate+0x66>
    {

        /* Yes, a block is available.  Decrement the available count.  */
        pool_ptr -> tx_block_pool_available--;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	1e5a      	subs	r2, r3, #1
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	609a      	str	r2, [r3, #8]

        /* Pickup the current block pointer.  */
        work_ptr =  pool_ptr -> tx_block_pool_available_list;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Return the first available block to the caller.  */
        temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        return_ptr =  TX_INDIRECT_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	647b      	str	r3, [r7, #68]	; 0x44
        *return_ptr =  temp_ptr;
 8005e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e06:	601a      	str	r2, [r3, #0]

        /* Modify the available list to point at the next block in the pool. */
        next_block_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	62bb      	str	r3, [r7, #40]	; 0x28
        pool_ptr -> tx_block_pool_available_list =  *next_block_ptr;
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	611a      	str	r2, [r3, #16]

        /* Save the pool's address in the block for when it is released!  */
        temp_ptr =  TX_BLOCK_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	62fb      	str	r3, [r7, #44]	; 0x2c
        *next_block_ptr =  temp_ptr;
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e1c:	601a      	str	r2, [r3, #0]
        /* Store the address of the allocated block.  */
        *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_3_OFFSET)) =  (ULONG) *block_ptr;
#endif

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e24:	623b      	str	r3, [r7, #32]
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	f383 8810 	msr	PRIMASK, r3
}
 8005e2c:	e071      	b.n	8005f12 <_tx_block_allocate+0x14a>
    }
    else
    {

        /* Default the return pointer to NULL.  */
        return_ptr =   TX_INDIRECT_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	647b      	str	r3, [r7, #68]	; 0x44
        *return_ptr =  TX_NULL;
 8005e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d061      	beq.n	8005f02 <_tx_block_allocate+0x13a>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8005e3e:	4b37      	ldr	r3, [pc, #220]	; (8005f1c <_tx_block_allocate+0x154>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d007      	beq.n	8005e56 <_tx_block_allocate+0x8e>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_MEMORY;
 8005e46:	2310      	movs	r3, #16
 8005e48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e4c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	f383 8810 	msr	PRIMASK, r3
}
 8005e54:	e05d      	b.n	8005f12 <_tx_block_allocate+0x14a>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_block_pool_performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 8005e56:	4b32      	ldr	r3, [pc, #200]	; (8005f20 <_tx_block_allocate+0x158>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	643b      	str	r3, [r7, #64]	; 0x40

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_block_pool_cleanup);
 8005e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e5e:	4a31      	ldr	r2, [pc, #196]	; (8005f24 <_tx_block_allocate+0x15c>)
 8005e60:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8005e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return block pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) block_ptr;
 8005e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	67da      	str	r2, [r3, #124]	; 0x7c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8005e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e78:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  (pool_ptr -> tx_block_pool_suspended_count);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	63fb      	str	r3, [r7, #60]	; 0x3c
            
                /* Increment the number of suspended threads.  */
                (pool_ptr -> tx_block_pool_suspended_count)++;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	625a      	str	r2, [r3, #36]	; 0x24

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8005e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d109      	bne.n	8005ea6 <_tx_block_allocate+0xde>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_block_pool_suspension_list =     thread_ptr;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e96:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8005e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e9c:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8005e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ea0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ea2:	675a      	str	r2, [r3, #116]	; 0x74
 8005ea4:	e011      	b.n	8005eca <_tx_block_allocate+0x102>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_block_pool_suspension_list;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8005eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eb0:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb6:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8005eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ebc:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ec2:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ec8:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BLOCK_MEMORY;
 8005eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ecc:	2208      	movs	r2, #8
 8005ece:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8005ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8005edc:	4b0f      	ldr	r3, [pc, #60]	; (8005f1c <_tx_block_allocate+0x154>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	4a0e      	ldr	r2, [pc, #56]	; (8005f1c <_tx_block_allocate+0x154>)
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	f383 8810 	msr	PRIMASK, r3
}
 8005ef0:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8005ef2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005ef4:	f004 fdf4 	bl	800aae0 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_3_OFFSET)) =  (ULONG) *block_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8005ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f00:	e007      	b.n	8005f12 <_tx_block_allocate+0x14a>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8005f02:	2310      	movs	r3, #16
 8005f04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f08:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f383 8810 	msr	PRIMASK, r3
}
 8005f10:	bf00      	nop
            TX_RESTORE
        }
    }

    /* Return completion status.  */
    return(status);
 8005f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3750      	adds	r7, #80	; 0x50
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	2400f0d0 	.word	0x2400f0d0
 8005f20:	2400f034 	.word	0x2400f034
 8005f24:	08005f29 	.word	0x08005f29

08005f28 <_tx_block_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_block_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08c      	sub	sp, #48	; 0x30
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005f32:	f3ef 8310 	mrs	r3, PRIMASK
 8005f36:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005f38:	b672      	cpsid	i
    return(primask_value);
 8005f3a:	69bb      	ldr	r3, [r7, #24]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the block pool.  */
    TX_DISABLE
 8005f3c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_block_pool_cleanup))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f42:	4a32      	ldr	r2, [pc, #200]	; (800600c <_tx_block_pool_cleanup+0xe4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d156      	bne.n	8005ff6 <_tx_block_pool_cleanup+0xce>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d150      	bne.n	8005ff6 <_tx_block_pool_cleanup+0xce>
        {

            /* Setup pointer to block pool control block.  */
            pool_ptr =  TX_VOID_TO_BLOCK_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f58:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8005f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d04a      	beq.n	8005ff6 <_tx_block_pool_cleanup+0xce>
            {
            
                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_block_pool_id == TX_BLOCK_POOL_ID)
 8005f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a2a      	ldr	r2, [pc, #168]	; (8006010 <_tx_block_pool_cleanup+0xe8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d145      	bne.n	8005ff6 <_tx_block_pool_cleanup+0xce>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_block_pool_suspended_count != TX_NO_SUSPENSIONS)
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d041      	beq.n	8005ff6 <_tx_block_pool_cleanup+0xce>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        pool_ptr -> tx_block_pool_suspended_count--;
 8005f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	1e5a      	subs	r2, r3, #1
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	625a      	str	r2, [r3, #36]	; 0x24

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_block_pool_suspended_count;
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d103      	bne.n	8005f96 <_tx_block_pool_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            pool_ptr -> tx_block_pool_suspension_list =  TX_NULL;
 8005f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f90:	2200      	movs	r2, #0
 8005f92:	621a      	str	r2, [r3, #32]
 8005f94:	e013      	b.n	8005fbe <_tx_block_pool_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9a:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa0:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	6a3a      	ldr	r2, [r7, #32]
 8005fac:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_block_pool_suspension_list == thread_ptr)
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d102      	bne.n	8005fbe <_tx_block_pool_cleanup+0x96>
                            {
            
                                /* Update the list head pointer.  */
                                pool_ptr -> tx_block_pool_suspension_list =     next_thread;
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	6a3a      	ldr	r2, [r7, #32]
 8005fbc:	621a      	str	r2, [r3, #32]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BLOCK_MEMORY)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	2b08      	cmp	r3, #8
 8005fc4:	d117      	bne.n	8005ff6 <_tx_block_pool_cleanup+0xce>
                            /* Increment the number of timeouts on this block pool.  */
                            pool_ptr -> tx_block_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2210      	movs	r2, #16
 8005fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else
                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8005fce:	4b11      	ldr	r3, [pc, #68]	; (8006014 <_tx_block_pool_cleanup+0xec>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	4a0f      	ldr	r2, [pc, #60]	; (8006014 <_tx_block_pool_cleanup+0xec>)
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f383 8810 	msr	PRIMASK, r3
}
 8005fe2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f004 fc69 	bl	800a8bc <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8005fea:	f3ef 8310 	mrs	r3, PRIMASK
 8005fee:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8005ff0:	b672      	cpsid	i
    return(primask_value);
 8005ff2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8005ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f383 8810 	msr	PRIMASK, r3
}
 8006000:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8006002:	bf00      	nop
 8006004:	3730      	adds	r7, #48	; 0x30
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	08005f29 	.word	0x08005f29
 8006010:	424c4f43 	.word	0x424c4f43
 8006014:	2400f0d0 	.word	0x2400f0d0

08006018 <_tx_block_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_pool_create(TX_BLOCK_POOL *pool_ptr, CHAR *name_ptr, ULONG block_size,
                    VOID *pool_start, ULONG pool_size)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b090      	sub	sp, #64	; 0x40
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
TX_BLOCK_POOL       *next_pool;
TX_BLOCK_POOL       *previous_pool;


    /* Initialize block pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BLOCK_POOL)));
 8006026:	2230      	movs	r2, #48	; 0x30
 8006028:	2100      	movs	r1, #0
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f00f f91e 	bl	801526c <memset>

    /* Round the block size up to something that is evenly divisible by
       an ALIGN_TYPE (typically this is a 32-bit ULONG). This helps guarantee proper alignment.  */
    block_size =  (((block_size + (sizeof(ALIGN_TYPE))) - ((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3303      	adds	r3, #3
 8006034:	f023 0303 	bic.w	r3, r3, #3
 8006038:	607b      	str	r3, [r7, #4]

    /* Round the pool size down to something that is evenly divisible by 
       an ALIGN_TYPE (typically this is a 32-bit ULONG).  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800603a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800603c:	f023 0303 	bic.w	r3, r3, #3
 8006040:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Setup the basic block pool fields.  */
    pool_ptr -> tx_block_pool_name =             name_ptr;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	605a      	str	r2, [r3, #4]
    pool_ptr -> tx_block_pool_start =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	615a      	str	r2, [r3, #20]
    pool_ptr -> tx_block_pool_size =             pool_size;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006052:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_block_pool_block_size =       (UINT) block_size;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	61da      	str	r2, [r3, #28]
    
    /* Calculate the total number of blocks.  */
    total_blocks =  pool_size/(block_size + (sizeof(UCHAR *)));
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3304      	adds	r3, #4
 800605e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006060:	fbb2 f3f3 	udiv	r3, r2, r3
 8006064:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Walk through the pool area, setting up the available block list.  */
    blocks =            ((UINT) 0);
 8006066:	2300      	movs	r3, #0
 8006068:	63fb      	str	r3, [r7, #60]	; 0x3c
    block_ptr =         TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	637b      	str	r3, [r7, #52]	; 0x34
    next_block_ptr =    TX_UCHAR_POINTER_ADD(block_ptr, (block_size + (sizeof(UCHAR *))));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3304      	adds	r3, #4
 8006072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006074:	4413      	add	r3, r2
 8006076:	633b      	str	r3, [r7, #48]	; 0x30
    while(blocks < (UINT) total_blocks)
 8006078:	e00e      	b.n	8006098 <_tx_block_pool_create+0x80>
    {

        /* Yes, we have another block.  Increment the block count.  */
        blocks++;
 800607a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607c:	3301      	adds	r3, #1
 800607e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup the link to the next block.  */
        block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006082:	62bb      	str	r3, [r7, #40]	; 0x28
        *block_link_ptr =  next_block_ptr;
 8006084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006088:	601a      	str	r2, [r3, #0]

        /* Advance to the next block.  */
        block_ptr =   next_block_ptr;
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Update the next block pointer.  */
        next_block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, (block_size + (sizeof(UCHAR *))));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3304      	adds	r3, #4
 8006092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006094:	4413      	add	r3, r2
 8006096:	633b      	str	r3, [r7, #48]	; 0x30
    while(blocks < (UINT) total_blocks)
 8006098:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800609a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609c:	429a      	cmp	r2, r3
 800609e:	d3ec      	bcc.n	800607a <_tx_block_pool_create+0x62>
    }

    /* Save the remaining information in the pool control block.  */
    pool_ptr -> tx_block_pool_available =  blocks;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060a4:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_block_pool_total =      blocks;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060aa:	60da      	str	r2, [r3, #12]

    /* Quickly check to make sure at least one block is in the pool.  */
    if (blocks != ((UINT) 0))
 80060ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d045      	beq.n	800613e <_tx_block_pool_create+0x126>
    {

        /* Backup to the last block in the pool.  */
        block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr,(block_size + (sizeof(UCHAR *))));
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	f06f 0303 	mvn.w	r3, #3
 80060b8:	1a9b      	subs	r3, r3, r2
 80060ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060bc:	4413      	add	r3, r2
 80060be:	637b      	str	r3, [r7, #52]	; 0x34

        /* Set the last block's forward pointer to NULL.  */
        block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80060c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
        *block_link_ptr =  TX_NULL;
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
        
        /* Setup the starting pool address.  */
        pool_ptr -> tx_block_pool_available_list =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	611a      	str	r2, [r3, #16]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80060d0:	f3ef 8310 	mrs	r3, PRIMASK
 80060d4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80060d6:	b672      	cpsid	i
    return(primask_value);
 80060d8:	69bb      	ldr	r3, [r7, #24]

        /* Disable interrupts to place the block pool on the created list.  */
        TX_DISABLE
 80060da:	627b      	str	r3, [r7, #36]	; 0x24

        /* Setup the block pool ID to make it valid.  */
        pool_ptr -> tx_block_pool_id =  TX_BLOCK_POOL_ID;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4a1b      	ldr	r2, [pc, #108]	; (800614c <_tx_block_pool_create+0x134>)
 80060e0:	601a      	str	r2, [r3, #0]

        /* Place the block pool on the list of created block pools.  First,
           check for an empty list.  */
        if (_tx_block_pool_created_count == TX_EMPTY)
 80060e2:	4b1b      	ldr	r3, [pc, #108]	; (8006150 <_tx_block_pool_create+0x138>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d109      	bne.n	80060fe <_tx_block_pool_create+0xe6>
        {

            /* The created block pool list is empty.  Add block pool to empty list.  */
            _tx_block_pool_created_ptr =                  pool_ptr;
 80060ea:	4a1a      	ldr	r2, [pc, #104]	; (8006154 <_tx_block_pool_create+0x13c>)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6013      	str	r3, [r2, #0]
            pool_ptr -> tx_block_pool_created_next =      pool_ptr;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	629a      	str	r2, [r3, #40]	; 0x28
            pool_ptr -> tx_block_pool_created_previous =  pool_ptr;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80060fc:	e011      	b.n	8006122 <_tx_block_pool_create+0x10a>
        }
        else
        {

            /* This list is not NULL, add to the end of the list.  */
            next_pool =      _tx_block_pool_created_ptr;
 80060fe:	4b15      	ldr	r3, [pc, #84]	; (8006154 <_tx_block_pool_create+0x13c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	623b      	str	r3, [r7, #32]
            previous_pool =  next_pool -> tx_block_pool_created_previous;
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	61fb      	str	r3, [r7, #28]

            /* Place the new block pool in the list.  */
            next_pool -> tx_block_pool_created_previous =  pool_ptr;
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	62da      	str	r2, [r3, #44]	; 0x2c
            previous_pool -> tx_block_pool_created_next =  pool_ptr;
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	629a      	str	r2, [r3, #40]	; 0x28

            /* Setup this block pool's created links.  */
            pool_ptr -> tx_block_pool_created_previous =  previous_pool;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	69fa      	ldr	r2, [r7, #28]
 800611a:	62da      	str	r2, [r3, #44]	; 0x2c
            pool_ptr -> tx_block_pool_created_next =      next_pool;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a3a      	ldr	r2, [r7, #32]
 8006120:	629a      	str	r2, [r3, #40]	; 0x28
        }
        
        /* Increment the created count.  */
        _tx_block_pool_created_count++;
 8006122:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <_tx_block_pool_create+0x138>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3301      	adds	r3, #1
 8006128:	4a09      	ldr	r2, [pc, #36]	; (8006150 <_tx_block_pool_create+0x138>)
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f383 8810 	msr	PRIMASK, r3
}
 8006136:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return successful status.  */
        status =  TX_SUCCESS;
 8006138:	2300      	movs	r3, #0
 800613a:	63bb      	str	r3, [r7, #56]	; 0x38
 800613c:	e001      	b.n	8006142 <_tx_block_pool_create+0x12a>
    }
    else
    {

        /* Not enough memory for one block, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800613e:	2305      	movs	r3, #5
 8006140:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    
    /* Return completion status.  */
    return(status);
 8006142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006144:	4618      	mov	r0, r3
 8006146:	3740      	adds	r7, #64	; 0x40
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	424c4f43 	.word	0x424c4f43
 8006150:	2400f020 	.word	0x2400f020
 8006154:	2400f01c 	.word	0x2400f01c

08006158 <_tx_block_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_pool_delete(TX_BLOCK_POOL *pool_ptr)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08e      	sub	sp, #56	; 0x38
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006160:	f3ef 8310 	mrs	r3, PRIMASK
 8006164:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006166:	b672      	cpsid	i
    return(primask_value);
 8006168:	69fb      	ldr	r3, [r7, #28]
TX_BLOCK_POOL   *next_pool;
TX_BLOCK_POOL   *previous_pool;


    /* Disable interrupts to remove the block pool from the created list.  */
    TX_DISABLE
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* If trace is enabled, unregister this object.  */
    TX_TRACE_OBJECT_UNREGISTER(pool_ptr)

    /* Clear the block pool ID to make it invalid.  */
    pool_ptr -> tx_block_pool_id =  TX_CLEAR_ID;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]

    /* Decrement the number of block pools.  */
    _tx_block_pool_created_count--;
 8006172:	4b3b      	ldr	r3, [pc, #236]	; (8006260 <_tx_block_pool_delete+0x108>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3b01      	subs	r3, #1
 8006178:	4a39      	ldr	r2, [pc, #228]	; (8006260 <_tx_block_pool_delete+0x108>)
 800617a:	6013      	str	r3, [r2, #0]

    /* See if the block pool is the only one on the list.  */
    if (_tx_block_pool_created_count == TX_EMPTY)
 800617c:	4b38      	ldr	r3, [pc, #224]	; (8006260 <_tx_block_pool_delete+0x108>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d103      	bne.n	800618c <_tx_block_pool_delete+0x34>
    {

        /* Only created block pool, just set the created list to NULL.  */
        _tx_block_pool_created_ptr =  TX_NULL;
 8006184:	4b37      	ldr	r3, [pc, #220]	; (8006264 <_tx_block_pool_delete+0x10c>)
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	e013      	b.n	80061b4 <_tx_block_pool_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_pool =                                    pool_ptr -> tx_block_pool_created_next;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006190:	62bb      	str	r3, [r7, #40]	; 0x28
        previous_pool =                                pool_ptr -> tx_block_pool_created_previous;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
        next_pool -> tx_block_pool_created_previous =  previous_pool;
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800619c:	62da      	str	r2, [r3, #44]	; 0x2c
        previous_pool -> tx_block_pool_created_next =  next_pool;
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061a2:	629a      	str	r2, [r3, #40]	; 0x28

        /* See if we have to update the created list head pointer.  */
        if (_tx_block_pool_created_ptr == pool_ptr)
 80061a4:	4b2f      	ldr	r3, [pc, #188]	; (8006264 <_tx_block_pool_delete+0x10c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d102      	bne.n	80061b4 <_tx_block_pool_delete+0x5c>
        {
                    
            /* Yes, move the head pointer to the next link. */
            _tx_block_pool_created_ptr =  next_pool;
 80061ae:	4a2d      	ldr	r2, [pc, #180]	; (8006264 <_tx_block_pool_delete+0x10c>)
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80061b4:	4b2c      	ldr	r3, [pc, #176]	; (8006268 <_tx_block_pool_delete+0x110>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	3301      	adds	r3, #1
 80061ba:	4a2b      	ldr	r2, [pc, #172]	; (8006268 <_tx_block_pool_delete+0x110>)
 80061bc:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                 pool_ptr -> tx_block_pool_suspension_list;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	637b      	str	r3, [r7, #52]	; 0x34
    pool_ptr -> tx_block_pool_suspension_list =  TX_NULL;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	621a      	str	r2, [r3, #32]
    suspended_count =                            pool_ptr -> tx_block_pool_suspended_count;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	633b      	str	r3, [r7, #48]	; 0x30
    pool_ptr -> tx_block_pool_suspended_count =  TX_NO_SUSPENSIONS;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	625a      	str	r2, [r3, #36]	; 0x24
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	f383 8810 	msr	PRIMASK, r3
}
 80061e0:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the block pool suspension list to resume any and all threads suspended
       on this block pool.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 80061e2:	e022      	b.n	800622a <_tx_block_pool_delete+0xd2>
    {
      
        /* Decrement the suspension count.  */
        suspended_count--;
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	3b01      	subs	r3, #1
 80061e8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80061ea:	f3ef 8310 	mrs	r3, PRIMASK
 80061ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80061f0:	b672      	cpsid	i
    return(primask_value);
 80061f2:	693b      	ldr	r3, [r7, #16]
        
        /* Lockout interrupts.  */
        TX_DISABLE
 80061f4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80061f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f8:	2200      	movs	r2, #0
 80061fa:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80061fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fe:	2201      	movs	r2, #1
 8006200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8006204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006208:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800620a:	4b17      	ldr	r3, [pc, #92]	; (8006268 <_tx_block_pool_delete+0x110>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3301      	adds	r3, #1
 8006210:	4a15      	ldr	r2, [pc, #84]	; (8006268 <_tx_block_pool_delete+0x110>)
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f383 8810 	msr	PRIMASK, r3
}
 800621e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8006220:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006222:	f004 fb4b 	bl	800a8bc <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	637b      	str	r3, [r7, #52]	; 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1d9      	bne.n	80061e4 <_tx_block_pool_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006230:	f3ef 8310 	mrs	r3, PRIMASK
 8006234:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006236:	b672      	cpsid	i
    return(primask_value);
 8006238:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_BLOCK_POOL_DELETE_PORT_COMPLETION(pool_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800623a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800623c:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <_tx_block_pool_delete+0x110>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3b01      	subs	r3, #1
 8006242:	4a09      	ldr	r2, [pc, #36]	; (8006268 <_tx_block_pool_delete+0x110>)
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006248:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f383 8810 	msr	PRIMASK, r3
}
 8006250:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8006252:	f004 faf9 	bl	800a848 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3738      	adds	r7, #56	; 0x38
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	2400f020 	.word	0x2400f020
 8006264:	2400f01c 	.word	0x2400f01c
 8006268:	2400f0d0 	.word	0x2400f0d0

0800626c <_tx_block_pool_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_pool_info_get(TX_BLOCK_POOL *pool_ptr, CHAR **name, ULONG *available_blocks, 
                    ULONG *total_blocks, TX_THREAD **first_suspended, 
                    ULONG *suspended_count, TX_BLOCK_POOL **next_pool)
{
 800626c:	b480      	push	{r7}
 800626e:	b089      	sub	sp, #36	; 0x24
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
 8006278:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800627a:	f3ef 8310 	mrs	r3, PRIMASK
 800627e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006280:	b672      	cpsid	i
    return(primask_value);
 8006282:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8006284:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the block pool.  */
    if (name != TX_NULL)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <_tx_block_pool_info_get+0x28>
    {
    
        *name =  pool_ptr -> tx_block_pool_name;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of available blocks in the block pool.  */
    if (available_blocks != TX_NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <_tx_block_pool_info_get+0x36>
    {
    
        *available_blocks =  (ULONG) pool_ptr -> tx_block_pool_available;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the total number of blocks in the block pool.  */
    if (total_blocks != TX_NULL)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <_tx_block_pool_info_get+0x44>
    {
    
        *total_blocks =  (ULONG) pool_ptr -> tx_block_pool_total;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	68da      	ldr	r2, [r3, #12]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the first thread suspended on this block pool.  */
    if (first_suspended != TX_NULL)
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <_tx_block_pool_info_get+0x52>
    {
    
        *first_suspended =  pool_ptr -> tx_block_pool_suspension_list;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a1a      	ldr	r2, [r3, #32]
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of threads suspended on this block pool.  */
    if (suspended_count != TX_NULL)
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <_tx_block_pool_info_get+0x60>
    {
    
        *suspended_count =  (ULONG) pool_ptr -> tx_block_pool_suspended_count;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the pointer to the next block pool created.  */
    if (next_pool != TX_NULL)
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <_tx_block_pool_info_get+0x6e>
    {
    
        *next_pool =  pool_ptr -> tx_block_pool_created_next;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f383 8810 	msr	PRIMASK, r3
}
 80062e4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3724      	adds	r7, #36	; 0x24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <_tx_block_pool_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_pool_prioritize(TX_BLOCK_POOL *pool_ptr)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b090      	sub	sp, #64	; 0x40
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80062fc:	f3ef 8310 	mrs	r3, PRIMASK
 8006300:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006302:	b672      	cpsid	i
    return(primask_value);
 8006304:	69fb      	ldr	r3, [r7, #28]
TX_THREAD       *previous_thread;
UINT            list_changed;


    /* Disable interrupts.  */
    TX_DISABLE
 8006306:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_BLOCK_POOL_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  pool_ptr -> tx_block_pool_suspended_count;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	2b01      	cmp	r3, #1
 8006312:	d805      	bhi.n	8006320 <_tx_block_pool_prioritize+0x2c>
 8006314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006316:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	f383 8810 	msr	PRIMASK, r3
}
 800631e:	e090      	b.n	8006442 <_tx_block_pool_prioritize+0x14e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this block memory pool.  */
    else if (suspended_count == ((UINT) 2))
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	2b02      	cmp	r3, #2
 8006324:	d114      	bne.n	8006350 <_tx_block_pool_prioritize+0x5c>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  pool_ptr -> tx_block_pool_suspension_list;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	633b      	str	r3, [r7, #48]	; 0x30
        next_thread =  head_ptr -> tx_thread_suspended_next;
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006330:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633a:	429a      	cmp	r2, r3
 800633c:	d202      	bcs.n	8006344 <_tx_block_pool_prioritize+0x50>
        {

            /* Yes, move the list head to the next thread.  */
            pool_ptr -> tx_block_pool_suspension_list =  next_thread;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006342:	621a      	str	r2, [r3, #32]
 8006344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006346:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f383 8810 	msr	PRIMASK, r3
}
 800634e:	e078      	b.n	8006442 <_tx_block_pool_prioritize+0x14e>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   pool_ptr -> tx_block_pool_suspension_list;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	633b      	str	r3, [r7, #48]	; 0x30
 
        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800635a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8006360:	4b3a      	ldr	r3, [pc, #232]	; (800644c <_tx_block_pool_prioritize+0x158>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3301      	adds	r3, #1
 8006366:	4a39      	ldr	r2, [pc, #228]	; (800644c <_tx_block_pool_prioritize+0x158>)
 8006368:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800636a:	2300      	movs	r3, #0
 800636c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800636e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006376:	429a      	cmp	r2, r3
 8006378:	d201      	bcs.n	800637e <_tx_block_pool_prioritize+0x8a>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	637b      	str	r3, [r7, #52]	; 0x34
 800637e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006380:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f383 8810 	msr	PRIMASK, r3
}
 8006388:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800638a:	f3ef 8310 	mrs	r3, PRIMASK
 800638e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006390:	b672      	cpsid	i
    return(primask_value);
 8006392:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8006394:	63fb      	str	r3, [r7, #60]	; 0x3c
            
            /* Determine if any changes to the list have occurred while 
               interrupts were enabled.  */
            
            /* Is the list head the same?  */
            if (head_ptr != pool_ptr -> tx_block_pool_suspension_list)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800639c:	429a      	cmp	r2, r3
 800639e:	d002      	beq.n	80063a6 <_tx_block_pool_prioritize+0xb2>
            {
            
                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 80063a0:	2301      	movs	r3, #1
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a4:	e006      	b.n	80063b4 <_tx_block_pool_prioritize+0xc0>
            }
            else
            {
            
                /* Is the suspended count the same?  */
                if (suspended_count != pool_ptr -> tx_block_pool_suspended_count)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d001      	beq.n	80063b4 <_tx_block_pool_prioritize+0xc0>
                {
              
                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 80063b0:	2301      	movs	r3, #1
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28
                }
            }
             
            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d103      	bne.n	80063c2 <_tx_block_pool_prioritize+0xce>
            {
              
                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063be:	63bb      	str	r3, [r7, #56]	; 0x38
 80063c0:	e00c      	b.n	80063dc <_tx_block_pool_prioritize+0xe8>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   pool_ptr -> tx_block_pool_suspension_list;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	633b      	str	r3, [r7, #48]	; 0x30
                suspended_count =  pool_ptr -> tx_block_pool_suspended_count;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80063d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d6:	63bb      	str	r3, [r7, #56]	; 0x38
                
                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 80063d8:	2300      	movs	r3, #0
 80063da:	62bb      	str	r3, [r7, #40]	; 0x28
            }

        } while (thread_ptr != head_ptr);
 80063dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d1c4      	bne.n	800636e <_tx_block_pool_prioritize+0x7a>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 80063e4:	4b19      	ldr	r3, [pc, #100]	; (800644c <_tx_block_pool_prioritize+0x158>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3b01      	subs	r3, #1
 80063ea:	4a18      	ldr	r2, [pc, #96]	; (800644c <_tx_block_pool_prioritize+0x158>)
 80063ec:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front 
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 80063ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d01d      	beq.n	8006432 <_tx_block_pool_prioritize+0x13e>
            /* No, we need to move the highest priority suspended thread to the 
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 80063f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 80063fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006400:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8006402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006404:	6a3a      	ldr	r2, [r7, #32]
 8006406:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640c:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006412:	623b      	str	r3, [r7, #32]
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8006414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006418:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800641a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641c:	6a3a      	ldr	r2, [r7, #32]
 800641e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006424:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800642a:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            pool_ptr -> tx_block_pool_suspension_list =  priority_thread_ptr;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006430:	621a      	str	r2, [r3, #32]
 8006432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006434:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f383 8810 	msr	PRIMASK, r3
}
 800643c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800643e:	f004 fa03 	bl	800a848 <_tx_thread_system_preempt_check>
    }

    /* Return successful status.  */
    return(TX_SUCCESS);
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3740      	adds	r7, #64	; 0x40
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	2400f0d0 	.word	0x2400f0d0

08006450 <_tx_block_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_release(VOID *block_ptr)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08e      	sub	sp, #56	; 0x38
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006458:	f3ef 8310 	mrs	r3, PRIMASK
 800645c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800645e:	b672      	cpsid	i
    return(primask_value);
 8006460:	693b      	ldr	r3, [r7, #16]
TX_THREAD           *next_thread;
TX_THREAD           *previous_thread;


    /* Disable interrupts to put this block back in the pool.  */
    TX_DISABLE
 8006462:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the pool pointer which is just previous to the starting 
       address of the block that the caller sees.  */
    work_ptr =        TX_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	633b      	str	r3, [r7, #48]	; 0x30
    work_ptr =        TX_UCHAR_POINTER_SUB(work_ptr, (sizeof(UCHAR *)));
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	3b04      	subs	r3, #4
 800646c:	633b      	str	r3, [r7, #48]	; 0x30
    next_block_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	62fb      	str	r3, [r7, #44]	; 0x2c
    pool_ptr =        TX_UCHAR_TO_BLOCK_POOL_POINTER_CONVERT((*next_block_ptr));
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Log this kernel call.  */
    TX_EL_BLOCK_RELEASE_INSERT

    /* Determine if there are any threads suspended on the block pool.  */
    thread_ptr =  pool_ptr -> tx_block_pool_suspension_list;
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
    if (thread_ptr != TX_NULL)
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	2b00      	cmp	r3, #0
 8006482:	d03b      	beq.n	80064fc <_tx_block_release+0xac>
    {

        /* Remove the suspended thread from the list.  */

        /* Decrement the number of threads suspended.  */
        (pool_ptr -> tx_block_pool_suspended_count)--;
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	1e5a      	subs	r2, r3, #1
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	625a      	str	r2, [r3, #36]	; 0x24
        
        /* Pickup the suspended count.  */
        suspended_count =  (pool_ptr -> tx_block_pool_suspended_count);
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	623b      	str	r3, [r7, #32]

        /* See if this is the only suspended thread on the list.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d103      	bne.n	80064a2 <_tx_block_release+0x52>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            pool_ptr -> tx_block_pool_suspension_list =  TX_NULL;
 800649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649c:	2200      	movs	r2, #0
 800649e:	621a      	str	r2, [r3, #32]
 80064a0:	e00e      	b.n	80064c0 <_tx_block_release+0x70>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                thread_ptr -> tx_thread_suspended_next;
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a6:	61fb      	str	r3, [r7, #28]
            pool_ptr -> tx_block_pool_suspension_list =  next_thread;
 80064a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064aa:	69fa      	ldr	r2, [r7, #28]
 80064ac:	621a      	str	r2, [r3, #32]

            /* Update the links of the adjacent threads.  */
            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064b2:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	69fa      	ldr	r2, [r7, #28]
 80064be:	671a      	str	r2, [r3, #112]	; 0x70
        }
 
        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	2200      	movs	r2, #0
 80064c4:	669a      	str	r2, [r3, #104]	; 0x68

        /* Return this block pointer to the suspended thread waiting for
           a block.  */
        return_block_ptr =  TX_VOID_TO_INDIRECT_UCHAR_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ca:	617b      	str	r3, [r7, #20]
        work_ptr =          TX_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	633b      	str	r3, [r7, #48]	; 0x30
        *return_block_ptr =  work_ptr;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064d4:	601a      	str	r2, [r3, #0]

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	2200      	movs	r2, #0
 80064da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80064de:	4b13      	ldr	r3, [pc, #76]	; (800652c <_tx_block_release+0xdc>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3301      	adds	r3, #1
 80064e4:	4a11      	ldr	r2, [pc, #68]	; (800652c <_tx_block_release+0xdc>)
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f383 8810 	msr	PRIMASK, r3
}
 80064f2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80064f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064f6:	f004 f9e1 	bl	800a8bc <_tx_thread_system_resume>
 80064fa:	e011      	b.n	8006520 <_tx_block_release+0xd0>
    {

        /* No thread is suspended for a memory block.  */

        /* Put the block back in the available list.  */
        *next_block_ptr =  pool_ptr -> tx_block_pool_available_list;
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	601a      	str	r2, [r3, #0]

        /* Adjust the head pointer.  */
        pool_ptr -> tx_block_pool_available_list =  work_ptr;
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006508:	611a      	str	r2, [r3, #16]

        /* Increment the count of available blocks.  */
        pool_ptr -> tx_block_pool_available++;
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	1c5a      	adds	r2, r3, #1
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	609a      	str	r2, [r3, #8]
 8006514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006516:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f383 8810 	msr	PRIMASK, r3
}
 800651e:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return successful completion status.  */
    return(TX_SUCCESS);
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3738      	adds	r7, #56	; 0x38
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	2400f0d0 	.word	0x2400f0d0

08006530 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b094      	sub	sp, #80	; 0x50
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3303      	adds	r3, #3
 8006542:	f023 0303 	bic.w	r3, r3, #3
 8006546:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006548:	f3ef 8310 	mrs	r3, PRIMASK
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800654e:	b672      	cpsid	i
    return(primask_value);
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts.  */
    TX_DISABLE
 8006552:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006554:	4b54      	ldr	r3, [pc, #336]	; (80066a8 <_tx_byte_allocate+0x178>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	643b      	str	r3, [r7, #64]	; 0x40
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800655a:	2300      	movs	r3, #0
 800655c:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006562:	621a      	str	r2, [r3, #32]
 8006564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	f383 8810 	msr	PRIMASK, r3
}
 800656e:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8006570:	6879      	ldr	r1, [r7, #4]
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 fb26 	bl	8006bc4 <_tx_byte_pool_search>
 8006578:	63f8      	str	r0, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800657a:	f3ef 8310 	mrs	r3, PRIMASK
 800657e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006580:	b672      	cpsid	i
    return(primask_value);
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8006584:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8006586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <_tx_byte_allocate+0x62>
        {
        
            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800658c:	2301      	movs	r3, #1
 800658e:	647b      	str	r3, [r7, #68]	; 0x44
 8006590:	e006      	b.n	80065a0 <_tx_byte_allocate+0x70>
        }
        else
        {
        
            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006598:	429a      	cmp	r2, r3
 800659a:	d101      	bne.n	80065a0 <_tx_byte_allocate+0x70>
            {
            
                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800659c:	2301      	movs	r3, #1
 800659e:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }

    } while (finished == TX_FALSE);
 80065a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d0db      	beq.n	800655e <_tx_byte_allocate+0x2e>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065aa:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 80065ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d008      	beq.n	80065c4 <_tx_byte_allocate+0x94>
 80065b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b4:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	f383 8810 	msr	PRIMASK, r3
}
 80065bc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Set the status to success.  */
        status =  TX_SUCCESS;
 80065be:	2300      	movs	r3, #0
 80065c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80065c2:	e06c      	b.n	800669e <_tx_byte_allocate+0x16e>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d061      	beq.n	800668e <_tx_byte_allocate+0x15e>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80065ca:	4b38      	ldr	r3, [pc, #224]	; (80066ac <_tx_byte_allocate+0x17c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <_tx_byte_allocate+0xb2>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 80065d2:	2310      	movs	r3, #16
 80065d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80065d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	f383 8810 	msr	PRIMASK, r3
}
 80065e0:	e05d      	b.n	800669e <_tx_byte_allocate+0x16e>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 80065e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e4:	4a32      	ldr	r2, [pc, #200]	; (80066b0 <_tx_byte_allocate+0x180>)
 80065e6:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 80065e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 80065ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 80065f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80065fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006604:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660c:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	629a      	str	r2, [r3, #40]	; 0x28
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8006618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661a:	2b00      	cmp	r3, #0
 800661c:	d109      	bne.n	8006632 <_tx_byte_allocate+0x102>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006622:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8006624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006626:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006628:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800662a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800662c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800662e:	675a      	str	r2, [r3, #116]	; 0x74
 8006630:	e011      	b.n	8006656 <_tx_byte_allocate+0x126>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8006638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800663a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800663c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006642:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8006644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006648:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800664e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8006650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006654:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8006656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006658:	2209      	movs	r2, #9
 800665a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800665c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800665e:	2201      	movs	r2, #1
 8006660:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8006662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8006668:	4b10      	ldr	r3, [pc, #64]	; (80066ac <_tx_byte_allocate+0x17c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3301      	adds	r3, #1
 800666e:	4a0f      	ldr	r2, [pc, #60]	; (80066ac <_tx_byte_allocate+0x17c>)
 8006670:	6013      	str	r3, [r2, #0]
 8006672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006674:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	f383 8810 	msr	PRIMASK, r3
}
 800667c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800667e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006680:	f004 fa2e 	bl	800aae0 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8006684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800668a:	64bb      	str	r3, [r7, #72]	; 0x48
 800668c:	e007      	b.n	800669e <_tx_byte_allocate+0x16e>
 800668e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006690:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f383 8810 	msr	PRIMASK, r3
}
 8006698:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800669a:	2310      	movs	r3, #16
 800669c:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return completion status.  */
    return(status);
 800669e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3750      	adds	r7, #80	; 0x50
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	2400f034 	.word	0x2400f034
 80066ac:	2400f0d0 	.word	0x2400f0d0
 80066b0:	080066b5 	.word	0x080066b5

080066b4 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08c      	sub	sp, #48	; 0x30
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80066be:	f3ef 8310 	mrs	r3, PRIMASK
 80066c2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80066c4:	b672      	cpsid	i
    return(primask_value);
 80066c6:	69bb      	ldr	r3, [r7, #24]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 80066c8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ce:	4a32      	ldr	r2, [pc, #200]	; (8006798 <_tx_byte_pool_cleanup+0xe4>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d156      	bne.n	8006782 <_tx_byte_pool_cleanup+0xce>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d150      	bne.n	8006782 <_tx_byte_pool_cleanup+0xce>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 80066e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d04a      	beq.n	8006782 <_tx_byte_pool_cleanup+0xce>
            {
            
                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a2a      	ldr	r2, [pc, #168]	; (800679c <_tx_byte_pool_cleanup+0xe8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d145      	bne.n	8006782 <_tx_byte_pool_cleanup+0xce>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d041      	beq.n	8006782 <_tx_byte_pool_cleanup+0xce>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8006704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006708:	1e5a      	subs	r2, r3, #1
 800670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670c:	629a      	str	r2, [r3, #40]	; 0x28
            
                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006712:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	2b00      	cmp	r3, #0
 8006718:	d103      	bne.n	8006722 <_tx_byte_pool_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	2200      	movs	r2, #0
 800671e:	625a      	str	r2, [r3, #36]	; 0x24
 8006720:	e013      	b.n	800674a <_tx_byte_pool_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006726:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800672c:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	6a3a      	ldr	r2, [r7, #32]
 8006738:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	429a      	cmp	r2, r3
 8006742:	d102      	bne.n	800674a <_tx_byte_pool_cleanup+0x96>
                            {
            
                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	6a3a      	ldr	r2, [r7, #32]
 8006748:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674e:	2b09      	cmp	r3, #9
 8006750:	d117      	bne.n	8006782 <_tx_byte_pool_cleanup+0xce>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2210      	movs	r2, #16
 8006756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800675a:	4b11      	ldr	r3, [pc, #68]	; (80067a0 <_tx_byte_pool_cleanup+0xec>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3301      	adds	r3, #1
 8006760:	4a0f      	ldr	r2, [pc, #60]	; (80067a0 <_tx_byte_pool_cleanup+0xec>)
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	f383 8810 	msr	PRIMASK, r3
}
 800676e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f004 f8a3 	bl	800a8bc <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006776:	f3ef 8310 	mrs	r3, PRIMASK
 800677a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800677c:	b672      	cpsid	i
    return(primask_value);
 800677e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8006780:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f383 8810 	msr	PRIMASK, r3
}
 800678c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800678e:	bf00      	nop
 8006790:	3730      	adds	r7, #48	; 0x30
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	080066b5 	.word	0x080066b5
 800679c:	42595445 	.word	0x42595445
 80067a0:	2400f0d0 	.word	0x2400f0d0

080067a4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08e      	sub	sp, #56	; 0x38
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80067b2:	2234      	movs	r2, #52	; 0x34
 80067b4:	2100      	movs	r1, #0
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f00e fd58 	bl	801526c <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	f023 0303 	bic.w	r3, r3, #3
 80067c2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	f1a3 0208 	sub.w	r2, r3, #8
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2202      	movs	r2, #2
 80067f0:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80067f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	4413      	add	r3, r2
 80067fc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80067fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006800:	3b04      	subs	r3, #4
 8006802:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006810:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8006812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006814:	3b04      	subs	r3, #4
 8006816:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8006818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800682a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800682e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8006834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006836:	3304      	adds	r3, #4
 8006838:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800683a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	4a1e      	ldr	r2, [pc, #120]	; (80068bc <_tx_byte_pool_create+0x118>)
 8006842:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	621a      	str	r2, [r3, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800684a:	f3ef 8310 	mrs	r3, PRIMASK
 800684e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006850:	b672      	cpsid	i
    return(primask_value);
 8006852:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8006854:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4a19      	ldr	r2, [pc, #100]	; (80068c0 <_tx_byte_pool_create+0x11c>)
 800685a:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800685c:	4b19      	ldr	r3, [pc, #100]	; (80068c4 <_tx_byte_pool_create+0x120>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d109      	bne.n	8006878 <_tx_byte_pool_create+0xd4>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8006864:	4a18      	ldr	r2, [pc, #96]	; (80068c8 <_tx_byte_pool_create+0x124>)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	631a      	str	r2, [r3, #48]	; 0x30
 8006876:	e011      	b.n	800689c <_tx_byte_pool_create+0xf8>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8006878:	4b13      	ldr	r3, [pc, #76]	; (80068c8 <_tx_byte_pool_create+0x124>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006882:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	69fa      	ldr	r2, [r7, #28]
 8006894:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6a3a      	ldr	r2, [r7, #32]
 800689a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800689c:	4b09      	ldr	r3, [pc, #36]	; (80068c4 <_tx_byte_pool_create+0x120>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3301      	adds	r3, #1
 80068a2:	4a08      	ldr	r2, [pc, #32]	; (80068c4 <_tx_byte_pool_create+0x120>)
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f383 8810 	msr	PRIMASK, r3
}
 80068b0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3738      	adds	r7, #56	; 0x38
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	ffffeeee 	.word	0xffffeeee
 80068c0:	42595445 	.word	0x42595445
 80068c4:	2400f028 	.word	0x2400f028
 80068c8:	2400f024 	.word	0x2400f024

080068cc <_tx_byte_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_delete(TX_BYTE_POOL *pool_ptr)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08e      	sub	sp, #56	; 0x38
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80068d4:	f3ef 8310 	mrs	r3, PRIMASK
 80068d8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80068da:	b672      	cpsid	i
    return(primask_value);
 80068dc:	69fb      	ldr	r3, [r7, #28]
TX_BYTE_POOL    *next_pool;
TX_BYTE_POOL    *previous_pool;


    /* Disable interrupts to remove the byte pool from the created list.  */
    TX_DISABLE
 80068de:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_BYTE_POOL_DELETE_INSERT

    /* Clear the byte pool ID to make it invalid.  */
    pool_ptr -> tx_byte_pool_id =  TX_CLEAR_ID;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]

    /* Decrement the number of byte pools created.  */
    _tx_byte_pool_created_count--;
 80068e6:	4b3b      	ldr	r3, [pc, #236]	; (80069d4 <_tx_byte_pool_delete+0x108>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	4a39      	ldr	r2, [pc, #228]	; (80069d4 <_tx_byte_pool_delete+0x108>)
 80068ee:	6013      	str	r3, [r2, #0]
    
    /* See if the byte pool is the only one on the list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80068f0:	4b38      	ldr	r3, [pc, #224]	; (80069d4 <_tx_byte_pool_delete+0x108>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d103      	bne.n	8006900 <_tx_byte_pool_delete+0x34>
    {

        /* Only created byte pool, just set the created list to NULL.  */
        _tx_byte_pool_created_ptr =  TX_NULL;
 80068f8:	4b37      	ldr	r3, [pc, #220]	; (80069d8 <_tx_byte_pool_delete+0x10c>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	e013      	b.n	8006928 <_tx_byte_pool_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_pool =                                   pool_ptr -> tx_byte_pool_created_next;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	62bb      	str	r3, [r7, #40]	; 0x28
        previous_pool =                               pool_ptr -> tx_byte_pool_created_previous;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690a:	627b      	str	r3, [r7, #36]	; 0x24
        next_pool -> tx_byte_pool_created_previous =  previous_pool;
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006910:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  next_pool;
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006916:	62da      	str	r2, [r3, #44]	; 0x2c

        /* See if we have to update the created list head pointer.  */
        if (_tx_byte_pool_created_ptr == pool_ptr)
 8006918:	4b2f      	ldr	r3, [pc, #188]	; (80069d8 <_tx_byte_pool_delete+0x10c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	429a      	cmp	r2, r3
 8006920:	d102      	bne.n	8006928 <_tx_byte_pool_delete+0x5c>
        {
            
            /* Yes, move the head pointer to the next link. */
            _tx_byte_pool_created_ptr =  next_pool;
 8006922:	4a2d      	ldr	r2, [pc, #180]	; (80069d8 <_tx_byte_pool_delete+0x10c>)
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8006928:	4b2c      	ldr	r3, [pc, #176]	; (80069dc <_tx_byte_pool_delete+0x110>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3301      	adds	r3, #1
 800692e:	4a2b      	ldr	r2, [pc, #172]	; (80069dc <_tx_byte_pool_delete+0x110>)
 8006930:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                pool_ptr -> tx_byte_pool_suspension_list;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	637b      	str	r3, [r7, #52]	; 0x34
    pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	625a      	str	r2, [r3, #36]	; 0x24
    suspended_count =                           pool_ptr -> tx_byte_pool_suspended_count;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006942:	633b      	str	r3, [r7, #48]	; 0x30
    pool_ptr -> tx_byte_pool_suspended_count =  TX_NO_SUSPENSIONS;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	629a      	str	r2, [r3, #40]	; 0x28
 800694a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	f383 8810 	msr	PRIMASK, r3
}
 8006954:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the byte pool list to resume any and all threads suspended
       on this byte pool.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8006956:	e022      	b.n	800699e <_tx_byte_pool_delete+0xd2>
    {
      
        /* Decrement the suspension count.  */
        suspended_count--;
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	3b01      	subs	r3, #1
 800695c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800695e:	f3ef 8310 	mrs	r3, PRIMASK
 8006962:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006964:	b672      	cpsid	i
    return(primask_value);
 8006966:	693b      	ldr	r3, [r7, #16]
      
        /* Lockout interrupts.  */
        TX_DISABLE
 8006968:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800696a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696c:	2200      	movs	r2, #0
 800696e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8006970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006972:	2201      	movs	r2, #1
 8006974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8006978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697c:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800697e:	4b17      	ldr	r3, [pc, #92]	; (80069dc <_tx_byte_pool_delete+0x110>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3301      	adds	r3, #1
 8006984:	4a15      	ldr	r2, [pc, #84]	; (80069dc <_tx_byte_pool_delete+0x110>)
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f383 8810 	msr	PRIMASK, r3
}
 8006992:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8006994:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006996:	f003 ff91 	bl	800a8bc <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	637b      	str	r3, [r7, #52]	; 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1d9      	bne.n	8006958 <_tx_byte_pool_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80069a4:	f3ef 8310 	mrs	r3, PRIMASK
 80069a8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80069aa:	b672      	cpsid	i
    return(primask_value);
 80069ac:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_BYTE_POOL_DELETE_PORT_COMPLETION(pool_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 80069ae:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 80069b0:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <_tx_byte_pool_delete+0x110>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3b01      	subs	r3, #1
 80069b6:	4a09      	ldr	r2, [pc, #36]	; (80069dc <_tx_byte_pool_delete+0x110>)
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069bc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f383 8810 	msr	PRIMASK, r3
}
 80069c4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80069c6:	f003 ff3f 	bl	800a848 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3738      	adds	r7, #56	; 0x38
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	2400f028 	.word	0x2400f028
 80069d8:	2400f024 	.word	0x2400f024
 80069dc:	2400f0d0 	.word	0x2400f0d0

080069e0 <_tx_byte_pool_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_info_get(TX_BYTE_POOL *pool_ptr, CHAR **name, ULONG *available_bytes, 
                    ULONG *fragments, TX_THREAD **first_suspended, 
                    ULONG *suspended_count, TX_BYTE_POOL **next_pool)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b089      	sub	sp, #36	; 0x24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80069ee:	f3ef 8310 	mrs	r3, PRIMASK
 80069f2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80069f4:	b672      	cpsid	i
    return(primask_value);
 80069f6:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 80069f8:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the byte pool.  */
    if (name != TX_NULL)
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <_tx_byte_pool_info_get+0x28>
    {
    
        *name =  pool_ptr -> tx_byte_pool_name;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of available bytes in the byte pool.  */
    if (available_bytes != TX_NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <_tx_byte_pool_info_get+0x36>
    {
    
        *available_bytes =  pool_ptr -> tx_byte_pool_available;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	689a      	ldr	r2, [r3, #8]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the total number of bytes in the byte pool.  */
    if (fragments != TX_NULL)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <_tx_byte_pool_info_get+0x44>
    {
    
        *fragments =  (ULONG) pool_ptr -> tx_byte_pool_fragments;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the first thread suspended on this byte pool.  */
    if (first_suspended != TX_NULL)
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <_tx_byte_pool_info_get+0x52>
    {
    
        *first_suspended =  pool_ptr -> tx_byte_pool_suspension_list;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a30:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of threads suspended on this byte pool.  */
    if (suspended_count != TX_NULL)
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <_tx_byte_pool_info_get+0x60>
    {
    
        *suspended_count =  (ULONG) pool_ptr -> tx_byte_pool_suspended_count;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the pointer to the next byte pool created.  */
    if (next_pool != TX_NULL)
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <_tx_byte_pool_info_get+0x6e>
    {
    
        *next_pool =  pool_ptr -> tx_byte_pool_created_next;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f383 8810 	msr	PRIMASK, r3
}
 8006a58:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3724      	adds	r7, #36	; 0x24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <_tx_byte_pool_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_prioritize(TX_BYTE_POOL *pool_ptr)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b090      	sub	sp, #64	; 0x40
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006a70:	f3ef 8310 	mrs	r3, PRIMASK
 8006a74:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006a76:	b672      	cpsid	i
    return(primask_value);
 8006a78:	69fb      	ldr	r3, [r7, #28]
TX_THREAD       *previous_thread;
UINT            list_changed;


    /* Disable interrupts.  */
    TX_DISABLE
 8006a7a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_BYTE_POOL_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a80:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8006a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d805      	bhi.n	8006a94 <_tx_byte_pool_prioritize+0x2c>
 8006a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a8a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	f383 8810 	msr	PRIMASK, r3
}
 8006a92:	e090      	b.n	8006bb6 <_tx_byte_pool_prioritize+0x14e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this byte memory pool.  */
    else if (suspended_count == ((UINT) 2))
 8006a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d114      	bne.n	8006ac4 <_tx_byte_pool_prioritize+0x5c>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  pool_ptr -> tx_byte_pool_suspension_list;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	633b      	str	r3, [r7, #48]	; 0x30
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d202      	bcs.n	8006ab8 <_tx_byte_pool_prioritize+0x50>
        {

            /* Yes, move the list head to the next thread.  */
            pool_ptr -> tx_byte_pool_suspension_list =  next_thread;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab6:	625a      	str	r2, [r3, #36]	; 0x24
 8006ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aba:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f383 8810 	msr	PRIMASK, r3
}
 8006ac2:	e078      	b.n	8006bb6 <_tx_byte_pool_prioritize+0x14e>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   pool_ptr -> tx_byte_pool_suspension_list;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8006ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8006ad4:	4b3a      	ldr	r3, [pc, #232]	; (8006bc0 <_tx_byte_pool_prioritize+0x158>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	4a39      	ldr	r2, [pc, #228]	; (8006bc0 <_tx_byte_pool_prioritize+0x158>)
 8006adc:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d201      	bcs.n	8006af2 <_tx_byte_pool_prioritize+0x8a>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8006aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af0:	637b      	str	r3, [r7, #52]	; 0x34
 8006af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f383 8810 	msr	PRIMASK, r3
}
 8006afc:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006afe:	f3ef 8310 	mrs	r3, PRIMASK
 8006b02:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006b04:	b672      	cpsid	i
    return(primask_value);
 8006b06:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8006b08:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if any changes to the list have occurred while 
               interrupts were enabled.  */
              
            /* Is the list head the same?  */
            if (head_ptr != pool_ptr -> tx_byte_pool_suspension_list)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d002      	beq.n	8006b1a <_tx_byte_pool_prioritize+0xb2>
            {
            
                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8006b14:	2301      	movs	r3, #1
 8006b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b18:	e006      	b.n	8006b28 <_tx_byte_pool_prioritize+0xc0>
            }
            else
            {
            
                /* Is the suspended count the same?  */
                if (suspended_count != pool_ptr -> tx_byte_pool_suspended_count)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d001      	beq.n	8006b28 <_tx_byte_pool_prioritize+0xc0>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8006b24:	2301      	movs	r3, #1
 8006b26:	62bb      	str	r3, [r7, #40]	; 0x28
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d103      	bne.n	8006b36 <_tx_byte_pool_prioritize+0xce>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b32:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b34:	e00c      	b.n	8006b50 <_tx_byte_pool_prioritize+0xe8>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   pool_ptr -> tx_byte_pool_suspension_list;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	633b      	str	r3, [r7, #48]	; 0x30
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b40:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8006b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4a:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	62bb      	str	r3, [r7, #40]	; 0x28
            }

        } while (thread_ptr != head_ptr);
 8006b50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d1c4      	bne.n	8006ae2 <_tx_byte_pool_prioritize+0x7a>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8006b58:	4b19      	ldr	r3, [pc, #100]	; (8006bc0 <_tx_byte_pool_prioritize+0x158>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	4a18      	ldr	r2, [pc, #96]	; (8006bc0 <_tx_byte_pool_prioritize+0x158>)
 8006b60:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front 
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8006b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d01d      	beq.n	8006ba6 <_tx_byte_pool_prioritize+0x13e>
            /* No, we need to move the highest priority suspended thread to the 
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8006b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8006b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b74:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	6a3a      	ldr	r2, [r7, #32]
 8006b7a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b80:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b86:	623b      	str	r3, [r7, #32]
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8006b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b8c:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8006b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b90:	6a3a      	ldr	r2, [r7, #32]
 8006b92:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b98:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b9e:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            pool_ptr -> tx_byte_pool_suspension_list =  priority_thread_ptr;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ba4:	625a      	str	r2, [r3, #36]	; 0x24
 8006ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f383 8810 	msr	PRIMASK, r3
}
 8006bb0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8006bb2:	f003 fe49 	bl	800a848 <_tx_thread_system_preempt_check>
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3740      	adds	r7, #64	; 0x40
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	2400f0d0 	.word	0x2400f0d0

08006bc4 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b095      	sub	sp, #84	; 0x54
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8006bd6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006bd8:	b672      	cpsid	i
    return(primask_value);
 8006bda:	69fb      	ldr	r3, [r7, #28]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8006bdc:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	3b02      	subs	r3, #2
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	4413      	add	r3, r2
 8006bec:	63bb      	str	r3, [r7, #56]	; 0x38
    if (memory_size >= total_theoretical_available)
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d308      	bcc.n	8006c08 <_tx_byte_pool_search+0x44>
 8006bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	f383 8810 	msr	PRIMASK, r3
}
 8006c00:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c06:	e0db      	b.n	8006dc0 <_tx_byte_pool_search+0x1fc>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8006c08:	4b71      	ldr	r3, [pc, #452]	; (8006dd0 <_tx_byte_pool_search+0x20c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c12:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	64bb      	str	r3, [r7, #72]	; 0x48
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	643b      	str	r3, [r7, #64]	; 0x40
        available_bytes =  ((ULONG) 0);
 8006c22:	2300      	movs	r3, #0
 8006c24:	647b      	str	r3, [r7, #68]	; 0x44
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8006c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c28:	3304      	adds	r3, #4
 8006c2a:	633b      	str	r3, [r7, #48]	; 0x30
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8006c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a67      	ldr	r2, [pc, #412]	; (8006dd4 <_tx_byte_pool_search+0x210>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d143      	bne.n	8006cc2 <_tx_byte_pool_search+0xfe>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8006c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d104      	bne.n	8006c4a <_tx_byte_pool_search+0x86>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c44:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8006c46:	2301      	movs	r3, #1
 8006c48:	63fb      	str	r3, [r7, #60]	; 0x3c
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c4c:	62bb      	str	r3, [r7, #40]	; 0x28
                next_ptr =             *this_block_link_ptr;
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8006c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	647b      	str	r3, [r7, #68]	; 0x44
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8006c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c5e:	3b08      	subs	r3, #8
 8006c60:	647b      	str	r3, [r7, #68]	; 0x44

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8006c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d255      	bcs.n	8006d16 <_tx_byte_pool_search+0x152>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	3304      	adds	r3, #4
 8006c72:	633b      	str	r3, [r7, #48]	; 0x30
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c76:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a55      	ldr	r2, [pc, #340]	; (8006dd4 <_tx_byte_pool_search+0x210>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d113      	bne.n	8006caa <_tx_byte_pool_search+0xe6>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	623b      	str	r3, [r7, #32]
                        *this_block_link_ptr =  *next_block_link_ptr;
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	1e5a      	subs	r2, r3, #1
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d114      	bne.n	8006ccc <_tx_byte_pool_search+0x108>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ca6:	615a      	str	r2, [r3, #20]
 8006ca8:	e010      	b.n	8006ccc <_tx_byte_pool_search+0x108>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	623b      	str	r3, [r7, #32]
                        current_ptr =  *next_block_link_ptr;
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8006cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d008      	beq.n	8006ccc <_tx_byte_pool_search+0x108>
                        {
                            examine_blocks--;
 8006cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	643b      	str	r3, [r7, #64]	; 0x40
 8006cc0:	e004      	b.n	8006ccc <_tx_byte_pool_search+0x108>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cc4:	62bb      	str	r3, [r7, #40]	; 0x28
                current_ptr =  *this_block_link_ptr;
 8006cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8006ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <_tx_byte_pool_search+0x114>
            {

                examine_blocks--;
 8006cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	643b      	str	r3, [r7, #64]	; 0x40
 8006cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cda:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f383 8810 	msr	PRIMASK, r3
}
 8006ce2:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ce8:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006cea:	b672      	cpsid	i
    return(primask_value);
 8006cec:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8006cee:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d009      	beq.n	8006d0e <_tx_byte_pool_search+0x14a>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	64bb      	str	r3, [r7, #72]	; 0x48
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	3301      	adds	r3, #1
 8006d06:	643b      	str	r3, [r7, #64]	; 0x40

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d0c:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8006d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d188      	bne.n	8006c26 <_tx_byte_pool_search+0x62>
 8006d14:	e000      	b.n	8006d18 <_tx_byte_pool_search+0x154>
                    break;
 8006d16:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8006d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d048      	beq.n	8006db0 <_tx_byte_pool_search+0x1ec>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8006d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b13      	cmp	r3, #19
 8006d26:	d91e      	bls.n	8006d66 <_tx_byte_pool_search+0x1a2>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	3308      	adds	r3, #8
 8006d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d2e:	4413      	add	r3, r2
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	623b      	str	r3, [r7, #32]
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d38:	62bb      	str	r3, [r7, #40]	; 0x28
                *next_block_link_ptr =  *this_block_link_ptr;
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	3304      	adds	r3, #4
 8006d46:	633b      	str	r3, [r7, #48]	; 0x30
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8006d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4e:	4a21      	ldr	r2, [pc, #132]	; (8006dd4 <_tx_byte_pool_search+0x210>)
 8006d50:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d60:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	647b      	str	r3, [r7, #68]	; 0x44
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8006d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d68:	3304      	adds	r3, #4
 8006d6a:	633b      	str	r3, [r7, #48]	; 0x30
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	62bb      	str	r3, [r7, #40]	; 0x28
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	f1a3 0208 	sub.w	r2, r3, #8
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d105      	bne.n	8006d9c <_tx_byte_pool_search+0x1d8>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d92:	62bb      	str	r3, [r7, #40]	; 0x28
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	615a      	str	r2, [r3, #20]
 8006d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f383 8810 	msr	PRIMASK, r3
}
 8006da6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8006da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006daa:	3308      	adds	r3, #8
 8006dac:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dae:	e007      	b.n	8006dc0 <_tx_byte_pool_search+0x1fc>
 8006db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006db2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f383 8810 	msr	PRIMASK, r3
}
 8006dba:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8006dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3754      	adds	r7, #84	; 0x54
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	2400f034 	.word	0x2400f034
 8006dd4:	ffffeeee 	.word	0xffffeeee

08006dd8 <_tx_byte_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_release(VOID *memory_ptr)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b09a      	sub	sp, #104	; 0x68
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
UCHAR               **block_link_ptr;
UCHAR               **suspend_info_ptr;


    /* Default to successful status.  */
    status =  TX_SUCCESS;
 8006de0:	2300      	movs	r3, #0
 8006de2:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Set the pool pointer to NULL.  */
    pool_ptr =  TX_NULL;
 8006de4:	2300      	movs	r3, #0
 8006de6:	65fb      	str	r3, [r7, #92]	; 0x5c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006de8:	f3ef 8310 	mrs	r3, PRIMASK
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006dee:	b672      	cpsid	i
    return(primask_value);
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Lockout interrupts.  */
    TX_DISABLE
 8006df2:	667b      	str	r3, [r7, #100]	; 0x64

    /* Determine if the memory pointer is valid.  */
    work_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(memory_ptr);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (work_ptr != TX_NULL)
 8006df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d027      	beq.n	8006e4e <_tx_byte_release+0x76>
    {
        
        /* Back off the memory pointer to pickup its header.  */
        work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8006dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e00:	3b08      	subs	r3, #8
 8006e02:	65bb      	str	r3, [r7, #88]	; 0x58

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8006e04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e06:	3304      	adds	r3, #4
 8006e08:	657b      	str	r3, [r7, #84]	; 0x54
        free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8006e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e0c:	653b      	str	r3, [r7, #80]	; 0x50
        if ((*free_ptr) != TX_BYTE_BLOCK_FREE)
 8006e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a7c      	ldr	r2, [pc, #496]	; (8007004 <_tx_byte_release+0x22c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d017      	beq.n	8006e48 <_tx_byte_release+0x70>
        {

            /* Pickup the pool pointer.  */
            temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8006e18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	657b      	str	r3, [r7, #84]	; 0x54
            byte_pool_ptr =  TX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
 8006e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e20:	64fb      	str	r3, [r7, #76]	; 0x4c
            pool_ptr =  *byte_pool_ptr;
 8006e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* See if we have a valid pool pointer.  */
            if (pool_ptr == TX_NULL)
 8006e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d102      	bne.n	8006e34 <_tx_byte_release+0x5c>
            {
                
                /* Return pointer error.  */
                status =  TX_PTR_ERROR;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	663b      	str	r3, [r7, #96]	; 0x60
 8006e32:	e00e      	b.n	8006e52 <_tx_byte_release+0x7a>
            }
            else
            {

                /* See if we have a valid pool.  */
                if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8006e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a73      	ldr	r2, [pc, #460]	; (8007008 <_tx_byte_release+0x230>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d009      	beq.n	8006e52 <_tx_byte_release+0x7a>
                {
                
                    /* Return pointer error.  */
                    status =  TX_PTR_ERROR;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	663b      	str	r3, [r7, #96]	; 0x60
                    
                    /* Reset the pool pointer is NULL.  */
                    pool_ptr =  TX_NULL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e46:	e004      	b.n	8006e52 <_tx_byte_release+0x7a>
        }
        else
        {

            /* Return pointer error.  */
            status =  TX_PTR_ERROR;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	663b      	str	r3, [r7, #96]	; 0x60
 8006e4c:	e001      	b.n	8006e52 <_tx_byte_release+0x7a>
    }
    else
    {

        /* Return pointer error.  */
        status =  TX_PTR_ERROR;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	663b      	str	r3, [r7, #96]	; 0x60
    }

    /* Determine if the pointer is valid.  */
    if (pool_ptr == TX_NULL)
 8006e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d105      	bne.n	8006e64 <_tx_byte_release+0x8c>
 8006e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e5a:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	f383 8810 	msr	PRIMASK, r3
}
 8006e62:	e0c9      	b.n	8006ff8 <_tx_byte_release+0x220>
    {
    
        /* At this point, we know that the pointer is valid.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8006e64:	4b69      	ldr	r3, [pc, #420]	; (800700c <_tx_byte_release+0x234>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8006e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e6e:	621a      	str	r2, [r3, #32]

        /* Log this kernel call.  */
        TX_EL_BYTE_RELEASE_INSERT

        /* Release the memory.  */
        temp_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8006e70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e72:	3304      	adds	r3, #4
 8006e74:	657b      	str	r3, [r7, #84]	; 0x54
        free_ptr =   TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8006e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e78:	653b      	str	r3, [r7, #80]	; 0x50
        *free_ptr =  TX_BYTE_BLOCK_FREE;
 8006e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e7c:	4a61      	ldr	r2, [pc, #388]	; (8007004 <_tx_byte_release+0x22c>)
 8006e7e:	601a      	str	r2, [r3, #0]

        /* Update the number of available bytes in the pool.  */
        block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8006e80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e82:	647b      	str	r3, [r7, #68]	; 0x44
        next_block_ptr =  *block_link_ptr;
 8006e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	643b      	str	r3, [r7, #64]	; 0x40
        pool_ptr -> tx_byte_pool_available =  
            pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 8006e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e92:	1a8a      	subs	r2, r1, r2
 8006e94:	441a      	add	r2, r3
        pool_ptr -> tx_byte_pool_available =  
 8006e96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e98:	609a      	str	r2, [r3, #8]

        /* Determine if the free block is prior to current search pointer.  */
        if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 8006e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d202      	bcs.n	8006eaa <_tx_byte_release+0xd2>
        {

            /* Yes, update the search pointer to the released block.  */
            pool_ptr -> tx_byte_pool_search =  work_ptr;
 8006ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ea6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ea8:	615a      	str	r2, [r3, #20]
        }

        /* Determine if there are threads suspended on this byte pool.  */
        if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8006eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 809c 	beq.w	8006fec <_tx_byte_release+0x214>
        {
                
            /* Now examine the suspension list to find threads waiting for 
               memory.  Maybe it is now available!  */
            while (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8006eb4:	e08a      	b.n	8006fcc <_tx_byte_release+0x1f4>
            {

                /* Pickup the first suspended thread pointer.  */
                susp_thread_ptr =  pool_ptr -> tx_byte_pool_suspension_list;
 8006eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the size of the memory the thread is requesting.  */
                memory_size =  susp_thread_ptr -> tx_thread_suspend_info;
 8006ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ec0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ec2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ec4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	f383 8810 	msr	PRIMASK, r3
}
 8006ecc:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* See if the request can be satisfied.  */
                work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8006ece:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ed0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006ed2:	f7ff fe77 	bl	8006bc4 <_tx_byte_pool_search>
 8006ed6:	65b8      	str	r0, [r7, #88]	; 0x58
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8006edc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006ede:	b672      	cpsid	i
    return(primask_value);
 8006ee0:	69fb      	ldr	r3, [r7, #28]

                /* Optional processing extension.  */
                TX_BYTE_RELEASE_EXTENSION

                /* Disable interrupts.  */
                TX_DISABLE
 8006ee2:	667b      	str	r3, [r7, #100]	; 0x64

                /* Indicate that this thread is the current owner.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8006ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ee8:	621a      	str	r2, [r3, #32]

                /* If there is not enough memory, break this loop!  */
                if (work_ptr == TX_NULL)
 8006eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d073      	beq.n	8006fd8 <_tx_byte_release+0x200>
                  /* Break out of the loop.  */
                    break;
                }

                /* Check to make sure the thread is still suspended.  */
                if (susp_thread_ptr ==  pool_ptr -> tx_byte_pool_suspension_list)
 8006ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d145      	bne.n	8006f86 <_tx_byte_release+0x1ae>
                {

                    /* Also, makes sure the memory size is the same.  */
                    if (susp_thread_ptr -> tx_thread_suspend_info == memory_size)
 8006efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d140      	bne.n	8006f86 <_tx_byte_release+0x1ae>
                    {
                  
                        /* Remove the suspended thread from the list.  */

                        /* Decrement the number of threads suspended.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8006f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f08:	1e5a      	subs	r2, r3, #1
 8006f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f0c:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8006f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f12:	637b      	str	r3, [r7, #52]	; 0x34

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8006f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d103      	bne.n	8006f22 <_tx_byte_release+0x14a>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8006f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	625a      	str	r2, [r3, #36]	; 0x24
 8006f20:	e00e      	b.n	8006f40 <_tx_byte_release+0x168>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the list head pointer.  */
                            next_thread =                                susp_thread_ptr -> tx_thread_suspended_next;
 8006f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f26:	633b      	str	r3, [r7, #48]	; 0x30
                            pool_ptr -> tx_byte_pool_suspension_list =   next_thread;
 8006f28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f2c:	625a      	str	r2, [r3, #36]	; 0x24

                            /* Update the links of the adjacent threads.  */
                            previous_thread =                              susp_thread_ptr -> tx_thread_suspended_previous;
 8006f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f32:	62fb      	str	r3, [r7, #44]	; 0x2c
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8006f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f38:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f3e:	671a      	str	r2, [r3, #112]	; 0x70
                        }

                        /* Prepare for resumption of the thread.  */

                        /* Clear cleanup routine to avoid timeout.  */
                        susp_thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8006f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f42:	2200      	movs	r2, #0
 8006f44:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Return this block pointer to the suspended thread waiting for
                           a block.  */
                        suspend_info_ptr =   TX_VOID_TO_INDIRECT_UCHAR_POINTER_CONVERT(susp_thread_ptr -> tx_thread_additional_suspend_info);
 8006f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f4a:	62bb      	str	r3, [r7, #40]	; 0x28
                        *suspend_info_ptr =  work_ptr;
 8006f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f50:	601a      	str	r2, [r3, #0]

                        /* Clear the memory pointer to indicate that it was given to the suspended thread.  */
                        work_ptr =  TX_NULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	65bb      	str	r3, [r7, #88]	; 0x58
                        
                        /* Put return status into the thread control block.  */
                        susp_thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8006f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* Restore interrupts.  */
                        TX_RESTORE
#else
                        /* Temporarily disable preemption.  */
                        _tx_thread_preempt_disable++;
 8006f5e:	4b2c      	ldr	r3, [pc, #176]	; (8007010 <_tx_byte_release+0x238>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3301      	adds	r3, #1
 8006f64:	4a2a      	ldr	r2, [pc, #168]	; (8007010 <_tx_byte_release+0x238>)
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f6a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f383 8810 	msr	PRIMASK, r3
}
 8006f72:	bf00      	nop

                        /* Restore interrupts.  */
                        TX_RESTORE

                        /* Resume thread.  */
                        _tx_thread_system_resume(susp_thread_ptr);
 8006f74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006f76:	f003 fca1 	bl	800a8bc <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8006f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f7e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8006f80:	b672      	cpsid	i
    return(primask_value);
 8006f82:	697b      	ldr	r3, [r7, #20]
#endif

                        /* Lockout interrupts.  */
                        TX_DISABLE
 8006f84:	667b      	str	r3, [r7, #100]	; 0x64
                    }
                }
                    
                /* Determine if the memory was given to the suspended thread.  */
                if (work_ptr != TX_NULL)
 8006f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d01f      	beq.n	8006fcc <_tx_byte_release+0x1f4>
                
                    /* No, it wasn't given to the suspended thread.  */

                    /* Put the memory back on the available list since this thread is no longer
                       suspended.  */
                    work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8006f8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f8e:	3b08      	subs	r3, #8
 8006f90:	65bb      	str	r3, [r7, #88]	; 0x58
                    temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8006f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f94:	3304      	adds	r3, #4
 8006f96:	657b      	str	r3, [r7, #84]	; 0x54
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8006f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f9a:	653b      	str	r3, [r7, #80]	; 0x50
                    *free_ptr =  TX_BYTE_BLOCK_FREE;
 8006f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f9e:	4a19      	ldr	r2, [pc, #100]	; (8007004 <_tx_byte_release+0x22c>)
 8006fa0:	601a      	str	r2, [r3, #0]

                    /* Update the number of available bytes in the pool.  */
                    block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8006fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fa4:	647b      	str	r3, [r7, #68]	; 0x44
                    next_block_ptr =  *block_link_ptr;
 8006fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	643b      	str	r3, [r7, #64]	; 0x40
                    pool_ptr -> tx_byte_pool_available =  
                        pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 8006fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fb4:	1a8a      	subs	r2, r1, r2
 8006fb6:	441a      	add	r2, r3
                    pool_ptr -> tx_byte_pool_available =  
 8006fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fba:	609a      	str	r2, [r3, #8]

                    /* Determine if the current pointer is before the search pointer.  */
                    if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 8006fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d202      	bcs.n	8006fcc <_tx_byte_release+0x1f4>
                    {

                        /* Yes, update the search pointer.  */
                        pool_ptr -> tx_byte_pool_search =  work_ptr;
 8006fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fca:	615a      	str	r2, [r3, #20]
            while (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8006fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f47f af70 	bne.w	8006eb6 <_tx_byte_release+0xde>
 8006fd6:	e000      	b.n	8006fda <_tx_byte_release+0x202>
                    break;
 8006fd8:	bf00      	nop
 8006fda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fdc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f383 8810 	msr	PRIMASK, r3
}
 8006fe4:	bf00      	nop
            
            /* Restore interrupts.  */
            TX_RESTORE

            /* Check for preemption.  */
            _tx_thread_system_preempt_check();
 8006fe6:	f003 fc2f 	bl	800a848 <_tx_thread_system_preempt_check>
 8006fea:	e005      	b.n	8006ff8 <_tx_byte_release+0x220>
 8006fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fee:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f383 8810 	msr	PRIMASK, r3
}
 8006ff6:	bf00      	nop
            TX_RESTORE
        }
    }

    /* Return completion status.  */
    return(status);
 8006ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3768      	adds	r7, #104	; 0x68
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	ffffeeee 	.word	0xffffeeee
 8007008:	42595445 	.word	0x42595445
 800700c:	2400f034 	.word	0x2400f034
 8007010:	2400f0d0 	.word	0x2400f0d0

08007014 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08c      	sub	sp, #48	; 0x30
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800701e:	f3ef 8310 	mrs	r3, PRIMASK
 8007022:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007024:	b672      	cpsid	i
    return(primask_value);
 8007026:	697b      	ldr	r3, [r7, #20]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 8007028:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800702e:	4a37      	ldr	r2, [pc, #220]	; (800710c <_tx_event_flags_cleanup+0xf8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d160      	bne.n	80070f6 <_tx_event_flags_cleanup+0xe2>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	429a      	cmp	r2, r3
 800703e:	d15a      	bne.n	80070f6 <_tx_event_flags_cleanup+0xe2>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007044:	62bb      	str	r3, [r7, #40]	; 0x28
    
            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 8007046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007048:	2b00      	cmp	r3, #0
 800704a:	d054      	beq.n	80070f6 <_tx_event_flags_cleanup+0xe2>
            {
                
                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a2f      	ldr	r2, [pc, #188]	; (8007110 <_tx_event_flags_cleanup+0xfc>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d14f      	bne.n	80070f6 <_tx_event_flags_cleanup+0xe2>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d04b      	beq.n	80070f6 <_tx_event_flags_cleanup+0xe2>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	623b      	str	r3, [r7, #32]

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the 
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place 
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d020      	beq.n	80070b8 <_tx_event_flags_cleanup+0xa4>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	3b01      	subs	r3, #1
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
              
                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007080:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	2b00      	cmp	r3, #0
 8007086:	d103      	bne.n	8007090 <_tx_event_flags_cleanup+0x7c>
                            {

                                /* Yes, the only suspended thread.  */
        
                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	2200      	movs	r2, #0
 800708c:	611a      	str	r2, [r3, #16]
 800708e:	e016      	b.n	80070be <_tx_event_flags_cleanup+0xaa>
                            {

                                /* At least one more thread is on the same suspension list.  */
    
                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007094:	61fb      	str	r3, [r7, #28]
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800709a:	61bb      	str	r3, [r7, #24]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	69fa      	ldr	r2, [r7, #28]
 80070a6:	671a      	str	r2, [r3, #112]	; 0x70
                
                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 80070a8:	6a3a      	ldr	r2, [r7, #32]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d106      	bne.n	80070be <_tx_event_flags_cleanup+0xaa>
                                {
                
                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 80070b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b2:	69fa      	ldr	r2, [r7, #28]
 80070b4:	611a      	str	r2, [r3, #16]
 80070b6:	e002      	b.n	80070be <_tx_event_flags_cleanup+0xaa>
                        }
                        else
                        {
                        
                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 80070b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ba:	2201      	movs	r2, #1
 80070bc:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c2:	2b07      	cmp	r3, #7
 80070c4:	d117      	bne.n	80070f6 <_tx_event_flags_cleanup+0xe2>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2207      	movs	r2, #7
 80070ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80070ce:	4b11      	ldr	r3, [pc, #68]	; (8007114 <_tx_event_flags_cleanup+0x100>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3301      	adds	r3, #1
 80070d4:	4a0f      	ldr	r2, [pc, #60]	; (8007114 <_tx_event_flags_cleanup+0x100>)
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070da:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f383 8810 	msr	PRIMASK, r3
}
 80070e2:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing 
                               from the system timer thread right now which normally executes at the 
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f003 fbe9 	bl	800a8bc <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80070ea:	f3ef 8310 	mrs	r3, PRIMASK
 80070ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80070f0:	b672      	cpsid	i
    return(primask_value);
 80070f2:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80070f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f383 8810 	msr	PRIMASK, r3
}
 8007100:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8007102:	bf00      	nop
 8007104:	3730      	adds	r7, #48	; 0x30
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	08007015 	.word	0x08007015
 8007110:	4456444e 	.word	0x4456444e
 8007114:	2400f0d0 	.word	0x2400f0d0

08007118 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 8007122:	2230      	movs	r2, #48	; 0x30
 8007124:	2100      	movs	r1, #0
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f00e f8a0 	bl	801526c <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	605a      	str	r2, [r3, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007132:	f3ef 8310 	mrs	r3, PRIMASK
 8007136:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007138:	b672      	cpsid	i
    return(primask_value);
 800713a:	693b      	ldr	r3, [r7, #16]
    
    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800713c:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a18      	ldr	r2, [pc, #96]	; (80071a4 <_tx_event_flags_create+0x8c>)
 8007142:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 8007144:	4b18      	ldr	r3, [pc, #96]	; (80071a8 <_tx_event_flags_create+0x90>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d109      	bne.n	8007160 <_tx_event_flags_create+0x48>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800714c:	4a17      	ldr	r2, [pc, #92]	; (80071ac <_tx_event_flags_create+0x94>)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	61da      	str	r2, [r3, #28]
 800715e:	e011      	b.n	8007184 <_tx_event_flags_create+0x6c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 8007160:	4b12      	ldr	r3, [pc, #72]	; (80071ac <_tx_event_flags_create+0x94>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 8007184:	4b08      	ldr	r3, [pc, #32]	; (80071a8 <_tx_event_flags_create+0x90>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3301      	adds	r3, #1
 800718a:	4a07      	ldr	r2, [pc, #28]	; (80071a8 <_tx_event_flags_create+0x90>)
 800718c:	6013      	str	r3, [r2, #0]
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f383 8810 	msr	PRIMASK, r3
}
 8007198:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3720      	adds	r7, #32
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	4456444e 	.word	0x4456444e
 80071a8:	2400f010 	.word	0x2400f010
 80071ac:	2400f00c 	.word	0x2400f00c

080071b0 <_tx_event_flags_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08e      	sub	sp, #56	; 0x38
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80071b8:	f3ef 8310 	mrs	r3, PRIMASK
 80071bc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80071be:	b672      	cpsid	i
    return(primask_value);
 80071c0:	69fb      	ldr	r3, [r7, #28]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Disable interrupts to remove the group from the created list.  */
    TX_DISABLE
 80071c2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_DELETE_INSERT

    /* Clear the event flag group ID to make it invalid.  */
    group_ptr -> tx_event_flags_group_id =  TX_CLEAR_ID;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created event flag groups.  */
    _tx_event_flags_created_count--;
 80071ca:	4b3b      	ldr	r3, [pc, #236]	; (80072b8 <_tx_event_flags_delete+0x108>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	4a39      	ldr	r2, [pc, #228]	; (80072b8 <_tx_event_flags_delete+0x108>)
 80071d2:	6013      	str	r3, [r2, #0]
    
    /* See if this group is the only one on the list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 80071d4:	4b38      	ldr	r3, [pc, #224]	; (80072b8 <_tx_event_flags_delete+0x108>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d103      	bne.n	80071e4 <_tx_event_flags_delete+0x34>
    {

        /* Only created event flag group, just set the created list to NULL.  */
        _tx_event_flags_created_ptr =  TX_NULL;
 80071dc:	4b37      	ldr	r3, [pc, #220]	; (80072bc <_tx_event_flags_delete+0x10c>)
 80071de:	2200      	movs	r2, #0
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	e013      	b.n	800720c <_tx_event_flags_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_group =                                           group_ptr -> tx_event_flags_group_created_next;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	62bb      	str	r3, [r7, #40]	; 0x28
        previous_group =                                       group_ptr -> tx_event_flags_group_created_previous;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24
        next_group -> tx_event_flags_group_created_previous =  previous_group;
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071f4:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  next_group;
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071fa:	619a      	str	r2, [r3, #24]

        /* See if we have to update the created list head pointer.  */
        if (_tx_event_flags_created_ptr == group_ptr)
 80071fc:	4b2f      	ldr	r3, [pc, #188]	; (80072bc <_tx_event_flags_delete+0x10c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	429a      	cmp	r2, r3
 8007204:	d102      	bne.n	800720c <_tx_event_flags_delete+0x5c>
        {
                    
            /* Yes, move the head pointer to the next link. */
            _tx_event_flags_created_ptr =  next_group;
 8007206:	4a2d      	ldr	r2, [pc, #180]	; (80072bc <_tx_event_flags_delete+0x10c>)
 8007208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720a:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800720c:	4b2c      	ldr	r3, [pc, #176]	; (80072c0 <_tx_event_flags_delete+0x110>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3301      	adds	r3, #1
 8007212:	4a2b      	ldr	r2, [pc, #172]	; (80072c0 <_tx_event_flags_delete+0x110>)
 8007214:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                         group_ptr -> tx_event_flags_group_suspension_list;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	637b      	str	r3, [r7, #52]	; 0x34
    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	611a      	str	r2, [r3, #16]
    suspended_count =                                    group_ptr -> tx_event_flags_group_suspended_count;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	633b      	str	r3, [r7, #48]	; 0x30
    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	615a      	str	r2, [r3, #20]
 800722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007230:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	f383 8810 	msr	PRIMASK, r3
}
 8007238:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the event flag suspension list to resume any and all threads 
       suspended on this group.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 800723a:	e022      	b.n	8007282 <_tx_event_flags_delete+0xd2>
    {
      
        /* Decrement the number of suspended threads.  */
        suspended_count--;
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	3b01      	subs	r3, #1
 8007240:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007242:	f3ef 8310 	mrs	r3, PRIMASK
 8007246:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007248:	b672      	cpsid	i
    return(primask_value);
 800724a:	693b      	ldr	r3, [r7, #16]
      
        /* Lockout interrupts.  */
        TX_DISABLE
 800724c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800724e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007250:	2200      	movs	r2, #0
 8007252:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8007254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007256:	2201      	movs	r2, #1
 8007258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800725c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800725e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007260:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8007262:	4b17      	ldr	r3, [pc, #92]	; (80072c0 <_tx_event_flags_delete+0x110>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3301      	adds	r3, #1
 8007268:	4a15      	ldr	r2, [pc, #84]	; (80072c0 <_tx_event_flags_delete+0x110>)
 800726a:	6013      	str	r3, [r2, #0]
 800726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f383 8810 	msr	PRIMASK, r3
}
 8007276:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8007278:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800727a:	f003 fb1f 	bl	800a8bc <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	637b      	str	r3, [r7, #52]	; 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1d9      	bne.n	800723c <_tx_event_flags_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007288:	f3ef 8310 	mrs	r3, PRIMASK
 800728c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800728e:	b672      	cpsid	i
    return(primask_value);
 8007290:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_EVENT_FLAGS_GROUP_DELETE_PORT_COMPLETION(group_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8007292:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8007294:	4b0a      	ldr	r3, [pc, #40]	; (80072c0 <_tx_event_flags_delete+0x110>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3b01      	subs	r3, #1
 800729a:	4a09      	ldr	r2, [pc, #36]	; (80072c0 <_tx_event_flags_delete+0x110>)
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f383 8810 	msr	PRIMASK, r3
}
 80072a8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80072aa:	f003 facd 	bl	800a848 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3738      	adds	r7, #56	; 0x38
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	2400f010 	.word	0x2400f010
 80072bc:	2400f00c 	.word	0x2400f00c
 80072c0:	2400f0d0 	.word	0x2400f0d0

080072c4 <_tx_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b094      	sub	sp, #80	; 0x50
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80072d2:	f3ef 8310 	mrs	r3, PRIMASK
 80072d6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80072d8:	b672      	cpsid	i
    return(primask_value);
 80072da:	69fb      	ldr	r3, [r7, #28]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 80072dc:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	647b      	str	r3, [r7, #68]	; 0x44

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	63bb      	str	r3, [r7, #56]	; 0x38
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 80072f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d004      	beq.n	8007302 <_tx_event_flags_get+0x3e>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 80072f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072fa:	43db      	mvns	r3, r3
 80072fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072fe:	4013      	ands	r3, r2
 8007300:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007304:	2b02      	cmp	r3, #2
 8007306:	d10a      	bne.n	800731e <_tx_event_flags_get+0x5a>
    {
    
        /* AND request is present.  */
        
        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8007308:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	4013      	ands	r3, r2
 800730e:	643b      	str	r3, [r7, #64]	; 0x40
        
        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 8007310:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	429a      	cmp	r2, r3
 8007316:	d006      	beq.n	8007326 <_tx_event_flags_get+0x62>
        {
        
            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 8007318:	2300      	movs	r3, #0
 800731a:	643b      	str	r3, [r7, #64]	; 0x40
 800731c:	e003      	b.n	8007326 <_tx_event_flags_get+0x62>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800731e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	4013      	ands	r3, r2
 8007324:	643b      	str	r3, [r7, #64]	; 0x40
    }
    
    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 8007326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007328:	2b00      	cmp	r3, #0
 800732a:	d029      	beq.n	8007380 <_tx_event_flags_get+0xbc>
    {

        /* Yes, this request can be handled immediately.  */

        /* Return the actual event flags that satisfied the request.  */
        *actual_flags_ptr =  current_flags;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007330:	601a      	str	r2, [r3, #0]

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	623b      	str	r3, [r7, #32]

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d11c      	bne.n	800737a <_tx_event_flags_get+0xb6>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 8007340:	2300      	movs	r3, #0
 8007342:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d005      	beq.n	8007358 <_tx_event_flags_get+0x94>
            {
            
                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <_tx_event_flags_get+0x94>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 8007354:	2301      	movs	r3, #1
 8007356:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 8007358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800735a:	2b01      	cmp	r3, #1
 800735c:	d106      	bne.n	800736c <_tx_event_flags_get+0xa8>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =  
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6a1a      	ldr	r2, [r3, #32]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =  
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	621a      	str	r2, [r3, #32]
 800736a:	e006      	b.n	800737a <_tx_event_flags_get+0xb6>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	43db      	mvns	r3, r3
 8007374:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 800737a:	2300      	movs	r3, #0
 800737c:	64bb      	str	r3, [r7, #72]	; 0x48
 800737e:	e06e      	b.n	800745e <_tx_event_flags_get+0x19a>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8007380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007382:	2b00      	cmp	r3, #0
 8007384:	d069      	beq.n	800745a <_tx_event_flags_get+0x196>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8007386:	4b3b      	ldr	r3, [pc, #236]	; (8007474 <_tx_event_flags_get+0x1b0>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <_tx_event_flags_get+0xd0>
            {
            
                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_EVENTS;
 800738e:	2307      	movs	r3, #7
 8007390:	64bb      	str	r3, [r7, #72]	; 0x48
 8007392:	e064      	b.n	800745e <_tx_event_flags_get+0x19a>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 8007394:	4b38      	ldr	r3, [pc, #224]	; (8007478 <_tx_event_flags_get+0x1b4>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	633b      	str	r3, [r7, #48]	; 0x30

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	4a37      	ldr	r2, [pc, #220]	; (800747c <_tx_event_flags_get+0x1b8>)
 800739e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	679a      	str	r2, [r3, #120]	; 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 80073b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	62fb      	str	r3, [r7, #44]	; 0x2c
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 80073ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d109      	bne.n	80073e8 <_tx_event_flags_get+0x124>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d8:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073de:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 80073e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e4:	675a      	str	r2, [r3, #116]	; 0x74
 80073e6:	e011      	b.n	800740c <_tx_event_flags_get+0x148>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	62bb      	str	r3, [r7, #40]	; 0x28
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073f2:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80073f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073fe:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007404:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800740a:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	615a      	str	r2, [r3, #20]
            
                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	2207      	movs	r2, #7
 800741a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	2201      	movs	r2, #1
 8007420:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007426:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8007428:	4b12      	ldr	r3, [pc, #72]	; (8007474 <_tx_event_flags_get+0x1b0>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3301      	adds	r3, #1
 800742e:	4a11      	ldr	r2, [pc, #68]	; (8007474 <_tx_event_flags_get+0x1b0>)
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007434:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f383 8810 	msr	PRIMASK, r3
}
 800743c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800743e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007440:	f003 fb4e 	bl	800aae0 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007444:	f3ef 8310 	mrs	r3, PRIMASK
 8007448:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800744a:	b672      	cpsid	i
    return(primask_value);
 800744c:	69bb      	ldr	r3, [r7, #24]
    
                /* Disable interrupts.  */
                TX_DISABLE
 800744e:	64fb      	str	r3, [r7, #76]	; 0x4c
              
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007456:	64bb      	str	r3, [r7, #72]	; 0x48
 8007458:	e001      	b.n	800745e <_tx_event_flags_get+0x19a>
        }
        else
        {
            
            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 800745a:	2307      	movs	r3, #7
 800745c:	64bb      	str	r3, [r7, #72]	; 0x48
 800745e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007460:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f383 8810 	msr	PRIMASK, r3
}
 8007468:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800746a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800746c:	4618      	mov	r0, r3
 800746e:	3750      	adds	r7, #80	; 0x50
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	2400f0d0 	.word	0x2400f0d0
 8007478:	2400f034 	.word	0x2400f034
 800747c:	08007015 	.word	0x08007015

08007480 <_tx_event_flags_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR **name, ULONG *current_flags, 
                    TX_THREAD **first_suspended, ULONG *suspended_count, 
                    TX_EVENT_FLAGS_GROUP **next_group)
{
 8007480:	b480      	push	{r7}
 8007482:	b089      	sub	sp, #36	; 0x24
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800748e:	f3ef 8310 	mrs	r3, PRIMASK
 8007492:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007494:	b672      	cpsid	i
    return(primask_value);
 8007496:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8007498:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the event flag group.  */
    if (name != TX_NULL)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d003      	beq.n	80074a8 <_tx_event_flags_info_get+0x28>
    {
    
        *name =  group_ptr -> tx_event_flags_group_name;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the current event flags in the event flag group.  */
    if (current_flags != TX_NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d007      	beq.n	80074be <_tx_event_flags_info_get+0x3e>
    {

        /* Pickup the current flags and apply delayed clearing.  */
        *current_flags =  group_ptr -> tx_event_flags_group_current & 
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	689a      	ldr	r2, [r3, #8]
                                                        ~group_ptr -> tx_event_flags_group_delayed_clear;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	43db      	mvns	r3, r3
        *current_flags =  group_ptr -> tx_event_flags_group_current & 
 80074b8:	401a      	ands	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the first thread suspended on this event flag group.  */
    if (first_suspended != TX_NULL)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <_tx_event_flags_info_get+0x4c>
    {
    
        *first_suspended =  group_ptr -> tx_event_flags_group_suspension_list;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of threads suspended on this event flag group.  */
    if (suspended_count != TX_NULL)
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d003      	beq.n	80074da <_tx_event_flags_info_get+0x5a>
    {
    
        *suspended_count =  (ULONG) group_ptr -> tx_event_flags_group_suspended_count;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	695a      	ldr	r2, [r3, #20]
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the pointer to the next event flag group created.  */
    if (next_group != TX_NULL)
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <_tx_event_flags_info_get+0x68>
    {
    
        *next_group =  group_ptr -> tx_event_flags_group_created_next;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	699a      	ldr	r2, [r3, #24]
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f383 8810 	msr	PRIMASK, r3
}
 80074f2:	bf00      	nop
    
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3724      	adds	r7, #36	; 0x24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
	...

08007504 <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b0a2      	sub	sp, #136	; 0x88
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007510:	f3ef 8310 	mrs	r3, PRIMASK
 8007514:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007516:	b672      	cpsid	i
    return(primask_value);
 8007518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800751a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f003 0302 	and.w	r3, r3, #2
 8007524:	2b00      	cmp	r3, #0
 8007526:	d023      	beq.n	8007570 <_tx_event_flags_set+0x6c>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 8007528:	2300      	movs	r3, #0
 800752a:	663b      	str	r3, [r7, #96]	; 0x60

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d005      	beq.n	8007540 <_tx_event_flags_set+0x3c>
        {
            
            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <_tx_event_flags_set+0x3c>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 800753c:	2301      	movs	r3, #1
 800753e:	663b      	str	r3, [r7, #96]	; 0x60
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 8007540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007542:	2b01      	cmp	r3, #1
 8007544:	d107      	bne.n	8007556 <_tx_event_flags_set+0x52>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =  
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6a1a      	ldr	r2, [r3, #32]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	43db      	mvns	r3, r3
 800754e:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =  
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	621a      	str	r2, [r3, #32]
 8007554:	e005      	b.n	8007562 <_tx_event_flags_set+0x5e>

            /* Previous set operation was not interrupted, simply clear the 
               specified flags by "ANDing" the flags into the current events 
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	689a      	ldr	r2, [r3, #8]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	609a      	str	r2, [r3, #8]
 8007562:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007566:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756a:	f383 8810 	msr	PRIMASK, r3
}
 800756e:	e1c0      	b.n	80078f2 <_tx_event_flags_set+0x3ee>
    {

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the notify callback routine for this event flag group.  */
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	689a      	ldr	r2, [r3, #8]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d006      	beq.n	8007598 <_tx_event_flags_set+0x94>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =  
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6a1a      	ldr	r2, [r3, #32]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	43db      	mvns	r3, r3
 8007592:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =  
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 8007598:	2300      	movs	r3, #0
 800759a:	667b      	str	r3, [r7, #100]	; 0x64

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	673b      	str	r3, [r7, #112]	; 0x70

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 818a 	beq.w	80078c0 <_tx_event_flags_set+0x3bc>
        {

            /* Determine if there is just a single thread waiting on the event 
               flag group.  */
            if (suspended_count == ((UINT) 1))
 80075ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d167      	bne.n	8007682 <_tx_event_flags_set+0x17e>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	66fb      	str	r3, [r7, #108]	; 0x6c
            
                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 80075c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075c6:	657b      	str	r3, [r7, #84]	; 0x54

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 80075c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075d0:	653b      	str	r3, [r7, #80]	; 0x50

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 80075d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 80075da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d10a      	bne.n	80075f6 <_tx_event_flags_set+0xf2>
                {
    
                    /* AND request is present.  */
        
                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 80075e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075e4:	4013      	ands	r3, r2
 80075e6:	66bb      	str	r3, [r7, #104]	; 0x68
        
                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 80075e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80075ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d006      	beq.n	80075fe <_tx_event_flags_set+0xfa>
                    {
        
                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 80075f0:	2300      	movs	r3, #0
 80075f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80075f4:	e003      	b.n	80075fe <_tx_event_flags_set+0xfa>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 80075f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075fa:	4013      	ands	r3, r2
 80075fc:	66bb      	str	r3, [r7, #104]	; 0x68
                }
    
                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 80075fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 8164 	beq.w	80078ce <_tx_event_flags_set+0x3ca>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 8007606:	2301      	movs	r3, #1
 8007608:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800760a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800760e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007610:	64bb      	str	r3, [r7, #72]	; 0x48
                    *suspend_info_ptr =  current_event_flags;
 8007612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007614:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007616:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8007618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 8007620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007622:	2b01      	cmp	r3, #1
 8007624:	d106      	bne.n	8007634 <_tx_event_flags_set+0x130>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	689a      	ldr	r2, [r3, #8]
 800762a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800762c:	43db      	mvns	r3, r3
 800762e:	401a      	ands	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007640:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007644:	2200      	movs	r2, #0
 8007646:	669a      	str	r2, [r3, #104]	; 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8007648:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800764c:	2200      	movs	r2, #0
 800764e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 8007652:	4b9a      	ldr	r3, [pc, #616]	; (80078bc <_tx_event_flags_set+0x3b8>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3301      	adds	r3, #1
 8007658:	4a98      	ldr	r2, [pc, #608]	; (80078bc <_tx_event_flags_set+0x3b8>)
 800765a:	6013      	str	r3, [r2, #0]
 800765c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007660:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007664:	f383 8810 	msr	PRIMASK, r3
}
 8007668:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800766a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800766e:	f003 f925 	bl	800a8bc <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007672:	f3ef 8310 	mrs	r3, PRIMASK
 8007676:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007678:	b672      	cpsid	i
    return(primask_value);
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 800767c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007680:	e125      	b.n	80078ce <_tx_event_flags_set+0x3ca>

                /* Otherwise, the event flag requests of multiple threads must be 
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	677b      	str	r3, [r7, #116]	; 0x74
                thread_ptr =      suspended_list;
 8007688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800768a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	611a      	str	r2, [r3, #16]
        
                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 8007694:	2300      	movs	r3, #0
 8007696:	67fb      	str	r3, [r7, #124]	; 0x7c
                last_satisfied =  TX_NULL;
 8007698:	2300      	movs	r3, #0
 800769a:	67bb      	str	r3, [r7, #120]	; 0x78

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	66fb      	str	r3, [r7, #108]	; 0x6c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 80076a2:	4b86      	ldr	r3, [pc, #536]	; (80078bc <_tx_event_flags_set+0x3b8>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3301      	adds	r3, #1
 80076a8:	4a84      	ldr	r2, [pc, #528]	; (80078bc <_tx_event_flags_set+0x3b8>)
 80076aa:	6013      	str	r3, [r2, #0]
 80076ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076b0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	f383 8810 	msr	PRIMASK, r3
}
 80076b8:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80076ba:	f3ef 8310 	mrs	r3, PRIMASK
 80076be:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 80076c0:	b672      	cpsid	i
    return(primask_value);
 80076c2:	6abb      	ldr	r3, [r7, #40]	; 0x28

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 80076c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00d      	beq.n	80076ec <_tx_event_flags_set+0x1e8>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 80076d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80076e8:	4313      	orrs	r3, r2
 80076ea:	66fb      	str	r3, [r7, #108]	; 0x6c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80076ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 80076f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076fa:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 80076fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007704:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 8007706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007708:	f003 0302 	and.w	r3, r3, #2
 800770c:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 800770e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007710:	2b02      	cmp	r3, #2
 8007712:	d10a      	bne.n	800772a <_tx_event_flags_set+0x226>
                    {
    
                        /* AND request is present.  */
        
                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8007714:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007718:	4013      	ands	r3, r2
 800771a:	66bb      	str	r3, [r7, #104]	; 0x68
        
                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 800771c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800771e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007720:	429a      	cmp	r2, r3
 8007722:	d006      	beq.n	8007732 <_tx_event_flags_set+0x22e>
                        {
        
                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 8007724:	2300      	movs	r3, #0
 8007726:	66bb      	str	r3, [r7, #104]	; 0x68
 8007728:	e003      	b.n	8007732 <_tx_event_flags_set+0x22e>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800772a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800772c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800772e:	4013      	ands	r3, r2
 8007730:	66bb      	str	r3, [r7, #104]	; 0x68
                    }
    
                    /* Check to see if the thread had a timeout or wait abort during the event search processing.  
                       If so, just set the flags satisfied to ensure the processing here removes the thread from 
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 8007732:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007738:	2b07      	cmp	r3, #7
 800773a:	d001      	beq.n	8007740 <_tx_event_flags_set+0x23c>
                    {
            
                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800773c:	2301      	movs	r3, #1
 800773e:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 8007740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007742:	2b00      	cmp	r3, #0
 8007744:	d063      	beq.n	800780e <_tx_event_flags_set+0x30a>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 8007746:	2301      	movs	r3, #1
 8007748:	667b      	str	r3, [r7, #100]	; 0x64
    
                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800774a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800774e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007750:	2b07      	cmp	r3, #7
 8007752:	d11d      	bne.n	8007790 <_tx_event_flags_set+0x28c>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8007754:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800775a:	64bb      	str	r3, [r7, #72]	; 0x48
                            *suspend_info_ptr =  current_event_flags;
 800775c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800775e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007760:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8007762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	647b      	str	r3, [r7, #68]	; 0x44

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 800776a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800776c:	2b01      	cmp	r3, #1
 800776e:	d106      	bne.n	800777e <_tx_event_flags_set+0x27a>
                            {
                
                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	689a      	ldr	r2, [r3, #8]
 8007774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007776:	43db      	mvns	r3, r3
 8007778:	401a      	ands	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	609a      	str	r2, [r3, #8]
                            }
            
                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800777e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007782:	2200      	movs	r2, #0
 8007784:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8007786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800778a:	2200      	movs	r2, #0
 800778c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 8007790:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007796:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800779a:	429a      	cmp	r2, r3
 800779c:	d102      	bne.n	80077a4 <_tx_event_flags_set+0x2a0>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 800779e:	2300      	movs	r3, #0
 80077a0:	677b      	str	r3, [r7, #116]	; 0x74
 80077a2:	e016      	b.n	80077d2 <_tx_event_flags_set+0x2ce>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 80077a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077aa:	643b      	str	r3, [r7, #64]	; 0x40
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80077ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077b2:	63fb      	str	r3, [r7, #60]	; 0x3c
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80077b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077b8:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 80077ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077be:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 80077c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80077c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d103      	bne.n	80077d2 <_tx_event_flags_set+0x2ce>
                            {
                                
                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 80077ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d0:	677b      	str	r3, [r7, #116]	; 0x74
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	1e5a      	subs	r2, r3, #1
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 80077dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10a      	bne.n	80077f8 <_tx_event_flags_set+0x2f4>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 80077e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077e6:	67fb      	str	r3, [r7, #124]	; 0x7c
                            last_satisfied =  thread_ptr;
 80077e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077ec:	67bb      	str	r3, [r7, #120]	; 0x78
    
                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 80077ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80077f2:	2200      	movs	r2, #0
 80077f4:	671a      	str	r2, [r3, #112]	; 0x70
 80077f6:	e00a      	b.n	800780e <_tx_event_flags_set+0x30a>
                        {

                            /* Not the first thread on the satisfied list.  */
                
                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 80077f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077fe:	671a      	str	r2, [r3, #112]	; 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 8007800:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007804:	2200      	movs	r2, #0
 8007806:	671a      	str	r2, [r3, #112]	; 0x70
                            last_satisfied =                              thread_ptr;
 8007808:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800780c:	67bb      	str	r3, [r7, #120]	; 0x78
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 800780e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007810:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    /* Decrement the suspension count.  */
                    suspended_count--;
 8007814:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007816:	3b01      	subs	r3, #1
 8007818:	673b      	str	r3, [r7, #112]	; 0x70
            
                } while (suspended_count != TX_NO_SUSPENSIONS);
 800781a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800781c:	2b00      	cmp	r3, #0
 800781e:	f47f af45 	bne.w	80076ac <_tx_event_flags_set+0x1a8>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007826:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a1b      	ldr	r3, [r3, #32]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00a      	beq.n	8007846 <_tx_event_flags_set+0x342>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	43db      	mvns	r3, r3
 800783a:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	621a      	str	r2, [r3, #32]
 8007846:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800784a:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	f383 8810 	msr	PRIMASK, r3
}
 8007852:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 8007854:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                while(thread_ptr != TX_NULL)
 800785a:	e01d      	b.n	8007898 <_tx_event_flags_set+0x394>
                {
    
                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800785c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007862:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007864:	f3ef 8310 	mrs	r3, PRIMASK
 8007868:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800786a:	b672      	cpsid	i
    return(primask_value);
 800786c:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 800786e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 8007872:	4b12      	ldr	r3, [pc, #72]	; (80078bc <_tx_event_flags_set+0x3b8>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3301      	adds	r3, #1
 8007878:	4a10      	ldr	r2, [pc, #64]	; (80078bc <_tx_event_flags_set+0x3b8>)
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007880:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	f383 8810 	msr	PRIMASK, r3
}
 8007888:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800788a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800788e:	f003 f815 	bl	800a8bc <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 8007892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007894:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                while(thread_ptr != TX_NULL)
 8007898:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1dd      	bne.n	800785c <_tx_event_flags_set+0x358>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80078a0:	f3ef 8310 	mrs	r3, PRIMASK
 80078a4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80078a6:	b672      	cpsid	i
    return(primask_value);
 80078a8:	697b      	ldr	r3, [r7, #20]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 80078aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 80078ae:	4b03      	ldr	r3, [pc, #12]	; (80078bc <_tx_event_flags_set+0x3b8>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	4a01      	ldr	r2, [pc, #4]	; (80078bc <_tx_event_flags_set+0x3b8>)
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	e009      	b.n	80078ce <_tx_event_flags_set+0x3ca>
 80078ba:	bf00      	nop
 80078bc:	2400f0d0 	.word	0x2400f0d0
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <_tx_event_flags_set+0x3ca>
            {
                    
                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2201      	movs	r2, #1
 80078cc:	60da      	str	r2, [r3, #12]
 80078ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078d2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f383 8810 	msr	PRIMASK, r3
}
 80078da:	bf00      	nop
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if a notify callback is required.  */
        if (events_set_notify != TX_NULL)
 80078dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <_tx_event_flags_set+0x3e4>
        {

            /* Call application event flags set notification.  */
            (events_set_notify)(group_ptr);
 80078e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	4798      	blx	r3
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 80078e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d101      	bne.n	80078f2 <_tx_event_flags_set+0x3ee>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 80078ee:	f002 ffab 	bl	800a848 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3788      	adds	r7, #136	; 0x88
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <_tx_event_flags_set_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set_notify(TX_EVENT_FLAGS_GROUP *group_ptr, VOID (*events_set_notify)(TX_EVENT_FLAGS_GROUP *notify_group_ptr))
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007906:	f3ef 8310 	mrs	r3, PRIMASK
 800790a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800790c:	b672      	cpsid	i
    return(primask_value);
 800790e:	68fb      	ldr	r3, [r7, #12]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8007910:	617b      	str	r3, [r7, #20]

    /* Make entry in event log.  */
    TX_EL_EVENT_FLAGS_SET_NOTIFY_INSERT

    /* Setup event flag group set notification callback function.  */
    group_ptr -> tx_event_flags_group_set_notify =  events_set_notify;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	625a      	str	r2, [r3, #36]	; 0x24
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f383 8810 	msr	PRIMASK, r3
}
 8007922:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return success to caller.  */
    return(TX_SUCCESS);
 8007924:	2300      	movs	r3, #0
#endif
}
 8007926:	4618      	mov	r0, r3
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
	...

08007934 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8007938:	f002 fbd8 	bl	800a0ec <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800793c:	f003 fee4 	bl	800b708 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8007940:	4b12      	ldr	r3, [pc, #72]	; (800798c <_tx_initialize_high_level+0x58>)
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	4b12      	ldr	r3, [pc, #72]	; (8007990 <_tx_initialize_high_level+0x5c>)
 8007948:	2200      	movs	r2, #0
 800794a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800794c:	4b11      	ldr	r3, [pc, #68]	; (8007994 <_tx_initialize_high_level+0x60>)
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	4b11      	ldr	r3, [pc, #68]	; (8007998 <_tx_initialize_high_level+0x64>)
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8007958:	4b10      	ldr	r3, [pc, #64]	; (800799c <_tx_initialize_high_level+0x68>)
 800795a:	2200      	movs	r2, #0
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	4b10      	ldr	r3, [pc, #64]	; (80079a0 <_tx_initialize_high_level+0x6c>)
 8007960:	2200      	movs	r2, #0
 8007962:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8007964:	4b0f      	ldr	r3, [pc, #60]	; (80079a4 <_tx_initialize_high_level+0x70>)
 8007966:	2200      	movs	r2, #0
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	4b0f      	ldr	r3, [pc, #60]	; (80079a8 <_tx_initialize_high_level+0x74>)
 800796c:	2200      	movs	r2, #0
 800796e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8007970:	4b0e      	ldr	r3, [pc, #56]	; (80079ac <_tx_initialize_high_level+0x78>)
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	4b0e      	ldr	r3, [pc, #56]	; (80079b0 <_tx_initialize_high_level+0x7c>)
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800797c:	4b0d      	ldr	r3, [pc, #52]	; (80079b4 <_tx_initialize_high_level+0x80>)
 800797e:	2200      	movs	r2, #0
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	4b0d      	ldr	r3, [pc, #52]	; (80079b8 <_tx_initialize_high_level+0x84>)
 8007984:	2200      	movs	r2, #0
 8007986:	601a      	str	r2, [r3, #0]
#endif
}
 8007988:	bf00      	nop
 800798a:	bd80      	pop	{r7, pc}
 800798c:	2400effc 	.word	0x2400effc
 8007990:	2400f000 	.word	0x2400f000
 8007994:	2400f004 	.word	0x2400f004
 8007998:	2400f008 	.word	0x2400f008
 800799c:	2400f00c 	.word	0x2400f00c
 80079a0:	2400f010 	.word	0x2400f010
 80079a4:	2400f01c 	.word	0x2400f01c
 80079a8:	2400f020 	.word	0x2400f020
 80079ac:	2400f024 	.word	0x2400f024
 80079b0:	2400f028 	.word	0x2400f028
 80079b4:	2400f014 	.word	0x2400f014
 80079b8:	2400f018 	.word	0x2400f018

080079bc <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80079c0:	4b10      	ldr	r3, [pc, #64]	; (8007a04 <_tx_initialize_kernel_enter+0x48>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80079c8:	d00c      	beq.n	80079e4 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80079ca:	4b0e      	ldr	r3, [pc, #56]	; (8007a04 <_tx_initialize_kernel_enter+0x48>)
 80079cc:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80079d0:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80079d2:	f7f8 fc85 	bl	80002e0 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 80079d6:	f7ff ffad 	bl	8007934 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80079da:	4b0b      	ldr	r3, [pc, #44]	; (8007a08 <_tx_initialize_kernel_enter+0x4c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3301      	adds	r3, #1
 80079e0:	4a09      	ldr	r2, [pc, #36]	; (8007a08 <_tx_initialize_kernel_enter+0x4c>)
 80079e2:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80079e4:	4b07      	ldr	r3, [pc, #28]	; (8007a04 <_tx_initialize_kernel_enter+0x48>)
 80079e6:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80079ea:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80079ec:	4b07      	ldr	r3, [pc, #28]	; (8007a0c <_tx_initialize_kernel_enter+0x50>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7f9 f909 	bl	8000c08 <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80079f6:	4b03      	ldr	r3, [pc, #12]	; (8007a04 <_tx_initialize_kernel_enter+0x48>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80079fc:	f7f8 fcc0 	bl	8000380 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8007a00:	bf00      	nop
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	24000020 	.word	0x24000020
 8007a08:	2400f0d0 	.word	0x2400f0d0
 8007a0c:	2400f02c 	.word	0x2400f02c

08007a10 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b08c      	sub	sp, #48	; 0x30
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a1e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007a20:	b672      	cpsid	i
    return(primask_value);
 8007a22:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8007a24:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a2a:	4a32      	ldr	r2, [pc, #200]	; (8007af4 <_tx_mutex_cleanup+0xe4>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d156      	bne.n	8007ade <_tx_mutex_cleanup+0xce>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d150      	bne.n	8007ade <_tx_mutex_cleanup+0xce>
        {
   
            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a40:	62bb      	str	r3, [r7, #40]	; 0x28
    
            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d04a      	beq.n	8007ade <_tx_mutex_cleanup+0xce>
            {
    
                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a2a      	ldr	r2, [pc, #168]	; (8007af8 <_tx_mutex_cleanup+0xe8>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d145      	bne.n	8007ade <_tx_mutex_cleanup+0xce>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8007a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d041      	beq.n	8007ade <_tx_mutex_cleanup+0xce>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8007a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	1e5a      	subs	r2, r3, #1
 8007a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a68:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d103      	bne.n	8007a7e <_tx_mutex_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8007a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a78:	2200      	movs	r2, #0
 8007a7a:	619a      	str	r2, [r3, #24]
 8007a7c:	e013      	b.n	8007aa6 <_tx_mutex_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */
    
                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a82:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a88:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	69fa      	ldr	r2, [r7, #28]
 8007a8e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	6a3a      	ldr	r2, [r7, #32]
 8007a94:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8007a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d102      	bne.n	8007aa6 <_tx_mutex_cleanup+0x96>
                            {
            
                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8007aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa2:	6a3a      	ldr	r2, [r7, #32]
 8007aa4:	619a      	str	r2, [r3, #24]
                            }
                        }
 
                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aaa:	2b0d      	cmp	r3, #13
 8007aac:	d117      	bne.n	8007ade <_tx_mutex_cleanup+0xce>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	221d      	movs	r2, #29
 8007ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8007ab6:	4b11      	ldr	r3, [pc, #68]	; (8007afc <_tx_mutex_cleanup+0xec>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3301      	adds	r3, #1
 8007abc:	4a0f      	ldr	r2, [pc, #60]	; (8007afc <_tx_mutex_cleanup+0xec>)
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f383 8810 	msr	PRIMASK, r3
}
 8007aca:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE
    
                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f002 fef5 	bl	800a8bc <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ad6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007ad8:	b672      	cpsid	i
    return(primask_value);
 8007ada:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8007adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f383 8810 	msr	PRIMASK, r3
}
 8007ae8:	bf00      	nop
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8007aea:	bf00      	nop
 8007aec:	3730      	adds	r7, #48	; 0x30
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	08007a11 	.word	0x08007a11
 8007af8:	4d555445 	.word	0x4d555445
 8007afc:	2400f0d0 	.word	0x2400f0d0

08007b00 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b088      	sub	sp, #32
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007b08:	f3ef 8310 	mrs	r3, PRIMASK
 8007b0c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007b0e:	b672      	cpsid	i
    return(primask_value);
 8007b10:	697b      	ldr	r3, [r7, #20]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8007b12:	61fb      	str	r3, [r7, #28]
    
    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007b14:	4b19      	ldr	r3, [pc, #100]	; (8007b7c <_tx_mutex_thread_release+0x7c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	4a18      	ldr	r2, [pc, #96]	; (8007b7c <_tx_mutex_thread_release+0x7c>)
 8007b1c:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {
    
        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007b24:	61bb      	str	r3, [r7, #24]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d015      	beq.n	8007b58 <_tx_mutex_thread_release+0x58>
        {
        
            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	609a      	str	r2, [r3, #8]
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f383 8810 	msr	PRIMASK, r3
}
 8007b3c:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8007b3e:	69b8      	ldr	r0, [r7, #24]
 8007b40:	f000 fbd6 	bl	80082f0 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007b44:	f3ef 8310 	mrs	r3, PRIMASK
 8007b48:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007b4a:	b672      	cpsid	i
    return(primask_value);
 8007b4c:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8007b4e:	61fb      	str	r3, [r7, #28]

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007b56:	61bb      	str	r3, [r7, #24]
        }
    } while (mutex_ptr != TX_NULL);
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1df      	bne.n	8007b1e <_tx_mutex_thread_release+0x1e>
    
    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8007b5e:	4b07      	ldr	r3, [pc, #28]	; (8007b7c <_tx_mutex_thread_release+0x7c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	4a05      	ldr	r2, [pc, #20]	; (8007b7c <_tx_mutex_thread_release+0x7c>)
 8007b66:	6013      	str	r3, [r2, #0]
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	f383 8810 	msr	PRIMASK, r3
}
 8007b72:	bf00      	nop
    
    /* Restore interrupts.  */
    TX_RESTORE
}
 8007b74:	bf00      	nop
 8007b76:	3720      	adds	r7, #32
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	2400f0d0 	.word	0x2400f0d0

08007b80 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b08a      	sub	sp, #40	; 0x28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8007b8c:	2234      	movs	r2, #52	; 0x34
 8007b8e:	2100      	movs	r1, #0
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f00d fb6b 	bl	801526c <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	611a      	str	r2, [r3, #16]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ba6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007ba8:	b672      	cpsid	i
    return(primask_value);
 8007baa:	69bb      	ldr	r3, [r7, #24]
    
    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	4a1a      	ldr	r2, [pc, #104]	; (8007c1c <_tx_mutex_create+0x9c>)
 8007bb2:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8007bb4:	4b1a      	ldr	r3, [pc, #104]	; (8007c20 <_tx_mutex_create+0xa0>)
 8007bb6:	4a1b      	ldr	r2, [pc, #108]	; (8007c24 <_tx_mutex_create+0xa4>)
 8007bb8:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8007bba:	4b1b      	ldr	r3, [pc, #108]	; (8007c28 <_tx_mutex_create+0xa8>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d109      	bne.n	8007bd6 <_tx_mutex_create+0x56>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8007bc2:	4a1a      	ldr	r2, [pc, #104]	; (8007c2c <_tx_mutex_create+0xac>)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	625a      	str	r2, [r3, #36]	; 0x24
 8007bd4:	e011      	b.n	8007bfa <_tx_mutex_create+0x7a>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8007bd6:	4b15      	ldr	r3, [pc, #84]	; (8007c2c <_tx_mutex_create+0xac>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	69fa      	ldr	r2, [r7, #28]
 8007bf2:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6a3a      	ldr	r2, [r7, #32]
 8007bf8:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8007bfa:	4b0b      	ldr	r3, [pc, #44]	; (8007c28 <_tx_mutex_create+0xa8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	4a09      	ldr	r2, [pc, #36]	; (8007c28 <_tx_mutex_create+0xa8>)
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f383 8810 	msr	PRIMASK, r3
}
 8007c0e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3728      	adds	r7, #40	; 0x28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	4d555445 	.word	0x4d555445
 8007c20:	2400f0d4 	.word	0x2400f0d4
 8007c24:	08007b01 	.word	0x08007b01
 8007c28:	2400f018 	.word	0x2400f018
 8007c2c:	2400f014 	.word	0x2400f014

08007c30 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b092      	sub	sp, #72	; 0x48
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007c38:	f3ef 8310 	mrs	r3, PRIMASK
 8007c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007c3e:	b672      	cpsid	i
    return(primask_value);
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 8007c42:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 8007c4a:	4b47      	ldr	r3, [pc, #284]	; (8007d68 <_tx_mutex_delete+0x138>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	4a45      	ldr	r2, [pc, #276]	; (8007d68 <_tx_mutex_delete+0x138>)
 8007c52:	6013      	str	r3, [r2, #0]
    
    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8007c54:	4b44      	ldr	r3, [pc, #272]	; (8007d68 <_tx_mutex_delete+0x138>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d103      	bne.n	8007c64 <_tx_mutex_delete+0x34>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8007c5c:	4b43      	ldr	r3, [pc, #268]	; (8007d6c <_tx_mutex_delete+0x13c>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	e013      	b.n	8007c8c <_tx_mutex_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	637b      	str	r3, [r7, #52]	; 0x34
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c74:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 8007c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c7a:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 8007c7c:	4b3b      	ldr	r3, [pc, #236]	; (8007d6c <_tx_mutex_delete+0x13c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d102      	bne.n	8007c8c <_tx_mutex_delete+0x5c>
        {
        
            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 8007c86:	4a39      	ldr	r2, [pc, #228]	; (8007d6c <_tx_mutex_delete+0x13c>)
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007c8c:	4b38      	ldr	r3, [pc, #224]	; (8007d70 <_tx_mutex_delete+0x140>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3301      	adds	r3, #1
 8007c92:	4a37      	ldr	r2, [pc, #220]	; (8007d70 <_tx_mutex_delete+0x140>)
 8007c94:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	643b      	str	r3, [r7, #64]	; 0x40
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d011      	beq.n	8007cde <_tx_mutex_delete+0xae>
    {

        /* Yes, remove this mutex from the owned list.  */
        
        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	609a      	str	r2, [r3, #8]
 8007cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cc2:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	f383 8810 	msr	PRIMASK, r3
}
 8007cca:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fb0f 	bl	80082f0 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007cd8:	b672      	cpsid	i
    return(primask_value);
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 8007cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8007cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ce0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	f383 8810 	msr	PRIMASK, r3
}
 8007ce8:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 8007cea:	e022      	b.n	8007d32 <_tx_mutex_delete+0x102>
    {
      
        /* Decrement the suspension count.  */
        suspended_count--;
 8007cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8007cf6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007cf8:	b672      	cpsid	i
    return(primask_value);
 8007cfa:	697b      	ldr	r3, [r7, #20]
      
        /* Lockout interrupts.  */
        TX_DISABLE
 8007cfc:	647b      	str	r3, [r7, #68]	; 0x44

        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8007cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d00:	2200      	movs	r2, #0
 8007d02:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8007d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d06:	2201      	movs	r2, #1
 8007d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8007d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8007d12:	4b17      	ldr	r3, [pc, #92]	; (8007d70 <_tx_mutex_delete+0x140>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3301      	adds	r3, #1
 8007d18:	4a15      	ldr	r2, [pc, #84]	; (8007d70 <_tx_mutex_delete+0x140>)
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d1e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	f383 8810 	msr	PRIMASK, r3
}
 8007d26:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8007d28:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007d2a:	f002 fdc7 	bl	800a8bc <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	643b      	str	r3, [r7, #64]	; 0x40
    while (suspended_count != ((ULONG) 0))
 8007d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1d9      	bne.n	8007cec <_tx_mutex_delete+0xbc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007d38:	f3ef 8310 	mrs	r3, PRIMASK
 8007d3c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007d3e:	b672      	cpsid	i
    return(primask_value);
 8007d40:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8007d42:	647b      	str	r3, [r7, #68]	; 0x44

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8007d44:	4b0a      	ldr	r3, [pc, #40]	; (8007d70 <_tx_mutex_delete+0x140>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	4a09      	ldr	r2, [pc, #36]	; (8007d70 <_tx_mutex_delete+0x140>)
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d50:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f383 8810 	msr	PRIMASK, r3
}
 8007d58:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8007d5a:	f002 fd75 	bl	800a848 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3748      	adds	r7, #72	; 0x48
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	2400f018 	.word	0x2400f018
 8007d6c:	2400f014 	.word	0x2400f014
 8007d70:	2400f0d0 	.word	0x2400f0d0

08007d74 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b090      	sub	sp, #64	; 0x40
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d82:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007d84:	b672      	cpsid	i
    return(primask_value);
 8007d86:	69fb      	ldr	r3, [r7, #28]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8007d88:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8007d8a:	4b7a      	ldr	r3, [pc, #488]	; (8007f74 <_tx_mutex_get+0x200>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d144      	bne.n	8007e22 <_tx_mutex_get+0xae>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007da2:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8007da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d032      	beq.n	8007e10 <_tx_mutex_get+0x9c>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d106      	bne.n	8007dc0 <_tx_mutex_get+0x4c>
            {
         
                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8007db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8007dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007dc6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00f      	beq.n	8007dee <_tx_mutex_get+0x7a>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd2:	623b      	str	r3, [r7, #32]

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a3a      	ldr	r2, [r7, #32]
 8007de4:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dea:	62da      	str	r2, [r3, #44]	; 0x2c
 8007dec:	e009      	b.n	8007e02 <_tx_mutex_get+0x8e>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8007dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8007e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007e08:	1c5a      	adds	r2, r3, #1
 8007e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	f383 8810 	msr	PRIMASK, r3
}
 8007e1a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e20:	e0a2      	b.n	8007f68 <_tx_mutex_get+0x1f4>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d10d      	bne.n	8007e48 <_tx_mutex_get+0xd4>
    {

        /* The owning thread is requesting the mutex again, just 
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	1c5a      	adds	r2, r3, #1
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	609a      	str	r2, [r3, #8]
 8007e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e38:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f383 8810 	msr	PRIMASK, r3
}
 8007e40:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8007e42:	2300      	movs	r3, #0
 8007e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e46:	e08f      	b.n	8007f68 <_tx_mutex_get+0x1f4>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f000 8084 	beq.w	8007f58 <_tx_mutex_get+0x1e4>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8007e50:	4b49      	ldr	r3, [pc, #292]	; (8007f78 <_tx_mutex_get+0x204>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d008      	beq.n	8007e6a <_tx_mutex_get+0xf6>
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f383 8810 	msr	PRIMASK, r3
}
 8007e62:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8007e64:	231d      	movs	r3, #29
 8007e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e68:	e07e      	b.n	8007f68 <_tx_mutex_get+0x1f4>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	633b      	str	r3, [r7, #48]	; 0x30
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8007e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e72:	4a42      	ldr	r2, [pc, #264]	; (8007f7c <_tx_mutex_get+0x208>)
 8007e74:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8007e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8007e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007e82:	1c5a      	adds	r2, r3, #1
 8007e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e86:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d109      	bne.n	8007ea6 <_tx_mutex_get+0x132>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e96:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8007e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e9c:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8007e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ea2:	675a      	str	r2, [r3, #116]	; 0x74
 8007ea4:	e011      	b.n	8007eca <_tx_mutex_get+0x156>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8007eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eb0:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8007eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eb6:	62bb      	str	r3, [r7, #40]	; 0x28
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8007eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ebc:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ec2:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8007ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ec8:	675a      	str	r2, [r3, #116]	; 0x74
                }
            
                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8007ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed6:	220d      	movs	r2, #13
 8007ed8:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007edc:	2201      	movs	r2, #1
 8007ede:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8007ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8007ee6:	4b24      	ldr	r3, [pc, #144]	; (8007f78 <_tx_mutex_get+0x204>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3301      	adds	r3, #1
 8007eec:	4a22      	ldr	r2, [pc, #136]	; (8007f78 <_tx_mutex_get+0x204>)
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f383 8810 	msr	PRIMASK, r3
}
 8007efa:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread 
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d121      	bne.n	8007f48 <_tx_mutex_get+0x1d4>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d903      	bls.n	8007f18 <_tx_mutex_get+0x1a4>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8007f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8007f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d204      	bcs.n	8007f30 <_tx_mutex_get+0x1bc>
                    {
                    
                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8007f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8007f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d905      	bls.n	8007f48 <_tx_mutex_get+0x1d4>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8007f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f40:	4619      	mov	r1, r3
 8007f42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f44:	f000 f90e 	bl	8008164 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8007f48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007f4a:	f002 fdc9 	bl	800aae0 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8007f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f56:	e007      	b.n	8007f68 <_tx_mutex_get+0x1f4>
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f383 8810 	msr	PRIMASK, r3
}
 8007f62:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8007f64:	231d      	movs	r3, #29
 8007f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }

    /* Return completion status.  */
    return(status);
 8007f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3740      	adds	r7, #64	; 0x40
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	2400f034 	.word	0x2400f034
 8007f78:	2400f0d0 	.word	0x2400f0d0
 8007f7c:	08007a11 	.word	0x08007a11

08007f80 <_tx_mutex_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_info_get(TX_MUTEX *mutex_ptr, CHAR **name, ULONG *count, TX_THREAD **owner,
                    TX_THREAD **first_suspended, ULONG *suspended_count, 
                    TX_MUTEX **next_mutex)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b089      	sub	sp, #36	; 0x24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
 8007f8c:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8007f92:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007f94:	b672      	cpsid	i
    return(primask_value);
 8007f96:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8007f98:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the mutex.  */
    if (name != TX_NULL)
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <_tx_mutex_info_get+0x28>
    {
    
        *name =  mutex_ptr -> tx_mutex_name;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the current ownership count of the mutex.  */
    if (count != TX_NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <_tx_mutex_info_get+0x36>
    {
    
        *count =  ((ULONG) mutex_ptr -> tx_mutex_ownership_count);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	689a      	ldr	r2, [r3, #8]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the current owner of the mutex.  */
    if (owner != TX_NULL)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <_tx_mutex_info_get+0x44>
    {
    
        *owner =  mutex_ptr -> tx_mutex_owner;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	68da      	ldr	r2, [r3, #12]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the first thread suspended on this mutex.  */
    if (first_suspended != TX_NULL)
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <_tx_mutex_info_get+0x52>
    {
    
        *first_suspended =  mutex_ptr -> tx_mutex_suspension_list;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	699a      	ldr	r2, [r3, #24]
 8007fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd0:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the number of threads suspended on this mutex.  */
    if (suspended_count != TX_NULL)
 8007fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d003      	beq.n	8007fe0 <_tx_mutex_info_get+0x60>
    {
    
        *suspended_count =  (ULONG) mutex_ptr -> tx_mutex_suspended_count;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	69da      	ldr	r2, [r3, #28]
 8007fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fde:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the pointer to the next mutex created.  */
    if (next_mutex != TX_NULL)
 8007fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <_tx_mutex_info_get+0x6e>
    {
    
        *next_mutex =  mutex_ptr -> tx_mutex_created_next;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6a1a      	ldr	r2, [r3, #32]
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f383 8810 	msr	PRIMASK, r3
}
 8007ff8:	bf00      	nop
    
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3724      	adds	r7, #36	; 0x24
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b090      	sub	sp, #64	; 0x40
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008010:	f3ef 8310 	mrs	r3, PRIMASK
 8008014:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008016:	b672      	cpsid	i
    return(primask_value);
 8008018:	69fb      	ldr	r3, [r7, #28]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800801a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	69db      	ldr	r3, [r3, #28]
 8008020:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8008022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008024:	2b01      	cmp	r3, #1
 8008026:	d805      	bhi.n	8008034 <_tx_mutex_prioritize+0x2c>
 8008028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800802a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	f383 8810 	msr	PRIMASK, r3
}
 8008032:	e090      	b.n	8008156 <_tx_mutex_prioritize+0x14e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8008034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008036:	2b02      	cmp	r3, #2
 8008038:	d114      	bne.n	8008064 <_tx_mutex_prioritize+0x5c>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	633b      	str	r3, [r7, #48]	; 0x30
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8008040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008044:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800804a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804e:	429a      	cmp	r2, r3
 8008050:	d202      	bcs.n	8008058 <_tx_mutex_prioritize+0x50>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008056:	619a      	str	r2, [r3, #24]
 8008058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800805a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f383 8810 	msr	PRIMASK, r3
}
 8008062:	e078      	b.n	8008156 <_tx_mutex_prioritize+0x14e>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800806e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008072:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8008074:	4b3a      	ldr	r3, [pc, #232]	; (8008160 <_tx_mutex_prioritize+0x158>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	3301      	adds	r3, #1
 800807a:	4a39      	ldr	r2, [pc, #228]	; (8008160 <_tx_mutex_prioritize+0x158>)
 800807c:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800807e:	2300      	movs	r3, #0
 8008080:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8008082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808a:	429a      	cmp	r2, r3
 800808c:	d201      	bcs.n	8008092 <_tx_mutex_prioritize+0x8a>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800808e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008090:	637b      	str	r3, [r7, #52]	; 0x34
 8008092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008094:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f383 8810 	msr	PRIMASK, r3
}
 800809c:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800809e:	f3ef 8310 	mrs	r3, PRIMASK
 80080a2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80080a4:	b672      	cpsid	i
    return(primask_value);
 80080a6:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80080a8:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if any changes to the list have occurred while 
               interrupts were enabled.  */
              
            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d002      	beq.n	80080ba <_tx_mutex_prioritize+0xb2>
            {
            
                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 80080b4:	2301      	movs	r3, #1
 80080b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80080b8:	e006      	b.n	80080c8 <_tx_mutex_prioritize+0xc0>
            }
            else
            {
            
                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	69db      	ldr	r3, [r3, #28]
 80080be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d001      	beq.n	80080c8 <_tx_mutex_prioritize+0xc0>
                {
              
                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 80080c4:	2301      	movs	r3, #1
 80080c6:	62bb      	str	r3, [r7, #40]	; 0x28
                }
            }
             
            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 80080c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d103      	bne.n	80080d6 <_tx_mutex_prioritize+0xce>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80080ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80080d4:	e00c      	b.n	80080f0 <_tx_mutex_prioritize+0xe8>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	633b      	str	r3, [r7, #48]	; 0x30
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80080e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ea:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 80080ec:	2300      	movs	r3, #0
 80080ee:	62bb      	str	r3, [r7, #40]	; 0x28
            }

        } while (thread_ptr != head_ptr);
 80080f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d1c4      	bne.n	8008082 <_tx_mutex_prioritize+0x7a>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 80080f8:	4b19      	ldr	r3, [pc, #100]	; (8008160 <_tx_mutex_prioritize+0x158>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	4a18      	ldr	r2, [pc, #96]	; (8008160 <_tx_mutex_prioritize+0x158>)
 8008100:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front 
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8008102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008106:	429a      	cmp	r2, r3
 8008108:	d01d      	beq.n	8008146 <_tx_mutex_prioritize+0x13e>
            /* No, we need to move the highest priority suspended thread to the 
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800810a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810e:	627b      	str	r3, [r7, #36]	; 0x24
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8008110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008114:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	6a3a      	ldr	r2, [r7, #32]
 800811a:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008120:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8008122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008126:	623b      	str	r3, [r7, #32]
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8008128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800812c:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800812e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008130:	6a3a      	ldr	r2, [r7, #32]
 8008132:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008138:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800813e:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008144:	619a      	str	r2, [r3, #24]
 8008146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008148:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	f383 8810 	msr	PRIMASK, r3
}
 8008150:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008152:	f002 fb79 	bl	800a848 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8008156:	2300      	movs	r3, #0
#endif
}
 8008158:	4618      	mov	r0, r3
 800815a:	3740      	adds	r7, #64	; 0x40
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	2400f0d0 	.word	0x2400f0d0

08008164 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b08e      	sub	sp, #56	; 0x38
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800816e:	f3ef 8310 	mrs	r3, PRIMASK
 8008172:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008174:	b672      	cpsid	i
    return(primask_value);
 8008176:	6a3b      	ldr	r3, [r7, #32]


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8008178:	637b      	str	r3, [r7, #52]	; 0x34
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817e:	2b00      	cmp	r3, #0
 8008180:	d017      	beq.n	80081b2 <_tx_mutex_priority_change+0x4e>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	62da      	str	r2, [r3, #44]	; 0x2c
            
        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	429a      	cmp	r2, r3
 8008192:	d905      	bls.n	80081a0 <_tx_mutex_priority_change+0x3c>
        {
        
            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	63da      	str	r2, [r3, #60]	; 0x3c
 800819e:	e002      	b.n	80081a6 <_tx_mutex_priority_change+0x42>
        }
        else
        {
        
            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80081a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	f383 8810 	msr	PRIMASK, r3
}
 80081b0:	e092      	b.n	80082d8 <_tx_mutex_priority_change+0x174>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 80081b2:	4b4b      	ldr	r3, [pc, #300]	; (80082e0 <_tx_mutex_priority_change+0x17c>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 80081be:	4b49      	ldr	r3, [pc, #292]	; (80082e4 <_tx_mutex_priority_change+0x180>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3302      	adds	r3, #2
 80081c4:	4a47      	ldr	r2, [pc, #284]	; (80082e4 <_tx_mutex_priority_change+0x180>)
 80081c6:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	220e      	movs	r2, #14
 80081cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80081da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081dc:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f383 8810 	msr	PRIMASK, r3
}
 80081e4:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the 
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f002 fc7a 	bl	800aae0 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80081ec:	f3ef 8310 	mrs	r3, PRIMASK
 80081f0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80081f2:	b672      	cpsid	i
    return(primask_value);
 80081f4:	69bb      	ldr	r3, [r7, #24]

        /* Disable interrupts.  */
        TX_DISABLE
 80081f6:	637b      	str	r3, [r7, #52]	; 0x34

        /* At this point, the preempt disable flag is still set, so we still have 
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	62da      	str	r2, [r3, #44]	; 0x2c
            
        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	429a      	cmp	r2, r3
 8008208:	d905      	bls.n	8008216 <_tx_mutex_priority_change+0xb2>
        {
        
            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	63da      	str	r2, [r3, #60]	; 0x3c
 8008214:	e002      	b.n	800821c <_tx_mutex_priority_change+0xb8>
        }
        else
        {
        
            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	63da      	str	r2, [r3, #60]	; 0x3c
 800821c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800821e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f383 8810 	msr	PRIMASK, r3
}
 8008226:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f002 fb47 	bl	800a8bc <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800822e:	f3ef 8310 	mrs	r3, PRIMASK
 8008232:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008234:	b672      	cpsid	i
    return(primask_value);
 8008236:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8008238:	637b      	str	r3, [r7, #52]	; 0x34
#endif
        
        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800823a:	4b29      	ldr	r3, [pc, #164]	; (80082e0 <_tx_mutex_priority_change+0x17c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	429a      	cmp	r2, r3
 8008246:	d041      	beq.n	80082cc <_tx_mutex_priority_change+0x168>
        {
        
            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824c:	2b00      	cmp	r3, #0
 800824e:	d13d      	bne.n	80082cc <_tx_mutex_priority_change+0x168>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	429a      	cmp	r2, r3
 800825a:	d811      	bhi.n	8008280 <_tx_mutex_priority_change+0x11c>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	429a      	cmp	r2, r3
 8008262:	d133      	bne.n	80082cc <_tx_mutex_priority_change+0x168>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8008264:	4a1e      	ldr	r2, [pc, #120]	; (80082e0 <_tx_mutex_priority_change+0x17c>)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800826a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	429a      	cmp	r2, r3
 8008270:	d22c      	bcs.n	80082cc <_tx_mutex_priority_change+0x168>
                        {
                        
                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008276:	491c      	ldr	r1, [pc, #112]	; (80082e8 <_tx_mutex_priority_change+0x184>)
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800827e:	e025      	b.n	80082cc <_tx_mutex_priority_change+0x168>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	429a      	cmp	r2, r3
 800828a:	d21f      	bcs.n	80082cc <_tx_mutex_priority_change+0x168>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	429a      	cmp	r2, r3
 8008296:	d80d      	bhi.n	80082b4 <_tx_mutex_priority_change+0x150>
                        {
                
                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8008298:	4a11      	ldr	r2, [pc, #68]	; (80082e0 <_tx_mutex_priority_change+0x17c>)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800829e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d212      	bcs.n	80082cc <_tx_mutex_priority_change+0x168>
                            {
                        
                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082aa:	490f      	ldr	r1, [pc, #60]	; (80082e8 <_tx_mutex_priority_change+0x184>)
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80082b2:	e00b      	b.n	80082cc <_tx_mutex_priority_change+0x168>
                            TX_DIV32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
                            _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                            /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                            TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	2201      	movs	r2, #1
 80082ba:	fa02 f303 	lsl.w	r3, r2, r3
 80082be:	627b      	str	r3, [r7, #36]	; 0x24
                            _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 80082c0:	4b0a      	ldr	r3, [pc, #40]	; (80082ec <_tx_mutex_priority_change+0x188>)
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	4313      	orrs	r3, r2
 80082c8:	4a08      	ldr	r2, [pc, #32]	; (80082ec <_tx_mutex_priority_change+0x188>)
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ce:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f383 8810 	msr	PRIMASK, r3
}
 80082d6:	bf00      	nop
        
        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80082d8:	bf00      	nop
 80082da:	3738      	adds	r7, #56	; 0x38
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	2400f038 	.word	0x2400f038
 80082e4:	2400f0d0 	.word	0x2400f0d0
 80082e8:	2400f050 	.word	0x2400f050
 80082ec:	2400f048 	.word	0x2400f048

080082f0 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b0a0      	sub	sp, #128	; 0x80
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 80082f8:	2320      	movs	r3, #32
 80082fa:	673b      	str	r3, [r7, #112]	; 0x70
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80082fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008300:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008302:	b672      	cpsid	i
    return(primask_value);
 8008304:	6c7b      	ldr	r3, [r7, #68]	; 0x44

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8008306:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 81c0 	beq.w	8008692 <_tx_mutex_put+0x3a2>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	667b      	str	r3, [r7, #100]	; 0x64

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8008318:	4b8b      	ldr	r3, [pc, #556]	; (8008548 <_tx_mutex_put+0x258>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	663b      	str	r3, [r7, #96]	; 0x60

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008324:	429a      	cmp	r2, r3
 8008326:	d00b      	beq.n	8008340 <_tx_mutex_put+0x50>
        {
        
            /* Determine if the preempt disable flag is set, indicating that 
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8008328:	4b88      	ldr	r3, [pc, #544]	; (800854c <_tx_mutex_put+0x25c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d107      	bne.n	8008340 <_tx_mutex_put+0x50>
 8008330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008332:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008336:	f383 8810 	msr	PRIMASK, r3
}
 800833a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800833c:	231e      	movs	r3, #30
 800833e:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }
        
        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8008340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008342:	2b20      	cmp	r3, #32
 8008344:	f040 81ad 	bne.w	80086a2 <_tx_mutex_put+0x3b2>
        {
    
            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	1e5a      	subs	r2, r3, #1
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d008      	beq.n	800836c <_tx_mutex_put+0x7c>
 800835a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800835c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800835e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008360:	f383 8810 	msr	PRIMASK, r3
}
 8008364:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8008366:	2300      	movs	r3, #0
 8008368:	673b      	str	r3, [r7, #112]	; 0x70
 800836a:	e19a      	b.n	80086a2 <_tx_mutex_put+0x3b2>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800836c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800836e:	2b00      	cmp	r3, #0
 8008370:	d108      	bne.n	8008384 <_tx_mutex_put+0x94>
 8008372:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008374:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008378:	f383 8810 	msr	PRIMASK, r3
}
 800837c:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800837e:	2300      	movs	r3, #0
 8008380:	673b      	str	r3, [r7, #112]	; 0x70
 8008382:	e18e      	b.n	80086a2 <_tx_mutex_put+0x3b2>
                    /* The mutex is now available.   */
            
                    /* Remove this mutex from the owned mutex list.  */
                    
                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8008384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008386:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800838a:	1e5a      	subs	r2, r3, #1
 800838c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800838e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8008392:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008394:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008398:	2b00      	cmp	r3, #0
 800839a:	d104      	bne.n	80083a6 <_tx_mutex_put+0xb6>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800839c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800839e:	2200      	movs	r2, #0
 80083a0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80083a4:	e015      	b.n	80083d2 <_tx_mutex_put+0xe2>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083aa:	66fb      	str	r3, [r7, #108]	; 0x6c
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b0:	65fb      	str	r3, [r7, #92]	; 0x5c
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 80083b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083b6:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 80083b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083bc:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 80083be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d103      	bne.n	80083d2 <_tx_mutex_put+0xe2>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 80083ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083ce:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10e      	bne.n	80083f8 <_tx_mutex_put+0x108>
                    {
                    
                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10a      	bne.n	80083f8 <_tx_mutex_put+0x108>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	60da      	str	r2, [r3, #12]
 80083e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083ea:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80083ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ee:	f383 8810 	msr	PRIMASK, r3
}
 80083f2:	bf00      	nop
                            
                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 80083f4:	2300      	movs	r3, #0
 80083f6:	673b      	str	r3, [r7, #112]	; 0x70
                        }
                    }
                     
                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 80083f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083fa:	2b20      	cmp	r3, #32
 80083fc:	f040 8151 	bne.w	80086a2 <_tx_mutex_put+0x3b2>
                    {
   
                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8008400:	2300      	movs	r3, #0
 8008402:	67bb      	str	r3, [r7, #120]	; 0x78
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8008404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008406:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800840a:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d140      	bne.n	8008496 <_tx_mutex_put+0x1a6>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008414:	4b4d      	ldr	r3, [pc, #308]	; (800854c <_tx_mutex_put+0x25c>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	3301      	adds	r3, #1
 800841a:	4a4c      	ldr	r2, [pc, #304]	; (800854c <_tx_mutex_put+0x25c>)
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008420:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008424:	f383 8810 	msr	PRIMASK, r3
}
 8008428:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800842a:	2320      	movs	r3, #32
 800842c:	66bb      	str	r3, [r7, #104]	; 0x68
                            
                            /* Search the owned mutexes for this thread to determine the highest priority for this 
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800842e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008430:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008434:	66fb      	str	r3, [r7, #108]	; 0x6c
                            while (next_mutex != TX_NULL)
 8008436:	e016      	b.n	8008466 <_tx_mutex_put+0x176>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8008438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d107      	bne.n	8008450 <_tx_mutex_put+0x160>
                                {
                            
                                    /* Determine if highest priority field of the mutex is higher than the priority to 
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8008440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008444:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008446:	429a      	cmp	r2, r3
 8008448:	d902      	bls.n	8008450 <_tx_mutex_put+0x160>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800844a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800844c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844e:	66bb      	str	r3, [r7, #104]	; 0x68
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8008450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008454:	66fb      	str	r3, [r7, #108]	; 0x6c

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8008456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008458:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800845c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800845e:	429a      	cmp	r2, r3
 8008460:	d101      	bne.n	8008466 <_tx_mutex_put+0x176>
                                {
                            
                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8008462:	2300      	movs	r3, #0
 8008464:	66fb      	str	r3, [r7, #108]	; 0x6c
                            while (next_mutex != TX_NULL)
 8008466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1e5      	bne.n	8008438 <_tx_mutex_put+0x148>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800846c:	f3ef 8310 	mrs	r3, PRIMASK
 8008470:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008472:	b672      	cpsid	i
    return(primask_value);
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8008476:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8008478:	4b34      	ldr	r3, [pc, #208]	; (800854c <_tx_mutex_put+0x25c>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3b01      	subs	r3, #1
 800847e:	4a33      	ldr	r2, [pc, #204]	; (800854c <_tx_mutex_put+0x25c>)
 8008480:	6013      	str	r3, [r2, #0]
#endif
                       
                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8008482:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008484:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008486:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                                
                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 800848a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800848c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800848e:	429a      	cmp	r2, r3
 8008490:	d201      	bcs.n	8008496 <_tx_mutex_put+0x1a6>
                            {
                            
                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8008492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008494:	677b      	str	r3, [r7, #116]	; 0x74
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	69db      	ldr	r3, [r3, #28]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d91c      	bls.n	80084d8 <_tx_mutex_put+0x1e8>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d118      	bne.n	80084d8 <_tx_mutex_put+0x1e8>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 80084a6:	4b29      	ldr	r3, [pc, #164]	; (800854c <_tx_mutex_put+0x25c>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3301      	adds	r3, #1
 80084ac:	4a27      	ldr	r2, [pc, #156]	; (800854c <_tx_mutex_put+0x25c>)
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084b2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	f383 8810 	msr	PRIMASK, r3
}
 80084ba:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7ff fda3 	bl	8008008 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80084c2:	f3ef 8310 	mrs	r3, PRIMASK
 80084c6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 80084c8:	b672      	cpsid	i
    return(primask_value);
 80084ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 80084cc:	67fb      	str	r3, [r7, #124]	; 0x7c

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 80084ce:	4b1f      	ldr	r3, [pc, #124]	; (800854c <_tx_mutex_put+0x25c>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3b01      	subs	r3, #1
 80084d4:	4a1d      	ldr	r2, [pc, #116]	; (800854c <_tx_mutex_put+0x25c>)
 80084d6:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d137      	bne.n	8008550 <_tx_mutex_put+0x260>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80084e0:	4b1a      	ldr	r3, [pc, #104]	; (800854c <_tx_mutex_put+0x25c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3301      	adds	r3, #1
 80084e6:	4a19      	ldr	r2, [pc, #100]	; (800854c <_tx_mutex_put+0x25c>)
 80084e8:	6013      	str	r3, [r2, #0]
 80084ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084ec:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	f383 8810 	msr	PRIMASK, r3
}
 80084f4:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that 
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2220      	movs	r2, #32
 80084fa:	629a      	str	r2, [r3, #40]	; 0x28
  
                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008502:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008504:	429a      	cmp	r2, r3
 8008506:	d005      	beq.n	8008514 <_tx_mutex_put+0x224>
                            {
                      
                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff fe28 	bl	8008164 <_tx_mutex_priority_change>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008514:	f3ef 8310 	mrs	r3, PRIMASK
 8008518:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800851a:	b672      	cpsid	i
    return(primask_value);
 800851c:	69bb      	ldr	r3, [r7, #24]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 800851e:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8008520:	4b0a      	ldr	r3, [pc, #40]	; (800854c <_tx_mutex_put+0x25c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3b01      	subs	r3, #1
 8008526:	4a09      	ldr	r2, [pc, #36]	; (800854c <_tx_mutex_put+0x25c>)
 8008528:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	60da      	str	r2, [r3, #12]
 8008530:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008532:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	f383 8810 	msr	PRIMASK, r3
}
 800853a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 800853c:	f002 f984 	bl	800a848 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8008540:	2300      	movs	r3, #0
 8008542:	673b      	str	r3, [r7, #112]	; 0x70
 8008544:	e0ad      	b.n	80086a2 <_tx_mutex_put+0x3b2>
 8008546:	bf00      	nop
 8008548:	2400f034 	.word	0x2400f034
 800854c:	2400f0d0 	.word	0x2400f0d0
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	667b      	str	r3, [r7, #100]	; 0x64

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d109      	bne.n	8008572 <_tx_mutex_put+0x282>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	67bb      	str	r3, [r7, #120]	; 0x78
        
                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8008564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2220      	movs	r2, #32
 8008570:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8008572:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008574:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008578:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800857a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10a      	bne.n	8008596 <_tx_mutex_put+0x2a6>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8008580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	631a      	str	r2, [r3, #48]	; 0x30
 8008594:	e012      	b.n	80085bc <_tx_mutex_put+0x2cc>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8008596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008598:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800859c:	66fb      	str	r3, [r7, #108]	; 0x6c
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800859e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a2:	65fb      	str	r3, [r7, #92]	; 0x5c

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80085a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80085aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085b4:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80085ba:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 80085bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085be:	1c5a      	adds	r2, r3, #1
 80085c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085c2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80085d0:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	69db      	ldr	r3, [r3, #28]
 80085d6:	1e5a      	subs	r2, r3, #1
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	61da      	str	r2, [r3, #28]
                
                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	69db      	ldr	r3, [r3, #28]
 80085e0:	657b      	str	r3, [r7, #84]	; 0x54

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 80085e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d103      	bne.n	80085f0 <_tx_mutex_put+0x300>
                            {

                                /* Yes, the only suspended thread.  */
    
                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	619a      	str	r2, [r3, #24]
 80085ee:	e00e      	b.n	800860e <_tx_mutex_put+0x31e>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 80085f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f4:	653b      	str	r3, [r7, #80]	; 0x50
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085fa:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80085fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008600:	64fb      	str	r3, [r7, #76]	; 0x4c
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8008602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008604:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008606:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8008608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800860a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800860c:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800860e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008610:	2200      	movs	r2, #0
 8008612:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8008614:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008616:	2200      	movs	r2, #0
 8008618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800861c:	4b23      	ldr	r3, [pc, #140]	; (80086ac <_tx_mutex_put+0x3bc>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3301      	adds	r3, #1
 8008622:	4a22      	ldr	r2, [pc, #136]	; (80086ac <_tx_mutex_put+0x3bc>)
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008628:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f383 8810 	msr	PRIMASK, r3
}
 8008630:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d125      	bne.n	8008686 <_tx_mutex_put+0x396>
                            {

                                /* Yes, priority inheritance is requested.  */
        
                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d018      	beq.n	8008674 <_tx_mutex_put+0x384>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7ff fce0 	bl	8008008 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008648:	f3ef 8310 	mrs	r3, PRIMASK
 800864c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800864e:	b672      	cpsid	i
    return(primask_value);
 8008650:	693b      	ldr	r3, [r7, #16]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8008652:	67fb      	str	r3, [r7, #124]	; 0x7c

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	64bb      	str	r3, [r7, #72]	; 0x48
                                    if (suspended_thread != TX_NULL)
 800865a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800865c:	2b00      	cmp	r3, #0
 800865e:	d003      	beq.n	8008668 <_tx_mutex_put+0x378>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8008660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	629a      	str	r2, [r3, #40]	; 0x28
 8008668:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800866a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f383 8810 	msr	PRIMASK, r3
}
 8008672:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */
                    
                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8008674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008678:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800867a:	429a      	cmp	r2, r3
 800867c:	d003      	beq.n	8008686 <_tx_mutex_put+0x396>
                                {
        
                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 800867e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008680:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8008682:	f7ff fd6f 	bl	8008164 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8008686:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8008688:	f002 f918 	bl	800a8bc <_tx_thread_system_resume>
#endif
                     
                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 800868c:	2300      	movs	r3, #0
 800868e:	673b      	str	r3, [r7, #112]	; 0x70
 8008690:	e007      	b.n	80086a2 <_tx_mutex_put+0x3b2>
 8008692:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008694:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	f383 8810 	msr	PRIMASK, r3
}
 800869c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 800869e:	231e      	movs	r3, #30
 80086a0:	673b      	str	r3, [r7, #112]	; 0x70
    }

    /* Return the completion status.  */
    return(status);
 80086a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3780      	adds	r7, #128	; 0x80
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	2400f0d0 	.word	0x2400f0d0

080086b0 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08c      	sub	sp, #48	; 0x30
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80086ba:	f3ef 8310 	mrs	r3, PRIMASK
 80086be:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80086c0:	b672      	cpsid	i
    return(primask_value);
 80086c2:	69bb      	ldr	r3, [r7, #24]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 80086c4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086ca:	4a36      	ldr	r2, [pc, #216]	; (80087a4 <_tx_queue_cleanup+0xf4>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d15f      	bne.n	8008790 <_tx_queue_cleanup+0xe0>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d159      	bne.n	8008790 <_tx_queue_cleanup+0xe0>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086e0:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 80086e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d053      	beq.n	8008790 <_tx_queue_cleanup+0xe0>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a2e      	ldr	r2, [pc, #184]	; (80087a8 <_tx_queue_cleanup+0xf8>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d14e      	bne.n	8008790 <_tx_queue_cleanup+0xe0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d04a      	beq.n	8008790 <_tx_queue_cleanup+0xe0>
#endif

                        /* Yes, we still have thread suspension!  */
    
                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8008700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	1e5a      	subs	r2, r3, #1
 8008706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008708:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 800870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870e:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	2b00      	cmp	r3, #0
 8008714:	d103      	bne.n	800871e <_tx_queue_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8008716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008718:	2200      	movs	r2, #0
 800871a:	629a      	str	r2, [r3, #40]	; 0x28
 800871c:	e013      	b.n	8008746 <_tx_queue_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008722:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008728:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	69fa      	ldr	r2, [r7, #28]
 800872e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	6a3a      	ldr	r2, [r7, #32]
 8008734:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 8008736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	429a      	cmp	r2, r3
 800873e:	d102      	bne.n	8008746 <_tx_queue_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8008740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008742:	6a3a      	ldr	r2, [r7, #32]
 8008744:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800874a:	2b05      	cmp	r3, #5
 800874c:	d120      	bne.n	8008790 <_tx_queue_cleanup+0xe0>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 800874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d004      	beq.n	8008760 <_tx_queue_cleanup+0xb0>
                            {
            
                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	220b      	movs	r2, #11
 800875a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800875e:	e003      	b.n	8008768 <_tx_queue_cleanup+0xb8>
                            }
                            else
                            {
            
                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	220a      	movs	r2, #10
 8008764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008768:	4b10      	ldr	r3, [pc, #64]	; (80087ac <_tx_queue_cleanup+0xfc>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3301      	adds	r3, #1
 800876e:	4a0f      	ldr	r2, [pc, #60]	; (80087ac <_tx_queue_cleanup+0xfc>)
 8008770:	6013      	str	r3, [r2, #0]
 8008772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008774:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	f383 8810 	msr	PRIMASK, r3
}
 800877c:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f002 f89c 	bl	800a8bc <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008784:	f3ef 8310 	mrs	r3, PRIMASK
 8008788:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800878a:	b672      	cpsid	i
    return(primask_value);
 800878c:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800878e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008792:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f383 8810 	msr	PRIMASK, r3
}
 800879a:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800879c:	bf00      	nop
 800879e:	3730      	adds	r7, #48	; 0x30
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	080086b1 	.word	0x080086b1
 80087a8:	51554555 	.word	0x51554555
 80087ac:	2400f0d0 	.word	0x2400f0d0

080087b0 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, 
                        VOID *queue_start, ULONG queue_size)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b08c      	sub	sp, #48	; 0x30
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
 80087bc:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 80087be:	2244      	movs	r2, #68	; 0x44
 80087c0:	2100      	movs	r1, #0
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f00c fd52 	bl	801526c <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	605a      	str	r2, [r3, #4]
    
    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087da:	fbb2 f3f3 	udiv	r3, r2, r3
 80087de:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 80087e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	fb02 f303 	mul.w	r3, r2, r3
 80087e8:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of 
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	699a      	ldr	r2, [r3, #24]
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	441a      	add	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	683a      	ldr	r2, [r7, #0]
 8008802:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800880e:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008814:	60da      	str	r2, [r3, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008816:	f3ef 8310 	mrs	r3, PRIMASK
 800881a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800881c:	b672      	cpsid	i
    return(primask_value);
 800881e:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 8008820:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	4a18      	ldr	r2, [pc, #96]	; (8008888 <_tx_queue_create+0xd8>)
 8008826:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8008828:	4b18      	ldr	r3, [pc, #96]	; (800888c <_tx_queue_create+0xdc>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d109      	bne.n	8008844 <_tx_queue_create+0x94>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 8008830:	4a17      	ldr	r2, [pc, #92]	; (8008890 <_tx_queue_create+0xe0>)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	635a      	str	r2, [r3, #52]	; 0x34
 8008842:	e011      	b.n	8008868 <_tx_queue_create+0xb8>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8008844:	4b12      	ldr	r3, [pc, #72]	; (8008890 <_tx_queue_create+0xe0>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 800884a:	6a3b      	ldr	r3, [r7, #32]
 800884c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884e:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	69fa      	ldr	r2, [r7, #28]
 8008860:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6a3a      	ldr	r2, [r7, #32]
 8008866:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8008868:	4b08      	ldr	r3, [pc, #32]	; (800888c <_tx_queue_create+0xdc>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3301      	adds	r3, #1
 800886e:	4a07      	ldr	r2, [pc, #28]	; (800888c <_tx_queue_create+0xdc>)
 8008870:	6013      	str	r3, [r2, #0]
 8008872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008874:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f383 8810 	msr	PRIMASK, r3
}
 800887c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3730      	adds	r7, #48	; 0x30
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	51554555 	.word	0x51554555
 800888c:	2400f008 	.word	0x2400f008
 8008890:	2400f004 	.word	0x2400f004

08008894 <_tx_queue_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_delete(TX_QUEUE *queue_ptr)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b08e      	sub	sp, #56	; 0x38
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800889c:	f3ef 8310 	mrs	r3, PRIMASK
 80088a0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80088a2:	b672      	cpsid	i
    return(primask_value);
 80088a4:	69fb      	ldr	r3, [r7, #28]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Disable interrupts to remove the queue from the created list.  */
    TX_DISABLE
 80088a6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_QUEUE_DELETE_INSERT

    /* Clear the queue ID to make it invalid.  */
    queue_ptr -> tx_queue_id =  TX_CLEAR_ID;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created queues.  */
    _tx_queue_created_count--;
 80088ae:	4b3b      	ldr	r3, [pc, #236]	; (800899c <_tx_queue_delete+0x108>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	4a39      	ldr	r2, [pc, #228]	; (800899c <_tx_queue_delete+0x108>)
 80088b6:	6013      	str	r3, [r2, #0]

    /* See if the queue is the only one on the list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 80088b8:	4b38      	ldr	r3, [pc, #224]	; (800899c <_tx_queue_delete+0x108>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d103      	bne.n	80088c8 <_tx_queue_delete+0x34>
    {

        /* Only created queue, just set the created list to NULL.  */
        _tx_queue_created_ptr =  TX_NULL;
 80088c0:	4b37      	ldr	r3, [pc, #220]	; (80089a0 <_tx_queue_delete+0x10c>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	e013      	b.n	80088f0 <_tx_queue_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_queue =                               queue_ptr -> tx_queue_created_next;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088cc:	62bb      	str	r3, [r7, #40]	; 0x28
        previous_queue =                           queue_ptr -> tx_queue_created_previous;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
        next_queue -> tx_queue_created_previous =  previous_queue;
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088d8:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  next_queue;
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088de:	631a      	str	r2, [r3, #48]	; 0x30

        /* See if we have to update the created list head pointer.  */
        if (_tx_queue_created_ptr == queue_ptr)
 80088e0:	4b2f      	ldr	r3, [pc, #188]	; (80089a0 <_tx_queue_delete+0x10c>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d102      	bne.n	80088f0 <_tx_queue_delete+0x5c>
        {
        
            /* Yes, move the head pointer to the next link. */
            _tx_queue_created_ptr =  next_queue;
 80088ea:	4a2d      	ldr	r2, [pc, #180]	; (80089a0 <_tx_queue_delete+0x10c>)
 80088ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ee:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80088f0:	4b2c      	ldr	r3, [pc, #176]	; (80089a4 <_tx_queue_delete+0x110>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3301      	adds	r3, #1
 80088f6:	4a2b      	ldr	r2, [pc, #172]	; (80089a4 <_tx_queue_delete+0x110>)
 80088f8:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             queue_ptr -> tx_queue_suspension_list;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fe:	637b      	str	r3, [r7, #52]	; 0x34
    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	629a      	str	r2, [r3, #40]	; 0x28
    suspended_count =                        queue_ptr -> tx_queue_suspended_count;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890a:	633b      	str	r3, [r7, #48]	; 0x30
    queue_ptr -> tx_queue_suspended_count =  TX_NO_SUSPENSIONS;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	62da      	str	r2, [r3, #44]	; 0x2c
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	f383 8810 	msr	PRIMASK, r3
}
 800891c:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the queue list to resume any and all threads suspended
       on this queue.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 800891e:	e022      	b.n	8008966 <_tx_queue_delete+0xd2>
    {
      
        /* Decrement the suspension count.  */
        suspended_count--;
 8008920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008922:	3b01      	subs	r3, #1
 8008924:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008926:	f3ef 8310 	mrs	r3, PRIMASK
 800892a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800892c:	b672      	cpsid	i
    return(primask_value);
 800892e:	693b      	ldr	r3, [r7, #16]

        /* Lockout interrupts.  */
        TX_DISABLE
 8008930:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008934:	2200      	movs	r2, #0
 8008936:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8008938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893a:	2201      	movs	r2, #1
 800893c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8008940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008944:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8008946:	4b17      	ldr	r3, [pc, #92]	; (80089a4 <_tx_queue_delete+0x110>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	3301      	adds	r3, #1
 800894c:	4a15      	ldr	r2, [pc, #84]	; (80089a4 <_tx_queue_delete+0x110>)
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	f383 8810 	msr	PRIMASK, r3
}
 800895a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800895c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800895e:	f001 ffad 	bl	800a8bc <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	637b      	str	r3, [r7, #52]	; 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1d9      	bne.n	8008920 <_tx_queue_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800896c:	f3ef 8310 	mrs	r3, PRIMASK
 8008970:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008972:	b672      	cpsid	i
    return(primask_value);
 8008974:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_QUEUE_DELETE_PORT_COMPLETION(queue_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8008976:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8008978:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <_tx_queue_delete+0x110>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3b01      	subs	r3, #1
 800897e:	4a09      	ldr	r2, [pc, #36]	; (80089a4 <_tx_queue_delete+0x110>)
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008984:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f383 8810 	msr	PRIMASK, r3
}
 800898c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800898e:	f001 ff5b 	bl	800a848 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3738      	adds	r7, #56	; 0x38
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	2400f008 	.word	0x2400f008
 80089a0:	2400f004 	.word	0x2400f004
 80089a4:	2400f0d0 	.word	0x2400f0d0

080089a8 <_tx_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_flush(TX_QUEUE *queue_ptr)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08c      	sub	sp, #48	; 0x30
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
UINT            suspended_count;
TX_THREAD       *thread_ptr;


    /* Initialize the suspended count and list.  */
    suspended_count =  TX_NO_SUSPENSIONS;
 80089b0:	2300      	movs	r3, #0
 80089b2:	62bb      	str	r3, [r7, #40]	; 0x28
    suspension_list =  TX_NULL;
 80089b4:	2300      	movs	r3, #0
 80089b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80089b8:	f3ef 8310 	mrs	r3, PRIMASK
 80089bc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80089be:	b672      	cpsid	i
    return(primask_value);
 80089c0:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to reset various queue parameters.  */
    TX_DISABLE
 80089c2:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_FLUSH_INSERT

    /* Determine if there is something on the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d023      	beq.n	8008a14 <_tx_queue_flush+0x6c>
    {

        /* Yes, there is something in the queue.  */

        /* Reset the queue parameters to erase all of the queued messages.  */
        queue_ptr -> tx_queue_enqueued =           TX_NO_MESSAGES;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	611a      	str	r2, [r3, #16]
        queue_ptr -> tx_queue_available_storage =  queue_ptr -> tx_queue_capacity;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68da      	ldr	r2, [r3, #12]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	615a      	str	r2, [r3, #20]
        queue_ptr -> tx_queue_read =               queue_ptr -> tx_queue_start;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	699a      	ldr	r2, [r3, #24]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	621a      	str	r2, [r3, #32]
        queue_ptr -> tx_queue_write =              queue_ptr -> tx_queue_start;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	699a      	ldr	r2, [r3, #24]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Now determine if there are any threads suspended on a full queue.  */
        if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d010      	beq.n	8008a14 <_tx_queue_flush+0x6c>

            /* Yes, there are threads suspended on this queue, they must be 
               resumed!  */

            /* Copy the information into temporary variables.  */
            suspension_list =  queue_ptr -> tx_queue_suspension_list;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f6:	62fb      	str	r3, [r7, #44]	; 0x2c
            suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fc:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Clear the queue variables.  */
            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	629a      	str	r2, [r3, #40]	; 0x28
            queue_ptr -> tx_queue_suspended_count =  TX_NO_SUSPENSIONS;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008a0a:	4b2a      	ldr	r3, [pc, #168]	; (8008ab4 <_tx_queue_flush+0x10c>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	4a28      	ldr	r2, [pc, #160]	; (8008ab4 <_tx_queue_flush+0x10c>)
 8008a12:	6013      	str	r3, [r2, #0]
 8008a14:	6a3b      	ldr	r3, [r7, #32]
 8008a16:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	f383 8810 	msr	PRIMASK, r3
}
 8008a1e:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the queue list to resume any and all threads suspended
       on this queue.  */
    if (suspended_count != TX_NO_SUSPENSIONS)
 8008a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d040      	beq.n	8008aa8 <_tx_queue_flush+0x100>
    {

        /* Pickup the thread to resume.  */
        thread_ptr =  suspension_list;
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
        while (suspended_count != ((ULONG) 0))
 8008a2a:	e025      	b.n	8008a78 <_tx_queue_flush+0xd0>
        {
        
            /* Decrement the suspension count.  */
            suspended_count--;
 8008a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL thread pointer.  */
            if (thread_ptr == TX_NULL)
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d023      	beq.n	8008a80 <_tx_queue_flush+0xd8>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008a38:	f3ef 8310 	mrs	r3, PRIMASK
 8008a3c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008a3e:	b672      	cpsid	i
    return(primask_value);
 8008a40:	693b      	ldr	r3, [r7, #16]
            }

            /* Resume the next suspended thread.  */
            
            /* Lockout interrupts.  */
            TX_DISABLE
 8008a42:	623b      	str	r3, [r7, #32]

            /* Clear the cleanup pointer, this prevents the timeout from doing 
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	2200      	movs	r2, #0
 8008a48:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set the return status in the thread to TX_SUCCESS.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a56:	627b      	str	r3, [r7, #36]	; 0x24
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 8008a58:	4b16      	ldr	r3, [pc, #88]	; (8008ab4 <_tx_queue_flush+0x10c>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	4a15      	ldr	r2, [pc, #84]	; (8008ab4 <_tx_queue_flush+0x10c>)
 8008a60:	6013      	str	r3, [r2, #0]
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	f383 8810 	msr	PRIMASK, r3
}
 8008a6c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
    
            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a72:	4618      	mov	r0, r3
 8008a74:	f001 ff22 	bl	800a8bc <_tx_thread_system_resume>
        while (suspended_count != ((ULONG) 0))
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1d6      	bne.n	8008a2c <_tx_queue_flush+0x84>
 8008a7e:	e000      	b.n	8008a82 <_tx_queue_flush+0xda>
                break;
 8008a80:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008a82:	f3ef 8310 	mrs	r3, PRIMASK
 8008a86:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008a88:	b672      	cpsid	i
    return(primask_value);
 8008a8a:	68bb      	ldr	r3, [r7, #8]
#endif
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8008a8c:	623b      	str	r3, [r7, #32]

        /* Restore previous preempt posture.  */
        _tx_thread_preempt_disable--;
 8008a8e:	4b09      	ldr	r3, [pc, #36]	; (8008ab4 <_tx_queue_flush+0x10c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	4a07      	ldr	r2, [pc, #28]	; (8008ab4 <_tx_queue_flush+0x10c>)
 8008a96:	6013      	str	r3, [r2, #0]
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f383 8810 	msr	PRIMASK, r3
}
 8008aa2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008aa4:	f001 fed0 	bl	800a848 <_tx_thread_system_preempt_check>
    }

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3730      	adds	r7, #48	; 0x30
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	2400f0d0 	.word	0x2400f0d0

08008ab8 <_tx_queue_front_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_front_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b094      	sub	sp, #80	; 0x50
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8008acc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008ace:	b672      	cpsid	i
    return(primask_value);
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8008ad2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_FRONT_SEND_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Now check for room in the queue for placing the new message in front.  */
    if (queue_ptr -> tx_queue_available_storage != ((UINT) 0))
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f000 80be 	beq.w	8008c60 <_tx_queue_front_send+0x1a8>
    {

        /* Yes there is room in the queue. Now determine if there is a thread waiting 
           for a message.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d155      	bne.n	8008b96 <_tx_queue_front_send+0xde>

            /* Adjust the read pointer since we are adding to the front of the
               queue.  */

            /* See if the read pointer is at the beginning of the queue area.  */
            if (queue_ptr -> tx_queue_read == queue_ptr -> tx_queue_start)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6a1a      	ldr	r2, [r3, #32]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d109      	bne.n	8008b0a <_tx_queue_front_send+0x52>
            {
            
                /* Adjust the read pointer to the last message at the end of the
                   queue.  */
                queue_ptr -> tx_queue_read =  TX_ULONG_POINTER_SUB(queue_ptr -> tx_queue_end, queue_ptr -> tx_queue_message_size);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	69da      	ldr	r2, [r3, #28]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	425b      	negs	r3, r3
 8008b02:	441a      	add	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	621a      	str	r2, [r3, #32]
 8008b08:	e008      	b.n	8008b1c <_tx_queue_front_send+0x64>
            }
            else
            {
            
                /* Not at the beginning of the queue, just move back one message.  */
                queue_ptr -> tx_queue_read =  TX_ULONG_POINTER_SUB(queue_ptr -> tx_queue_read, queue_ptr -> tx_queue_message_size);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6a1a      	ldr	r2, [r3, #32]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	425b      	negs	r3, r3
 8008b16:	441a      	add	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	621a      	str	r2, [r3, #32]
            }

            /* Simply place the message in the queue.  */
            
            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	1e5a      	subs	r2, r3, #1
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_read;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6a1b      	ldr	r3, [r3, #32]
 8008b38:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8008b40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b42:	1d13      	adds	r3, r2, #4
 8008b44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b48:	1d19      	adds	r1, r3, #4
 8008b4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008b4c:	6812      	ldr	r2, [r2, #0]
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d90e      	bls.n	8008b74 <_tx_queue_front_send+0xbc>
 8008b56:	e007      	b.n	8008b68 <_tx_queue_front_send+0xb0>
 8008b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b5a:	1d13      	adds	r3, r2, #4
 8008b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b60:	1d19      	adds	r1, r3, #4
 8008b62:	64b9      	str	r1, [r7, #72]	; 0x48
 8008b64:	6812      	ldr	r2, [r2, #0]
 8008b66:	601a      	str	r2, [r3, #0]
 8008b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	647b      	str	r3, [r7, #68]	; 0x44
 8008b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1f1      	bne.n	8008b58 <_tx_queue_front_send+0xa0>

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b7c:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	f383 8810 	msr	PRIMASK, r3
}
 8008b84:	bf00      	nop
            TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (queue_send_notify != TX_NULL)
 8008b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 80e8 	beq.w	8008d5e <_tx_queue_front_send+0x2a6>
            {

                /* Call application queue send notification.  */
                (queue_send_notify)(queue_ptr);
 8008b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	4798      	blx	r3
 8008b94:	e0e3      	b.n	8008d5e <_tx_queue_front_send+0x2a6>
        else
        {

            /* Thread suspended waiting for a message.  Remove it and copy this message
               into its storage area.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9a:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8008ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d103      	bne.n	8008bb0 <_tx_queue_front_send+0xf8>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	629a      	str	r2, [r3, #40]	; 0x28
 8008bae:	e012      	b.n	8008bd6 <_tx_queue_front_send+0x11e>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8008bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8008bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bbc:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc2:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8008bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8008bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bce:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8008bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bd4:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bda:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bde:	2200      	movs	r2, #0
 8008be0:	669a      	str	r2, [r3, #104]	; 0x68


#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8008bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bf0:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8008bf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bfa:	1d13      	adds	r3, r2, #4
 8008bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c00:	1d19      	adds	r1, r3, #4
 8008c02:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c04:	6812      	ldr	r2, [r2, #0]
 8008c06:	601a      	str	r2, [r3, #0]
 8008c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d90e      	bls.n	8008c2c <_tx_queue_front_send+0x174>
 8008c0e:	e007      	b.n	8008c20 <_tx_queue_front_send+0x168>
 8008c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c12:	1d13      	adds	r3, r2, #4
 8008c14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c18:	1d19      	adds	r1, r3, #4
 8008c1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c1c:	6812      	ldr	r2, [r2, #0]
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c22:	3b01      	subs	r3, #1
 8008c24:	647b      	str	r3, [r7, #68]	; 0x44
 8008c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1f1      	bne.n	8008c10 <_tx_queue_front_send+0x158>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8008c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008c34:	4b4c      	ldr	r3, [pc, #304]	; (8008d68 <_tx_queue_front_send+0x2b0>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	4a4b      	ldr	r2, [pc, #300]	; (8008d68 <_tx_queue_front_send+0x2b0>)
 8008c3c:	6013      	str	r3, [r2, #0]
 8008c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c40:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	f383 8810 	msr	PRIMASK, r3
}
 8008c48:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8008c4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008c4c:	f001 fe36 	bl	800a8bc <_tx_thread_system_resume>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (queue_send_notify != TX_NULL)
 8008c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 8083 	beq.w	8008d5e <_tx_queue_front_send+0x2a6>
            {

                /* Call application queue send notification.  */
                (queue_send_notify)(queue_ptr);
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	4798      	blx	r3
 8008c5e:	e07e      	b.n	8008d5e <_tx_queue_front_send+0x2a6>
#endif
        }
    }

    /* Determine if the caller has requested suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d073      	beq.n	8008d4e <_tx_queue_front_send+0x296>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8008c66:	4b40      	ldr	r3, [pc, #256]	; (8008d68 <_tx_queue_front_send+0x2b0>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d008      	beq.n	8008c80 <_tx_queue_front_send+0x1c8>
 8008c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c70:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	f383 8810 	msr	PRIMASK, r3
}
 8008c78:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8008c7a:	230b      	movs	r3, #11
 8008c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8008c7e:	e06e      	b.n	8008d5e <_tx_queue_front_send+0x2a6>
            /* Yes, suspension is requested.  */

            /* Prepare for suspension of this thread.  */
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8008c80:	4b3a      	ldr	r3, [pc, #232]	; (8008d6c <_tx_queue_front_send+0x2b4>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8008c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c88:	4a39      	ldr	r2, [pc, #228]	; (8008d70 <_tx_queue_front_send+0x2b8>)
 8008c8a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8008c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8008c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	67da      	str	r2, [r3, #124]	; 0x7c

            /* Set the flag to true to indicate a queue front send suspension.  */
            thread_ptr -> tx_thread_suspend_option =           TX_TRUE;
 8008c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8008ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008ca6:	1c5a      	adds	r2, r3, #1
 8008ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008caa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

            /* Place this thread at the front of the suspension list, since it is a
               queue front send suspension.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8008cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d109      	bne.n	8008cc8 <_tx_queue_front_send+0x210>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cb8:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8008cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cbe:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8008cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cc4:	675a      	str	r2, [r3, #116]	; 0x74
 8008cc6:	e014      	b.n	8008cf2 <_tx_queue_front_send+0x23a>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ccc:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8008cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cd2:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8008cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8008cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cde:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ce4:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cea:	675a      	str	r2, [r3, #116]	; 0x74

                /* Update the suspension list to put this thread in front, which will put
                   the message that was removed in the proper relative order when room is 
                   made in the queue.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cf0:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8008cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf4:	1c5a      	adds	r2, r3, #1
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8008cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfc:	2205      	movs	r2, #5
 8008cfe:	631a      	str	r2, [r3, #48]	; 0x30

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d04:	62bb      	str	r3, [r7, #40]	; 0x28
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d08:	2201      	movs	r2, #1
 8008d0a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8008d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008d12:	4b15      	ldr	r3, [pc, #84]	; (8008d68 <_tx_queue_front_send+0x2b0>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3301      	adds	r3, #1
 8008d18:	4a13      	ldr	r2, [pc, #76]	; (8008d68 <_tx_queue_front_send+0x2b0>)
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d1e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f383 8810 	msr	PRIMASK, r3
}
 8008d26:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8008d28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008d2a:	f001 fed9 	bl	800aae0 <_tx_thread_system_suspend>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (thread_ptr -> tx_thread_suspend_status == TX_SUCCESS)
 8008d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d105      	bne.n	8008d44 <_tx_queue_front_send+0x28c>
            {

                /* Check for a notify callback.  */
                if (queue_send_notify != TX_NULL)
 8008d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d002      	beq.n	8008d44 <_tx_queue_front_send+0x28c>
                {

                    /* Call application queue send notification.  */
                    (queue_send_notify)(queue_ptr);
 8008d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	4798      	blx	r3
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8008d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d4a:	643b      	str	r3, [r7, #64]	; 0x40
 8008d4c:	e007      	b.n	8008d5e <_tx_queue_front_send+0x2a6>
 8008d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d50:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	f383 8810 	msr	PRIMASK, r3
}
 8008d58:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* No room in queue and no suspension requested, return error completion.  */
        status =  TX_QUEUE_FULL;
 8008d5a:	230b      	movs	r3, #11
 8008d5c:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 8008d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3750      	adds	r7, #80	; 0x50
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	2400f0d0 	.word	0x2400f0d0
 8008d6c:	2400f034 	.word	0x2400f034
 8008d70:	080086b1 	.word	0x080086b1

08008d74 <_tx_queue_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_info_get(TX_QUEUE *queue_ptr, CHAR **name, ULONG *enqueued, ULONG *available_storage,
                    TX_THREAD **first_suspended, ULONG *suspended_count, TX_QUEUE **next_queue)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b089      	sub	sp, #36	; 0x24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008d82:	f3ef 8310 	mrs	r3, PRIMASK
 8008d86:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008d88:	b672      	cpsid	i
    return(primask_value);
 8008d8a:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8008d8c:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the queue.  */
    if (name != TX_NULL)
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d003      	beq.n	8008d9c <_tx_queue_info_get+0x28>
    {
    
        *name =  queue_ptr -> tx_queue_name;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the number of messages currently in the queue.  */
    if (enqueued != TX_NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <_tx_queue_info_get+0x36>
    {
    
        *enqueued =  (ULONG) queue_ptr -> tx_queue_enqueued;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	691a      	ldr	r2, [r3, #16]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the number of messages that will still fit in the queue.  */
    if (available_storage != TX_NULL)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d003      	beq.n	8008db8 <_tx_queue_info_get+0x44>
    {
    
        *available_storage =  (ULONG) queue_ptr -> tx_queue_available_storage;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	695a      	ldr	r2, [r3, #20]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the first thread suspended on this queue.  */
    if (first_suspended != TX_NULL)
 8008db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d003      	beq.n	8008dc6 <_tx_queue_info_get+0x52>
    {
    
        *first_suspended =  queue_ptr -> tx_queue_suspension_list;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the number of threads suspended on this queue.  */
    if (suspended_count != TX_NULL)
 8008dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <_tx_queue_info_get+0x60>
    {
    
        *suspended_count =  (ULONG) queue_ptr -> tx_queue_suspended_count;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the pointer to the next queue created.  */
    if (next_queue != TX_NULL)
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <_tx_queue_info_get+0x6e>
    {
    
        *next_queue =  queue_ptr -> tx_queue_created_next;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f383 8810 	msr	PRIMASK, r3
}
 8008dec:	bf00      	nop
    
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3724      	adds	r7, #36	; 0x24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <_tx_queue_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_prioritize(TX_QUEUE *queue_ptr)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b090      	sub	sp, #64	; 0x40
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008e04:	f3ef 8310 	mrs	r3, PRIMASK
 8008e08:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008e0a:	b672      	cpsid	i
    return(primask_value);
 8008e0c:	69fb      	ldr	r3, [r7, #28]
TX_THREAD       *previous_thread;
UINT            list_changed;


    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8008e0e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e14:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8008e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d805      	bhi.n	8008e28 <_tx_queue_prioritize+0x2c>
 8008e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e1e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	f383 8810 	msr	PRIMASK, r3
}
 8008e26:	e090      	b.n	8008f4a <_tx_queue_prioritize+0x14e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this queue.  */
    else if (suspended_count == ((UINT) 2))
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d114      	bne.n	8008e58 <_tx_queue_prioritize+0x5c>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  queue_ptr -> tx_queue_suspension_list;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e32:	633b      	str	r3, [r7, #48]	; 0x30
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8008e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e38:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d202      	bcs.n	8008e4c <_tx_queue_prioritize+0x50>
        {

            /* Yes, move the list head to the next thread.  */
            queue_ptr -> tx_queue_suspension_list =  next_thread;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e4a:	629a      	str	r2, [r3, #40]	; 0x28
 8008e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e4e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f383 8810 	msr	PRIMASK, r3
}
 8008e56:	e078      	b.n	8008f4a <_tx_queue_prioritize+0x14e>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   queue_ptr -> tx_queue_suspension_list;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8008e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e66:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8008e68:	4b3a      	ldr	r3, [pc, #232]	; (8008f54 <_tx_queue_prioritize+0x158>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	4a39      	ldr	r2, [pc, #228]	; (8008f54 <_tx_queue_prioritize+0x158>)
 8008e70:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8008e72:	2300      	movs	r3, #0
 8008e74:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8008e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d201      	bcs.n	8008e86 <_tx_queue_prioritize+0x8a>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8008e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e84:	637b      	str	r3, [r7, #52]	; 0x34
 8008e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e88:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f383 8810 	msr	PRIMASK, r3
}
 8008e90:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008e92:	f3ef 8310 	mrs	r3, PRIMASK
 8008e96:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008e98:	b672      	cpsid	i
    return(primask_value);
 8008e9a:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8008e9c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if any changes to the list have occurred while 
               interrupts were enabled.  */
              
            /* Is the list head the same?  */
            if (head_ptr != queue_ptr -> tx_queue_suspension_list)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d002      	beq.n	8008eae <_tx_queue_prioritize+0xb2>
            {
            
                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8008eac:	e006      	b.n	8008ebc <_tx_queue_prioritize+0xc0>
            }
            else
            {
            
                /* Is the suspended count the same?  */
                if (suspended_count != queue_ptr -> tx_queue_suspended_count)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d001      	beq.n	8008ebc <_tx_queue_prioritize+0xc0>
                {
              
                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	62bb      	str	r3, [r7, #40]	; 0x28
                }
            }
             
            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8008ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d103      	bne.n	8008eca <_tx_queue_prioritize+0xce>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8008ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ec8:	e00c      	b.n	8008ee4 <_tx_queue_prioritize+0xe8>
            }
            else
            {

                /* Save the suspension count and head pointer.  */
                head_ptr =   queue_ptr -> tx_queue_suspension_list;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ece:	633b      	str	r3, [r7, #48]	; 0x30
                suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8008ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed8:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8008eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ede:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	62bb      	str	r3, [r7, #40]	; 0x28
            }

        } while (thread_ptr != head_ptr);
 8008ee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d1c4      	bne.n	8008e76 <_tx_queue_prioritize+0x7a>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8008eec:	4b19      	ldr	r3, [pc, #100]	; (8008f54 <_tx_queue_prioritize+0x158>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	4a18      	ldr	r2, [pc, #96]	; (8008f54 <_tx_queue_prioritize+0x158>)
 8008ef4:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front 
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8008ef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d01d      	beq.n	8008f3a <_tx_queue_prioritize+0x13e>
            /* No, we need to move the highest priority suspended thread to the 
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8008efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f02:	627b      	str	r3, [r7, #36]	; 0x24
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8008f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f08:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0c:	6a3a      	ldr	r2, [r7, #32]
 8008f0e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f14:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f1a:	623b      	str	r3, [r7, #32]
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8008f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f20:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8008f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f24:	6a3a      	ldr	r2, [r7, #32]
 8008f26:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8008f28:	6a3b      	ldr	r3, [r7, #32]
 8008f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f2c:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f32:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            queue_ptr -> tx_queue_suspension_list =  priority_thread_ptr;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f38:	629a      	str	r2, [r3, #40]	; 0x28
 8008f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f3c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f383 8810 	msr	PRIMASK, r3
}
 8008f44:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008f46:	f001 fc7f 	bl	800a848 <_tx_thread_system_preempt_check>
    }

    /* Return successful status.  */
    return(TX_SUCCESS);
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3740      	adds	r7, #64	; 0x40
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	2400f0d0 	.word	0x2400f0d0

08008f58 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b094      	sub	sp, #80	; 0x50
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8008f64:	2300      	movs	r3, #0
 8008f66:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008f68:	f3ef 8310 	mrs	r3, PRIMASK
 8008f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008f6e:	b672      	cpsid	i
    return(primask_value);
 8008f70:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 8008f72:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	63bb      	str	r3, [r7, #56]	; 0x38
    
    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 8136 	beq.w	80091f0 <_tx_queue_receive+0x298>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8008f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d13c      	bne.n	8009004 <_tx_queue_receive+0xac>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */
            
            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8008f9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f9c:	1d13      	adds	r3, r2, #4
 8008f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa2:	1d19      	adds	r1, r3, #4
 8008fa4:	64b9      	str	r1, [r7, #72]	; 0x48
 8008fa6:	6812      	ldr	r2, [r2, #0]
 8008fa8:	601a      	str	r2, [r3, #0]
 8008faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d90e      	bls.n	8008fce <_tx_queue_receive+0x76>
 8008fb0:	e007      	b.n	8008fc2 <_tx_queue_receive+0x6a>
 8008fb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fb4:	1d13      	adds	r3, r2, #4
 8008fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fba:	1d19      	adds	r1, r3, #4
 8008fbc:	64b9      	str	r1, [r7, #72]	; 0x48
 8008fbe:	6812      	ldr	r2, [r2, #0]
 8008fc0:	601a      	str	r2, [r3, #0]
 8008fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8008fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1f1      	bne.n	8008fb2 <_tx_queue_receive+0x5a>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d102      	bne.n	8008fde <_tx_queue_receive+0x86>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        
            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fe2:	621a      	str	r2, [r3, #32]
        
            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	1c5a      	adds	r2, r3, #1
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	1e5a      	subs	r2, r3, #1
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	611a      	str	r2, [r3, #16]
 8008ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffe:	f383 8810 	msr	PRIMASK, r3
}
 8009002:	e163      	b.n	80092cc <_tx_queue_receive+0x374>
        {
        
            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009008:	637b      	str	r3, [r7, #52]	; 0x34

            /* Now determine if there is a queue front suspension active.   */
    
            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 800900a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800900c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009010:	2b01      	cmp	r3, #1
 8009012:	d153      	bne.n	80090bc <_tx_queue_receive+0x164>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8009014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009018:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are 
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8009024:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009026:	1d13      	adds	r3, r2, #4
 8009028:	64fb      	str	r3, [r7, #76]	; 0x4c
 800902a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800902c:	1d19      	adds	r1, r3, #4
 800902e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009030:	6812      	ldr	r2, [r2, #0]
 8009032:	601a      	str	r2, [r3, #0]
 8009034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009036:	2b01      	cmp	r3, #1
 8009038:	d90e      	bls.n	8009058 <_tx_queue_receive+0x100>
 800903a:	e007      	b.n	800904c <_tx_queue_receive+0xf4>
 800903c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800903e:	1d13      	adds	r3, r2, #4
 8009040:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009044:	1d19      	adds	r1, r3, #4
 8009046:	64b9      	str	r1, [r7, #72]	; 0x48
 8009048:	6812      	ldr	r2, [r2, #0]
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800904e:	3b01      	subs	r3, #1
 8009050:	647b      	str	r3, [r7, #68]	; 0x44
 8009052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1f1      	bne.n	800903c <_tx_queue_receive+0xe4>

                /* Message is now in the caller's destination. See if this is the only suspended thread 
                   on the list.  */
                suspended_count--;
 8009058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905a:	3b01      	subs	r3, #1
 800905c:	63bb      	str	r3, [r7, #56]	; 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 800905e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009060:	2b00      	cmp	r3, #0
 8009062:	d103      	bne.n	800906c <_tx_queue_receive+0x114>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	629a      	str	r2, [r3, #40]	; 0x28
 800906a:	e00e      	b.n	800908a <_tx_queue_receive+0x132>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 800906c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009070:	633b      	str	r3, [r7, #48]	; 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009076:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8009078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800907a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800907c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009082:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8009084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009088:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800908e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009092:	2200      	movs	r2, #0
 8009094:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009098:	2200      	movs	r2, #0
 800909a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800909e:	4b8e      	ldr	r3, [pc, #568]	; (80092d8 <_tx_queue_receive+0x380>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3301      	adds	r3, #1
 80090a4:	4a8c      	ldr	r2, [pc, #560]	; (80092d8 <_tx_queue_receive+0x380>)
 80090a6:	6013      	str	r3, [r2, #0]
 80090a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090aa:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	f383 8810 	msr	PRIMASK, r3
}
 80090b2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 80090b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80090b6:	f001 fc01 	bl	800a8bc <_tx_thread_system_resume>
 80090ba:	e107      	b.n	80092cc <_tx_queue_receive+0x374>
                /* At this point, we know that the queue is full and there 
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6a1b      	ldr	r3, [r3, #32]
 80090c0:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are 
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80090cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090ce:	1d13      	adds	r3, r2, #4
 80090d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090d4:	1d19      	adds	r1, r3, #4
 80090d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80090d8:	6812      	ldr	r2, [r2, #0]
 80090da:	601a      	str	r2, [r3, #0]
 80090dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d90e      	bls.n	8009100 <_tx_queue_receive+0x1a8>
 80090e2:	e007      	b.n	80090f4 <_tx_queue_receive+0x19c>
 80090e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090e6:	1d13      	adds	r3, r2, #4
 80090e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ec:	1d19      	adds	r1, r3, #4
 80090ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80090f0:	6812      	ldr	r2, [r2, #0]
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090f6:	3b01      	subs	r3, #1
 80090f8:	647b      	str	r3, [r7, #68]	; 0x44
 80090fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1f1      	bne.n	80090e4 <_tx_queue_receive+0x18c>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	69db      	ldr	r3, [r3, #28]
 8009104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009106:	429a      	cmp	r2, r3
 8009108:	d102      	bne.n	8009110 <_tx_queue_receive+0x1b8>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	64fb      	str	r3, [r7, #76]	; 0x4c
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009114:	621a      	str	r2, [r3, #32]
  
                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8009116:	4b70      	ldr	r3, [pc, #448]	; (80092d8 <_tx_queue_receive+0x380>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3301      	adds	r3, #1
 800911c:	4a6e      	ldr	r2, [pc, #440]	; (80092d8 <_tx_queue_receive+0x380>)
 800911e:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8009120:	4b6d      	ldr	r3, [pc, #436]	; (80092d8 <_tx_queue_receive+0x380>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3b01      	subs	r3, #1
 8009126:	4a6c      	ldr	r2, [pc, #432]	; (80092d8 <_tx_queue_receive+0x380>)
 8009128:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800912a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800912c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800912e:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  queue_ptr -> tx_queue_write;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009134:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are 
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800913c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800913e:	1d13      	adds	r3, r2, #4
 8009140:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009144:	1d19      	adds	r1, r3, #4
 8009146:	64b9      	str	r1, [r7, #72]	; 0x48
 8009148:	6812      	ldr	r2, [r2, #0]
 800914a:	601a      	str	r2, [r3, #0]
 800914c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800914e:	2b01      	cmp	r3, #1
 8009150:	d90e      	bls.n	8009170 <_tx_queue_receive+0x218>
 8009152:	e007      	b.n	8009164 <_tx_queue_receive+0x20c>
 8009154:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009156:	1d13      	adds	r3, r2, #4
 8009158:	64fb      	str	r3, [r7, #76]	; 0x4c
 800915a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800915c:	1d19      	adds	r1, r3, #4
 800915e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009160:	6812      	ldr	r2, [r2, #0]
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009166:	3b01      	subs	r3, #1
 8009168:	647b      	str	r3, [r7, #68]	; 0x44
 800916a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1f1      	bne.n	8009154 <_tx_queue_receive+0x1fc>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	69db      	ldr	r3, [r3, #28]
 8009174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009176:	429a      	cmp	r2, r3
 8009178:	d102      	bne.n	8009180 <_tx_queue_receive+0x228>
                {
            
                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009184:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918a:	637b      	str	r3, [r7, #52]	; 0x34

                /* Message is now in the queue.  See if this is the only suspended thread 
                   on the list.  */
                suspended_count--;
 800918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918e:	3b01      	subs	r3, #1
 8009190:	63bb      	str	r3, [r7, #56]	; 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 8009192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009194:	2b00      	cmp	r3, #0
 8009196:	d103      	bne.n	80091a0 <_tx_queue_receive+0x248>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	629a      	str	r2, [r3, #40]	; 0x28
 800919e:	e00e      	b.n	80091be <_tx_queue_receive+0x266>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80091a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a4:	633b      	str	r3, [r7, #48]	; 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091aa:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80091ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091b6:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 80091b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091bc:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091c2:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80091c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c6:	2200      	movs	r2, #0
 80091c8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80091ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091cc:	2200      	movs	r2, #0
 80091ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80091d2:	4b41      	ldr	r3, [pc, #260]	; (80092d8 <_tx_queue_receive+0x380>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3301      	adds	r3, #1
 80091d8:	4a3f      	ldr	r2, [pc, #252]	; (80092d8 <_tx_queue_receive+0x380>)
 80091da:	6013      	str	r3, [r2, #0]
 80091dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091de:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	f383 8810 	msr	PRIMASK, r3
}
 80091e6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 80091e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80091ea:	f001 fb67 	bl	800a8bc <_tx_thread_system_resume>
 80091ee:	e06d      	b.n	80092cc <_tx_queue_receive+0x374>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d062      	beq.n	80092bc <_tx_queue_receive+0x364>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80091f6:	4b38      	ldr	r3, [pc, #224]	; (80092d8 <_tx_queue_receive+0x380>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d008      	beq.n	8009210 <_tx_queue_receive+0x2b8>
 80091fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009200:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	f383 8810 	msr	PRIMASK, r3
}
 8009208:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
           
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 800920a:	230a      	movs	r3, #10
 800920c:	643b      	str	r3, [r7, #64]	; 0x40
 800920e:	e05d      	b.n	80092cc <_tx_queue_receive+0x374>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8009210:	4b32      	ldr	r3, [pc, #200]	; (80092dc <_tx_queue_receive+0x384>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8009216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009218:	4a31      	ldr	r2, [pc, #196]	; (80092e0 <_tx_queue_receive+0x388>)
 800921a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800921c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 8009222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8009228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922a:	2200      	movs	r2, #0
 800922c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8009230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009232:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 800923e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009240:	2b00      	cmp	r3, #0
 8009242:	d109      	bne.n	8009258 <_tx_queue_receive+0x300>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009248:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800924a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800924e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8009250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009254:	675a      	str	r2, [r3, #116]	; 0x74
 8009256:	e011      	b.n	800927c <_tx_queue_receive+0x324>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925c:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 800925e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009262:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8009264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009268:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800926a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800926e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8009270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009274:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8009276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800927a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 800927c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927e:	1c5a      	adds	r2, r3, #1
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8009284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009286:	2205      	movs	r2, #5
 8009288:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800928a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928c:	2201      	movs	r2, #1
 800928e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009296:	4b10      	ldr	r3, [pc, #64]	; (80092d8 <_tx_queue_receive+0x380>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3301      	adds	r3, #1
 800929c:	4a0e      	ldr	r2, [pc, #56]	; (80092d8 <_tx_queue_receive+0x380>)
 800929e:	6013      	str	r3, [r2, #0]
 80092a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a2:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	f383 8810 	msr	PRIMASK, r3
}
 80092aa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80092ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80092ae:	f001 fc17 	bl	800aae0 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80092b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092b8:	643b      	str	r3, [r7, #64]	; 0x40
 80092ba:	e007      	b.n	80092cc <_tx_queue_receive+0x374>
 80092bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092be:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f383 8810 	msr	PRIMASK, r3
}
 80092c6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
           
        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 80092c8:	230a      	movs	r3, #10
 80092ca:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 80092cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3750      	adds	r7, #80	; 0x50
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	2400f0d0 	.word	0x2400f0d0
 80092dc:	2400f034 	.word	0x2400f034
 80092e0:	080086b1 	.word	0x080086b1

080092e4 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b094      	sub	sp, #80	; 0x50
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80092f0:	2300      	movs	r3, #0
 80092f2:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80092f4:	f3ef 8310 	mrs	r3, PRIMASK
 80092f8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 80092fa:	b672      	cpsid	i
    return(primask_value);
 80092fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 80092fe:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009304:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 80af 	beq.w	800946e <_tx_queue_send+0x18a>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8009310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009312:	2b00      	cmp	r3, #0
 8009314:	d147      	bne.n	80093a6 <_tx_queue_send+0xc2>
        {
        
            /* No suspended threads, simply place the message in the queue.  */
            
            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	1e5a      	subs	r2, r3, #1
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009332:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 800933a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800933c:	1d13      	adds	r3, r2, #4
 800933e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009342:	1d19      	adds	r1, r3, #4
 8009344:	64b9      	str	r1, [r7, #72]	; 0x48
 8009346:	6812      	ldr	r2, [r2, #0]
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800934c:	2b01      	cmp	r3, #1
 800934e:	d90e      	bls.n	800936e <_tx_queue_send+0x8a>
 8009350:	e007      	b.n	8009362 <_tx_queue_send+0x7e>
 8009352:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009354:	1d13      	adds	r3, r2, #4
 8009356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800935a:	1d19      	adds	r1, r3, #4
 800935c:	64b9      	str	r1, [r7, #72]	; 0x48
 800935e:	6812      	ldr	r2, [r2, #0]
 8009360:	601a      	str	r2, [r3, #0]
 8009362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009364:	3b01      	subs	r3, #1
 8009366:	647b      	str	r3, [r7, #68]	; 0x44
 8009368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1f1      	bne.n	8009352 <_tx_queue_send+0x6e>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009374:	429a      	cmp	r2, r3
 8009376:	d102      	bne.n	800937e <_tx_queue_send+0x9a>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009382:	625a      	str	r2, [r3, #36]	; 0x24

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009388:	62bb      	str	r3, [r7, #40]	; 0x28
 800938a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800938c:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	f383 8810 	msr	PRIMASK, r3
}
 8009394:	bf00      	nop
            TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (queue_send_notify != TX_NULL)
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 80e4 	beq.w	8009566 <_tx_queue_send+0x282>
            {

                /* Call application queue send notification.  */
                (queue_send_notify)(queue_ptr);
 800939e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	4798      	blx	r3
 80093a4:	e0df      	b.n	8009566 <_tx_queue_send+0x282>
            /* There is a thread suspended on an empty queue. Simply 
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093aa:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 80093ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ae:	3b01      	subs	r3, #1
 80093b0:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 80093b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d103      	bne.n	80093c0 <_tx_queue_send+0xdc>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	629a      	str	r2, [r3, #40]	; 0x28
 80093be:	e012      	b.n	80093e6 <_tx_queue_send+0x102>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 80093c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80093c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093cc:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093d2:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80093d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 80093da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093de:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093e4:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ea:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80093ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ee:	2200      	movs	r2, #0
 80093f0:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80093f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093fa:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8009402:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009404:	1d13      	adds	r3, r2, #4
 8009406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800940a:	1d19      	adds	r1, r3, #4
 800940c:	64b9      	str	r1, [r7, #72]	; 0x48
 800940e:	6812      	ldr	r2, [r2, #0]
 8009410:	601a      	str	r2, [r3, #0]
 8009412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009414:	2b01      	cmp	r3, #1
 8009416:	d90e      	bls.n	8009436 <_tx_queue_send+0x152>
 8009418:	e007      	b.n	800942a <_tx_queue_send+0x146>
 800941a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800941c:	1d13      	adds	r3, r2, #4
 800941e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009422:	1d19      	adds	r1, r3, #4
 8009424:	64b9      	str	r1, [r7, #72]	; 0x48
 8009426:	6812      	ldr	r2, [r2, #0]
 8009428:	601a      	str	r2, [r3, #0]
 800942a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800942c:	3b01      	subs	r3, #1
 800942e:	647b      	str	r3, [r7, #68]	; 0x44
 8009430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1f1      	bne.n	800941a <_tx_queue_send+0x136>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009438:	2200      	movs	r2, #0
 800943a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009442:	62bb      	str	r3, [r7, #40]	; 0x28
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009444:	4b4a      	ldr	r3, [pc, #296]	; (8009570 <_tx_queue_send+0x28c>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3301      	adds	r3, #1
 800944a:	4a49      	ldr	r2, [pc, #292]	; (8009570 <_tx_queue_send+0x28c>)
 800944c:	6013      	str	r3, [r2, #0]
 800944e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009450:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	f383 8810 	msr	PRIMASK, r3
}
 8009458:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800945a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800945c:	f001 fa2e 	bl	800a8bc <_tx_thread_system_resume>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (queue_send_notify != TX_NULL)
 8009460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009462:	2b00      	cmp	r3, #0
 8009464:	d07f      	beq.n	8009566 <_tx_queue_send+0x282>
            {

                /* Call application queue send notification.  */
                (queue_send_notify)(queue_ptr);
 8009466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	4798      	blx	r3
 800946c:	e07b      	b.n	8009566 <_tx_queue_send+0x282>
#endif
        }
    }
    
    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d070      	beq.n	8009556 <_tx_queue_send+0x272>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8009474:	4b3e      	ldr	r3, [pc, #248]	; (8009570 <_tx_queue_send+0x28c>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d008      	beq.n	800948e <_tx_queue_send+0x1aa>
 800947c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	f383 8810 	msr	PRIMASK, r3
}
 8009486:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8009488:	230b      	movs	r3, #11
 800948a:	643b      	str	r3, [r7, #64]	; 0x40
 800948c:	e06b      	b.n	8009566 <_tx_queue_send+0x282>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800948e:	4b39      	ldr	r3, [pc, #228]	; (8009574 <_tx_queue_send+0x290>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8009494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009496:	4a38      	ldr	r2, [pc, #224]	; (8009578 <_tx_queue_send+0x294>)
 8009498:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 800949a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 80094a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 80094a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a8:	2200      	movs	r2, #0
 80094aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80094ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 80094bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d109      	bne.n	80094d6 <_tx_queue_send+0x1f2>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094c6:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 80094c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094cc:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 80094ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094d2:	675a      	str	r2, [r3, #116]	; 0x74
 80094d4:	e011      	b.n	80094fa <_tx_queue_send+0x216>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094da:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80094dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094e0:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80094e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80094e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094ec:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80094ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094f2:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80094f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094f8:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 80094fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8009502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009504:	2205      	movs	r2, #5
 8009506:	631a      	str	r2, [r3, #48]	; 0x30

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950c:	62bb      	str	r3, [r7, #40]	; 0x28
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800950e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009510:	2201      	movs	r2, #1
 8009512:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800951a:	4b15      	ldr	r3, [pc, #84]	; (8009570 <_tx_queue_send+0x28c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3301      	adds	r3, #1
 8009520:	4a13      	ldr	r2, [pc, #76]	; (8009570 <_tx_queue_send+0x28c>)
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009526:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	f383 8810 	msr	PRIMASK, r3
}
 800952e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8009530:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009532:	f001 fad5 	bl	800aae0 <_tx_thread_system_suspend>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if a notify callback is required.  */
            if (thread_ptr -> tx_thread_suspend_status == TX_SUCCESS)
 8009536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800953c:	2b00      	cmp	r3, #0
 800953e:	d105      	bne.n	800954c <_tx_queue_send+0x268>
            {

                /* Determine if there is a notify callback.  */
                if (queue_send_notify != TX_NULL)
 8009540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009542:	2b00      	cmp	r3, #0
 8009544:	d002      	beq.n	800954c <_tx_queue_send+0x268>
                {

                    /* Call application queue send notification.  */
                    (queue_send_notify)(queue_ptr);
 8009546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	4798      	blx	r3
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800954c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009552:	643b      	str	r3, [r7, #64]	; 0x40
 8009554:	e007      	b.n	8009566 <_tx_queue_send+0x282>
 8009556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009558:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f383 8810 	msr	PRIMASK, r3
}
 8009560:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 8009562:	230b      	movs	r3, #11
 8009564:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 8009566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8009568:	4618      	mov	r0, r3
 800956a:	3750      	adds	r7, #80	; 0x50
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	2400f0d0 	.word	0x2400f0d0
 8009574:	2400f034 	.word	0x2400f034
 8009578:	080086b1 	.word	0x080086b1

0800957c <_tx_queue_send_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send_notify(TX_QUEUE *queue_ptr, VOID (*queue_send_notify)(TX_QUEUE *notify_queue_ptr))
{
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009586:	f3ef 8310 	mrs	r3, PRIMASK
 800958a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800958c:	b672      	cpsid	i
    return(primask_value);
 800958e:	68fb      	ldr	r3, [r7, #12]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8009590:	617b      	str	r3, [r7, #20]

    /* Make entry in event log.  */
    TX_EL_QUEUE_SEND_NOTIFY_INSERT

    /* Setup queue send notification callback function.  */
    queue_ptr -> tx_queue_send_notify =  queue_send_notify;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	683a      	ldr	r2, [r7, #0]
 8009596:	639a      	str	r2, [r3, #56]	; 0x38
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	f383 8810 	msr	PRIMASK, r3
}
 80095a2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return success to caller.  */
    return(TX_SUCCESS);
 80095a4:	2300      	movs	r3, #0
#endif
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	371c      	adds	r7, #28
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
	...

080095b4 <_tx_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b08e      	sub	sp, #56	; 0x38
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80095be:	2300      	movs	r3, #0
 80095c0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80095c2:	f3ef 8310 	mrs	r3, PRIMASK
 80095c6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80095c8:	b672      	cpsid	i
    return(primask_value);
 80095ca:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 80095cc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_CEILING_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 80095d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d124      	bne.n	8009624 <_tx_semaphore_ceiling_put+0x70>
    {

        /* Determine if the ceiling has been exceeded.  */
        if (semaphore_ptr -> tx_semaphore_count >= ceiling)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d808      	bhi.n	80095f6 <_tx_semaphore_ceiling_put+0x42>
 80095e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	f383 8810 	msr	PRIMASK, r3
}
 80095ee:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Return an error.  */
            status =  TX_CEILING_EXCEEDED;
 80095f0:	2321      	movs	r3, #33	; 0x21
 80095f2:	637b      	str	r3, [r7, #52]	; 0x34
 80095f4:	e053      	b.n	800969e <_tx_semaphore_ceiling_put+0xea>
        }
        else
        {

            /* Increment the semaphore count.  */
            semaphore_ptr -> tx_semaphore_count++;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	1c5a      	adds	r2, r3, #1
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	609a      	str	r2, [r3, #8]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Pickup the application notify function.  */
            semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	69db      	ldr	r3, [r3, #28]
 8009604:	61fb      	str	r3, [r7, #28]
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	f383 8810 	msr	PRIMASK, r3
}
 8009610:	bf00      	nop
            TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if notification is required.  */
            if (semaphore_put_notify != TX_NULL)
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d002      	beq.n	800961e <_tx_semaphore_ceiling_put+0x6a>
            {

                /* Yes, call the appropriate notify callback function.  */
                (semaphore_put_notify)(semaphore_ptr);
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	4798      	blx	r3
            }
#endif

            /* Return successful completion status.  */
            status =  TX_SUCCESS;
 800961e:	2300      	movs	r3, #0
 8009620:	637b      	str	r3, [r7, #52]	; 0x34
 8009622:	e03c      	b.n	800969e <_tx_semaphore_ceiling_put+0xea>
    {

        /* Remove the suspended thread from the list.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	62bb      	str	r3, [r7, #40]	; 0x28

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800962a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962c:	3b01      	subs	r3, #1
 800962e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (suspended_count == TX_NO_SUSPENSIONS)
 8009630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009632:	2b00      	cmp	r3, #0
 8009634:	d103      	bne.n	800963e <_tx_semaphore_ceiling_put+0x8a>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	60da      	str	r2, [r3, #12]
 800963c:	e00e      	b.n	800965c <_tx_semaphore_ceiling_put+0xa8>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800963e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009642:	627b      	str	r3, [r7, #36]	; 0x24
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009648:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800964e:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	6a3a      	ldr	r2, [r7, #32]
 8009654:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009656:	6a3b      	ldr	r3, [r7, #32]
 8009658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800965a:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009660:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	2200      	movs	r2, #0
 8009666:	669a      	str	r2, [r3, #104]	; 0x68

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966a:	2200      	movs	r2, #0
 800966c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	69db      	ldr	r3, [r3, #28]
 8009674:	61fb      	str	r3, [r7, #28]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8009676:	4b0c      	ldr	r3, [pc, #48]	; (80096a8 <_tx_semaphore_ceiling_put+0xf4>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3301      	adds	r3, #1
 800967c:	4a0a      	ldr	r2, [pc, #40]	; (80096a8 <_tx_semaphore_ceiling_put+0xf4>)
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009682:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f383 8810 	msr	PRIMASK, r3
}
 800968a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800968c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800968e:	f001 f915 	bl	800a8bc <_tx_thread_system_resume>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <_tx_semaphore_ceiling_put+0xea>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	4798      	blx	r3
        }
#endif
    }

    /* Return successful completion.  */
    return(status);
 800969e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3738      	adds	r7, #56	; 0x38
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	2400f0d0 	.word	0x2400f0d0

080096ac <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08c      	sub	sp, #48	; 0x30
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80096b6:	f3ef 8310 	mrs	r3, PRIMASK
 80096ba:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80096bc:	b672      	cpsid	i
    return(primask_value);
 80096be:	69bb      	ldr	r3, [r7, #24]
    

#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 80096c0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096c6:	4a32      	ldr	r2, [pc, #200]	; (8009790 <_tx_semaphore_cleanup+0xe4>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d156      	bne.n	800977a <_tx_semaphore_cleanup+0xce>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d150      	bne.n	800977a <_tx_semaphore_cleanup+0xce>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096dc:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 80096de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d04a      	beq.n	800977a <_tx_semaphore_cleanup+0xce>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 80096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a2a      	ldr	r2, [pc, #168]	; (8009794 <_tx_semaphore_cleanup+0xe8>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d145      	bne.n	800977a <_tx_semaphore_cleanup+0xce>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 80096ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d041      	beq.n	800977a <_tx_semaphore_cleanup+0xce>
#endif
                
                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	1e5a      	subs	r2, r3, #1
 8009702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009704:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8009706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800970c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970e:	2b00      	cmp	r3, #0
 8009710:	d103      	bne.n	800971a <_tx_semaphore_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8009712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009714:	2200      	movs	r2, #0
 8009716:	60da      	str	r2, [r3, #12]
 8009718:	e013      	b.n	8009742 <_tx_semaphore_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971e:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009724:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	69fa      	ldr	r2, [r7, #28]
 800972a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	6a3a      	ldr	r2, [r7, #32]
 8009730:	671a      	str	r2, [r3, #112]	; 0x70
            
                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8009732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	429a      	cmp	r2, r3
 800973a:	d102      	bne.n	8009742 <_tx_semaphore_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800973c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973e:	6a3a      	ldr	r2, [r7, #32]
 8009740:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009746:	2b06      	cmp	r3, #6
 8009748:	d117      	bne.n	800977a <_tx_semaphore_cleanup+0xce>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	220d      	movs	r2, #13
 800974e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8009752:	4b11      	ldr	r3, [pc, #68]	; (8009798 <_tx_semaphore_cleanup+0xec>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3301      	adds	r3, #1
 8009758:	4a0f      	ldr	r2, [pc, #60]	; (8009798 <_tx_semaphore_cleanup+0xec>)
 800975a:	6013      	str	r3, [r2, #0]
 800975c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	f383 8810 	msr	PRIMASK, r3
}
 8009766:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f001 f8a7 	bl	800a8bc <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800976e:	f3ef 8310 	mrs	r3, PRIMASK
 8009772:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009774:	b672      	cpsid	i
    return(primask_value);
 8009776:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8009778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800977a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f383 8810 	msr	PRIMASK, r3
}
 8009784:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8009786:	bf00      	nop
 8009788:	3730      	adds	r7, #48	; 0x30
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	080096ad 	.word	0x080096ad
 8009794:	53454d41 	.word	0x53454d41
 8009798:	2400f0d0 	.word	0x2400f0d0

0800979c <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b08a      	sub	sp, #40	; 0x28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 80097a8:	2228      	movs	r2, #40	; 0x28
 80097aa:	2100      	movs	r1, #0
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f00b fd5d 	bl	801526c <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	609a      	str	r2, [r3, #8]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80097be:	f3ef 8310 	mrs	r3, PRIMASK
 80097c2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80097c4:	b672      	cpsid	i
    return(primask_value);
 80097c6:	69bb      	ldr	r3, [r7, #24]
    
    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80097c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	4a18      	ldr	r2, [pc, #96]	; (8009830 <_tx_semaphore_create+0x94>)
 80097ce:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80097d0:	4b18      	ldr	r3, [pc, #96]	; (8009834 <_tx_semaphore_create+0x98>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d109      	bne.n	80097ec <_tx_semaphore_create+0x50>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 80097d8:	4a17      	ldr	r2, [pc, #92]	; (8009838 <_tx_semaphore_create+0x9c>)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	619a      	str	r2, [r3, #24]
 80097ea:	e011      	b.n	8009810 <_tx_semaphore_create+0x74>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 80097ec:	4b12      	ldr	r3, [pc, #72]	; (8009838 <_tx_semaphore_create+0x9c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 80097f8:	6a3b      	ldr	r3, [r7, #32]
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	69fa      	ldr	r2, [r7, #28]
 8009808:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6a3a      	ldr	r2, [r7, #32]
 800980e:	615a      	str	r2, [r3, #20]
    }
    
    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8009810:	4b08      	ldr	r3, [pc, #32]	; (8009834 <_tx_semaphore_create+0x98>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3301      	adds	r3, #1
 8009816:	4a07      	ldr	r2, [pc, #28]	; (8009834 <_tx_semaphore_create+0x98>)
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	f383 8810 	msr	PRIMASK, r3
}
 8009824:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3728      	adds	r7, #40	; 0x28
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	53454d41 	.word	0x53454d41
 8009834:	2400f000 	.word	0x2400f000
 8009838:	2400effc 	.word	0x2400effc

0800983c <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b08e      	sub	sp, #56	; 0x38
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009844:	f3ef 8310 	mrs	r3, PRIMASK
 8009848:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800984a:	b672      	cpsid	i
    return(primask_value);
 800984c:	69fb      	ldr	r3, [r7, #28]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800984e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 8009856:	4b3b      	ldr	r3, [pc, #236]	; (8009944 <_tx_semaphore_delete+0x108>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3b01      	subs	r3, #1
 800985c:	4a39      	ldr	r2, [pc, #228]	; (8009944 <_tx_semaphore_delete+0x108>)
 800985e:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8009860:	4b38      	ldr	r3, [pc, #224]	; (8009944 <_tx_semaphore_delete+0x108>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d103      	bne.n	8009870 <_tx_semaphore_delete+0x34>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8009868:	4b37      	ldr	r3, [pc, #220]	; (8009948 <_tx_semaphore_delete+0x10c>)
 800986a:	2200      	movs	r2, #0
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	e013      	b.n	8009898 <_tx_semaphore_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	695b      	ldr	r3, [r3, #20]
 8009874:	62bb      	str	r3, [r7, #40]	; 0x28
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	627b      	str	r3, [r7, #36]	; 0x24
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 800987c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009880:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 8009882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009886:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8009888:	4b2f      	ldr	r3, [pc, #188]	; (8009948 <_tx_semaphore_delete+0x10c>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	429a      	cmp	r2, r3
 8009890:	d102      	bne.n	8009898 <_tx_semaphore_delete+0x5c>
        {
                    
            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 8009892:	4a2d      	ldr	r2, [pc, #180]	; (8009948 <_tx_semaphore_delete+0x10c>)
 8009894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009896:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009898:	4b2c      	ldr	r3, [pc, #176]	; (800994c <_tx_semaphore_delete+0x110>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3301      	adds	r3, #1
 800989e:	4a2b      	ldr	r2, [pc, #172]	; (800994c <_tx_semaphore_delete+0x110>)
 80098a0:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	637b      	str	r3, [r7, #52]	; 0x34
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	633b      	str	r3, [r7, #48]	; 0x30
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	611a      	str	r2, [r3, #16]
 80098ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098bc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	f383 8810 	msr	PRIMASK, r3
}
 80098c4:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 80098c6:	e022      	b.n	800990e <_tx_semaphore_delete+0xd2>
    {
    
        /* Decrement the suspension count.  */
        suspended_count--;
 80098c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ca:	3b01      	subs	r3, #1
 80098cc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80098ce:	f3ef 8310 	mrs	r3, PRIMASK
 80098d2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80098d4:	b672      	cpsid	i
    return(primask_value);
 80098d6:	693b      	ldr	r3, [r7, #16]

        /* Lockout interrupts.  */
        TX_DISABLE
 80098d8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing 
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80098da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098dc:	2200      	movs	r2, #0
 80098de:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 80098e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e2:	2201      	movs	r2, #1
 80098e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 80098e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ec:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 80098ee:	4b17      	ldr	r3, [pc, #92]	; (800994c <_tx_semaphore_delete+0x110>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	3301      	adds	r3, #1
 80098f4:	4a15      	ldr	r2, [pc, #84]	; (800994c <_tx_semaphore_delete+0x110>)
 80098f6:	6013      	str	r3, [r2, #0]
 80098f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fa:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f383 8810 	msr	PRIMASK, r3
}
 8009902:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009904:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009906:	f000 ffd9 	bl	800a8bc <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	637b      	str	r3, [r7, #52]	; 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1d9      	bne.n	80098c8 <_tx_semaphore_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009914:	f3ef 8310 	mrs	r3, PRIMASK
 8009918:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800991a:	b672      	cpsid	i
    return(primask_value);
 800991c:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800991e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8009920:	4b0a      	ldr	r3, [pc, #40]	; (800994c <_tx_semaphore_delete+0x110>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	3b01      	subs	r3, #1
 8009926:	4a09      	ldr	r2, [pc, #36]	; (800994c <_tx_semaphore_delete+0x110>)
 8009928:	6013      	str	r3, [r2, #0]
 800992a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f383 8810 	msr	PRIMASK, r3
}
 8009934:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8009936:	f000 ff87 	bl	800a848 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3738      	adds	r7, #56	; 0x38
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	2400f000 	.word	0x2400f000
 8009948:	2400effc 	.word	0x2400effc
 800994c:	2400f0d0 	.word	0x2400f0d0

08009950 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08c      	sub	sp, #48	; 0x30
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800995a:	2300      	movs	r3, #0
 800995c:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800995e:	f3ef 8310 	mrs	r3, PRIMASK
 8009962:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009964:	b672      	cpsid	i
    return(primask_value);
 8009966:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8009968:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00a      	beq.n	8009988 <_tx_semaphore_get+0x38>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	1e5a      	subs	r2, r3, #1
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	609a      	str	r2, [r3, #8]
 800997c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	f383 8810 	msr	PRIMASK, r3
}
 8009986:	e068      	b.n	8009a5a <_tx_semaphore_get+0x10a>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d05d      	beq.n	8009a4a <_tx_semaphore_get+0xfa>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800998e:	4b35      	ldr	r3, [pc, #212]	; (8009a64 <_tx_semaphore_get+0x114>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d008      	beq.n	80099a8 <_tx_semaphore_get+0x58>
 8009996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009998:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	f383 8810 	msr	PRIMASK, r3
}
 80099a0:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 80099a2:	230d      	movs	r3, #13
 80099a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099a6:	e058      	b.n	8009a5a <_tx_semaphore_get+0x10a>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80099a8:	4b2f      	ldr	r3, [pc, #188]	; (8009a68 <_tx_semaphore_get+0x118>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	4a2e      	ldr	r2, [pc, #184]	; (8009a6c <_tx_semaphore_get+0x11c>)
 80099b2:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d109      	bne.n	80099e4 <_tx_semaphore_get+0x94>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d4:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099da:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 80099dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099e0:	675a      	str	r2, [r3, #116]	; 0x74
 80099e2:	e011      	b.n	8009a08 <_tx_semaphore_get+0xb8>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	623b      	str	r3, [r7, #32]
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80099ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ec:	6a3a      	ldr	r2, [r7, #32]
 80099ee:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80099f0:	6a3b      	ldr	r3, [r7, #32]
 80099f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099f4:	61fb      	str	r3, [r7, #28]
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	69fa      	ldr	r2, [r7, #28]
 80099fa:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a00:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8009a02:	6a3b      	ldr	r3, [r7, #32]
 8009a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a06:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	1c5a      	adds	r2, r3, #1
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	2206      	movs	r2, #6
 8009a16:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	683a      	ldr	r2, [r7, #0]
 8009a22:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8009a24:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <_tx_semaphore_get+0x114>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	4a0e      	ldr	r2, [pc, #56]	; (8009a64 <_tx_semaphore_get+0x114>)
 8009a2c:	6013      	str	r3, [r2, #0]
 8009a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a30:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f383 8810 	msr	PRIMASK, r3
}
 8009a38:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8009a3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a3c:	f001 f850 	bl	800aae0 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a48:	e007      	b.n	8009a5a <_tx_semaphore_get+0x10a>
 8009a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	f383 8810 	msr	PRIMASK, r3
}
 8009a54:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8009a56:	230d      	movs	r3, #13
 8009a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Return completion status.  */
    return(status);
 8009a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3730      	adds	r7, #48	; 0x30
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	2400f0d0 	.word	0x2400f0d0
 8009a68:	2400f034 	.word	0x2400f034
 8009a6c:	080096ad 	.word	0x080096ad

08009a70 <_tx_semaphore_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_info_get(TX_SEMAPHORE *semaphore_ptr, CHAR **name, ULONG *current_value, 
                    TX_THREAD **first_suspended, ULONG *suspended_count, 
                    TX_SEMAPHORE **next_semaphore)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b089      	sub	sp, #36	; 0x24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8009a82:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009a84:	b672      	cpsid	i
    return(primask_value);
 8009a86:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8009a88:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the semaphore.  */
    if (name != TX_NULL)
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d003      	beq.n	8009a98 <_tx_semaphore_info_get+0x28>
    {
    
        *name =  semaphore_ptr -> tx_semaphore_name;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the current value of the semaphore.  */
    if (current_value != TX_NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d003      	beq.n	8009aa6 <_tx_semaphore_info_get+0x36>
    {
    
        *current_value =  semaphore_ptr -> tx_semaphore_count;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	689a      	ldr	r2, [r3, #8]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the first thread suspended on this semaphore.  */
    if (first_suspended != TX_NULL)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d003      	beq.n	8009ab4 <_tx_semaphore_info_get+0x44>
    {
    
        *first_suspended =  semaphore_ptr -> tx_semaphore_suspension_list;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	68da      	ldr	r2, [r3, #12]
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the number of threads suspended on this semaphore.  */
    if (suspended_count != TX_NULL)
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <_tx_semaphore_info_get+0x52>
    {
    
        *suspended_count =  (ULONG) semaphore_ptr -> tx_semaphore_suspended_count;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	691a      	ldr	r2, [r3, #16]
 8009abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac0:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the pointer to the next semaphore created.  */
    if (next_semaphore != TX_NULL)
 8009ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d003      	beq.n	8009ad0 <_tx_semaphore_info_get+0x60>
    {
    
        *next_semaphore =  semaphore_ptr -> tx_semaphore_created_next;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	695a      	ldr	r2, [r3, #20]
 8009acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ace:	601a      	str	r2, [r3, #0]
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	f383 8810 	msr	PRIMASK, r3
}
 8009ada:	bf00      	nop
    
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3724      	adds	r7, #36	; 0x24
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
	...

08009aec <_tx_semaphore_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_prioritize(TX_SEMAPHORE *semaphore_ptr)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b090      	sub	sp, #64	; 0x40
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009af4:	f3ef 8310 	mrs	r3, PRIMASK
 8009af8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009afa:	b672      	cpsid	i
    return(primask_value);
 8009afc:	69fb      	ldr	r3, [r7, #28]
TX_THREAD       *previous_thread;
UINT            list_changed;


    /* Disable interrupts.  */
    TX_DISABLE
 8009afe:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8009b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d805      	bhi.n	8009b18 <_tx_semaphore_prioritize+0x2c>
 8009b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b0e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	f383 8810 	msr	PRIMASK, r3
}
 8009b16:	e090      	b.n	8009c3a <_tx_semaphore_prioritize+0x14e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this semaphore.  */
    else if (suspended_count == ((UINT) 2))
 8009b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d114      	bne.n	8009b48 <_tx_semaphore_prioritize+0x5c>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	633b      	str	r3, [r7, #48]	; 0x30
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8009b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b28:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d202      	bcs.n	8009b3c <_tx_semaphore_prioritize+0x50>
        {

            /* Yes, move the list head to the next thread.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  next_thread;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3a:	60da      	str	r2, [r3, #12]
 8009b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b3e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	f383 8810 	msr	PRIMASK, r3
}
 8009b46:	e078      	b.n	8009c3a <_tx_semaphore_prioritize+0x14e>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   semaphore_ptr -> tx_semaphore_suspension_list;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b50:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8009b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b56:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8009b58:	4b3a      	ldr	r3, [pc, #232]	; (8009c44 <_tx_semaphore_prioritize+0x158>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	4a39      	ldr	r2, [pc, #228]	; (8009c44 <_tx_semaphore_prioritize+0x158>)
 8009b60:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8009b62:	2300      	movs	r3, #0
 8009b64:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8009b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d201      	bcs.n	8009b76 <_tx_semaphore_prioritize+0x8a>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8009b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b74:	637b      	str	r3, [r7, #52]	; 0x34
 8009b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b78:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f383 8810 	msr	PRIMASK, r3
}
 8009b80:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009b82:	f3ef 8310 	mrs	r3, PRIMASK
 8009b86:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009b88:	b672      	cpsid	i
    return(primask_value);
 8009b8a:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8009b8c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if any changes to the list have occurred while 
               interrupts were enabled.  */
              
            /* Is the list head the same?  */
            if (head_ptr != semaphore_ptr -> tx_semaphore_suspension_list)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d002      	beq.n	8009b9e <_tx_semaphore_prioritize+0xb2>
            {
            
                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b9c:	e006      	b.n	8009bac <_tx_semaphore_prioritize+0xc0>
            }
            else
            {
            
                /* Is the suspended count the same?  */
                if (suspended_count != semaphore_ptr -> tx_semaphore_suspended_count)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d001      	beq.n	8009bac <_tx_semaphore_prioritize+0xc0>
                {
              
                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	62bb      	str	r3, [r7, #40]	; 0x28
                }
            }
             
            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8009bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d103      	bne.n	8009bba <_tx_semaphore_prioritize+0xce>
            {

                /* Yes, everything is the same... move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8009bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bb8:	e00c      	b.n	8009bd4 <_tx_semaphore_prioritize+0xe8>
            {

                /* No, the list is been modified so we need to start the search over.  */

                /* Save the suspension count and head pointer.  */
                head_ptr =   semaphore_ptr -> tx_semaphore_suspension_list;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	633b      	str	r3, [r7, #48]	; 0x30
                suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc8:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8009bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bce:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	62bb      	str	r3, [r7, #40]	; 0x28
            }

        } while (thread_ptr != head_ptr);
 8009bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d1c4      	bne.n	8009b66 <_tx_semaphore_prioritize+0x7a>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8009bdc:	4b19      	ldr	r3, [pc, #100]	; (8009c44 <_tx_semaphore_prioritize+0x158>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	3b01      	subs	r3, #1
 8009be2:	4a18      	ldr	r2, [pc, #96]	; (8009c44 <_tx_semaphore_prioritize+0x158>)
 8009be4:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front 
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8009be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d01d      	beq.n	8009c2a <_tx_semaphore_prioritize+0x13e>
            /* No, we need to move the highest priority suspended thread to the 
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8009bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bf2:	627b      	str	r3, [r7, #36]	; 0x24
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8009bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bf8:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	6a3a      	ldr	r2, [r7, #32]
 8009bfe:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c04:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c0a:	623b      	str	r3, [r7, #32]
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8009c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c10:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8009c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c14:	6a3a      	ldr	r2, [r7, #32]
 8009c16:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c1c:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c22:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  priority_thread_ptr;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c28:	60da      	str	r2, [r3, #12]
 8009c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c2c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	f383 8810 	msr	PRIMASK, r3
}
 8009c34:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009c36:	f000 fe07 	bl	800a848 <_tx_thread_system_preempt_check>
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3740      	adds	r7, #64	; 0x40
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	2400f0d0 	.word	0x2400f0d0

08009c48 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08c      	sub	sp, #48	; 0x30
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009c50:	f3ef 8310 	mrs	r3, PRIMASK
 8009c54:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009c56:	b672      	cpsid	i
    return(primask_value);
 8009c58:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8009c5a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8009c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d114      	bne.n	8009c92 <_tx_semaphore_put+0x4a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	609a      	str	r2, [r3, #8]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	69db      	ldr	r3, [r3, #28]
 8009c76:	61bb      	str	r3, [r7, #24]
 8009c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	f383 8810 	msr	PRIMASK, r3
}
 8009c82:	bf00      	nop
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d040      	beq.n	8009d0c <_tx_semaphore_put+0xc4>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	4798      	blx	r3
 8009c90:	e03c      	b.n	8009d0c <_tx_semaphore_put+0xc4>
    {

        /* A thread is suspended on this semaphore.  */
        
        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8009c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8009c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d103      	bne.n	8009cac <_tx_semaphore_put+0x64>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	60da      	str	r2, [r3, #12]
 8009caa:	e00e      	b.n	8009cca <_tx_semaphore_put+0x82>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb0:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a3a      	ldr	r2, [r7, #32]
 8009cb6:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cbc:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8009cbe:	6a3b      	ldr	r3, [r7, #32]
 8009cc0:	69fa      	ldr	r2, [r7, #28]
 8009cc2:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	6a3a      	ldr	r2, [r7, #32]
 8009cc8:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cce:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	669a      	str	r2, [r3, #104]	; 0x68

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	61bb      	str	r3, [r7, #24]
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8009ce4:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <_tx_semaphore_put+0xd0>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	4a0b      	ldr	r2, [pc, #44]	; (8009d18 <_tx_semaphore_put+0xd0>)
 8009cec:	6013      	str	r3, [r2, #0]
 8009cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f383 8810 	msr	PRIMASK, r3
}
 8009cf8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8009cfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009cfc:	f000 fdde 	bl	800a8bc <_tx_thread_system_resume>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <_tx_semaphore_put+0xc4>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	4798      	blx	r3
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3730      	adds	r7, #48	; 0x30
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	2400f0d0 	.word	0x2400f0d0

08009d1c <_tx_semaphore_put_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put_notify(TX_SEMAPHORE *semaphore_ptr, VOID (*semaphore_put_notify)(TX_SEMAPHORE *notify_semaphore_ptr))
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009d26:	f3ef 8310 	mrs	r3, PRIMASK
 8009d2a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009d2c:	b672      	cpsid	i
    return(primask_value);
 8009d2e:	68fb      	ldr	r3, [r7, #12]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8009d30:	617b      	str	r3, [r7, #20]

    /* Make entry in event log.  */
    TX_EL_SEMAPHORE_PUT_NOTIFY_INSERT

    /* Setup semaphore put notification callback function.  */
    semaphore_ptr -> tx_semaphore_put_notify =  semaphore_put_notify;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	683a      	ldr	r2, [r7, #0]
 8009d36:	61da      	str	r2, [r3, #28]
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	f383 8810 	msr	PRIMASK, r3
}
 8009d42:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return success to caller.  */
    return(TX_SUCCESS);
 8009d44:	2300      	movs	r3, #0
#endif
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	371c      	adds	r7, #28
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
	...

08009d54 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b090      	sub	sp, #64	; 0x40
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
 8009d60:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8009d62:	2300      	movs	r3, #0
 8009d64:	63bb      	str	r3, [r7, #56]	; 0x38
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8009d66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d68:	21ef      	movs	r1, #239	; 0xef
 8009d6a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009d6c:	f00b fa7e 	bl	801526c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8009d70:	22e8      	movs	r2, #232	; 0xe8
 8009d72:	2100      	movs	r1, #0
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f00b fa79 	bl	801526c <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d90:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d96:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d9c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009da2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009daa:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009db0:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2220      	movs	r2, #32
 8009db6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8009dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dbc:	637b      	str	r3, [r7, #52]	; 0x34
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8009dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dc4:	4413      	add	r3, r2
 8009dc6:	637b      	str	r3, [r7, #52]	; 0x34
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dcc:	611a      	str	r2, [r3, #16]

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009dd2:	63da      	str	r2, [r3, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009dd8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2203      	movs	r2, #3
 8009de0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	4a46      	ldr	r2, [pc, #280]	; (8009f00 <_tx_thread_create+0x1ac>)
 8009de6:	655a      	str	r2, [r3, #84]	; 0x54
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8009dee:	4945      	ldr	r1, [pc, #276]	; (8009f04 <_tx_thread_create+0x1b0>)
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f7f6 fc65 	bl	80006c0 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009df6:	f3ef 8310 	mrs	r3, PRIMASK
 8009dfa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009dfc:	b672      	cpsid	i
    return(primask_value);
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8009e00:	633b      	str	r3, [r7, #48]	; 0x30

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4a40      	ldr	r2, [pc, #256]	; (8009f08 <_tx_thread_create+0x1b4>)
 8009e06:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8009e08:	4b40      	ldr	r3, [pc, #256]	; (8009f0c <_tx_thread_create+0x1b8>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10b      	bne.n	8009e28 <_tx_thread_create+0xd4>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8009e10:	4a3f      	ldr	r2, [pc, #252]	; (8009f10 <_tx_thread_create+0x1bc>)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8009e26:	e016      	b.n	8009e56 <_tx_thread_create+0x102>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8009e28:	4b39      	ldr	r3, [pc, #228]	; (8009f10 <_tx_thread_create+0x1bc>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        previous_thread =  next_thread -> tx_thread_created_previous;
 8009e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e34:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8009e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8009e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8009e56:	4b2d      	ldr	r3, [pc, #180]	; (8009f0c <_tx_thread_create+0x1b8>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	4a2b      	ldr	r2, [pc, #172]	; (8009f0c <_tx_thread_create+0x1b8>)
 8009e5e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8009e60:	4b2c      	ldr	r3, [pc, #176]	; (8009f14 <_tx_thread_create+0x1c0>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	3301      	adds	r3, #1
 8009e66:	4a2b      	ldr	r2, [pc, #172]	; (8009f14 <_tx_thread_create+0x1c0>)
 8009e68:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8009e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d129      	bne.n	8009ec4 <_tx_thread_create+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8009e70:	f3ef 8305 	mrs	r3, IPSR
 8009e74:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 8009e76:	6a3a      	ldr	r2, [r7, #32]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8009e78:	4b27      	ldr	r3, [pc, #156]	; (8009f18 <_tx_thread_create+0x1c4>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8009e82:	d30d      	bcc.n	8009ea0 <_tx_thread_create+0x14c>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8009e84:	4b25      	ldr	r3, [pc, #148]	; (8009f1c <_tx_thread_create+0x1c8>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8009e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d009      	beq.n	8009ea4 <_tx_thread_create+0x150>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8009e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e94:	63bb      	str	r3, [r7, #56]	; 0x38

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8009e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e9c:	63da      	str	r2, [r3, #60]	; 0x3c
 8009e9e:	e001      	b.n	8009ea4 <_tx_thread_create+0x150>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	f383 8810 	msr	PRIMASK, r3
}
 8009eae:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8009eb0:	68f8      	ldr	r0, [r7, #12]
 8009eb2:	f000 fd03 	bl	800a8bc <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8009eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d01c      	beq.n	8009ef6 <_tx_thread_create+0x1a2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8009ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ec0:	63da      	str	r2, [r3, #60]	; 0x3c
 8009ec2:	e018      	b.n	8009ef6 <_tx_thread_create+0x1a2>
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	f383 8810 	msr	PRIMASK, r3
}
 8009ece:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ed4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009ed6:	b672      	cpsid	i
    return(primask_value);
 8009ed8:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8009eda:	633b      	str	r3, [r7, #48]	; 0x30

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8009edc:	4b0d      	ldr	r3, [pc, #52]	; (8009f14 <_tx_thread_create+0x1c0>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3b01      	subs	r3, #1
 8009ee2:	4a0c      	ldr	r2, [pc, #48]	; (8009f14 <_tx_thread_create+0x1c0>)
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	f383 8810 	msr	PRIMASK, r3
}
 8009ef0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8009ef2:	f000 fca9 	bl	800a848 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3740      	adds	r7, #64	; 0x40
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	0800b075 	.word	0x0800b075
 8009f04:	0800a58d 	.word	0x0800a58d
 8009f08:	54485244 	.word	0x54485244
 8009f0c:	2400f040 	.word	0x2400f040
 8009f10:	2400f03c 	.word	0x2400f03c
 8009f14:	2400f0d0 	.word	0x2400f0d0
 8009f18:	24000020 	.word	0x24000020
 8009f1c:	2400f038 	.word	0x2400f038

08009f20 <_tx_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_delete(TX_THREAD *thread_ptr)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b08b      	sub	sp, #44	; 0x2c
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8009f30:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009f32:	b672      	cpsid	i
    return(primask_value);
 8009f34:	697b      	ldr	r3, [r7, #20]
    
    /* Lockout interrupts while the thread is being deleted.  */
    TX_DISABLE
 8009f36:	623b      	str	r3, [r7, #32]

    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d00b      	beq.n	8009f58 <_tx_thread_delete+0x38>
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d007      	beq.n	8009f58 <_tx_thread_delete+0x38>
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	f383 8810 	msr	PRIMASK, r3
}
 8009f52:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Thread not completed or terminated - return an error!  */
            status =  TX_DELETE_ERROR;
 8009f54:	2311      	movs	r3, #17
 8009f56:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }

    /* Determine if the delete operation is okay.  */
    if (status == TX_SUCCESS)
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d12d      	bne.n	8009fba <_tx_thread_delete+0x9a>

        /* Unregister thread in the thread array structure.  */
        TX_EL_THREAD_UNREGISTER(thread_ptr)

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	601a      	str	r2, [r3, #0]

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 8009f64:	4b18      	ldr	r3, [pc, #96]	; (8009fc8 <_tx_thread_delete+0xa8>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	4a17      	ldr	r2, [pc, #92]	; (8009fc8 <_tx_thread_delete+0xa8>)
 8009f6c:	6013      	str	r3, [r2, #0]
        
        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 8009f6e:	4b16      	ldr	r3, [pc, #88]	; (8009fc8 <_tx_thread_delete+0xa8>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d103      	bne.n	8009f7e <_tx_thread_delete+0x5e>
        {

            /* Only created thread, just set the created list to NULL.  */
            _tx_thread_created_ptr =  TX_NULL;
 8009f76:	4b15      	ldr	r3, [pc, #84]	; (8009fcc <_tx_thread_delete+0xac>)
 8009f78:	2200      	movs	r2, #0
 8009f7a:	601a      	str	r2, [r3, #0]
 8009f7c:	e017      	b.n	8009fae <_tx_thread_delete+0x8e>
        }
        else
        {

            /* Otherwise, not the only created thread, link-up the neighbors.  */
            next_thread =                                thread_ptr -> tx_thread_created_next;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f84:	61fb      	str	r3, [r7, #28]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f8c:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_created_previous =  previous_thread;
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	69ba      	ldr	r2, [r7, #24]
 8009f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            previous_thread -> tx_thread_created_next =  next_thread;
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	69fa      	ldr	r2, [r7, #28]
 8009f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 8009f9e:	4b0b      	ldr	r3, [pc, #44]	; (8009fcc <_tx_thread_delete+0xac>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d102      	bne.n	8009fae <_tx_thread_delete+0x8e>
            {
                        
                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 8009fa8:	4a08      	ldr	r2, [pc, #32]	; (8009fcc <_tx_thread_delete+0xac>)
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	6a3b      	ldr	r3, [r7, #32]
 8009fb0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f383 8810 	msr	PRIMASK, r3
}
 8009fb8:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
 8009fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	372c      	adds	r7, #44	; 0x2c
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	2400f040 	.word	0x2400f040
 8009fcc:	2400f03c 	.word	0x2400f03c

08009fd0 <_tx_thread_entry_exit_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_entry_exit_notify(TX_THREAD *thread_ptr, VOID (*thread_entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT id))
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b087      	sub	sp, #28
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009fda:	f3ef 8310 	mrs	r3, PRIMASK
 8009fde:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009fe0:	b672      	cpsid	i
    return(primask_value);
 8009fe2:	68fb      	ldr	r3, [r7, #12]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8009fe4:	617b      	str	r3, [r7, #20]

    /* Make entry in event log.  */
    TX_EL_THREAD_ENTRY_EXIT_NOTIFY_INSERT

    /* Setup thread entry/exit notification callback function.  */
    thread_ptr -> tx_thread_entry_exit_notify =  thread_entry_exit_notify;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	f383 8810 	msr	PRIMASK, r3
}
 8009ff8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return success to caller.  */
    return(TX_SUCCESS);
 8009ffa:	2300      	movs	r3, #0
#endif
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	371c      	adds	r7, #28
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a00e:	f3ef 8310 	mrs	r3, PRIMASK
 800a012:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a014:	b672      	cpsid	i
    return(primask_value);
 800a016:	683b      	ldr	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA

    
    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800a018:	60fb      	str	r3, [r7, #12]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a01a:	4b08      	ldr	r3, [pc, #32]	; (800a03c <_tx_thread_identify+0x34>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	60bb      	str	r3, [r7, #8]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f383 8810 	msr	PRIMASK, r3
}
 800a02a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 800a02c:	68bb      	ldr	r3, [r7, #8]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	2400f034 	.word	0x2400f034

0800a040 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count, 
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice, 
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 800a040:	b480      	push	{r7}
 800a042:	b089      	sub	sp, #36	; 0x24
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
 800a04c:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a04e:	f3ef 8310 	mrs	r3, PRIMASK
 800a052:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a054:	b672      	cpsid	i
    return(primask_value);
 800a056:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800a058:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d003      	beq.n	800a068 <_tx_thread_info_get+0x28>
    {
    
        *name =  thread_ptr -> tx_thread_name;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d003      	beq.n	800a076 <_tx_thread_info_get+0x36>
    {
    
        *state =  thread_ptr -> tx_thread_state;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d003      	beq.n	800a084 <_tx_thread_info_get+0x44>
    {
    
        *run_count =  thread_ptr -> tx_thread_run_count;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 800a084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a086:	2b00      	cmp	r3, #0
 800a088:	d004      	beq.n	800a094 <_tx_thread_info_get+0x54>
    {
    
        *priority =  thread_ptr -> tx_thread_user_priority;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a092:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 800a094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a096:	2b00      	cmp	r3, #0
 800a098:	d004      	beq.n	800a0a4 <_tx_thread_info_get+0x64>
    {
    
        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800a0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d003      	beq.n	800a0b2 <_tx_thread_info_get+0x72>
    {
    
        *time_slice =  thread_ptr -> tx_thread_time_slice;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	699a      	ldr	r2, [r3, #24]
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 800a0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d004      	beq.n	800a0c2 <_tx_thread_info_get+0x82>
    {
    
        *next_thread =  thread_ptr -> tx_thread_created_next;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 800a0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d003      	beq.n	800a0d0 <_tx_thread_info_get+0x90>
    {
    
        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ce:	601a      	str	r2, [r3, #0]
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f383 8810 	msr	PRIMASK, r3
}
 800a0da:	bf00      	nop
    
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3724      	adds	r7, #36	; 0x24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
	...

0800a0ec <_tx_thread_initialize>:
/*                                            Execution Profile support,  */
/*                                            resulting in version 6.1.7  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800a0f0:	4b13      	ldr	r3, [pc, #76]	; (800a140 <_tx_thread_initialize+0x54>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800a0f6:	4b13      	ldr	r3, [pc, #76]	; (800a144 <_tx_thread_initialize+0x58>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	601a      	str	r2, [r3, #0]
 800a0fc:	4b12      	ldr	r3, [pc, #72]	; (800a148 <_tx_thread_initialize+0x5c>)
 800a0fe:	2200      	movs	r2, #0
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	4b12      	ldr	r3, [pc, #72]	; (800a14c <_tx_thread_initialize+0x60>)
 800a104:	2200      	movs	r2, #0
 800a106:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800a108:	4b11      	ldr	r3, [pc, #68]	; (800a150 <_tx_thread_initialize+0x64>)
 800a10a:	2220      	movs	r2, #32
 800a10c:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800a10e:	2280      	movs	r2, #128	; 0x80
 800a110:	2100      	movs	r1, #0
 800a112:	4810      	ldr	r0, [pc, #64]	; (800a154 <_tx_thread_initialize+0x68>)
 800a114:	f00b f8aa 	bl	801526c <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800a118:	4b0f      	ldr	r3, [pc, #60]	; (800a158 <_tx_thread_initialize+0x6c>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800a11e:	4b0f      	ldr	r3, [pc, #60]	; (800a15c <_tx_thread_initialize+0x70>)
 800a120:	2200      	movs	r2, #0
 800a122:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800a124:	4b0e      	ldr	r3, [pc, #56]	; (800a160 <_tx_thread_initialize+0x74>)
 800a126:	2200      	movs	r2, #0
 800a128:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800a12a:	4b0e      	ldr	r3, [pc, #56]	; (800a164 <_tx_thread_initialize+0x78>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the build options flag. This is used to identify how the ThreadX library was constructed.  */
    _tx_build_options =  _tx_build_options 
                            | (((ULONG) (TX_MAX_PRIORITIES/32)) << 24) 
 800a130:	4b0d      	ldr	r3, [pc, #52]	; (800a168 <_tx_thread_initialize+0x7c>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    _tx_build_options =  _tx_build_options 
 800a138:	4a0b      	ldr	r2, [pc, #44]	; (800a168 <_tx_thread_initialize+0x7c>)
 800a13a:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800a13c:	bf00      	nop
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	2400f034 	.word	0x2400f034
 800a144:	2400f038 	.word	0x2400f038
 800a148:	2400f044 	.word	0x2400f044
 800a14c:	2400f048 	.word	0x2400f048
 800a150:	2400f04c 	.word	0x2400f04c
 800a154:	2400f050 	.word	0x2400f050
 800a158:	2400f03c 	.word	0x2400f03c
 800a15c:	2400f040 	.word	0x2400f040
 800a160:	2400f0d0 	.word	0x2400f0d0
 800a164:	2400f0d4 	.word	0x2400f0d4
 800a168:	2400f0d8 	.word	0x2400f0d8

0800a16c <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b08c      	sub	sp, #48	; 0x30
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800a178:	2300      	movs	r3, #0
 800a17a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a17c:	f3ef 8310 	mrs	r3, PRIMASK
 800a180:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a182:	b672      	cpsid	i
    return(primask_value);
 800a184:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800a186:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	429a      	cmp	r2, r3
 800a192:	d902      	bls.n	800a19a <_tx_thread_preemption_change+0x2e>
    {
            
        /* Return error.  */
        status =  TX_THRESH_ERROR;
 800a194:	2318      	movs	r3, #24
 800a196:	62bb      	str	r3, [r7, #40]	; 0x28
 800a198:	e069      	b.n	800a26e <_tx_thread_preemption_change+0x102>
    {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

        /* Determine if the new threshold is the same as the priority.  */
        if (thread_ptr -> tx_thread_user_priority == new_threshold)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d114      	bne.n	800a1d0 <_tx_thread_preemption_change+0x64>
        {

            /* Determine if this thread is at the head of the list.  */
            if (_tx_thread_priority_list[thread_ptr -> tx_thread_priority] == thread_ptr)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1aa:	4a36      	ldr	r2, [pc, #216]	; (800a284 <_tx_thread_preemption_change+0x118>)
 800a1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d10c      	bne.n	800a1d0 <_tx_thread_preemption_change+0x64>
                map_index =  (thread_ptr -> tx_thread_priority)/((UINT) 32);
#endif

                /* Yes, this thread is at the front of the list.  Make sure
                   the preempted bit is cleared for this thread.  */
                TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c0:	627b      	str	r3, [r7, #36]	; 0x24
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800a1c2:	4b31      	ldr	r3, [pc, #196]	; (800a288 <_tx_thread_preemption_change+0x11c>)
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	43db      	mvns	r3, r3
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	4a2e      	ldr	r2, [pc, #184]	; (800a288 <_tx_thread_preemption_change+0x11c>)
 800a1ce:	6013      	str	r3, [r2, #0]
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d203      	bcs.n	800a1f6 <_tx_thread_preemption_change+0x8a>
        {
    
            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	63da      	str	r2, [r3, #60]	; 0x3c
 800a1f4:	e004      	b.n	800a200 <_tx_thread_preemption_change+0x94>
        }
        else
        {
    
            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a204:	4b21      	ldr	r3, [pc, #132]	; (800a28c <_tx_thread_preemption_change+0x120>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d930      	bls.n	800a26e <_tx_thread_preemption_change+0x102>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 800a20c:	4b1f      	ldr	r3, [pc, #124]	; (800a28c <_tx_thread_preemption_change+0x120>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	429a      	cmp	r2, r3
 800a214:	d92b      	bls.n	800a26e <_tx_thread_preemption_change+0x102>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 800a216:	4b1e      	ldr	r3, [pc, #120]	; (800a290 <_tx_thread_preemption_change+0x124>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d126      	bne.n	800a26e <_tx_thread_preemption_change+0x102>
                    /* Preemption needs to take place.  */

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                    /* Determine if this thread has preemption threshold set.  */
                    if (thread_ptr -> tx_thread_preempt_threshold != thread_ptr -> tx_thread_priority)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a228:	429a      	cmp	r2, r3
 800a22a:	d00b      	beq.n	800a244 <_tx_thread_preemption_change+0xd8>
                        TX_DIV32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
                        _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                        /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                        TX_MOD32_BIT_SET(thread_ptr -> tx_thread_priority, priority_bit)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a230:	2201      	movs	r2, #1
 800a232:	fa02 f303 	lsl.w	r3, r2, r3
 800a236:	627b      	str	r3, [r7, #36]	; 0x24
                        _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800a238:	4b13      	ldr	r3, [pc, #76]	; (800a288 <_tx_thread_preemption_change+0x11c>)
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23e:	4313      	orrs	r3, r2
 800a240:	4a11      	ldr	r2, [pc, #68]	; (800a288 <_tx_thread_preemption_change+0x11c>)
 800a242:	6013      	str	r3, [r2, #0]
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800a244:	4b11      	ldr	r3, [pc, #68]	; (800a28c <_tx_thread_preemption_change+0x120>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a0e      	ldr	r2, [pc, #56]	; (800a284 <_tx_thread_preemption_change+0x118>)
 800a24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a24e:	4a10      	ldr	r2, [pc, #64]	; (800a290 <_tx_thread_preemption_change+0x124>)
 800a250:	6013      	str	r3, [r2, #0]
 800a252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a254:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	f383 8810 	msr	PRIMASK, r3
}
 800a25c:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 800a25e:	f000 faf3 	bl	800a848 <_tx_thread_system_preempt_check>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a262:	f3ef 8310 	mrs	r3, PRIMASK
 800a266:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a268:	b672      	cpsid	i
    return(primask_value);
 800a26a:	69fb      	ldr	r3, [r7, #28]
                    
                    /* Disable interrupts.  */
                    TX_DISABLE
 800a26c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a270:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f383 8810 	msr	PRIMASK, r3
}
 800a278:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
    
    /* Return completion status.  */
    return(status);
 800a27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3730      	adds	r7, #48	; 0x30
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	2400f050 	.word	0x2400f050
 800a288:	2400f048 	.word	0x2400f048
 800a28c:	2400f04c 	.word	0x2400f04c
 800a290:	2400f038 	.word	0x2400f038

0800a294 <_tx_thread_priority_change>:
/*                                            _tx_thread_system_suspend,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_priority_change(TX_THREAD *thread_ptr, UINT new_priority, UINT *old_priority)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08e      	sub	sp, #56	; 0x38
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a2a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a2a4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a2a6:	b672      	cpsid	i
    return(primask_value);
 800a2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
TX_THREAD       *next_execute_ptr;
UINT            original_priority;


    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800a2aa:	637b      	str	r3, [r7, #52]	; 0x34

    /* Save the previous priority.  */
    *old_priority =  thread_ptr -> tx_thread_user_priority;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	601a      	str	r2, [r3, #0]

    /* Log this kernel call.  */
    TX_EL_THREAD_PRIORITY_CHANGE_INSERT

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d024      	beq.n	800a308 <_tx_thread_priority_change+0x74>
    {

        /* Setup the user priority and threshold in the thread's control
           block.  */
        thread_ptr -> tx_thread_user_priority =               new_priority;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        thread_ptr -> tx_thread_user_preempt_threshold =      new_priority;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        
        /* Determine if the actual thread priority should be setup, which is the
           case if the new priority is higher than the priority inheritance.  */
        if (new_priority < thread_ptr -> tx_thread_inherit_priority)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d206      	bcs.n	800a2e8 <_tx_thread_priority_change+0x54>
        {
        
            /* Change thread priority to the new user's priority.  */
            thread_ptr -> tx_thread_priority =           new_priority;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	62da      	str	r2, [r3, #44]	; 0x2c
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	68ba      	ldr	r2, [r7, #8]
 800a2e4:	63da      	str	r2, [r3, #60]	; 0x3c
 800a2e6:	e009      	b.n	800a2fc <_tx_thread_priority_change+0x68>
        }
        else
        {
        
            /* Change thread priority to the priority inheritance.  */
            thread_ptr -> tx_thread_priority =           thread_ptr -> tx_thread_inherit_priority;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	62da      	str	r2, [r3, #44]	; 0x2c
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	63da      	str	r2, [r3, #60]	; 0x3c
 800a2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2fe:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a300:	6a3b      	ldr	r3, [r7, #32]
 800a302:	f383 8810 	msr	PRIMASK, r3
}
 800a306:	e073      	b.n	800a3f0 <_tx_thread_priority_change+0x15c>
    }
    else
    {

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	220e      	movs	r2, #14
 800a30c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800a30e:	4b3b      	ldr	r3, [pc, #236]	; (800a3fc <_tx_thread_priority_change+0x168>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	633b      	str	r3, [r7, #48]	; 0x30

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a318:	62fb      	str	r3, [r7, #44]	; 0x2c

#else

        /* Increment the preempt disable flag by 2 to prevent system suspend from 
           returning to the system.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 3);
 800a31a:	4b39      	ldr	r3, [pc, #228]	; (800a400 <_tx_thread_priority_change+0x16c>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	3303      	adds	r3, #3
 800a320:	4a37      	ldr	r2, [pc, #220]	; (800a400 <_tx_thread_priority_change+0x16c>)
 800a322:	6013      	str	r3, [r2, #0]

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2201      	movs	r2, #1
 800a328:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2200      	movs	r2, #0
 800a32e:	64da      	str	r2, [r3, #76]	; 0x4c
 800a330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a332:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	f383 8810 	msr	PRIMASK, r3
}
 800a33a:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the 
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f000 fbcf 	bl	800aae0 <_tx_thread_system_suspend>

        /* At this point, the preempt disable flag is still set, so we still have 
           protection against all preemption.  */

        /* Setup the new priority for this thread.  */
        thread_ptr -> tx_thread_user_priority =           new_priority;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        thread_ptr -> tx_thread_user_preempt_threshold =  new_priority;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

        /* Determine if the actual thread priority should be setup, which is the
           case if the new priority is higher than the priority inheritance.  */
        if (new_priority < thread_ptr -> tx_thread_inherit_priority)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d206      	bcs.n	800a36c <_tx_thread_priority_change+0xd8>
        {
        
            /* Change thread priority to the new user's priority.  */
            thread_ptr -> tx_thread_priority =           new_priority;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	62da      	str	r2, [r3, #44]	; 0x2c
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	63da      	str	r2, [r3, #60]	; 0x3c
 800a36a:	e009      	b.n	800a380 <_tx_thread_priority_change+0xec>
        }
        else
        {
        
            /* Change thread priority to the priority inheritance.  */
            thread_ptr -> tx_thread_priority =           thread_ptr -> tx_thread_inherit_priority;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	62da      	str	r2, [r3, #44]	; 0x2c
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f000 fa9b 	bl	800a8bc <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a386:	f3ef 8310 	mrs	r3, PRIMASK
 800a38a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a38c:	b672      	cpsid	i
    return(primask_value);
 800a38e:	69bb      	ldr	r3, [r7, #24]

        /* Disable interrupts.  */
        TX_DISABLE
 800a390:	637b      	str	r3, [r7, #52]	; 0x34
#endif

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800a392:	4b1b      	ldr	r3, [pc, #108]	; (800a400 <_tx_thread_priority_change+0x16c>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	3b01      	subs	r3, #1
 800a398:	4a19      	ldr	r2, [pc, #100]	; (800a400 <_tx_thread_priority_change+0x16c>)
 800a39a:	6013      	str	r3, [r2, #0]
        
        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800a39c:	4b17      	ldr	r3, [pc, #92]	; (800a3fc <_tx_thread_priority_change+0x168>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d01a      	beq.n	800a3e0 <_tx_thread_priority_change+0x14c>
        {
        
            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d116      	bne.n	800a3e0 <_tx_thread_priority_change+0x14c>
            {
        
                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d810      	bhi.n	800a3e0 <_tx_thread_priority_change+0x14c>
                {
            
                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d10c      	bne.n	800a3e0 <_tx_thread_priority_change+0x14c>
                
                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800a3c6:	4a0d      	ldr	r2, [pc, #52]	; (800a3fc <_tx_thread_priority_change+0x168>)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800a3cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d205      	bcs.n	800a3e0 <_tx_thread_priority_change+0x14c>
                        {
                        
                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d8:	490a      	ldr	r1, [pc, #40]	; (800a404 <_tx_thread_priority_change+0x170>)
 800a3da:	68fa      	ldr	r2, [r7, #12]
 800a3dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e2:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	f383 8810 	msr	PRIMASK, r3
}
 800a3ea:	bf00      	nop
        
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800a3ec:	f000 fa2c 	bl	800a848 <_tx_thread_system_preempt_check>
    }

    /* Return success if we get here!  */
    return(TX_SUCCESS);
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3738      	adds	r7, #56	; 0x38
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	2400f038 	.word	0x2400f038
 800a400:	2400f0d0 	.word	0x2400f0d0
 800a404:	2400f050 	.word	0x2400f050

0800a408 <_tx_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_relinquish(VOID)
{
 800a408:	b480      	push	{r7}
 800a40a:	b08b      	sub	sp, #44	; 0x2c
 800a40c:	af00      	add	r7, sp, #0
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a40e:	4b2a      	ldr	r3, [pc, #168]	; (800a4b8 <_tx_thread_relinquish+0xb0>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a414:	f3ef 8310 	mrs	r3, PRIMASK
 800a418:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a41a:	b672      	cpsid	i
    return(primask_value);
 800a41c:	69bb      	ldr	r3, [r7, #24]
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Disable interrupts.  */
    TX_DISABLE
 800a41e:	623b      	str	r3, [r7, #32]

#ifndef TX_NO_TIMER

    /* Reset time slice for current thread.  */
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	69db      	ldr	r3, [r3, #28]
 800a424:	4a25      	ldr	r2, [pc, #148]	; (800a4bc <_tx_thread_relinquish+0xb4>)
 800a426:	6013      	str	r3, [r2, #0]
#endif

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42c:	61fb      	str	r3, [r7, #28]

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	6a1b      	ldr	r3, [r3, #32]
 800a432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a434:	429a      	cmp	r2, r3
 800a436:	d009      	beq.n	800a44c <_tx_thread_relinquish+0x44>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	6a1a      	ldr	r2, [r3, #32]
 800a43c:	4920      	ldr	r1, [pc, #128]	; (800a4c0 <_tx_thread_relinquish+0xb8>)
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	6a1b      	ldr	r3, [r3, #32]
 800a448:	4a1e      	ldr	r2, [pc, #120]	; (800a4c4 <_tx_thread_relinquish+0xbc>)
 800a44a:	6013      	str	r3, [r2, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 800a44c:	4b1e      	ldr	r3, [pc, #120]	; (800a4c8 <_tx_thread_relinquish+0xc0>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	69fa      	ldr	r2, [r7, #28]
 800a452:	429a      	cmp	r2, r3
 800a454:	d906      	bls.n	800a464 <_tx_thread_relinquish+0x5c>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800a456:	4b1c      	ldr	r3, [pc, #112]	; (800a4c8 <_tx_thread_relinquish+0xc0>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a19      	ldr	r2, [pc, #100]	; (800a4c0 <_tx_thread_relinquish+0xb8>)
 800a45c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a460:	4a18      	ldr	r2, [pc, #96]	; (800a4c4 <_tx_thread_relinquish+0xbc>)
 800a462:	6013      	str	r3, [r2, #0]
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	f383 8810 	msr	PRIMASK, r3
}
 800a46e:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 800a470:	4b14      	ldr	r3, [pc, #80]	; (800a4c4 <_tx_thread_relinquish+0xbc>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a476:	429a      	cmp	r2, r3
 800a478:	d017      	beq.n	800a4aa <_tx_thread_relinquish+0xa2>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a47a:	4b14      	ldr	r3, [pc, #80]	; (800a4cc <_tx_thread_relinquish+0xc4>)
 800a47c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a480:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a482:	f3ef 8305 	mrs	r3, IPSR
 800a486:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a488:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10c      	bne.n	800a4a8 <_tx_thread_relinquish+0xa0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a48e:	f3ef 8310 	mrs	r3, PRIMASK
 800a492:	60fb      	str	r3, [r7, #12]
    return(primask_value);
 800a494:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_primask_value();
 800a496:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800a498:	b662      	cpsie	i
}
 800a49a:	bf00      	nop
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f383 8810 	msr	PRIMASK, r3
}
 800a4a6:	bf00      	nop
        __enable_interrupts();
        __restore_interrupts(interrupt_save);
    }   
}
 800a4a8:	bf00      	nop

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 800a4aa:	bf00      	nop
 800a4ac:	372c      	adds	r7, #44	; 0x2c
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	2400f034 	.word	0x2400f034
 800a4bc:	2400f674 	.word	0x2400f674
 800a4c0:	2400f050 	.word	0x2400f050
 800a4c4:	2400f038 	.word	0x2400f038
 800a4c8:	2400f04c 	.word	0x2400f04c
 800a4cc:	e000ed04 	.word	0xe000ed04

0800a4d0 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08a      	sub	sp, #40	; 0x28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 800a4d8:	2300      	movs	r3, #0
 800a4da:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a4dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a4e0:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a4e2:	b672      	cpsid	i
    return(primask_value);
 800a4e4:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800a4e6:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ec:	2b03      	cmp	r3, #3
 800a4ee:	d12f      	bne.n	800a550 <_tx_thread_resume+0x80>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a4f0:	f3ef 8305 	mrs	r3, IPSR
 800a4f4:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a4f6:	693a      	ldr	r2, [r7, #16]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800a4f8:	4b21      	ldr	r3, [pc, #132]	; (800a580 <_tx_thread_resume+0xb0>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800a502:	d30d      	bcc.n	800a520 <_tx_thread_resume+0x50>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800a504:	4b1f      	ldr	r3, [pc, #124]	; (800a584 <_tx_thread_resume+0xb4>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	623b      	str	r3, [r7, #32]

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800a50a:	6a3b      	ldr	r3, [r7, #32]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d009      	beq.n	800a524 <_tx_thread_resume+0x54>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a514:	61fb      	str	r3, [r7, #28]

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	63da      	str	r2, [r3, #60]	; 0x3c
 800a51e:	e001      	b.n	800a524 <_tx_thread_resume+0x54>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800a520:	2300      	movs	r3, #0
 800a522:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800a524:	4b18      	ldr	r3, [pc, #96]	; (800a588 <_tx_thread_resume+0xb8>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	3301      	adds	r3, #1
 800a52a:	4a17      	ldr	r2, [pc, #92]	; (800a588 <_tx_thread_resume+0xb8>)
 800a52c:	6013      	str	r3, [r2, #0]
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f383 8810 	msr	PRIMASK, r3
}
 800a538:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f9be 	bl	800a8bc <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800a540:	6a3b      	ldr	r3, [r7, #32]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d002      	beq.n	800a54c <_tx_thread_resume+0x7c>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800a546:	6a3b      	ldr	r3, [r7, #32]
 800a548:	69fa      	ldr	r2, [r7, #28]
 800a54a:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 800a54c:	2300      	movs	r3, #0
 800a54e:	e012      	b.n	800a576 <_tx_thread_resume+0xa6>
        
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a554:	2b01      	cmp	r3, #1
 800a556:	d105      	bne.n	800a564 <_tx_thread_resume+0x94>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 800a55e:	2319      	movs	r3, #25
 800a560:	627b      	str	r3, [r7, #36]	; 0x24
 800a562:	e001      	b.n	800a568 <_tx_thread_resume+0x98>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 800a564:	2312      	movs	r3, #18
 800a566:	627b      	str	r3, [r7, #36]	; 0x24
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	f383 8810 	msr	PRIMASK, r3
}
 800a572:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 800a574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a576:	4618      	mov	r0, r3
 800a578:	3728      	adds	r7, #40	; 0x28
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	24000020 	.word	0x24000020
 800a584:	2400f038 	.word	0x2400f038
 800a588:	2400f0d0 	.word	0x2400f0d0

0800a58c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b088      	sub	sp, #32
 800a590:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a592:	4b2a      	ldr	r3, [pc, #168]	; (800a63c <_tx_thread_shell_entry+0xb0>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a598:	f3ef 8310 	mrs	r3, PRIMASK
 800a59c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a59e:	b672      	cpsid	i
    return(primask_value);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
    TX_THREAD_STARTED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Disable interrupts.  */
    TX_DISABLE
 800a5a2:	61bb      	str	r3, [r7, #24]

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5aa:	617b      	str	r3, [r7, #20]
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	f383 8810 	msr	PRIMASK, r3
}
 800a5b6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d003      	beq.n	800a5c6 <_tx_thread_shell_entry+0x3a>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	69f8      	ldr	r0, [r7, #28]
 800a5c4:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ca:	69fa      	ldr	r2, [r7, #28]
 800a5cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800a5d2:	4b1b      	ldr	r3, [pc, #108]	; (800a640 <_tx_thread_shell_entry+0xb4>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d003      	beq.n	800a5e2 <_tx_thread_shell_entry+0x56>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800a5da:	4b19      	ldr	r3, [pc, #100]	; (800a640 <_tx_thread_shell_entry+0xb4>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	69f8      	ldr	r0, [r7, #28]
 800a5e0:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a5e2:	f3ef 8310 	mrs	r3, PRIMASK
 800a5e6:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a5e8:	b672      	cpsid	i
    return(primask_value);
 800a5ea:	687b      	ldr	r3, [r7, #4]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800a5ec:	61bb      	str	r3, [r7, #24]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5f4:	617b      	str	r3, [r7, #20]
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	2201      	movs	r2, #1
 800a600:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	2200      	movs	r2, #0
 800a606:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800a608:	4b0e      	ldr	r3, [pc, #56]	; (800a644 <_tx_thread_shell_entry+0xb8>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	3301      	adds	r3, #1
 800a60e:	4a0d      	ldr	r2, [pc, #52]	; (800a644 <_tx_thread_shell_entry+0xb8>)
 800a610:	6013      	str	r3, [r2, #0]
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	f383 8810 	msr	PRIMASK, r3
}
 800a61c:	bf00      	nop
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d003      	beq.n	800a62c <_tx_thread_shell_entry+0xa0>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	2101      	movs	r1, #1
 800a628:	69f8      	ldr	r0, [r7, #28]
 800a62a:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800a62c:	69f8      	ldr	r0, [r7, #28]
 800a62e:	f000 fa57 	bl	800aae0 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800a632:	bf00      	nop
 800a634:	3720      	adds	r7, #32
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	2400f034 	.word	0x2400f034
 800a640:	2400f0d4 	.word	0x2400f0d4
 800a644:	2400f0d0 	.word	0x2400f0d0

0800a648 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b08e      	sub	sp, #56	; 0x38
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a650:	f3ef 8310 	mrs	r3, PRIMASK
 800a654:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a656:	b672      	cpsid	i
    return(primask_value);
 800a658:	6abb      	ldr	r3, [r7, #40]	; 0x28
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800a65a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a65c:	4b35      	ldr	r3, [pc, #212]	; (800a734 <_tx_thread_sleep+0xec>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800a662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a664:	2b00      	cmp	r3, #0
 800a666:	d108      	bne.n	800a67a <_tx_thread_sleep+0x32>
 800a668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66e:	f383 8810 	msr	PRIMASK, r3
}
 800a672:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800a674:	2313      	movs	r3, #19
 800a676:	637b      	str	r3, [r7, #52]	; 0x34
 800a678:	e056      	b.n	800a728 <_tx_thread_sleep+0xe0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a67a:	f3ef 8305 	mrs	r3, IPSR
 800a67e:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 800a680:	6a3a      	ldr	r2, [r7, #32]
    }
    
    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800a682:	4b2d      	ldr	r3, [pc, #180]	; (800a738 <_tx_thread_sleep+0xf0>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4313      	orrs	r3, r2
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d008      	beq.n	800a69e <_tx_thread_sleep+0x56>
 800a68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	f383 8810 	msr	PRIMASK, r3
}
 800a696:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800a698:	2313      	movs	r3, #19
 800a69a:	637b      	str	r3, [r7, #52]	; 0x34
 800a69c:	e044      	b.n	800a728 <_tx_thread_sleep+0xe0>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800a69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a0:	4a26      	ldr	r2, [pc, #152]	; (800a73c <_tx_thread_sleep+0xf4>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d108      	bne.n	800a6b8 <_tx_thread_sleep+0x70>
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	f383 8810 	msr	PRIMASK, r3
}
 800a6b0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800a6b2:	2313      	movs	r3, #19
 800a6b4:	637b      	str	r3, [r7, #52]	; 0x34
 800a6b6:	e037      	b.n	800a728 <_tx_thread_sleep+0xe0>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d108      	bne.n	800a6d0 <_tx_thread_sleep+0x88>
 800a6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c0:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	f383 8810 	msr	PRIMASK, r3
}
 800a6c8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
      
        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a6ce:	e02b      	b.n	800a728 <_tx_thread_sleep+0xe0>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800a6d0:	4b1b      	ldr	r3, [pc, #108]	; (800a740 <_tx_thread_sleep+0xf8>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d008      	beq.n	800a6ea <_tx_thread_sleep+0xa2>
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6da:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	f383 8810 	msr	PRIMASK, r3
}
 800a6e2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
        
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800a6e4:	2313      	movs	r3, #19
 800a6e6:	637b      	str	r3, [r7, #52]	; 0x34
 800a6e8:	e01e      	b.n	800a728 <_tx_thread_sleep+0xe0>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800a6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ec:	2204      	movs	r2, #4
 800a6ee:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800a6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800a6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800a704:	4b0e      	ldr	r3, [pc, #56]	; (800a740 <_tx_thread_sleep+0xf8>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	3301      	adds	r3, #1
 800a70a:	4a0d      	ldr	r2, [pc, #52]	; (800a740 <_tx_thread_sleep+0xf8>)
 800a70c:	6013      	str	r3, [r2, #0]
 800a70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a710:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f383 8810 	msr	PRIMASK, r3
}
 800a718:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800a71a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a71c:	f000 f9e0 	bl	800aae0 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800a720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a726:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }
    
    /* Return completion status.  */
    return(status);
 800a728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3738      	adds	r7, #56	; 0x38
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	2400f034 	.word	0x2400f034
 800a738:	24000020 	.word	0x24000020
 800a73c:	2400f180 	.word	0x2400f180
 800a740:	2400f0d0 	.word	0x2400f0d0

0800a744 <_tx_thread_stack_error_notify>:
/*                                            for ARMv8-M (Cortex M23/33) */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_stack_error_notify(VOID (*stack_error_handler)(TX_THREAD *thread_ptr))
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Access input argument just for the sake of lint, MISRA, etc.  */
    if (stack_error_handler != TX_NULL)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d002      	beq.n	800a758 <_tx_thread_stack_error_notify+0x14>
    {

        /* Stack checking is not enabled, just return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 800a752:	23ff      	movs	r3, #255	; 0xff
 800a754:	60fb      	str	r3, [r7, #12]
 800a756:	e001      	b.n	800a75c <_tx_thread_stack_error_notify+0x18>
    }
    else
    {
    
        /* Stack checking is not enabled, just return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 800a758:	23ff      	movs	r3, #255	; 0xff
 800a75a:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800a75c:	68fb      	ldr	r3, [r7, #12]
    TX_RESTORE

    /* Return success to caller.  */
    return(TX_SUCCESS);
#endif
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
	...

0800a76c <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b08a      	sub	sp, #40	; 0x28
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a774:	f3ef 8310 	mrs	r3, PRIMASK
 800a778:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a77a:	b672      	cpsid	i
    return(primask_value);
 800a77c:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800a77e:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800a780:	4b2e      	ldr	r3, [pc, #184]	; (800a83c <_tx_thread_suspend+0xd0>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d130      	bne.n	800a7f0 <_tx_thread_suspend+0x84>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 800a78e:	2300      	movs	r3, #0
 800a790:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a792:	f3ef 8305 	mrs	r3, IPSR
 800a796:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800a798:	697a      	ldr	r2, [r7, #20]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 800a79a:	4b29      	ldr	r3, [pc, #164]	; (800a840 <_tx_thread_suspend+0xd4>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d109      	bne.n	800a7b8 <_tx_thread_suspend+0x4c>
        {
        
            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 800a7a4:	69fa      	ldr	r2, [r7, #28]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d105      	bne.n	800a7b8 <_tx_thread_suspend+0x4c>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 800a7ac:	4b25      	ldr	r3, [pc, #148]	; (800a844 <_tx_thread_suspend+0xd8>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <_tx_thread_suspend+0x4c>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero, 
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 800a7b4:	2314      	movs	r3, #20
 800a7b6:	627b      	str	r3, [r7, #36]	; 0x24
                }
            }
        }
        
        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d132      	bne.n	800a824 <_tx_thread_suspend+0xb8>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2203      	movs	r2, #3
 800a7c2:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800a7d0:	4b1c      	ldr	r3, [pc, #112]	; (800a844 <_tx_thread_suspend+0xd8>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	4a1b      	ldr	r2, [pc, #108]	; (800a844 <_tx_thread_suspend+0xd8>)
 800a7d8:	6013      	str	r3, [r2, #0]
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	f383 8810 	msr	PRIMASK, r3
}
 800a7e4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 f97a 	bl	800aae0 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	e020      	b.n	800a832 <_tx_thread_suspend+0xc6>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d102      	bne.n	800a7fe <_tx_thread_suspend+0x92>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 800a7f8:	2314      	movs	r3, #20
 800a7fa:	627b      	str	r3, [r7, #36]	; 0x24
 800a7fc:	e012      	b.n	800a824 <_tx_thread_suspend+0xb8>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a802:	2b01      	cmp	r3, #1
 800a804:	d102      	bne.n	800a80c <_tx_thread_suspend+0xa0>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 800a806:	2314      	movs	r3, #20
 800a808:	627b      	str	r3, [r7, #36]	; 0x24
 800a80a:	e00b      	b.n	800a824 <_tx_thread_suspend+0xb8>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a810:	2b03      	cmp	r3, #3
 800a812:	d102      	bne.n	800a81a <_tx_thread_suspend+0xae>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 800a814:	2300      	movs	r3, #0
 800a816:	627b      	str	r3, [r7, #36]	; 0x24
 800a818:	e004      	b.n	800a824 <_tx_thread_suspend+0xb8>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2201      	movs	r2, #1
 800a81e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 800a820:	2300      	movs	r3, #0
 800a822:	627b      	str	r3, [r7, #36]	; 0x24
 800a824:	6a3b      	ldr	r3, [r7, #32]
 800a826:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f383 8810 	msr	PRIMASK, r3
}
 800a82e:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error 
       checking.  */
    return(status);
 800a830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 800a832:	4618      	mov	r0, r3
 800a834:	3728      	adds	r7, #40	; 0x28
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	2400f034 	.word	0x2400f034
 800a840:	24000020 	.word	0x24000020
 800a844:	2400f0d0 	.word	0x2400f0d0

0800a848 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800a848:	b480      	push	{r7}
 800a84a:	b089      	sub	sp, #36	; 0x24
 800a84c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a84e:	4b17      	ldr	r3, [pc, #92]	; (800a8ac <_tx_thread_system_preempt_check+0x64>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d121      	bne.n	800a89e <_tx_thread_system_preempt_check+0x56>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800a85a:	4b15      	ldr	r3, [pc, #84]	; (800a8b0 <_tx_thread_system_preempt_check+0x68>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800a860:	4b14      	ldr	r3, [pc, #80]	; (800a8b4 <_tx_thread_system_preempt_check+0x6c>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800a866:	69ba      	ldr	r2, [r7, #24]
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d017      	beq.n	800a89e <_tx_thread_system_preempt_check+0x56>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a86e:	4b12      	ldr	r3, [pc, #72]	; (800a8b8 <_tx_thread_system_preempt_check+0x70>)
 800a870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a874:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a876:	f3ef 8305 	mrs	r3, IPSR
 800a87a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800a87c:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d10c      	bne.n	800a89c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a882:	f3ef 8310 	mrs	r3, PRIMASK
 800a886:	60fb      	str	r3, [r7, #12]
    return(primask_value);
 800a888:	68fb      	ldr	r3, [r7, #12]
        interrupt_save = __get_primask_value();
 800a88a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800a88c:	b662      	cpsie	i
}
 800a88e:	bf00      	nop
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f383 8810 	msr	PRIMASK, r3
}
 800a89a:	bf00      	nop
}
 800a89c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800a89e:	bf00      	nop
 800a8a0:	3724      	adds	r7, #36	; 0x24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	2400f0d0 	.word	0x2400f0d0
 800a8b0:	2400f034 	.word	0x2400f034
 800a8b4:	2400f038 	.word	0x2400f038
 800a8b8:	e000ed04 	.word	0xe000ed04

0800a8bc <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b096      	sub	sp, #88	; 0x58
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a8c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a8c8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 800a8ca:	b672      	cpsid	i
    return(primask_value);
 800a8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800a8ce:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d005      	beq.n	800a8e4 <_tx_thread_system_resume+0x28>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	334c      	adds	r3, #76	; 0x4c
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f000 fff1 	bl	800b8c4 <_tx_timer_system_deactivate>
 800a8e2:	e002      	b.n	800a8ea <_tx_thread_system_resume+0x2e>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800a8ea:	4b75      	ldr	r3, [pc, #468]	; (800aac0 <_tx_thread_system_resume+0x204>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	4a73      	ldr	r2, [pc, #460]	; (800aac0 <_tx_thread_system_resume+0x204>)
 800a8f2:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f040 8096 	bne.w	800aa2a <_tx_thread_system_resume+0x16e>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a902:	2b00      	cmp	r3, #0
 800a904:	f000 80aa 	beq.w	800aa5c <_tx_thread_system_resume+0x1a0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f040 8085 	bne.w	800aa1c <_tx_thread_system_resume+0x160>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a91c:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800a91e:	4a69      	ldr	r2, [pc, #420]	; (800aac4 <_tx_thread_system_resume+0x208>)
 800a920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a926:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800a928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d166      	bne.n	800a9fc <_tx_thread_system_resume+0x140>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800a92e:	4965      	ldr	r1, [pc, #404]	; (800aac4 <_tx_thread_system_resume+0x208>)
 800a930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800a944:	2201      	movs	r2, #1
 800a946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a948:	fa02 f303 	lsl.w	r3, r2, r3
 800a94c:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800a94e:	4b5e      	ldr	r3, [pc, #376]	; (800aac8 <_tx_thread_system_resume+0x20c>)
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a954:	4313      	orrs	r3, r2
 800a956:	4a5c      	ldr	r2, [pc, #368]	; (800aac8 <_tx_thread_system_resume+0x20c>)
 800a958:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800a95a:	4b5c      	ldr	r3, [pc, #368]	; (800aacc <_tx_thread_system_resume+0x210>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a960:	429a      	cmp	r2, r3
 800a962:	d27b      	bcs.n	800aa5c <_tx_thread_system_resume+0x1a0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800a964:	4a59      	ldr	r2, [pc, #356]	; (800aacc <_tx_thread_system_resume+0x210>)
 800a966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a968:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800a96a:	4b59      	ldr	r3, [pc, #356]	; (800aad0 <_tx_thread_system_resume+0x214>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	643b      	str	r3, [r7, #64]	; 0x40
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800a970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a972:	2b00      	cmp	r3, #0
 800a974:	d103      	bne.n	800a97e <_tx_thread_system_resume+0xc2>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800a976:	4a56      	ldr	r2, [pc, #344]	; (800aad0 <_tx_thread_system_resume+0x214>)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	e06e      	b.n	800aa5c <_tx_thread_system_resume+0x1a0>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800a97e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a982:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a984:	429a      	cmp	r2, r3
 800a986:	d269      	bcs.n	800aa5c <_tx_thread_system_resume+0x1a0>
                            {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                                /* Determine if the preempted thread had preemption-threshold set.  */
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 800a988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a98a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a98c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a990:	429a      	cmp	r2, r3
 800a992:	d00b      	beq.n	800a9ac <_tx_thread_system_resume+0xf0>
                                    TX_DIV32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
                                    _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                                    /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 800a994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a998:	2201      	movs	r2, #1
 800a99a:	fa02 f303 	lsl.w	r3, r2, r3
 800a99e:	647b      	str	r3, [r7, #68]	; 0x44
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 800a9a0:	4b4c      	ldr	r3, [pc, #304]	; (800aad4 <_tx_thread_system_resume+0x218>)
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	4a4a      	ldr	r2, [pc, #296]	; (800aad4 <_tx_thread_system_resume+0x218>)
 800a9aa:	6013      	str	r3, [r2, #0]
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800a9ac:	4a48      	ldr	r2, [pc, #288]	; (800aad0 <_tx_thread_system_resume+0x214>)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6013      	str	r3, [r2, #0]
 800a9b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9b4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b8:	f383 8810 	msr	PRIMASK, r3
}
 800a9bc:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800a9be:	4b40      	ldr	r3, [pc, #256]	; (800aac0 <_tx_thread_system_resume+0x204>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800a9c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d174      	bne.n	800aab4 <_tx_thread_system_resume+0x1f8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800a9ca:	4b43      	ldr	r3, [pc, #268]	; (800aad8 <_tx_thread_system_resume+0x21c>)
 800a9cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9d0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a9d2:	f3ef 8305 	mrs	r3, IPSR
 800a9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800a9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10c      	bne.n	800a9f8 <_tx_thread_system_resume+0x13c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800a9de:	f3ef 8310 	mrs	r3, PRIMASK
 800a9e2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(primask_value);
 800a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_primask_value();
 800a9e6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800a9e8:	b662      	cpsie	i
}
 800a9ea:	bf00      	nop
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ee:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800a9f0:	6a3b      	ldr	r3, [r7, #32]
 800a9f2:	f383 8810 	msr	PRIMASK, r3
}
 800a9f6:	bf00      	nop
}
 800a9f8:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800a9fa:	e05b      	b.n	800aab4 <_tx_thread_system_resume+0x1f8>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800a9fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800aa02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800aa08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa12:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa18:	621a      	str	r2, [r3, #32]
 800aa1a:	e01f      	b.n	800aa5c <_tx_thread_system_resume+0x1a0>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2203      	movs	r2, #3
 800aa26:	631a      	str	r2, [r3, #48]	; 0x30
 800aa28:	e018      	b.n	800aa5c <_tx_thread_system_resume+0x1a0>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d014      	beq.n	800aa5c <_tx_thread_system_resume+0x1a0>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d010      	beq.n	800aa5c <_tx_thread_system_resume+0x1a0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d106      	bne.n	800aa50 <_tx_thread_system_resume+0x194>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	631a      	str	r2, [r3, #48]	; 0x30
 800aa4e:	e005      	b.n	800aa5c <_tx_thread_system_resume+0x1a0>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2203      	movs	r2, #3
 800aa5a:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800aa5c:	4b1f      	ldr	r3, [pc, #124]	; (800aadc <_tx_thread_system_resume+0x220>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa64:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	f383 8810 	msr	PRIMASK, r3
}
 800aa6c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800aa6e:	4b18      	ldr	r3, [pc, #96]	; (800aad0 <_tx_thread_system_resume+0x214>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d020      	beq.n	800aaba <_tx_thread_system_resume+0x1fe>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800aa78:	4b11      	ldr	r3, [pc, #68]	; (800aac0 <_tx_thread_system_resume+0x204>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800aa7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d11a      	bne.n	800aaba <_tx_thread_system_resume+0x1fe>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800aa84:	4b14      	ldr	r3, [pc, #80]	; (800aad8 <_tx_thread_system_resume+0x21c>)
 800aa86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa8a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800aa8c:	f3ef 8305 	mrs	r3, IPSR
 800aa90:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800aa92:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d10f      	bne.n	800aab8 <_tx_thread_system_resume+0x1fc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800aa98:	f3ef 8310 	mrs	r3, PRIMASK
 800aa9c:	617b      	str	r3, [r7, #20]
    return(primask_value);
 800aa9e:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
 800aaa0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800aaa2:	b662      	cpsie	i
}
 800aaa4:	bf00      	nop
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f383 8810 	msr	PRIMASK, r3
}
 800aab0:	bf00      	nop
}
 800aab2:	e001      	b.n	800aab8 <_tx_thread_system_resume+0x1fc>
                                return;
 800aab4:	bf00      	nop
 800aab6:	e000      	b.n	800aaba <_tx_thread_system_resume+0x1fe>
 800aab8:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800aaba:	3758      	adds	r7, #88	; 0x58
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	2400f0d0 	.word	0x2400f0d0
 800aac4:	2400f050 	.word	0x2400f050
 800aac8:	2400f044 	.word	0x2400f044
 800aacc:	2400f04c 	.word	0x2400f04c
 800aad0:	2400f038 	.word	0x2400f038
 800aad4:	2400f048 	.word	0x2400f048
 800aad8:	e000ed04 	.word	0xe000ed04
 800aadc:	2400f034 	.word	0x2400f034

0800aae0 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b09e      	sub	sp, #120	; 0x78
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800aae8:	4b59      	ldr	r3, [pc, #356]	; (800ac50 <_tx_thread_system_suspend+0x170>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	673b      	str	r3, [r7, #112]	; 0x70
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800aaee:	f3ef 8310 	mrs	r3, PRIMASK
 800aaf2:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800aaf4:	b672      	cpsid	i
    return(primask_value);
 800aaf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800aaf8:	677b      	str	r3, [r7, #116]	; 0x74

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d112      	bne.n	800ab28 <_tx_thread_system_suspend+0x48>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab06:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800ab08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d008      	beq.n	800ab20 <_tx_thread_system_suspend+0x40>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800ab0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab14:	d004      	beq.n	800ab20 <_tx_thread_system_suspend+0x40>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	334c      	adds	r3, #76	; 0x4c
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 fe70 	bl	800b800 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	69db      	ldr	r3, [r3, #28]
 800ab24:	4a4b      	ldr	r2, [pc, #300]	; (800ac54 <_tx_thread_system_suspend+0x174>)
 800ab26:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800ab28:	4b4b      	ldr	r3, [pc, #300]	; (800ac58 <_tx_thread_system_suspend+0x178>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	4a4a      	ldr	r2, [pc, #296]	; (800ac58 <_tx_thread_system_suspend+0x178>)
 800ab30:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	f040 8120 	bne.w	800ad7c <_tx_thread_system_suspend+0x29c>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab46:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a1b      	ldr	r3, [r3, #32]
 800ab4c:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800ab4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d027      	beq.n	800aba6 <_tx_thread_system_suspend+0xc6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800ab5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab60:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800ab62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ab66:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800ab68:	4a3c      	ldr	r2, [pc, #240]	; (800ac5c <_tx_thread_system_suspend+0x17c>)
 800ab6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	f040 808b 	bne.w	800ac8e <_tx_thread_system_suspend+0x1ae>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800ab78:	4938      	ldr	r1, [pc, #224]	; (800ac5c <_tx_thread_system_suspend+0x17c>)
 800ab7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ab7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                /* Calculate the index into the bit map array.  */
                map_index =  priority/((UINT) 32);
#endif

                /* Check for a thread preempted that had preemption threshold set.  */
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800ab82:	4b37      	ldr	r3, [pc, #220]	; (800ac60 <_tx_thread_system_suspend+0x180>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	f000 8081 	beq.w	800ac8e <_tx_thread_system_suspend+0x1ae>
                {

                    /* Ensure that this thread's priority is clear in the preempt map.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab90:	fa02 f303 	lsl.w	r3, r2, r3
 800ab94:	663b      	str	r3, [r7, #96]	; 0x60
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800ab96:	4b32      	ldr	r3, [pc, #200]	; (800ac60 <_tx_thread_system_suspend+0x180>)
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab9c:	43db      	mvns	r3, r3
 800ab9e:	4013      	ands	r3, r2
 800aba0:	4a2f      	ldr	r2, [pc, #188]	; (800ac60 <_tx_thread_system_suspend+0x180>)
 800aba2:	6013      	str	r3, [r2, #0]
 800aba4:	e073      	b.n	800ac8e <_tx_thread_system_suspend+0x1ae>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800aba6:	4a2d      	ldr	r2, [pc, #180]	; (800ac5c <_tx_thread_system_suspend+0x17c>)
 800aba8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abaa:	2100      	movs	r1, #0
 800abac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800abb0:	2201      	movs	r2, #1
 800abb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abb4:	fa02 f303 	lsl.w	r3, r2, r3
 800abb8:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800abba:	4b2a      	ldr	r3, [pc, #168]	; (800ac64 <_tx_thread_system_suspend+0x184>)
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abc0:	43db      	mvns	r3, r3
 800abc2:	4013      	ands	r3, r2
 800abc4:	4a27      	ldr	r2, [pc, #156]	; (800ac64 <_tx_thread_system_suspend+0x184>)
 800abc6:	6013      	str	r3, [r2, #0]
#endif

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

            /* Check for a thread preempted that had preemption-threshold set.  */
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800abc8:	4b25      	ldr	r3, [pc, #148]	; (800ac60 <_tx_thread_system_suspend+0x180>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00b      	beq.n	800abe8 <_tx_thread_system_suspend+0x108>
            {

                /* Ensure that this thread's priority is clear in the preempt map.  */
                TX_MOD32_BIT_SET(priority, priority_bit)
 800abd0:	2201      	movs	r2, #1
 800abd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abd4:	fa02 f303 	lsl.w	r3, r2, r3
 800abd8:	663b      	str	r3, [r7, #96]	; 0x60
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800abda:	4b21      	ldr	r3, [pc, #132]	; (800ac60 <_tx_thread_system_suspend+0x180>)
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abe0:	43db      	mvns	r3, r3
 800abe2:	4013      	ands	r3, r2
 800abe4:	4a1e      	ldr	r2, [pc, #120]	; (800ac60 <_tx_thread_system_suspend+0x180>)
 800abe6:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800abe8:	2300      	movs	r3, #0
 800abea:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800abec:	4b1d      	ldr	r3, [pc, #116]	; (800ac64 <_tx_thread_system_suspend+0x184>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800abf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d13d      	bne.n	800ac74 <_tx_thread_system_suspend+0x194>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800abf8:	4b1b      	ldr	r3, [pc, #108]	; (800ac68 <_tx_thread_system_suspend+0x188>)
 800abfa:	2220      	movs	r2, #32
 800abfc:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800abfe:	4b1b      	ldr	r3, [pc, #108]	; (800ac6c <_tx_thread_system_suspend+0x18c>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac06:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ac08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac0a:	f383 8810 	msr	PRIMASK, r3
}
 800ac0e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800ac10:	4b11      	ldr	r3, [pc, #68]	; (800ac58 <_tx_thread_system_suspend+0x178>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800ac16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f040 80d9 	bne.w	800add0 <_tx_thread_system_suspend+0x2f0>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800ac1e:	4b14      	ldr	r3, [pc, #80]	; (800ac70 <_tx_thread_system_suspend+0x190>)
 800ac20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac24:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ac26:	f3ef 8305 	mrs	r3, IPSR
 800ac2a:	647b      	str	r3, [r7, #68]	; 0x44
    return(ipsr_value);
 800ac2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    if (__get_ipsr_value() == 0)
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10c      	bne.n	800ac4c <_tx_thread_system_suspend+0x16c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ac32:	f3ef 8310 	mrs	r3, PRIMASK
 800ac36:	643b      	str	r3, [r7, #64]	; 0x40
    return(primask_value);
 800ac38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
        interrupt_save = __get_primask_value();
 800ac3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800ac3c:	b662      	cpsie	i
}
 800ac3e:	bf00      	nop
 800ac40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac42:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ac44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac46:	f383 8810 	msr	PRIMASK, r3
}
 800ac4a:	bf00      	nop
}
 800ac4c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800ac4e:	e0bf      	b.n	800add0 <_tx_thread_system_suspend+0x2f0>
 800ac50:	2400f034 	.word	0x2400f034
 800ac54:	2400f674 	.word	0x2400f674
 800ac58:	2400f0d0 	.word	0x2400f0d0
 800ac5c:	2400f050 	.word	0x2400f050
 800ac60:	2400f048 	.word	0x2400f048
 800ac64:	2400f044 	.word	0x2400f044
 800ac68:	2400f04c 	.word	0x2400f04c
 800ac6c:	2400f038 	.word	0x2400f038
 800ac70:	e000ed04 	.word	0xe000ed04
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800ac74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac76:	fa93 f3a3 	rbit	r3, r3
 800ac7a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac7e:	fab3 f383 	clz	r3, r3
 800ac82:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800ac84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ac86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac88:	4413      	add	r3, r2
 800ac8a:	4a55      	ldr	r2, [pc, #340]	; (800ade0 <_tx_thread_system_suspend+0x300>)
 800ac8c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800ac8e:	4b55      	ldr	r3, [pc, #340]	; (800ade4 <_tx_thread_system_suspend+0x304>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d171      	bne.n	800ad7c <_tx_thread_system_suspend+0x29c>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800ac98:	4b51      	ldr	r3, [pc, #324]	; (800ade0 <_tx_thread_system_suspend+0x300>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a52      	ldr	r2, [pc, #328]	; (800ade8 <_tx_thread_system_suspend+0x308>)
 800ac9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aca2:	4a50      	ldr	r2, [pc, #320]	; (800ade4 <_tx_thread_system_suspend+0x304>)
 800aca4:	6013      	str	r3, [r2, #0]

            /* Determine if a previous thread with preemption-threshold was preempted.  */
#if TX_MAX_PRIORITIES > 32
            if (_tx_thread_preempted_map_active != ((ULONG) 0))
#else
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 800aca6:	4b51      	ldr	r3, [pc, #324]	; (800adec <_tx_thread_system_suspend+0x30c>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d041      	beq.n	800ad32 <_tx_thread_system_suspend+0x252>
            {

                /* Yes, there was a thread preempted when it was using preemption-threshold.  */

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 800acae:	4b50      	ldr	r3, [pc, #320]	; (800adf0 <_tx_thread_system_suspend+0x310>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	3301      	adds	r3, #1
 800acb4:	4a4e      	ldr	r2, [pc, #312]	; (800adf0 <_tx_thread_system_suspend+0x310>)
 800acb6:	6013      	str	r3, [r2, #0]
 800acb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acba:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800acbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbe:	f383 8810 	msr	PRIMASK, r3
}
 800acc2:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800acc4:	f3ef 8310 	mrs	r3, PRIMASK
 800acc8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 800acca:	b672      	cpsid	i
    return(primask_value);
 800accc:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Interrupts are enabled briefly here to keep the interrupt
                   lockout time deterministic.  */

                /* Disable interrupts again.  */
                TX_DISABLE
 800acce:	677b      	str	r3, [r7, #116]	; 0x74

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 800acd0:	4b47      	ldr	r3, [pc, #284]	; (800adf0 <_tx_thread_system_suspend+0x310>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	3b01      	subs	r3, #1
 800acd6:	4a46      	ldr	r2, [pc, #280]	; (800adf0 <_tx_thread_system_suspend+0x310>)
 800acd8:	6013      	str	r3, [r2, #0]
                /* Calculate the base priority as well.  */
                base_priority =  map_index * ((UINT) 32);
#else

                /* Setup the base priority to zero.  */
                base_priority =   ((UINT) 0);
 800acda:	2300      	movs	r3, #0
 800acdc:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

                /* Setup temporary preempted map.  */
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 800acde:	4b43      	ldr	r3, [pc, #268]	; (800adec <_tx_thread_system_suspend+0x30c>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800ace4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ace6:	fa93 f3a3 	rbit	r3, r3
 800acea:	65bb      	str	r3, [r7, #88]	; 0x58
 800acec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800acee:	fab3 f383 	clz	r3, r3
 800acf2:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the highest priority preempted thread.  */
                priority =  base_priority + ((UINT) priority_bit);
 800acf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800acf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800acf8:	4413      	add	r3, r2
 800acfa:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Determine if the next highest priority thread is above the highest priority threshold value.  */
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 800acfc:	4a3a      	ldr	r2, [pc, #232]	; (800ade8 <_tx_thread_system_suspend+0x308>)
 800acfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad06:	4b36      	ldr	r3, [pc, #216]	; (800ade0 <_tx_thread_system_suspend+0x300>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d811      	bhi.n	800ad32 <_tx_thread_system_suspend+0x252>
                {

                    /* Thread not allowed to execute until earlier preempted thread finishes or lowers its 
                       preemption-threshold.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 800ad0e:	4a36      	ldr	r2, [pc, #216]	; (800ade8 <_tx_thread_system_suspend+0x308>)
 800ad10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad16:	4a33      	ldr	r2, [pc, #204]	; (800ade4 <_tx_thread_system_suspend+0x304>)
 800ad18:	6013      	str	r3, [r2, #0]

                    /* Clear the corresponding bit in the preempted map, since the preemption has been restored.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad22:	663b      	str	r3, [r7, #96]	; 0x60
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 800ad24:	4b31      	ldr	r3, [pc, #196]	; (800adec <_tx_thread_system_suspend+0x30c>)
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad2a:	43db      	mvns	r3, r3
 800ad2c:	4013      	ands	r3, r2
 800ad2e:	4a2f      	ldr	r2, [pc, #188]	; (800adec <_tx_thread_system_suspend+0x30c>)
 800ad30:	6013      	str	r3, [r2, #0]
 800ad32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad34:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ad36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad38:	f383 8810 	msr	PRIMASK, r3
}
 800ad3c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800ad3e:	4b2c      	ldr	r3, [pc, #176]	; (800adf0 <_tx_thread_system_suspend+0x310>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800ad44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d144      	bne.n	800add4 <_tx_thread_system_suspend+0x2f4>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800ad4a:	4b2a      	ldr	r3, [pc, #168]	; (800adf4 <_tx_thread_system_suspend+0x314>)
 800ad4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad50:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ad52:	f3ef 8305 	mrs	r3, IPSR
 800ad56:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800ad58:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10c      	bne.n	800ad78 <_tx_thread_system_suspend+0x298>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ad5e:	f3ef 8310 	mrs	r3, PRIMASK
 800ad62:	627b      	str	r3, [r7, #36]	; 0x24
    return(primask_value);
 800ad64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_primask_value();
 800ad66:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800ad68:	b662      	cpsie	i
}
 800ad6a:	bf00      	nop
 800ad6c:	6a3b      	ldr	r3, [r7, #32]
 800ad6e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	f383 8810 	msr	PRIMASK, r3
}
 800ad76:	bf00      	nop
}
 800ad78:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800ad7a:	e02b      	b.n	800add4 <_tx_thread_system_suspend+0x2f4>
 800ad7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad7e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	f383 8810 	msr	PRIMASK, r3
}
 800ad86:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800ad88:	4b16      	ldr	r3, [pc, #88]	; (800ade4 <_tx_thread_system_suspend+0x304>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d022      	beq.n	800add8 <_tx_thread_system_suspend+0x2f8>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800ad92:	4b17      	ldr	r3, [pc, #92]	; (800adf0 <_tx_thread_system_suspend+0x310>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800ad98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d11c      	bne.n	800add8 <_tx_thread_system_suspend+0x2f8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800ad9e:	4b15      	ldr	r3, [pc, #84]	; (800adf4 <_tx_thread_system_suspend+0x314>)
 800ada0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ada4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ada6:	f3ef 8305 	mrs	r3, IPSR
 800adaa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800adac:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d10c      	bne.n	800adcc <_tx_thread_system_suspend+0x2ec>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800adb2:	f3ef 8310 	mrs	r3, PRIMASK
 800adb6:	613b      	str	r3, [r7, #16]
    return(primask_value);
 800adb8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_primask_value();
 800adba:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800adbc:	b662      	cpsie	i
}
 800adbe:	bf00      	nop
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	f383 8810 	msr	PRIMASK, r3
}
 800adca:	bf00      	nop
}
 800adcc:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800adce:	e003      	b.n	800add8 <_tx_thread_system_suspend+0x2f8>
                return;
 800add0:	bf00      	nop
 800add2:	e002      	b.n	800adda <_tx_thread_system_suspend+0x2fa>
            return;
 800add4:	bf00      	nop
 800add6:	e000      	b.n	800adda <_tx_thread_system_suspend+0x2fa>
    return;
 800add8:	bf00      	nop
}
 800adda:	3778      	adds	r7, #120	; 0x78
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	2400f04c 	.word	0x2400f04c
 800ade4:	2400f038 	.word	0x2400f038
 800ade8:	2400f050 	.word	0x2400f050
 800adec:	2400f048 	.word	0x2400f048
 800adf0:	2400f0d0 	.word	0x2400f0d0
 800adf4:	e000ed04 	.word	0xe000ed04

0800adf8 <_tx_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_terminate(TX_THREAD *thread_ptr)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b094      	sub	sp, #80	; 0x50
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
UINT        status;
ULONG       suspension_sequence;


    /* Default to successful completion.  */
    status =  TX_SUCCESS;
 800ae00:	2300      	movs	r3, #0
 800ae02:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ae04:	f3ef 8310 	mrs	r3, PRIMASK
 800ae08:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ae0a:	b672      	cpsid	i
    return(primask_value);
 800ae0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    /* Lockout interrupts while the thread is being terminated.  */
    TX_DISABLE
 800ae0e:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Deactivate thread timer, if active.  */
    _tx_timer_system_deactivate(&thread_ptr -> tx_thread_timer);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	334c      	adds	r3, #76	; 0x4c
 800ae14:	4618      	mov	r0, r3
 800ae16:	f000 fd55 	bl	800b8c4 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_THREAD_TERMINATE_INSERT

    /* Is the thread already terminated?  */
    if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	d108      	bne.n	800ae34 <_tx_thread_terminate+0x3c>
 800ae22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae24:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ae26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae28:	f383 8810 	msr	PRIMASK, r3
}
 800ae2c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success since thread is already terminated.  */
        status =  TX_SUCCESS;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae32:	e091      	b.n	800af58 <_tx_thread_terminate+0x160>
    }

    /* Check the specified thread's current status.  */
    else if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	f000 8087 	beq.w	800af4c <_tx_thread_terminate+0x154>
    {

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800ae3e:	4b4a      	ldr	r3, [pc, #296]	; (800af68 <_tx_thread_terminate+0x170>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	3301      	adds	r3, #1
 800ae44:	4a48      	ldr	r2, [pc, #288]	; (800af68 <_tx_thread_terminate+0x170>)
 800ae46:	6013      	str	r3, [r2, #0]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the entry/exit application callback routine.  */
        entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae4e:	647b      	str	r3, [r7, #68]	; 0x44
#endif

        /* Check to see if the thread is currently ready.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d124      	bne.n	800aea2 <_tx_thread_terminate+0xaa>
        {

            /* Set the state to terminated.  */
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2202      	movs	r2, #2
 800ae5c:	631a      	str	r2, [r3, #48]	; 0x30
            /* Call actual non-interruptable thread suspension routine.  */
            _tx_thread_system_ni_suspend(thread_ptr, ((ULONG) 0));
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2201      	movs	r2, #1
 800ae62:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Disable preemption.  */
            _tx_thread_preempt_disable++;
 800ae6a:	4b3f      	ldr	r3, [pc, #252]	; (800af68 <_tx_thread_terminate+0x170>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	4a3d      	ldr	r2, [pc, #244]	; (800af68 <_tx_thread_terminate+0x170>)
 800ae72:	6013      	str	r3, [r2, #0]
 800ae74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae76:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ae78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7a:	f383 8810 	msr	PRIMASK, r3
}
 800ae7e:	bf00      	nop
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if an application callback routine is specified.  */
            if (entry_exit_notify != TX_NULL)
 800ae80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d003      	beq.n	800ae8e <_tx_thread_terminate+0x96>
            {

                /* Yes, notify application that this thread has exited!  */
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 800ae86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae88:	2101      	movs	r1, #1
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	4798      	blx	r3
            }
#endif

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f7ff fe26 	bl	800aae0 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ae94:	f3ef 8310 	mrs	r3, PRIMASK
 800ae98:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ae9a:	b672      	cpsid	i
    return(primask_value);
 800ae9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

            /* Disable interrupts.  */
            TX_DISABLE
 800ae9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aea0:	e035      	b.n	800af0e <_tx_thread_terminate+0x116>
        }
        else
        {

            /* Change the state to terminated.  */
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2202      	movs	r2, #2
 800aea6:	631a      	str	r2, [r3, #48]	; 0x30
            /* Thread state change.  */
            TX_THREAD_STATE_CHANGE(thread_ptr, TX_TERMINATED)

            /* Set the suspending flag.  This prevents the thread from being 
               resumed before the cleanup routine is executed.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Pickup the cleanup routine address.  */
            suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aeb2:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef TX_NOT_INTERRUPTABLE

            /* Pickup the suspension sequence number that is used later to verify that the
               cleanup is still necessary.  */
            suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800aeba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aebe:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800aec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec2:	f383 8810 	msr	PRIMASK, r3
}
 800aec6:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Call any cleanup routines.  */
            if (suspend_cleanup != TX_NULL)
 800aec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d003      	beq.n	800aed6 <_tx_thread_terminate+0xde>
            {

                /* Yes, there is a function to call.  */
                (suspend_cleanup)(thread_ptr, suspension_sequence);
 800aece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800aed6:	f3ef 8310 	mrs	r3, PRIMASK
 800aeda:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800aedc:	b672      	cpsid	i
    return(primask_value);
 800aede:	6a3b      	ldr	r3, [r7, #32]
            }

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 800aee0:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

            /* Clear the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2200      	movs	r2, #0
 800aee6:	639a      	str	r2, [r3, #56]	; 0x38
 800aee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeea:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeee:	f383 8810 	msr	PRIMASK, r3
}
 800aef2:	bf00      	nop
            TX_THREAD_TERMINATED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

            /* Determine if an application callback routine is specified.  */
            if (entry_exit_notify != TX_NULL)
 800aef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <_tx_thread_terminate+0x10a>
            {

                /* Yes, notify application that this thread has exited!  */
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 800aefa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aefc:	2101      	movs	r1, #1
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800af02:	f3ef 8310 	mrs	r3, PRIMASK
 800af06:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800af08:	b672      	cpsid	i
    return(primask_value);
 800af0a:	69fb      	ldr	r3, [r7, #28]
#endif

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 800af0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af10:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	f383 8810 	msr	PRIMASK, r3
}
 800af18:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Determine if the application is using mutexes.  */
        if (_tx_thread_mutex_release != TX_NULL)
 800af1a:	4b14      	ldr	r3, [pc, #80]	; (800af6c <_tx_thread_terminate+0x174>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d003      	beq.n	800af2a <_tx_thread_terminate+0x132>
        {

            /* Yes, call the mutex release function via a function pointer that 
               is setup during initialization.  */
            (_tx_thread_mutex_release)(thread_ptr);
 800af22:	4b12      	ldr	r3, [pc, #72]	; (800af6c <_tx_thread_terminate+0x174>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800af2a:	f3ef 8310 	mrs	r3, PRIMASK
 800af2e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800af30:	b672      	cpsid	i
    return(primask_value);
 800af32:	693b      	ldr	r3, [r7, #16]
        }

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800af34:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

        /* Enable preemption.  */
        _tx_thread_preempt_disable--;
 800af36:	4b0c      	ldr	r3, [pc, #48]	; (800af68 <_tx_thread_terminate+0x170>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	3b01      	subs	r3, #1
 800af3c:	4a0a      	ldr	r2, [pc, #40]	; (800af68 <_tx_thread_terminate+0x170>)
 800af3e:	6013      	str	r3, [r2, #0]
 800af40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af42:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	f383 8810 	msr	PRIMASK, r3
}
 800af4a:	e005      	b.n	800af58 <_tx_thread_terminate+0x160>
 800af4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af4e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f383 8810 	msr	PRIMASK, r3
}
 800af56:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800af58:	f7ff fc76 	bl	800a848 <_tx_thread_system_preempt_check>

    /* Return completion status.  */
    return(status);
 800af5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3750      	adds	r7, #80	; 0x50
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	2400f0d0 	.word	0x2400f0d0
 800af6c:	2400f0d4 	.word	0x2400f0d4

0800af70 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800af76:	4b20      	ldr	r3, [pc, #128]	; (800aff8 <_tx_thread_time_slice+0x88>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800af7c:	f3ef 8310 	mrs	r3, PRIMASK
 800af80:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800af82:	b672      	cpsid	i
    return(primask_value);
 800af84:	687b      	ldr	r3, [r7, #4]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800af86:	60bb      	str	r3, [r7, #8]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800af88:	4b1c      	ldr	r3, [pc, #112]	; (800affc <_tx_thread_time_slice+0x8c>)
 800af8a:	2200      	movs	r2, #0
 800af8c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d024      	beq.n	800afde <_tx_thread_time_slice+0x6e>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d120      	bne.n	800afde <_tx_thread_time_slice+0x6e>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	69da      	ldr	r2, [r3, #28]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	699b      	ldr	r3, [r3, #24]
 800afa8:	4a15      	ldr	r2, [pc, #84]	; (800b000 <_tx_thread_time_slice+0x90>)
 800afaa:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6a1b      	ldr	r3, [r3, #32]
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d013      	beq.n	800afde <_tx_thread_time_slice+0x6e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d10d      	bne.n	800afde <_tx_thread_time_slice+0x6e>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	6a12      	ldr	r2, [r2, #32]
 800afca:	490e      	ldr	r1, [pc, #56]	; (800b004 <_tx_thread_time_slice+0x94>)
 800afcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800afd0:	4b0d      	ldr	r3, [pc, #52]	; (800b008 <_tx_thread_time_slice+0x98>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a0b      	ldr	r2, [pc, #44]	; (800b004 <_tx_thread_time_slice+0x94>)
 800afd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afda:	4a0c      	ldr	r2, [pc, #48]	; (800b00c <_tx_thread_time_slice+0x9c>)
 800afdc:	6013      	str	r3, [r2, #0]
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	f383 8810 	msr	PRIMASK, r3
}
 800afe8:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800afea:	bf00      	nop
 800afec:	3714      	adds	r7, #20
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	2400f034 	.word	0x2400f034
 800affc:	2400f0e0 	.word	0x2400f0e0
 800b000:	2400f674 	.word	0x2400f674
 800b004:	2400f050 	.word	0x2400f050
 800b008:	2400f04c 	.word	0x2400f04c
 800b00c:	2400f038 	.word	0x2400f038

0800b010 <_tx_thread_time_slice_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_time_slice_change(TX_THREAD *thread_ptr, ULONG new_time_slice, ULONG *old_time_slice)
{
 800b010:	b480      	push	{r7}
 800b012:	b089      	sub	sp, #36	; 0x24
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b01c:	f3ef 8310 	mrs	r3, PRIMASK
 800b020:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b022:	b672      	cpsid	i
    return(primask_value);
 800b024:	697b      	ldr	r3, [r7, #20]

TX_THREAD       *current_thread;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800b026:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_TIME_SLICE_CHANGE_INSERT

    /* Return the old time slice.  */
    *old_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	69da      	ldr	r2, [r3, #28]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	601a      	str	r2, [r3, #0]

    /* Setup the new time-slice.  */
    thread_ptr -> tx_thread_time_slice =      new_time_slice;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	68ba      	ldr	r2, [r7, #8]
 800b034:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =  new_time_slice;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	61da      	str	r2, [r3, #28]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b03c:	4b0b      	ldr	r3, [pc, #44]	; (800b06c <_tx_thread_time_slice_change+0x5c>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	61bb      	str	r3, [r7, #24]

    /* Determine if this thread is the currently executing thread.  */
    if (thread_ptr == current_thread)
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	429a      	cmp	r2, r3
 800b048:	d102      	bne.n	800b050 <_tx_thread_time_slice_change+0x40>
    {
    
        /* Yes, update the time-slice countdown variable.  */
        _tx_timer_time_slice =  new_time_slice;
 800b04a:	4a09      	ldr	r2, [pc, #36]	; (800b070 <_tx_thread_time_slice_change+0x60>)
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	6013      	str	r3, [r2, #0]
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	f383 8810 	msr	PRIMASK, r3
}
 800b05a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3724      	adds	r7, #36	; 0x24
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	2400f034 	.word	0x2400f034
 800b070:	2400f674 	.word	0x2400f674

0800b074 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b08a      	sub	sp, #40	; 0x28
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b080:	f3ef 8310 	mrs	r3, PRIMASK
 800b084:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b086:	b672      	cpsid	i
    return(primask_value);
 800b088:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
 800b08a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b090:	2b04      	cmp	r3, #4
 800b092:	d10e      	bne.n	800b0b2 <_tx_thread_timeout+0x3e>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800b094:	4b13      	ldr	r3, [pc, #76]	; (800b0e4 <_tx_thread_timeout+0x70>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	3301      	adds	r3, #1
 800b09a:	4a12      	ldr	r2, [pc, #72]	; (800b0e4 <_tx_thread_timeout+0x70>)
 800b09c:	6013      	str	r3, [r2, #0]
 800b09e:	6a3b      	ldr	r3, [r7, #32]
 800b0a0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	f383 8810 	msr	PRIMASK, r3
}
 800b0a8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800b0aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0ac:	f7ff fc06 	bl	800a8bc <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800b0b0:	e013      	b.n	800b0da <_tx_thread_timeout+0x66>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0b6:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b0be:	61bb      	str	r3, [r7, #24]
 800b0c0:	6a3b      	ldr	r3, [r7, #32]
 800b0c2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f383 8810 	msr	PRIMASK, r3
}
 800b0ca:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d003      	beq.n	800b0da <_tx_thread_timeout+0x66>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	69b9      	ldr	r1, [r7, #24]
 800b0d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b0d8:	4798      	blx	r3
}
 800b0da:	bf00      	nop
 800b0dc:	3728      	adds	r7, #40	; 0x28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	2400f0d0 	.word	0x2400f0d0

0800b0e8 <_tx_thread_wait_abort>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_wait_abort(TX_THREAD  *thread_ptr)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b08c      	sub	sp, #48	; 0x30
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b0f0:	f3ef 8310 	mrs	r3, PRIMASK
 800b0f4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b0f6:	b672      	cpsid	i
    return(primask_value);
 800b0f8:	69fb      	ldr	r3, [r7, #28]
UINT            status;
ULONG           suspension_sequence;


    /* Disable interrupts.  */
    TX_DISABLE
 800b0fa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Log this kernel call.  */
    TX_EL_THREAD_WAIT_ABORT_INSERT

    /* Determine if the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state < TX_SLEEP)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b100:	2b03      	cmp	r3, #3
 800b102:	d808      	bhi.n	800b116 <_tx_thread_wait_abort+0x2e>
 800b104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b106:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	f383 8810 	msr	PRIMASK, r3
}
 800b10e:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with an error message to indicate that 
           nothing was done.  */
        status =  TX_WAIT_ABORT_ERROR;
 800b110:	231b      	movs	r3, #27
 800b112:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b114:	e056      	b.n	800b1c4 <_tx_thread_wait_abort+0xdc>
    }
    else
    {

        /* Check for a sleep condition.  */
        if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b11a:	2b04      	cmp	r3, #4
 800b11c:	d114      	bne.n	800b148 <_tx_thread_wait_abort+0x60>
        {

            /* Set the state to terminated.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2203      	movs	r2, #3
 800b122:	631a      	str	r2, [r3, #48]	; 0x30

            /* Set the TX_WAIT_ABORTED status in the thread that is
               sleeping.  */
            thread_ptr -> tx_thread_suspend_status =  TX_WAIT_ABORTED;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	221a      	movs	r2, #26
 800b128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Make sure there isn't a suspend cleanup routine.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	669a      	str	r2, [r3, #104]	; 0x68

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the disable preemption flag.  */
            _tx_thread_preempt_disable++;
 800b132:	4b27      	ldr	r3, [pc, #156]	; (800b1d0 <_tx_thread_wait_abort+0xe8>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3301      	adds	r3, #1
 800b138:	4a25      	ldr	r2, [pc, #148]	; (800b1d0 <_tx_thread_wait_abort+0xe8>)
 800b13a:	6013      	str	r3, [r2, #0]
 800b13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	f383 8810 	msr	PRIMASK, r3
}
 800b146:	e01f      	b.n	800b188 <_tx_thread_wait_abort+0xa0>
        {

            /* Process all other suspension timeouts.  */
    
            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2203      	movs	r2, #3
 800b14c:	631a      	str	r2, [r3, #48]	; 0x30

            /* Pickup the cleanup routine address.  */
            suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b152:	627b      	str	r3, [r7, #36]	; 0x24

#ifndef TX_NOT_INTERRUPTABLE

            /* Pickup the suspension sequence number that is used later to verify that the
               cleanup is still necessary.  */
            suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b15a:	623b      	str	r3, [r7, #32]
            suspension_sequence =  ((ULONG) 0);
#endif

            /* Set the TX_WAIT_ABORTED status in the thread that was
               suspended.  */
            thread_ptr -> tx_thread_suspend_status =  TX_WAIT_ABORTED;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	221a      	movs	r2, #26
 800b160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the disable preemption flag.  */
            _tx_thread_preempt_disable++;
 800b164:	4b1a      	ldr	r3, [pc, #104]	; (800b1d0 <_tx_thread_wait_abort+0xe8>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	3301      	adds	r3, #1
 800b16a:	4a19      	ldr	r2, [pc, #100]	; (800b1d0 <_tx_thread_wait_abort+0xe8>)
 800b16c:	6013      	str	r3, [r2, #0]
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	f383 8810 	msr	PRIMASK, r3
}
 800b178:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Call any cleanup routines.  */
            if (suspend_cleanup != TX_NULL)
 800b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d003      	beq.n	800b188 <_tx_thread_wait_abort+0xa0>
            {

                /* Yes, there is a function to call.  */
                (suspend_cleanup)(thread_ptr, suspension_sequence);
 800b180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b182:	6a39      	ldr	r1, [r7, #32]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	4798      	blx	r3
            }
        }

        /* If the abort of the thread wait was successful, if so resume the thread.  */
        if (thread_ptr -> tx_thread_suspend_status == TX_WAIT_ABORTED)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b18e:	2b1a      	cmp	r3, #26
 800b190:	d105      	bne.n	800b19e <_tx_thread_wait_abort+0xb6>
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Lift the suspension on the previously waiting thread.  */
            _tx_thread_system_resume(thread_ptr);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f7ff fb92 	bl	800a8bc <_tx_thread_system_resume>
#endif

            /* Return a successful status.  */
            status =  TX_SUCCESS;
 800b198:	2300      	movs	r3, #0
 800b19a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b19c:	e012      	b.n	800b1c4 <_tx_thread_wait_abort+0xdc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b19e:	f3ef 8310 	mrs	r3, PRIMASK
 800b1a2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b1a4:	b672      	cpsid	i
    return(primask_value);
 800b1a6:	68bb      	ldr	r3, [r7, #8]
            TX_RESTORE

#else

            /* Disable interrupts.  */
            TX_DISABLE
 800b1a8:	62bb      	str	r3, [r7, #40]	; 0x28
        
            /* Decrement the disable preemption flag.  */
            _tx_thread_preempt_disable--;
 800b1aa:	4b09      	ldr	r3, [pc, #36]	; (800b1d0 <_tx_thread_wait_abort+0xe8>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	4a07      	ldr	r2, [pc, #28]	; (800b1d0 <_tx_thread_wait_abort+0xe8>)
 800b1b2:	6013      	str	r3, [r2, #0]
 800b1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f383 8810 	msr	PRIMASK, r3
}
 800b1be:	bf00      	nop
            TX_RESTORE
#endif

            /* Return with an error message to indicate that 
               nothing was done.  */
            status =  TX_WAIT_ABORT_ERROR;
 800b1c0:	231b      	movs	r3, #27
 800b1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    /* Return completion status.  */
    return(status);
 800b1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3730      	adds	r7, #48	; 0x30
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	2400f0d0 	.word	0x2400f0d0

0800b1d4 <_tx_time_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b1da:	f3ef 8310 	mrs	r3, PRIMASK
 800b1de:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b1e0:	b672      	cpsid	i
    return(primask_value);
 800b1e2:	683b      	ldr	r3, [r7, #0]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 800b1e4:	60fb      	str	r3, [r7, #12]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 800b1e6:	4b08      	ldr	r3, [pc, #32]	; (800b208 <_tx_time_get+0x34>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	60bb      	str	r3, [r7, #8]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f383 8810 	msr	PRIMASK, r3
}
 800b1f6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 800b1f8:	68bb      	ldr	r3, [r7, #8]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3714      	adds	r7, #20
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr
 800b206:	bf00      	nop
 800b208:	2400f0dc 	.word	0x2400f0dc

0800b20c <_tx_time_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_time_set(ULONG new_time)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b087      	sub	sp, #28
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b214:	f3ef 8310 	mrs	r3, PRIMASK
 800b218:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b21a:	b672      	cpsid	i
    return(primask_value);
 800b21c:	68fb      	ldr	r3, [r7, #12]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800b21e:	617b      	str	r3, [r7, #20]

    /* Log this kernel call.  */
    TX_EL_TIME_SET_INSERT

    /* Set the system clock time.  */
    _tx_timer_system_clock =  new_time;
 800b220:	4a07      	ldr	r2, [pc, #28]	; (800b240 <_tx_time_set+0x34>)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6013      	str	r3, [r2, #0]
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	f383 8810 	msr	PRIMASK, r3
}
 800b230:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 800b232:	bf00      	nop
 800b234:	371c      	adds	r7, #28
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr
 800b23e:	bf00      	nop
 800b240:	2400f0dc 	.word	0x2400f0dc

0800b244 <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b24c:	f3ef 8310 	mrs	r3, PRIMASK
 800b250:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b252:	b672      	cpsid	i
    return(primask_value);
 800b254:	68fb      	ldr	r3, [r7, #12]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800b256:	613b      	str	r3, [r7, #16]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a1b      	ldr	r3, [r3, #32]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d002      	beq.n	800b266 <_tx_timer_activate+0x22>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 800b260:	2317      	movs	r3, #23
 800b262:	617b      	str	r3, [r7, #20]
 800b264:	e00d      	b.n	800b282 <_tx_timer_activate+0x3e>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d102      	bne.n	800b274 <_tx_timer_activate+0x30>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 800b26e:	2317      	movs	r3, #23
 800b270:	617b      	str	r3, [r7, #20]
 800b272:	e006      	b.n	800b282 <_tx_timer_activate+0x3e>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	3308      	adds	r3, #8
 800b278:	4618      	mov	r0, r3
 800b27a:	f000 fac1 	bl	800b800 <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 800b27e:	2300      	movs	r3, #0
 800b280:	617b      	str	r3, [r7, #20]
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	f383 8810 	msr	PRIMASK, r3
}
 800b28c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800b28e:	697b      	ldr	r3, [r7, #20]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3718      	adds	r7, #24
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <_tx_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800b298:	b480      	push	{r7}
 800b29a:	b089      	sub	sp, #36	; 0x24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b2a4:	f3ef 8310 	mrs	r3, PRIMASK
 800b2a8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b2aa:	b672      	cpsid	i
    return(primask_value);
 800b2ac:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA

    
    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800b2ae:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_TIMER_CHANGE_INSERT

    /* Determine if the timer is active.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head == TX_NULL)
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6a1b      	ldr	r3, [r3, #32]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d105      	bne.n	800b2c4 <_tx_timer_change+0x2c>
    {
    
        /* Setup the new expiration fields.  */
        timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	609a      	str	r2, [r3, #8]
        timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	60da      	str	r2, [r3, #12]
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	f383 8810 	msr	PRIMASK, r3
}
 800b2ce:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3724      	adds	r7, #36	; 0x24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr
	...

0800b2e0 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b08a      	sub	sp, #40	; 0x28
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
 800b2ec:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800b2ee:	2234      	movs	r2, #52	; 0x34
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f009 ffba 	bl	801526c <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	68ba      	ldr	r2, [r7, #8]
 800b2fc:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b302:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b308:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	615a      	str	r2, [r3, #20]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b316:	f3ef 8310 	mrs	r3, PRIMASK
 800b31a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b31c:	b672      	cpsid	i
    return(primask_value);
 800b31e:	69bb      	ldr	r3, [r7, #24]
    
    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800b320:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	4a1c      	ldr	r2, [pc, #112]	; (800b398 <_tx_timer_create+0xb8>)
 800b326:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800b328:	4b1c      	ldr	r3, [pc, #112]	; (800b39c <_tx_timer_create+0xbc>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d109      	bne.n	800b344 <_tx_timer_create+0x64>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800b330:	4a1b      	ldr	r2, [pc, #108]	; (800b3a0 <_tx_timer_create+0xc0>)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	629a      	str	r2, [r3, #40]	; 0x28
 800b342:	e011      	b.n	800b368 <_tx_timer_create+0x88>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800b344:	4b16      	ldr	r3, [pc, #88]	; (800b3a0 <_tx_timer_create+0xc0>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800b34a:	6a3b      	ldr	r3, [r7, #32]
 800b34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b34e:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800b350:	6a3b      	ldr	r3, [r7, #32]
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	69fa      	ldr	r2, [r7, #28]
 800b360:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	6a3a      	ldr	r2, [r7, #32]
 800b366:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800b368:	4b0c      	ldr	r3, [pc, #48]	; (800b39c <_tx_timer_create+0xbc>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3301      	adds	r3, #1
 800b36e:	4a0b      	ldr	r2, [pc, #44]	; (800b39c <_tx_timer_create+0xbc>)
 800b370:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800b372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b374:	2b01      	cmp	r3, #1
 800b376:	d104      	bne.n	800b382 <_tx_timer_create+0xa2>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	3308      	adds	r3, #8
 800b37c:	4618      	mov	r0, r3
 800b37e:	f000 fa3f 	bl	800b800 <_tx_timer_system_activate>
 800b382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b384:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	f383 8810 	msr	PRIMASK, r3
}
 800b38c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3728      	adds	r7, #40	; 0x28
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	4154494d 	.word	0x4154494d
 800b39c:	2400f178 	.word	0x2400f178
 800b3a0:	2400f174 	.word	0x2400f174

0800b3a4 <_tx_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_deactivate(TX_TIMER *timer_ptr)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b08d      	sub	sp, #52	; 0x34
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
ULONG               ticks_left;
UINT                active_timer_list;

    
    /* Setup internal timer pointer.  */
    internal_ptr =  &(timer_ptr -> tx_timer_internal);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	3308      	adds	r3, #8
 800b3b0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b3b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b3b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b3b8:	b672      	cpsid	i
    return(primask_value);
 800b3ba:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts while the remaining time before expiration is
       calculated.  */
    TX_DISABLE
 800b3bc:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_TIMER_DEACTIVATE_INSERT

    /* Pickup the list head.  */
    list_head =  internal_ptr -> tx_timer_internal_list_head;
 800b3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c0:	699b      	ldr	r3, [r3, #24]
 800b3c2:	61fb      	str	r3, [r7, #28]

    /* Is the timer active?  */
    if (list_head != TX_NULL)
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d07f      	beq.n	800b4ca <_tx_timer_deactivate+0x126>
    {

        /* Default the active timer list flag to false.  */
        active_timer_list =  TX_FALSE;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine if the head pointer is within the timer expiration list.  */
        if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_start))
 800b3ce:	4b45      	ldr	r3, [pc, #276]	; (800b4e4 <_tx_timer_deactivate+0x140>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	69fa      	ldr	r2, [r7, #28]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d306      	bcc.n	800b3e6 <_tx_timer_deactivate+0x42>
        {

            /* Now check to make sure the list head is before the end of the list.  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) < TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800b3d8:	4b43      	ldr	r3, [pc, #268]	; (800b4e8 <_tx_timer_deactivate+0x144>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	69fa      	ldr	r2, [r7, #28]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d201      	bcs.n	800b3e6 <_tx_timer_deactivate+0x42>
            {

                /* Set the active timer list flag to true.  */
                active_timer_list =  TX_TRUE;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }
        
        /* Determine if the timer is on active timer list.  */
        if (active_timer_list == TX_TRUE)
 800b3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d12e      	bne.n	800b44a <_tx_timer_deactivate+0xa6>

            /* Calculate the amount of time that has elapsed since the timer
               was activated.  */

            /* Is this timer's entry after the current timer pointer?  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_current_ptr))
 800b3ec:	4b3f      	ldr	r3, [pc, #252]	; (800b4ec <_tx_timer_deactivate+0x148>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	69fa      	ldr	r2, [r7, #28]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d307      	bcc.n	800b406 <_tx_timer_deactivate+0x62>
            {

                /* Calculate ticks left to expiration - just the difference between this 
                   timer's entry and the current timer pointer.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_current_ptr)) + ((ULONG) 1);
 800b3f6:	4b3d      	ldr	r3, [pc, #244]	; (800b4ec <_tx_timer_deactivate+0x148>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	69fa      	ldr	r2, [r7, #28]
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	109b      	asrs	r3, r3, #2
 800b400:	3301      	adds	r3, #1
 800b402:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b404:	e010      	b.n	800b428 <_tx_timer_deactivate+0x84>
            }
            else
            {

                /* Calculate the ticks left with a wrapped list condition.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_list_start));
 800b406:	4b37      	ldr	r3, [pc, #220]	; (800b4e4 <_tx_timer_deactivate+0x140>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	69fa      	ldr	r2, [r7, #28]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	109b      	asrs	r3, r3, #2
 800b410:	62fb      	str	r3, [r7, #44]	; 0x2c
    
                ticks_left =  ticks_left + (ULONG) ((TX_TIMER_POINTER_DIF(_tx_timer_list_end, _tx_timer_current_ptr)) + ((ULONG) 1));
 800b412:	4b35      	ldr	r3, [pc, #212]	; (800b4e8 <_tx_timer_deactivate+0x144>)
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	4b35      	ldr	r3, [pc, #212]	; (800b4ec <_tx_timer_deactivate+0x148>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	109b      	asrs	r3, r3, #2
 800b41e:	461a      	mov	r2, r3
 800b420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b422:	4413      	add	r3, r2
 800b424:	3301      	adds	r3, #1
 800b426:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            /* Adjust the remaining ticks accordingly.  */
            if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b20      	cmp	r3, #32
 800b42e:	d908      	bls.n	800b442 <_tx_timer_deactivate+0x9e>
            {
            
                /* Subtract off the last full pass through the timer list and add the
                   time left.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  
                        (internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES) + ticks_left;
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b436:	4413      	add	r3, r2
 800b438:	f1a3 0220 	sub.w	r2, r3, #32
                internal_ptr -> tx_timer_internal_remaining_ticks =  
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	601a      	str	r2, [r3, #0]
 800b440:	e01c      	b.n	800b47c <_tx_timer_deactivate+0xd8>
            }
            else
            {
    
                /* Just put the ticks left into the timer's remaining ticks.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  ticks_left;
 800b442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b446:	601a      	str	r2, [r3, #0]
 800b448:	e018      	b.n	800b47c <_tx_timer_deactivate+0xd8>
        }
        else
        {
        
            /* Determine if this is timer has just expired.  */
            if (_tx_timer_expired_timer_ptr != internal_ptr)
 800b44a:	4b29      	ldr	r3, [pc, #164]	; (800b4f0 <_tx_timer_deactivate+0x14c>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b450:	429a      	cmp	r2, r3
 800b452:	d00f      	beq.n	800b474 <_tx_timer_deactivate+0xd0>
            {
            
                /* No, it hasn't expired. Now check for remaining time greater than the list
                   size.  */
                if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800b454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b20      	cmp	r3, #32
 800b45a:	d906      	bls.n	800b46a <_tx_timer_deactivate+0xc6>
                {
                    
                    /* Adjust the remaining ticks.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =  
                                            internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f1a3 0220 	sub.w	r2, r3, #32
                    internal_ptr -> tx_timer_internal_remaining_ticks =  
 800b464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b466:	601a      	str	r2, [r3, #0]
 800b468:	e008      	b.n	800b47c <_tx_timer_deactivate+0xd8>
                }
                else
                {
                
                    /* Set the remaining time to the reactivation time.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800b46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46c:	685a      	ldr	r2, [r3, #4]
 800b46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b470:	601a      	str	r2, [r3, #0]
 800b472:	e003      	b.n	800b47c <_tx_timer_deactivate+0xd8>
            }
            else
            {
            
                /* Set the remaining time to the reactivation time.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b476:	685a      	ldr	r2, [r3, #4]
 800b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47a:	601a      	str	r2, [r3, #0]
            }
        }
    
        /* Pickup the next timer.  */
        next_timer =  internal_ptr -> tx_timer_internal_active_next;
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	61bb      	str	r3, [r7, #24]

        /* See if this is the only timer in the list.  */
        if (internal_ptr == next_timer)
 800b482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	429a      	cmp	r2, r3
 800b488:	d108      	bne.n	800b49c <_tx_timer_deactivate+0xf8>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b490:	429a      	cmp	r2, r3
 800b492:	d117      	bne.n	800b4c4 <_tx_timer_deactivate+0x120>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	2200      	movs	r2, #0
 800b498:	601a      	str	r2, [r3, #0]
 800b49a:	e013      	b.n	800b4c4 <_tx_timer_deactivate+0x120>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   internal_ptr -> tx_timer_internal_active_previous;
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49e:	695b      	ldr	r3, [r3, #20]
 800b4a0:	617b      	str	r3, [r7, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	697a      	ldr	r2, [r7, #20]
 800b4a6:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	69ba      	ldr	r2, [r7, #24]
 800b4ac:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d105      	bne.n	800b4c4 <_tx_timer_deactivate+0x120>
            {

                /* Update the next timer in the list with the list head 
                   pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	69fa      	ldr	r2, [r7, #28]
 800b4bc:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	69ba      	ldr	r2, [r7, #24]
 800b4c2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        internal_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	619a      	str	r2, [r3, #24]
 800b4ca:	6a3b      	ldr	r3, [r7, #32]
 800b4cc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f383 8810 	msr	PRIMASK, r3
}
 800b4d4:	bf00      	nop

    /* Restore interrupts to previous posture.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3734      	adds	r7, #52	; 0x34
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr
 800b4e4:	2400f164 	.word	0x2400f164
 800b4e8:	2400f168 	.word	0x2400f168
 800b4ec:	2400f16c 	.word	0x2400f16c
 800b4f0:	2400f17c 	.word	0x2400f17c

0800b4f4 <_tx_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_delete(TX_TIMER *timer_ptr)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b088      	sub	sp, #32
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b4fc:	f3ef 8310 	mrs	r3, PRIMASK
 800b500:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b502:	b672      	cpsid	i
    return(primask_value);
 800b504:	693b      	ldr	r3, [r7, #16]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Disable interrupts to remove the timer from the created list.  */
    TX_DISABLE
 800b506:	61fb      	str	r3, [r7, #28]

    /* Determine if the timer needs to be deactivated.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a1b      	ldr	r3, [r3, #32]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d004      	beq.n	800b51a <_tx_timer_delete+0x26>
    {

        /* Yes, deactivate the timer before it is deleted.  */
        _tx_timer_system_deactivate(&(timer_ptr -> tx_timer_internal));
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	3308      	adds	r3, #8
 800b514:	4618      	mov	r0, r3
 800b516:	f000 f9d5 	bl	800b8c4 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_TIMER_DELETE_INSERT

    /* Clear the timer ID to make it invalid.  */
    timer_ptr -> tx_timer_id =  TX_CLEAR_ID;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created timers.  */
    _tx_timer_created_count--;
 800b520:	4b15      	ldr	r3, [pc, #84]	; (800b578 <_tx_timer_delete+0x84>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	3b01      	subs	r3, #1
 800b526:	4a14      	ldr	r2, [pc, #80]	; (800b578 <_tx_timer_delete+0x84>)
 800b528:	6013      	str	r3, [r2, #0]
    
    /* See if the timer is the only one on the list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800b52a:	4b13      	ldr	r3, [pc, #76]	; (800b578 <_tx_timer_delete+0x84>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d103      	bne.n	800b53a <_tx_timer_delete+0x46>
    {

        /* Only created timer, just set the created list to NULL.  */
        _tx_timer_created_ptr =  TX_NULL;
 800b532:	4b12      	ldr	r3, [pc, #72]	; (800b57c <_tx_timer_delete+0x88>)
 800b534:	2200      	movs	r2, #0
 800b536:	601a      	str	r2, [r3, #0]
 800b538:	e013      	b.n	800b562 <_tx_timer_delete+0x6e>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_timer =                               timer_ptr -> tx_timer_created_next;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53e:	61bb      	str	r3, [r7, #24]
        previous_timer =                           timer_ptr -> tx_timer_created_previous;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b544:	617b      	str	r3, [r7, #20]
        next_timer -> tx_timer_created_previous =  previous_timer;
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	697a      	ldr	r2, [r7, #20]
 800b54a:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =  next_timer;
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	69ba      	ldr	r2, [r7, #24]
 800b550:	625a      	str	r2, [r3, #36]	; 0x24

        /* See if we have to update the created list head pointer.  */
        if (_tx_timer_created_ptr == timer_ptr)
 800b552:	4b0a      	ldr	r3, [pc, #40]	; (800b57c <_tx_timer_delete+0x88>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d102      	bne.n	800b562 <_tx_timer_delete+0x6e>
        {
                    
            /* Yes, move the head pointer to the next link. */
            _tx_timer_created_ptr =  next_timer;
 800b55c:	4a07      	ldr	r2, [pc, #28]	; (800b57c <_tx_timer_delete+0x88>)
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	6013      	str	r3, [r2, #0]
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f383 8810 	msr	PRIMASK, r3
}
 800b56c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	3720      	adds	r7, #32
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	2400f178 	.word	0x2400f178
 800b57c:	2400f174 	.word	0x2400f174

0800b580 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b586:	f3ef 8310 	mrs	r3, PRIMASK
 800b58a:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b58c:	b672      	cpsid	i
    return(primask_value);
 800b58e:	687b      	ldr	r3, [r7, #4]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800b590:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800b592:	4b09      	ldr	r3, [pc, #36]	; (800b5b8 <_tx_timer_expiration_process+0x38>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	3301      	adds	r3, #1
 800b598:	4a07      	ldr	r2, [pc, #28]	; (800b5b8 <_tx_timer_expiration_process+0x38>)
 800b59a:	6013      	str	r3, [r2, #0]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	f383 8810 	msr	PRIMASK, r3
}
 800b5a6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800b5a8:	4804      	ldr	r0, [pc, #16]	; (800b5bc <_tx_timer_expiration_process+0x3c>)
 800b5aa:	f7ff f987 	bl	800a8bc <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b5ae:	bf00      	nop
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	2400f0d0 	.word	0x2400f0d0
 800b5bc:	2400f180 	.word	0x2400f180

0800b5c0 <_tx_timer_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_info_get(TX_TIMER *timer_ptr, CHAR **name, UINT *active, ULONG *remaining_ticks, 
                ULONG *reschedule_ticks, TX_TIMER **next_timer)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b08d      	sub	sp, #52	; 0x34
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
 800b5cc:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b5ce:	f3ef 8310 	mrs	r3, PRIMASK
 800b5d2:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b5d4:	b672      	cpsid	i
    return(primask_value);
 800b5d6:	697b      	ldr	r3, [r7, #20]
UINT                timer_active;
UINT                active_timer_list;


    /* Disable interrupts.  */
    TX_DISABLE
 800b5d8:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_TIMER_INFO_GET_INSERT

    /* Retrieve the name of the timer.  */
    if (name != TX_NULL)
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d003      	beq.n	800b5e8 <_tx_timer_info_get+0x28>
    {
    
        *name =  timer_ptr -> tx_timer_name;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	685a      	ldr	r2, [r3, #4]
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup address of internal timer structure.  */
    internal_ptr =  &(timer_ptr -> tx_timer_internal);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	3308      	adds	r3, #8
 800b5ec:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Default active to false.  */
    timer_active =  TX_FALSE;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	62bb      	str	r3, [r7, #40]	; 0x28
    
    /* Default the ticks left to the remaining ticks.  */
    ticks_left =  internal_ptr -> tx_timer_internal_remaining_ticks;
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the timer is still active.  */
    if (internal_ptr -> tx_timer_internal_list_head != TX_NULL)
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d053      	beq.n	800b6a8 <_tx_timer_info_get+0xe8>
    {

        /* Indicate this timer is active.  */
        timer_active =  TX_TRUE;
 800b600:	2301      	movs	r3, #1
 800b602:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Default the active timer list flag to false.  */
        active_timer_list =  TX_FALSE;
 800b604:	2300      	movs	r3, #0
 800b606:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the timer is still active.  */
        if (internal_ptr -> tx_timer_internal_list_head >= _tx_timer_list_start)
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	699a      	ldr	r2, [r3, #24]
 800b60c:	4b3a      	ldr	r3, [pc, #232]	; (800b6f8 <_tx_timer_info_get+0x138>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	429a      	cmp	r2, r3
 800b612:	d307      	bcc.n	800b624 <_tx_timer_info_get+0x64>
        {

            /* Determine if the list head is before the end of the list.  */
            if (internal_ptr -> tx_timer_internal_list_head < _tx_timer_list_end)
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	699a      	ldr	r2, [r3, #24]
 800b618:	4b38      	ldr	r3, [pc, #224]	; (800b6fc <_tx_timer_info_get+0x13c>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d201      	bcs.n	800b624 <_tx_timer_info_get+0x64>
            {

                /* This timer is active and has not yet expired.  */
                active_timer_list =  TX_TRUE;
 800b620:	2301      	movs	r3, #1
 800b622:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }

        /* Determine if the timer is on the active timer list.  */
        if (active_timer_list == TX_TRUE)
 800b624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b626:	2b01      	cmp	r3, #1
 800b628:	d12c      	bne.n	800b684 <_tx_timer_info_get+0xc4>

            /* Calculate the amount of time that has elapsed since the timer
               was activated.  */
          
            /* Setup the list head pointer.  */
            list_head =  internal_ptr -> tx_timer_internal_list_head;
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	699b      	ldr	r3, [r3, #24]
 800b62e:	61bb      	str	r3, [r7, #24]

            /* Is this timer's entry after the current timer pointer?  */
            if (internal_ptr -> tx_timer_internal_list_head >= _tx_timer_current_ptr)
 800b630:	69fb      	ldr	r3, [r7, #28]
 800b632:	699a      	ldr	r2, [r3, #24]
 800b634:	4b32      	ldr	r3, [pc, #200]	; (800b700 <_tx_timer_info_get+0x140>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d307      	bcc.n	800b64c <_tx_timer_info_get+0x8c>
            {

                /* Calculate ticks left to expiration - just the difference between this 
                   timer's entry and the current timer pointer.  */
                ticks_left =  ((TX_TIMER_POINTER_DIF(list_head, _tx_timer_current_ptr)) + ((ULONG) 1));
 800b63c:	4b30      	ldr	r3, [pc, #192]	; (800b700 <_tx_timer_info_get+0x140>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	69ba      	ldr	r2, [r7, #24]
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	109b      	asrs	r3, r3, #2
 800b646:	3301      	adds	r3, #1
 800b648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b64a:	e010      	b.n	800b66e <_tx_timer_info_get+0xae>
            }
            else
            {

                /* Calculate the ticks left with a wrapped list condition.  */
                ticks_left =  ((TX_TIMER_POINTER_DIF(list_head, _tx_timer_list_start)));
 800b64c:	4b2a      	ldr	r3, [pc, #168]	; (800b6f8 <_tx_timer_info_get+0x138>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	69ba      	ldr	r2, [r7, #24]
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	109b      	asrs	r3, r3, #2
 800b656:	62fb      	str	r3, [r7, #44]	; 0x2c

                ticks_left =  ticks_left + ((TX_TIMER_POINTER_DIF(_tx_timer_list_end, _tx_timer_current_ptr)) + ((ULONG) 1));
 800b658:	4b28      	ldr	r3, [pc, #160]	; (800b6fc <_tx_timer_info_get+0x13c>)
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	4b28      	ldr	r3, [pc, #160]	; (800b700 <_tx_timer_info_get+0x140>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	109b      	asrs	r3, r3, #2
 800b664:	461a      	mov	r2, r3
 800b666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b668:	4413      	add	r3, r2
 800b66a:	3301      	adds	r3, #1
 800b66c:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            /* Adjust the remaining ticks accordingly.  */
            if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2b20      	cmp	r3, #32
 800b674:	d918      	bls.n	800b6a8 <_tx_timer_info_get+0xe8>
            {
            
                /* Subtract off the last full pass through the timer list and add the
                   time left.  */
                ticks_left =  (internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES) + ticks_left;
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67c:	4413      	add	r3, r2
 800b67e:	3b20      	subs	r3, #32
 800b680:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b682:	e011      	b.n	800b6a8 <_tx_timer_info_get+0xe8>
    
            /* The timer is not on the actual timer list so it must either be being processed
               or on a temporary list to be processed.   */

            /* Check to see if this timer is the timer currently being processed.  */
            if (_tx_timer_expired_timer_ptr == internal_ptr)
 800b684:	4b1f      	ldr	r3, [pc, #124]	; (800b704 <_tx_timer_info_get+0x144>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	69fa      	ldr	r2, [r7, #28]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d102      	bne.n	800b694 <_tx_timer_info_get+0xd4>
            {
            
                /* Timer dispatch routine is executing, waiting to execute, or just finishing. No more remaining ticks for this expiration.  */
                ticks_left =  ((ULONG) 0);
 800b68e:	2300      	movs	r3, #0
 800b690:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b692:	e009      	b.n	800b6a8 <_tx_timer_info_get+0xe8>

                /* Timer is not the one being processed, which means it must be on the temporary expiration list
                   waiting to be processed.  */
            
                /* Calculate the remaining ticks for a timer in the process of expiring.  */
                if (ticks_left > TX_TIMER_ENTRIES)
 800b694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b696:	2b20      	cmp	r3, #32
 800b698:	d904      	bls.n	800b6a4 <_tx_timer_info_get+0xe4>
                {
                    
                    /* Calculate the number of ticks remaining.  */
                    ticks_left =  internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800b69a:	69fb      	ldr	r3, [r7, #28]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	3b20      	subs	r3, #32
 800b6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6a2:	e001      	b.n	800b6a8 <_tx_timer_info_get+0xe8>
                }
                else
                {
                
                    /* Timer dispatch routine is waiting to execute, no more remaining ticks for this expiration.  */
                    ticks_left =  ((ULONG) 0);
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
        }
    }

    /* Setup return values for an inactive timer.  */
    if (active != TX_NULL)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d002      	beq.n	800b6b4 <_tx_timer_info_get+0xf4>
    {
        
       /* Setup the timer active indication.  */
       *active =  timer_active;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6b2:	601a      	str	r2, [r3, #0]
    }
    if (remaining_ticks != TX_NULL)
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d002      	beq.n	800b6c0 <_tx_timer_info_get+0x100>
    {
        
        /* Setup the default remaining ticks value.  */
        *remaining_ticks =  ticks_left;
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6be:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the reschedule ticks value.  */
    if (reschedule_ticks != TX_NULL)
 800b6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d003      	beq.n	800b6ce <_tx_timer_info_get+0x10e>
    {
    
        *reschedule_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	685a      	ldr	r2, [r3, #4]
 800b6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the next created application timer.  */
    if (next_timer != TX_NULL)
 800b6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d003      	beq.n	800b6dc <_tx_timer_info_get+0x11c>
    {
    
        *next_timer =  timer_ptr -> tx_timer_created_next;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6da:	601a      	str	r2, [r3, #0]
 800b6dc:	6a3b      	ldr	r3, [r7, #32]
 800b6de:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	f383 8810 	msr	PRIMASK, r3
}
 800b6e6:	bf00      	nop
    
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3734      	adds	r7, #52	; 0x34
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr
 800b6f6:	bf00      	nop
 800b6f8:	2400f164 	.word	0x2400f164
 800b6fc:	2400f168 	.word	0x2400f168
 800b700:	2400f16c 	.word	0x2400f16c
 800b704:	2400f17c 	.word	0x2400f17c

0800b708 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800b708:	b590      	push	{r4, r7, lr}
 800b70a:	b089      	sub	sp, #36	; 0x24
 800b70c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800b70e:	4b28      	ldr	r3, [pc, #160]	; (800b7b0 <_tx_timer_initialize+0xa8>)
 800b710:	2200      	movs	r2, #0
 800b712:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800b714:	4b27      	ldr	r3, [pc, #156]	; (800b7b4 <_tx_timer_initialize+0xac>)
 800b716:	2200      	movs	r2, #0
 800b718:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b71a:	4b27      	ldr	r3, [pc, #156]	; (800b7b8 <_tx_timer_initialize+0xb0>)
 800b71c:	2200      	movs	r2, #0
 800b71e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800b720:	4b26      	ldr	r3, [pc, #152]	; (800b7bc <_tx_timer_initialize+0xb4>)
 800b722:	2200      	movs	r2, #0
 800b724:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800b726:	4b26      	ldr	r3, [pc, #152]	; (800b7c0 <_tx_timer_initialize+0xb8>)
 800b728:	2200      	movs	r2, #0
 800b72a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800b72c:	2280      	movs	r2, #128	; 0x80
 800b72e:	2100      	movs	r1, #0
 800b730:	4824      	ldr	r0, [pc, #144]	; (800b7c4 <_tx_timer_initialize+0xbc>)
 800b732:	f009 fd9b 	bl	801526c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800b736:	4b24      	ldr	r3, [pc, #144]	; (800b7c8 <_tx_timer_initialize+0xc0>)
 800b738:	4a22      	ldr	r2, [pc, #136]	; (800b7c4 <_tx_timer_initialize+0xbc>)
 800b73a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800b73c:	4b23      	ldr	r3, [pc, #140]	; (800b7cc <_tx_timer_initialize+0xc4>)
 800b73e:	4a21      	ldr	r2, [pc, #132]	; (800b7c4 <_tx_timer_initialize+0xbc>)
 800b740:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800b742:	4b23      	ldr	r3, [pc, #140]	; (800b7d0 <_tx_timer_initialize+0xc8>)
 800b744:	4a23      	ldr	r2, [pc, #140]	; (800b7d4 <_tx_timer_initialize+0xcc>)
 800b746:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800b748:	4b21      	ldr	r3, [pc, #132]	; (800b7d0 <_tx_timer_initialize+0xc8>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	3304      	adds	r3, #4
 800b74e:	4a20      	ldr	r2, [pc, #128]	; (800b7d0 <_tx_timer_initialize+0xc8>)
 800b750:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800b752:	4b21      	ldr	r3, [pc, #132]	; (800b7d8 <_tx_timer_initialize+0xd0>)
 800b754:	4a21      	ldr	r2, [pc, #132]	; (800b7dc <_tx_timer_initialize+0xd4>)
 800b756:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800b758:	4b21      	ldr	r3, [pc, #132]	; (800b7e0 <_tx_timer_initialize+0xd8>)
 800b75a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b75e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800b760:	4b20      	ldr	r3, [pc, #128]	; (800b7e4 <_tx_timer_initialize+0xdc>)
 800b762:	2200      	movs	r2, #0
 800b764:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 800b766:	4b1c      	ldr	r3, [pc, #112]	; (800b7d8 <_tx_timer_initialize+0xd0>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a1d      	ldr	r2, [pc, #116]	; (800b7e0 <_tx_timer_initialize+0xd8>)
 800b76c:	6812      	ldr	r2, [r2, #0]
 800b76e:	491d      	ldr	r1, [pc, #116]	; (800b7e4 <_tx_timer_initialize+0xdc>)
 800b770:	6809      	ldr	r1, [r1, #0]
 800b772:	481c      	ldr	r0, [pc, #112]	; (800b7e4 <_tx_timer_initialize+0xdc>)
 800b774:	6800      	ldr	r0, [r0, #0]
 800b776:	2400      	movs	r4, #0
 800b778:	9405      	str	r4, [sp, #20]
 800b77a:	2400      	movs	r4, #0
 800b77c:	9404      	str	r4, [sp, #16]
 800b77e:	9003      	str	r0, [sp, #12]
 800b780:	9102      	str	r1, [sp, #8]
 800b782:	9201      	str	r2, [sp, #4]
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	4b18      	ldr	r3, [pc, #96]	; (800b7e8 <_tx_timer_initialize+0xe0>)
 800b788:	4a18      	ldr	r2, [pc, #96]	; (800b7ec <_tx_timer_initialize+0xe4>)
 800b78a:	4919      	ldr	r1, [pc, #100]	; (800b7f0 <_tx_timer_initialize+0xe8>)
 800b78c:	4819      	ldr	r0, [pc, #100]	; (800b7f4 <_tx_timer_initialize+0xec>)
 800b78e:	f7fe fae1 	bl	8009d54 <_tx_thread_create>
 800b792:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1e5      	bne.n	800b766 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800b79a:	4b17      	ldr	r3, [pc, #92]	; (800b7f8 <_tx_timer_initialize+0xf0>)
 800b79c:	2200      	movs	r2, #0
 800b79e:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800b7a0:	4b16      	ldr	r3, [pc, #88]	; (800b7fc <_tx_timer_initialize+0xf4>)
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800b7a6:	bf00      	nop
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd90      	pop	{r4, r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	2400f0dc 	.word	0x2400f0dc
 800b7b4:	2400f674 	.word	0x2400f674
 800b7b8:	2400f0e0 	.word	0x2400f0e0
 800b7bc:	2400f170 	.word	0x2400f170
 800b7c0:	2400f17c 	.word	0x2400f17c
 800b7c4:	2400f0e4 	.word	0x2400f0e4
 800b7c8:	2400f164 	.word	0x2400f164
 800b7cc:	2400f16c 	.word	0x2400f16c
 800b7d0:	2400f168 	.word	0x2400f168
 800b7d4:	2400f160 	.word	0x2400f160
 800b7d8:	2400f268 	.word	0x2400f268
 800b7dc:	2400f274 	.word	0x2400f274
 800b7e0:	2400f26c 	.word	0x2400f26c
 800b7e4:	2400f270 	.word	0x2400f270
 800b7e8:	4154494d 	.word	0x4154494d
 800b7ec:	0800b935 	.word	0x0800b935
 800b7f0:	08016568 	.word	0x08016568
 800b7f4:	2400f180 	.word	0x2400f180
 800b7f8:	2400f174 	.word	0x2400f174
 800b7fc:	2400f178 	.word	0x2400f178

0800b800 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800b800:	b480      	push	{r7}
 800b802:	b089      	sub	sp, #36	; 0x24
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d04a      	beq.n	800b8aa <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b81a:	d046      	beq.n	800b8aa <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	699b      	ldr	r3, [r3, #24]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d142      	bne.n	800b8aa <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	2b20      	cmp	r3, #32
 800b828:	d902      	bls.n	800b830 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800b82a:	231f      	movs	r3, #31
 800b82c:	61bb      	str	r3, [r7, #24]
 800b82e:	e002      	b.n	800b836 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	3b01      	subs	r3, #1
 800b834:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800b836:	4b20      	ldr	r3, [pc, #128]	; (800b8b8 <_tx_timer_system_activate+0xb8>)
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4413      	add	r3, r2
 800b840:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800b842:	4b1e      	ldr	r3, [pc, #120]	; (800b8bc <_tx_timer_system_activate+0xbc>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	69fa      	ldr	r2, [r7, #28]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d30b      	bcc.n	800b864 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800b84c:	4b1b      	ldr	r3, [pc, #108]	; (800b8bc <_tx_timer_system_activate+0xbc>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	69fa      	ldr	r2, [r7, #28]
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	109b      	asrs	r3, r3, #2
 800b856:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800b858:	4b19      	ldr	r3, [pc, #100]	; (800b8c0 <_tx_timer_system_activate+0xc0>)
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	4413      	add	r3, r2
 800b862:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800b864:	69fb      	ldr	r3, [r7, #28]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d109      	bne.n	800b880 <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	601a      	str	r2, [r3, #0]
 800b87e:	e011      	b.n	800b8a4 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	695b      	ldr	r3, [r3, #20]
 800b88a:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	68fa      	ldr	r2, [r7, #12]
 800b89c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	69fa      	ldr	r2, [r7, #28]
 800b8a8:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800b8aa:	bf00      	nop
 800b8ac:	3724      	adds	r7, #36	; 0x24
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop
 800b8b8:	2400f16c 	.word	0x2400f16c
 800b8bc:	2400f168 	.word	0x2400f168
 800b8c0:	2400f164 	.word	0x2400f164

0800b8c4 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b087      	sub	sp, #28
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	699b      	ldr	r3, [r3, #24]
 800b8d0:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d026      	beq.n	800b926 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	691b      	ldr	r3, [r3, #16]
 800b8dc:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d108      	bne.n	800b8f8 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d117      	bne.n	800b920 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	601a      	str	r2, [r3, #0]
 800b8f6:	e013      	b.n	800b920 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	695b      	ldr	r3, [r3, #20]
 800b8fc:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	693a      	ldr	r2, [r7, #16]
 800b908:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	429a      	cmp	r2, r3
 800b912:	d105      	bne.n	800b920 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	697a      	ldr	r2, [r7, #20]
 800b918:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	693a      	ldr	r2, [r7, #16]
 800b91e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	619a      	str	r2, [r3, #24]
    }
}
 800b926:	bf00      	nop
 800b928:	371c      	adds	r7, #28
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
	...

0800b934 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b094      	sub	sp, #80	; 0x50
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800b93c:	2300      	movs	r3, #0
 800b93e:	647b      	str	r3, [r7, #68]	; 0x44
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a6e      	ldr	r2, [pc, #440]	; (800bafc <_tx_timer_thread_entry+0x1c8>)
 800b944:	4293      	cmp	r3, r2
 800b946:	f040 80d5 	bne.w	800baf4 <_tx_timer_thread_entry+0x1c0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b94a:	f3ef 8310 	mrs	r3, PRIMASK
 800b94e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b950:	b672      	cpsid	i
    return(primask_value);
 800b952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800b954:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800b956:	4b6a      	ldr	r3, [pc, #424]	; (800bb00 <_tx_timer_thread_entry+0x1cc>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d003      	beq.n	800b96c <_tx_timer_thread_entry+0x38>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f107 020c 	add.w	r2, r7, #12
 800b96a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800b96c:	4b64      	ldr	r3, [pc, #400]	; (800bb00 <_tx_timer_thread_entry+0x1cc>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	2200      	movs	r2, #0
 800b972:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800b974:	4b62      	ldr	r3, [pc, #392]	; (800bb00 <_tx_timer_thread_entry+0x1cc>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	3304      	adds	r3, #4
 800b97a:	4a61      	ldr	r2, [pc, #388]	; (800bb00 <_tx_timer_thread_entry+0x1cc>)
 800b97c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800b97e:	4b60      	ldr	r3, [pc, #384]	; (800bb00 <_tx_timer_thread_entry+0x1cc>)
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	4b60      	ldr	r3, [pc, #384]	; (800bb04 <_tx_timer_thread_entry+0x1d0>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	429a      	cmp	r2, r3
 800b988:	d103      	bne.n	800b992 <_tx_timer_thread_entry+0x5e>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 800b98a:	4b5f      	ldr	r3, [pc, #380]	; (800bb08 <_tx_timer_thread_entry+0x1d4>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a5c      	ldr	r2, [pc, #368]	; (800bb00 <_tx_timer_thread_entry+0x1cc>)
 800b990:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800b992:	4b5e      	ldr	r3, [pc, #376]	; (800bb0c <_tx_timer_thread_entry+0x1d8>)
 800b994:	2200      	movs	r2, #0
 800b996:	601a      	str	r2, [r3, #0]
 800b998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b99a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800b99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99e:	f383 8810 	msr	PRIMASK, r3
}
 800b9a2:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800b9a4:	f3ef 8310 	mrs	r3, PRIMASK
 800b9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800b9aa:	b672      	cpsid	i
    return(primask_value);
 800b9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800b9ae:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800b9b0:	e07b      	b.n	800baaa <_tx_timer_thread_entry+0x176>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	63bb      	str	r3, [r7, #56]	; 0x38
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800b9c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d102      	bne.n	800b9ce <_tx_timer_thread_entry+0x9a>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	60fb      	str	r3, [r7, #12]
 800b9cc:	e00e      	b.n	800b9ec <_tx_timer_thread_entry+0xb8>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800b9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d0:	695b      	ldr	r3, [r3, #20]
 800b9d2:	637b      	str	r3, [r7, #52]	; 0x34
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800b9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9d8:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800b9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9de:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800b9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e2:	f107 020c 	add.w	r2, r7, #12
 800b9e6:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800b9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ea:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800b9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b20      	cmp	r3, #32
 800b9f2:	d911      	bls.n	800ba18 <_tx_timer_thread_entry+0xe4>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800b9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 800b9fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9fe:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800ba00:	2300      	movs	r3, #0
 800ba02:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800ba04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba06:	f107 0208 	add.w	r2, r7, #8
 800ba0a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800ba0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba10:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800ba12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba14:	60bb      	str	r3, [r7, #8]
 800ba16:	e01a      	b.n	800ba4e <_tx_timer_thread_entry+0x11a>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800ba18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	64bb      	str	r3, [r7, #72]	; 0x48
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800ba1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800ba24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba26:	685a      	ldr	r2, [r3, #4]
 800ba28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba2a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800ba2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d009      	beq.n	800ba48 <_tx_timer_thread_entry+0x114>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800ba34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba36:	f107 0208 	add.w	r2, r7, #8
 800ba3a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800ba3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba40:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800ba42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba44:	60bb      	str	r3, [r7, #8]
 800ba46:	e002      	b.n	800ba4e <_tx_timer_thread_entry+0x11a>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800ba48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800ba4e:	4a30      	ldr	r2, [pc, #192]	; (800bb10 <_tx_timer_thread_entry+0x1dc>)
 800ba50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba52:	6013      	str	r3, [r2, #0]
 800ba54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba56:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5a:	f383 8810 	msr	PRIMASK, r3
}
 800ba5e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800ba60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d002      	beq.n	800ba6c <_tx_timer_thread_entry+0x138>
                {
            
                    (timeout_function) (timeout_param);
 800ba66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba68:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ba6a:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ba6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ba70:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ba72:	b672      	cpsid	i
    return(primask_value);
 800ba74:	6a3b      	ldr	r3, [r7, #32]
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800ba76:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800ba78:	4b25      	ldr	r3, [pc, #148]	; (800bb10 <_tx_timer_thread_entry+0x1dc>)
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d105      	bne.n	800ba92 <_tx_timer_thread_entry+0x15e>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800ba86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba88:	2200      	movs	r2, #0
 800ba8a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800ba8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ba8e:	f7ff feb7 	bl	800b800 <_tx_timer_system_activate>
 800ba92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba94:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	f383 8810 	msr	PRIMASK, r3
}
 800ba9c:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ba9e:	f3ef 8310 	mrs	r3, PRIMASK
 800baa2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800baa4:	b672      	cpsid	i
    return(primask_value);
 800baa6:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800baa8:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (expired_timers != TX_NULL)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d180      	bne.n	800b9b2 <_tx_timer_thread_entry+0x7e>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800bab0:	4b16      	ldr	r3, [pc, #88]	; (800bb0c <_tx_timer_thread_entry+0x1d8>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d116      	bne.n	800bae6 <_tx_timer_thread_entry+0x1b2>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800bab8:	4b16      	ldr	r3, [pc, #88]	; (800bb14 <_tx_timer_thread_entry+0x1e0>)
 800baba:	643b      	str	r3, [r7, #64]	; 0x40

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800babc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800babe:	2203      	movs	r2, #3
 800bac0:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bac4:	2201      	movs	r2, #1
 800bac6:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800bac8:	4b13      	ldr	r3, [pc, #76]	; (800bb18 <_tx_timer_thread_entry+0x1e4>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	3301      	adds	r3, #1
 800bace:	4a12      	ldr	r2, [pc, #72]	; (800bb18 <_tx_timer_thread_entry+0x1e4>)
 800bad0:	6013      	str	r3, [r2, #0]
 800bad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	f383 8810 	msr	PRIMASK, r3
}
 800badc:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800bade:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800bae0:	f7fe fffe 	bl	800aae0 <_tx_thread_system_suspend>
 800bae4:	e731      	b.n	800b94a <_tx_timer_thread_entry+0x16>
 800bae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bae8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	f383 8810 	msr	PRIMASK, r3
}
 800baf0:	bf00      	nop
            TX_DISABLE
 800baf2:	e72a      	b.n	800b94a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800baf4:	bf00      	nop
 800baf6:	3750      	adds	r7, #80	; 0x50
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	4154494d 	.word	0x4154494d
 800bb00:	2400f16c 	.word	0x2400f16c
 800bb04:	2400f168 	.word	0x2400f168
 800bb08:	2400f164 	.word	0x2400f164
 800bb0c:	2400f170 	.word	0x2400f170
 800bb10:	2400f17c 	.word	0x2400f17c
 800bb14:	2400f180 	.word	0x2400f180
 800bb18:	2400f0d0 	.word	0x2400f0d0

0800bb1c <_txe_block_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_block_allocate(TX_BLOCK_POOL *pool_ptr, VOID **block_ptr, ULONG wait_option)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b088      	sub	sp, #32
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]

TX_THREAD       *current_thread;
#endif

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d102      	bne.n	800bb38 <_txe_block_allocate+0x1c>
    {

        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bb32:	2302      	movs	r3, #2
 800bb34:	61fb      	str	r3, [r7, #28]
 800bb36:	e025      	b.n	800bb84 <_txe_block_allocate+0x68>
    }

    /* Check for an invalid pool pointer.  */
    else if (pool_ptr -> tx_block_pool_id != TX_BLOCK_POOL_ID)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a18      	ldr	r2, [pc, #96]	; (800bba0 <_txe_block_allocate+0x84>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d002      	beq.n	800bb48 <_txe_block_allocate+0x2c>
    {

        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bb42:	2302      	movs	r3, #2
 800bb44:	61fb      	str	r3, [r7, #28]
 800bb46:	e01d      	b.n	800bb84 <_txe_block_allocate+0x68>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (block_ptr == TX_NULL)
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d102      	bne.n	800bb54 <_txe_block_allocate+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800bb4e:	2303      	movs	r3, #3
 800bb50:	61fb      	str	r3, [r7, #28]
 800bb52:	e017      	b.n	800bb84 <_txe_block_allocate+0x68>
    else
    {
    
        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d014      	beq.n	800bb84 <_txe_block_allocate+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bb5a:	f3ef 8305 	mrs	r3, IPSR
 800bb5e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bb60:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bb62:	4b10      	ldr	r3, [pc, #64]	; (800bba4 <_txe_block_allocate+0x88>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4313      	orrs	r3, r2
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d002      	beq.n	800bb72 <_txe_block_allocate+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800bb6c:	2304      	movs	r3, #4
 800bb6e:	61fb      	str	r3, [r7, #28]
 800bb70:	e008      	b.n	800bb84 <_txe_block_allocate+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800bb72:	4b0d      	ldr	r3, [pc, #52]	; (800bba8 <_txe_block_allocate+0x8c>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	4a0c      	ldr	r2, [pc, #48]	; (800bbac <_txe_block_allocate+0x90>)
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d101      	bne.n	800bb84 <_txe_block_allocate+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800bb80:	2304      	movs	r3, #4
 800bb82:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d105      	bne.n	800bb96 <_txe_block_allocate+0x7a>
    {

        /* Call actual block allocate function.  */
        status =  _tx_block_allocate(pool_ptr, block_ptr, wait_option);
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	68b9      	ldr	r1, [r7, #8]
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f7fa f91a 	bl	8005dc8 <_tx_block_allocate>
 800bb94:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800bb96:	69fb      	ldr	r3, [r7, #28]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3720      	adds	r7, #32
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	424c4f43 	.word	0x424c4f43
 800bba4:	24000020 	.word	0x24000020
 800bba8:	2400f034 	.word	0x2400f034
 800bbac:	2400f180 	.word	0x2400f180

0800bbb0 <_txe_block_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_block_pool_create(TX_BLOCK_POOL *pool_ptr, CHAR *name_ptr, ULONG block_size,
                    VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b092      	sub	sp, #72	; 0x48
 800bbb4:	af02      	add	r7, sp, #8
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	607a      	str	r2, [r7, #4]
 800bbbc:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d102      	bne.n	800bbce <_txe_block_pool_create+0x1e>
    {

        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bbc8:	2302      	movs	r3, #2
 800bbca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbcc:	e077      	b.n	800bcbe <_txe_block_pool_create+0x10e>
    }

    /* Check for invalid control block size.  */
    else if (pool_control_block_size != (sizeof(TX_BLOCK_POOL)))
 800bbce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbd0:	2b30      	cmp	r3, #48	; 0x30
 800bbd2:	d002      	beq.n	800bbda <_txe_block_pool_create+0x2a>
    {

        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bbd4:	2302      	movs	r3, #2
 800bbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbd8:	e071      	b.n	800bcbe <_txe_block_pool_create+0x10e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800bbda:	f3ef 8310 	mrs	r3, PRIMASK
 800bbde:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800bbe0:	b672      	cpsid	i
    return(primask_value);
 800bbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800bbe4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bbe6:	4b3e      	ldr	r3, [pc, #248]	; (800bce0 <_txe_block_pool_create+0x130>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	3301      	adds	r3, #1
 800bbec:	4a3c      	ldr	r2, [pc, #240]	; (800bce0 <_txe_block_pool_create+0x130>)
 800bbee:	6013      	str	r3, [r2, #0]
 800bbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800bbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf6:	f383 8810 	msr	PRIMASK, r3
}
 800bbfa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_block_pool_created_ptr;
 800bbfc:	4b39      	ldr	r3, [pc, #228]	; (800bce4 <_txe_block_pool_create+0x134>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_block_pool_created_count; i++)
 800bc02:	2300      	movs	r3, #0
 800bc04:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc06:	e009      	b.n	800bc1c <_txe_block_pool_create+0x6c>
        {

            /* Determine if this block pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d00b      	beq.n	800bc28 <_txe_block_pool_create+0x78>
                break;
            }
            else
            {
                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_block_pool_created_next;
 800bc10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc14:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_block_pool_created_count; i++)
 800bc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc18:	3301      	adds	r3, #1
 800bc1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc1c:	4b32      	ldr	r3, [pc, #200]	; (800bce8 <_txe_block_pool_create+0x138>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d3f0      	bcc.n	800bc08 <_txe_block_pool_create+0x58>
 800bc26:	e000      	b.n	800bc2a <_txe_block_pool_create+0x7a>
                break;
 800bc28:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800bc2a:	f3ef 8310 	mrs	r3, PRIMASK
 800bc2e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800bc30:	b672      	cpsid	i
    return(primask_value);
 800bc32:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800bc34:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800bc36:	4b2a      	ldr	r3, [pc, #168]	; (800bce0 <_txe_block_pool_create+0x130>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	4a28      	ldr	r2, [pc, #160]	; (800bce0 <_txe_block_pool_create+0x130>)
 800bc3e:	6013      	str	r3, [r2, #0]
 800bc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc42:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800bc44:	6a3b      	ldr	r3, [r7, #32]
 800bc46:	f383 8810 	msr	PRIMASK, r3
}
 800bc4a:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bc4c:	f7fe fdfc 	bl	800a848 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d102      	bne.n	800bc5e <_txe_block_pool_create+0xae>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800bc58:	2302      	movs	r3, #2
 800bc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc5c:	e02f      	b.n	800bcbe <_txe_block_pool_create+0x10e>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d102      	bne.n	800bc6a <_txe_block_pool_create+0xba>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800bc64:	2303      	movs	r3, #3
 800bc66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc68:	e029      	b.n	800bcbe <_txe_block_pool_create+0x10e>
        }
        else
        {

            /* Check for invalid pool size.  */
            if ((((block_size/(sizeof(void *)))*(sizeof(void *))) + (sizeof(void *))) > 
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f023 0303 	bic.w	r3, r3, #3
 800bc70:	1d1a      	adds	r2, r3, #4
                                            ((pool_size/(sizeof(void *)))*(sizeof(void *))))
 800bc72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc74:	f023 0303 	bic.w	r3, r3, #3
            if ((((block_size/(sizeof(void *)))*(sizeof(void *))) + (sizeof(void *))) > 
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d902      	bls.n	800bc82 <_txe_block_pool_create+0xd2>
            {

                /* Not enough memory for one block, return appropriate error.  */
                status =  TX_SIZE_ERROR;
 800bc7c:	2305      	movs	r3, #5
 800bc7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc80:	e01d      	b.n	800bcbe <_txe_block_pool_create+0x10e>
            {

#ifndef TX_TIMER_PROCESS_IN_ISR

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 800bc82:	4b1a      	ldr	r3, [pc, #104]	; (800bcec <_txe_block_pool_create+0x13c>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Check for invalid caller of this function.  First check for a calling thread.  */
                if (thread_ptr == &_tx_timer_thread)
 800bc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8a:	4a19      	ldr	r2, [pc, #100]	; (800bcf0 <_txe_block_pool_create+0x140>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d101      	bne.n	800bc94 <_txe_block_pool_create+0xe4>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800bc90:	2313      	movs	r3, #19
 800bc92:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc94:	f3ef 8305 	mrs	r3, IPSR
 800bc98:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bc9a:	69ba      	ldr	r2, [r7, #24]
                }
#endif

                /* Check for interrupt call.  */
                if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bc9c:	4b15      	ldr	r3, [pc, #84]	; (800bcf4 <_txe_block_pool_create+0x144>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00b      	beq.n	800bcbe <_txe_block_pool_create+0x10e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bca6:	f3ef 8305 	mrs	r3, IPSR
 800bcaa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bcac:	697a      	ldr	r2, [r7, #20]
                {
    
                    /* Now, make sure the call is from an interrupt and not initialization.  */
                    if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bcae:	4b11      	ldr	r3, [pc, #68]	; (800bcf4 <_txe_block_pool_create+0x144>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bcb8:	d201      	bcs.n	800bcbe <_txe_block_pool_create+0x10e>
                    {
        
                        /* Invalid caller of this function, return appropriate error code.  */
                        status =  TX_CALLER_ERROR;
 800bcba:	2313      	movs	r3, #19
 800bcbc:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bcbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d108      	bne.n	800bcd6 <_txe_block_pool_create+0x126>
    {

        /* Call actual block pool create function.  */
        status =  _tx_block_pool_create(pool_ptr, name_ptr, block_size, pool_start, pool_size);
 800bcc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	68b9      	ldr	r1, [r7, #8]
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f7fa f9a2 	bl	8006018 <_tx_block_pool_create>
 800bcd4:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 800bcd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3740      	adds	r7, #64	; 0x40
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	2400f0d0 	.word	0x2400f0d0
 800bce4:	2400f01c 	.word	0x2400f01c
 800bce8:	2400f020 	.word	0x2400f020
 800bcec:	2400f034 	.word	0x2400f034
 800bcf0:	2400f180 	.word	0x2400f180
 800bcf4:	24000020 	.word	0x24000020

0800bcf8 <_txe_block_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT    _txe_block_pool_delete(TX_BLOCK_POOL *pool_ptr)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bd00:	2300      	movs	r3, #0
 800bd02:	617b      	str	r3, [r7, #20]
#endif
    
    /* Check for an invalid pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d102      	bne.n	800bd10 <_txe_block_pool_delete+0x18>
    {

        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bd0a:	2302      	movs	r3, #2
 800bd0c:	617b      	str	r3, [r7, #20]
 800bd0e:	e023      	b.n	800bd58 <_txe_block_pool_delete+0x60>
    }

    /* Now check the pool ID.  */
    else if (pool_ptr -> tx_block_pool_id != TX_BLOCK_POOL_ID)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a13      	ldr	r2, [pc, #76]	; (800bd64 <_txe_block_pool_delete+0x6c>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d002      	beq.n	800bd20 <_txe_block_pool_delete+0x28>
    {
    
        /* Pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bd1a:	2302      	movs	r3, #2
 800bd1c:	617b      	str	r3, [r7, #20]
 800bd1e:	e01b      	b.n	800bd58 <_txe_block_pool_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bd20:	f3ef 8305 	mrs	r3, IPSR
 800bd24:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800bd26:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the call from an ISR or initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bd28:	4b0f      	ldr	r3, [pc, #60]	; (800bd68 <_txe_block_pool_delete+0x70>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d002      	beq.n	800bd38 <_txe_block_pool_delete+0x40>
    {
    
        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800bd32:	2313      	movs	r3, #19
 800bd34:	617b      	str	r3, [r7, #20]
 800bd36:	e00f      	b.n	800bd58 <_txe_block_pool_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800bd38:	4b0c      	ldr	r3, [pc, #48]	; (800bd6c <_txe_block_pool_delete+0x74>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	613b      	str	r3, [r7, #16]

        /* Is the call from the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	4a0b      	ldr	r2, [pc, #44]	; (800bd70 <_txe_block_pool_delete+0x78>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d101      	bne.n	800bd4a <_txe_block_pool_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800bd46:	2313      	movs	r3, #19
 800bd48:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d103      	bne.n	800bd58 <_txe_block_pool_delete+0x60>
        {
#endif

            /* Call actual block pool delete function.  */
            status =  _tx_block_pool_delete(pool_ptr);
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7fa fa01 	bl	8006158 <_tx_block_pool_delete>
 800bd56:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 800bd58:	697b      	ldr	r3, [r7, #20]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3718      	adds	r7, #24
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	424c4f43 	.word	0x424c4f43
 800bd68:	24000020 	.word	0x24000020
 800bd6c:	2400f034 	.word	0x2400f034
 800bd70:	2400f180 	.word	0x2400f180

0800bd74 <_txe_block_pool_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_block_pool_info_get(TX_BLOCK_POOL *pool_ptr, CHAR **name, ULONG *available_blocks, 
                    ULONG *total_blocks, TX_THREAD **first_suspended, 
                    ULONG *suspended_count, TX_BLOCK_POOL **next_pool)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b08a      	sub	sp, #40	; 0x28
 800bd78:	af04      	add	r7, sp, #16
 800bd7a:	60f8      	str	r0, [r7, #12]
 800bd7c:	60b9      	str	r1, [r7, #8]
 800bd7e:	607a      	str	r2, [r7, #4]
 800bd80:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid block pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d102      	bne.n	800bd8e <_txe_block_pool_info_get+0x1a>
    {

        /* Block pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bd88:	2302      	movs	r3, #2
 800bd8a:	617b      	str	r3, [r7, #20]
 800bd8c:	e014      	b.n	800bdb8 <_txe_block_pool_info_get+0x44>
    }

    /* Now check the pool ID.  */
    else if (pool_ptr -> tx_block_pool_id != TX_BLOCK_POOL_ID)
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	4a0c      	ldr	r2, [pc, #48]	; (800bdc4 <_txe_block_pool_info_get+0x50>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d002      	beq.n	800bd9e <_txe_block_pool_info_get+0x2a>
    {

        /* Block pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bd98:	2302      	movs	r3, #2
 800bd9a:	617b      	str	r3, [r7, #20]
 800bd9c:	e00c      	b.n	800bdb8 <_txe_block_pool_info_get+0x44>
    }
    else
    {

        /* Otherwise, call the actual block pool information get service.  */
        status =  _tx_block_pool_info_get(pool_ptr, name, available_blocks, 
 800bd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda0:	9302      	str	r3, [sp, #8]
 800bda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda4:	9301      	str	r3, [sp, #4]
 800bda6:	6a3b      	ldr	r3, [r7, #32]
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	68b9      	ldr	r1, [r7, #8]
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f7fa fa5b 	bl	800626c <_tx_block_pool_info_get>
 800bdb6:	6178      	str	r0, [r7, #20]
                        total_blocks, first_suspended, suspended_count, next_pool);
    }

    /* Return completion status.  */
    return(status);
 800bdb8:	697b      	ldr	r3, [r7, #20]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3718      	adds	r7, #24
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	424c4f43 	.word	0x424c4f43

0800bdc8 <_txe_block_pool_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_block_pool_prioritize(TX_BLOCK_POOL *pool_ptr)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid block memory pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d102      	bne.n	800bddc <_txe_block_pool_prioritize+0x14>
    {

        /* Block memory pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bdd6:	2302      	movs	r3, #2
 800bdd8:	60fb      	str	r3, [r7, #12]
 800bdda:	e00b      	b.n	800bdf4 <_txe_block_pool_prioritize+0x2c>
    }

    /* Now check for invalid pool ID.  */
    else if (pool_ptr -> tx_block_pool_id != TX_BLOCK_POOL_ID)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a07      	ldr	r2, [pc, #28]	; (800be00 <_txe_block_pool_prioritize+0x38>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d002      	beq.n	800bdec <_txe_block_pool_prioritize+0x24>
    {

        /* Block memory pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bde6:	2302      	movs	r3, #2
 800bde8:	60fb      	str	r3, [r7, #12]
 800bdea:	e003      	b.n	800bdf4 <_txe_block_pool_prioritize+0x2c>
    }
    else
    {

        /* Call actual block pool prioritize function.  */
        status =  _tx_block_pool_prioritize(pool_ptr);
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f7fa fa81 	bl	80062f4 <_tx_block_pool_prioritize>
 800bdf2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	424c4f43 	.word	0x424c4f43

0800be04 <_txe_block_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_block_release(VOID *block_ptr)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b086      	sub	sp, #24
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
UCHAR               **indirect_ptr;
UCHAR               *work_ptr;


    /* First check the supplied pointer.  */
    if (block_ptr == TX_NULL)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d102      	bne.n	800be18 <_txe_block_release+0x14>
    {

        /* The block pointer is invalid, return appropriate status.  */
        status =  TX_PTR_ERROR;
 800be12:	2303      	movs	r3, #3
 800be14:	617b      	str	r3, [r7, #20]
 800be16:	e01d      	b.n	800be54 <_txe_block_release+0x50>
    else
    {

        /* Pickup the pool pointer which is just previous to the starting 
           address of block that the caller sees.  */
        work_ptr =      TX_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	613b      	str	r3, [r7, #16]
        work_ptr =      TX_UCHAR_POINTER_SUB(work_ptr, (sizeof(UCHAR *)));
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	3b04      	subs	r3, #4
 800be20:	613b      	str	r3, [r7, #16]
        indirect_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	60fb      	str	r3, [r7, #12]
        work_ptr =      *indirect_ptr;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	613b      	str	r3, [r7, #16]
        pool_ptr =      TX_UCHAR_TO_BLOCK_POOL_POINTER_CONVERT(work_ptr);
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	60bb      	str	r3, [r7, #8]

        /* Check for an invalid pool pointer.  */
        if (pool_ptr == TX_NULL)
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d102      	bne.n	800be3c <_txe_block_release+0x38>
        {

            /* Pool pointer is invalid, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800be36:	2303      	movs	r3, #3
 800be38:	617b      	str	r3, [r7, #20]
 800be3a:	e00b      	b.n	800be54 <_txe_block_release+0x50>
        }
    
        /* Now check for invalid pool ID.  */
        else if  (pool_ptr -> tx_block_pool_id != TX_BLOCK_POOL_ID)
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a07      	ldr	r2, [pc, #28]	; (800be60 <_txe_block_release+0x5c>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d002      	beq.n	800be4c <_txe_block_release+0x48>
        {

            /* Pool pointer is invalid, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800be46:	2303      	movs	r3, #3
 800be48:	617b      	str	r3, [r7, #20]
 800be4a:	e003      	b.n	800be54 <_txe_block_release+0x50>
        }
        else
        {

            /* Call actual block release function.  */
            status =  _tx_block_release(block_ptr);
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f7fa faff 	bl	8006450 <_tx_block_release>
 800be52:	6178      	str	r0, [r7, #20]
        }
    }

    /* Return completion status.  */
    return(status);
 800be54:	697b      	ldr	r3, [r7, #20]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3718      	adds	r7, #24
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	424c4f43 	.word	0x424c4f43

0800be64 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, 
                                    ULONG memory_size,  ULONG wait_option)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b08a      	sub	sp, #40	; 0x28
 800be68:	af00      	add	r7, sp, #0
 800be6a:	60f8      	str	r0, [r7, #12]
 800be6c:	60b9      	str	r1, [r7, #8]
 800be6e:	607a      	str	r2, [r7, #4]
 800be70:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800be72:	2300      	movs	r3, #0
 800be74:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d102      	bne.n	800be82 <_txe_byte_allocate+0x1e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800be7c:	2302      	movs	r3, #2
 800be7e:	627b      	str	r3, [r7, #36]	; 0x24
 800be80:	e029      	b.n	800bed6 <_txe_byte_allocate+0x72>
    }
    
    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a2d      	ldr	r2, [pc, #180]	; (800bf3c <_txe_byte_allocate+0xd8>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d002      	beq.n	800be92 <_txe_byte_allocate+0x2e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800be8c:	2302      	movs	r3, #2
 800be8e:	627b      	str	r3, [r7, #36]	; 0x24
 800be90:	e021      	b.n	800bed6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d102      	bne.n	800be9e <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800be98:	2303      	movs	r3, #3
 800be9a:	627b      	str	r3, [r7, #36]	; 0x24
 800be9c:	e01b      	b.n	800bed6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d102      	bne.n	800beaa <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800bea4:	2305      	movs	r3, #5
 800bea6:	627b      	str	r3, [r7, #36]	; 0x24
 800bea8:	e015      	b.n	800bed6 <_txe_byte_allocate+0x72>
    }
    
    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	69db      	ldr	r3, [r3, #28]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d902      	bls.n	800beba <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800beb4:	2305      	movs	r3, #5
 800beb6:	627b      	str	r3, [r7, #36]	; 0x24
 800beb8:	e00d      	b.n	800bed6 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00a      	beq.n	800bed6 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bec0:	f3ef 8305 	mrs	r3, IPSR
 800bec4:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800bec6:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bec8:	4b1d      	ldr	r3, [pc, #116]	; (800bf40 <_txe_byte_allocate+0xdc>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4313      	orrs	r3, r2
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d001      	beq.n	800bed6 <_txe_byte_allocate+0x72>
            {
        
                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800bed2:	2304      	movs	r3, #4
 800bed4:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR
    
    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d108      	bne.n	800beee <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800bedc:	4b19      	ldr	r3, [pc, #100]	; (800bf44 <_txe_byte_allocate+0xe0>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800bee2:	6a3b      	ldr	r3, [r7, #32]
 800bee4:	4a18      	ldr	r2, [pc, #96]	; (800bf48 <_txe_byte_allocate+0xe4>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d101      	bne.n	800beee <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800beea:	2313      	movs	r3, #19
 800beec:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d114      	bne.n	800bf1e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bef4:	f3ef 8305 	mrs	r3, IPSR
 800bef8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800befa:	69ba      	ldr	r2, [r7, #24]
    {
    
        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800befc:	4b10      	ldr	r3, [pc, #64]	; (800bf40 <_txe_byte_allocate+0xdc>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00b      	beq.n	800bf1e <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bf06:	f3ef 8305 	mrs	r3, IPSR
 800bf0a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bf0c:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bf0e:	4b0c      	ldr	r3, [pc, #48]	; (800bf40 <_txe_byte_allocate+0xdc>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4313      	orrs	r3, r2
 800bf14:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bf18:	d201      	bcs.n	800bf1e <_txe_byte_allocate+0xba>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bf1a:	2313      	movs	r3, #19
 800bf1c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d106      	bne.n	800bf32 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	68b9      	ldr	r1, [r7, #8]
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f7fa fb00 	bl	8006530 <_tx_byte_allocate>
 800bf30:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800bf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3728      	adds	r7, #40	; 0x28
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	42595445 	.word	0x42595445
 800bf40:	24000020 	.word	0x24000020
 800bf44:	2400f034 	.word	0x2400f034
 800bf48:	2400f180 	.word	0x2400f180

0800bf4c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b090      	sub	sp, #64	; 0x40
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
 800bf58:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d102      	bne.n	800bf6a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bf64:	2302      	movs	r3, #2
 800bf66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf68:	e071      	b.n	800c04e <_txe_byte_pool_create+0x102>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800bf6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf6c:	2b34      	cmp	r3, #52	; 0x34
 800bf6e:	d002      	beq.n	800bf76 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bf70:	2302      	movs	r3, #2
 800bf72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf74:	e06b      	b.n	800c04e <_txe_byte_pool_create+0x102>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800bf76:	f3ef 8310 	mrs	r3, PRIMASK
 800bf7a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800bf7c:	b672      	cpsid	i
    return(primask_value);
 800bf7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 800bf80:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bf82:	4b3a      	ldr	r3, [pc, #232]	; (800c06c <_txe_byte_pool_create+0x120>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	3301      	adds	r3, #1
 800bf88:	4a38      	ldr	r2, [pc, #224]	; (800c06c <_txe_byte_pool_create+0x120>)
 800bf8a:	6013      	str	r3, [r2, #0]
 800bf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800bf90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf92:	f383 8810 	msr	PRIMASK, r3
}
 800bf96:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800bf98:	4b35      	ldr	r3, [pc, #212]	; (800c070 <_txe_byte_pool_create+0x124>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfa2:	e009      	b.n	800bfb8 <_txe_byte_pool_create+0x6c>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d00b      	beq.n	800bfc4 <_txe_byte_pool_create+0x78>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800bfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb0:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800bfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfb8:	4b2e      	ldr	r3, [pc, #184]	; (800c074 <_txe_byte_pool_create+0x128>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d3f0      	bcc.n	800bfa4 <_txe_byte_pool_create+0x58>
 800bfc2:	e000      	b.n	800bfc6 <_txe_byte_pool_create+0x7a>
                break;
 800bfc4:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800bfc6:	f3ef 8310 	mrs	r3, PRIMASK
 800bfca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800bfcc:	b672      	cpsid	i
    return(primask_value);
 800bfce:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800bfd0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800bfd2:	4b26      	ldr	r3, [pc, #152]	; (800c06c <_txe_byte_pool_create+0x120>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	4a24      	ldr	r2, [pc, #144]	; (800c06c <_txe_byte_pool_create+0x120>)
 800bfda:	6013      	str	r3, [r2, #0]
 800bfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfde:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800bfe0:	6a3b      	ldr	r3, [r7, #32]
 800bfe2:	f383 8810 	msr	PRIMASK, r3
}
 800bfe6:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bfe8:	f7fe fc2e 	bl	800a848 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d102      	bne.n	800bffa <_txe_byte_pool_create+0xae>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800bff4:	2302      	movs	r3, #2
 800bff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bff8:	e029      	b.n	800c04e <_txe_byte_pool_create+0x102>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d102      	bne.n	800c006 <_txe_byte_pool_create+0xba>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800c000:	2303      	movs	r3, #3
 800c002:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c004:	e023      	b.n	800c04e <_txe_byte_pool_create+0x102>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	2b63      	cmp	r3, #99	; 0x63
 800c00a:	d802      	bhi.n	800c012 <_txe_byte_pool_create+0xc6>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800c00c:	2305      	movs	r3, #5
 800c00e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c010:	e01d      	b.n	800c04e <_txe_byte_pool_create+0x102>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c012:	4b19      	ldr	r3, [pc, #100]	; (800c078 <_txe_byte_pool_create+0x12c>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01a:	4a18      	ldr	r2, [pc, #96]	; (800c07c <_txe_byte_pool_create+0x130>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d101      	bne.n	800c024 <_txe_byte_pool_create+0xd8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c020:	2313      	movs	r3, #19
 800c022:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c024:	f3ef 8305 	mrs	r3, IPSR
 800c028:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c02a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c02c:	4b14      	ldr	r3, [pc, #80]	; (800c080 <_txe_byte_pool_create+0x134>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4313      	orrs	r3, r2
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00b      	beq.n	800c04e <_txe_byte_pool_create+0x102>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c036:	f3ef 8305 	mrs	r3, IPSR
 800c03a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c03c:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c03e:	4b10      	ldr	r3, [pc, #64]	; (800c080 <_txe_byte_pool_create+0x134>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4313      	orrs	r3, r2
 800c044:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c048:	d201      	bcs.n	800c04e <_txe_byte_pool_create+0x102>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c04a:	2313      	movs	r3, #19
 800c04c:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c04e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c050:	2b00      	cmp	r3, #0
 800c052:	d106      	bne.n	800c062 <_txe_byte_pool_create+0x116>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	68b9      	ldr	r1, [r7, #8]
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	f7fa fba2 	bl	80067a4 <_tx_byte_pool_create>
 800c060:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 800c062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c064:	4618      	mov	r0, r3
 800c066:	3740      	adds	r7, #64	; 0x40
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	2400f0d0 	.word	0x2400f0d0
 800c070:	2400f024 	.word	0x2400f024
 800c074:	2400f028 	.word	0x2400f028
 800c078:	2400f034 	.word	0x2400f034
 800c07c:	2400f180 	.word	0x2400f180
 800c080:	24000020 	.word	0x24000020

0800c084 <_txe_byte_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_delete(TX_BYTE_POOL *pool_ptr)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b086      	sub	sp, #24
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c08c:	2300      	movs	r3, #0
 800c08e:	617b      	str	r3, [r7, #20]
#endif
    
    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d102      	bne.n	800c09c <_txe_byte_pool_delete+0x18>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c096:	2302      	movs	r3, #2
 800c098:	617b      	str	r3, [r7, #20]
 800c09a:	e023      	b.n	800c0e4 <_txe_byte_pool_delete+0x60>
    }

    /* Now check the pool ID.  */
    else if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a13      	ldr	r2, [pc, #76]	; (800c0f0 <_txe_byte_pool_delete+0x6c>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d002      	beq.n	800c0ac <_txe_byte_pool_delete+0x28>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c0a6:	2302      	movs	r3, #2
 800c0a8:	617b      	str	r3, [r7, #20]
 800c0aa:	e01b      	b.n	800c0e4 <_txe_byte_pool_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c0ac:	f3ef 8305 	mrs	r3, IPSR
 800c0b0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c0b2:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for interrupt or initialization.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c0b4:	4b0f      	ldr	r3, [pc, #60]	; (800c0f4 <_txe_byte_pool_delete+0x70>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d002      	beq.n	800c0c4 <_txe_byte_pool_delete+0x40>
    {
    
        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800c0be:	2313      	movs	r3, #19
 800c0c0:	617b      	str	r3, [r7, #20]
 800c0c2:	e00f      	b.n	800c0e4 <_txe_byte_pool_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800c0c4:	4b0c      	ldr	r3, [pc, #48]	; (800c0f8 <_txe_byte_pool_delete+0x74>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	613b      	str	r3, [r7, #16]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	4a0b      	ldr	r2, [pc, #44]	; (800c0fc <_txe_byte_pool_delete+0x78>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d101      	bne.n	800c0d6 <_txe_byte_pool_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800c0d2:	2313      	movs	r3, #19
 800c0d4:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d103      	bne.n	800c0e4 <_txe_byte_pool_delete+0x60>
        {
#endif

            /* Call actual byte pool delete function.  */
            status =  _tx_byte_pool_delete(pool_ptr);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f7fa fbf5 	bl	80068cc <_tx_byte_pool_delete>
 800c0e2:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 800c0e4:	697b      	ldr	r3, [r7, #20]
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3718      	adds	r7, #24
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	42595445 	.word	0x42595445
 800c0f4:	24000020 	.word	0x24000020
 800c0f8:	2400f034 	.word	0x2400f034
 800c0fc:	2400f180 	.word	0x2400f180

0800c100 <_txe_byte_pool_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_info_get(TX_BYTE_POOL *pool_ptr, CHAR **name, ULONG *available_bytes, 
                    ULONG *fragments, TX_THREAD **first_suspended, 
                    ULONG *suspended_count, TX_BYTE_POOL **next_pool)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b08a      	sub	sp, #40	; 0x28
 800c104:	af04      	add	r7, sp, #16
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
 800c10c:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d102      	bne.n	800c11a <_txe_byte_pool_info_get+0x1a>
    {

        /* Block pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c114:	2302      	movs	r3, #2
 800c116:	617b      	str	r3, [r7, #20]
 800c118:	e014      	b.n	800c144 <_txe_byte_pool_info_get+0x44>
    }

    /* Now check for invalid pool ID.  */
    else if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4a0c      	ldr	r2, [pc, #48]	; (800c150 <_txe_byte_pool_info_get+0x50>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d002      	beq.n	800c12a <_txe_byte_pool_info_get+0x2a>
    {

        /* Block pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c124:	2302      	movs	r3, #2
 800c126:	617b      	str	r3, [r7, #20]
 800c128:	e00c      	b.n	800c144 <_txe_byte_pool_info_get+0x44>
    }
    else
    {

        /* Otherwise, call the actual byte pool information get service.  */
        status =  _tx_byte_pool_info_get(pool_ptr, name, available_bytes, 
 800c12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12c:	9302      	str	r3, [sp, #8]
 800c12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c130:	9301      	str	r3, [sp, #4]
 800c132:	6a3b      	ldr	r3, [r7, #32]
 800c134:	9300      	str	r3, [sp, #0]
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	68b9      	ldr	r1, [r7, #8]
 800c13c:	68f8      	ldr	r0, [r7, #12]
 800c13e:	f7fa fc4f 	bl	80069e0 <_tx_byte_pool_info_get>
 800c142:	6178      	str	r0, [r7, #20]
                            fragments, first_suspended, suspended_count, next_pool);
    }

    /* Return completion status.  */
    return(status);
 800c144:	697b      	ldr	r3, [r7, #20]
}
 800c146:	4618      	mov	r0, r3
 800c148:	3718      	adds	r7, #24
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	42595445 	.word	0x42595445

0800c154 <_txe_byte_pool_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_prioritize(TX_BYTE_POOL *pool_ptr)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid byte memory pool pointer.  */
    if (pool_ptr == TX_NULL)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d102      	bne.n	800c168 <_txe_byte_pool_prioritize+0x14>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c162:	2302      	movs	r3, #2
 800c164:	60fb      	str	r3, [r7, #12]
 800c166:	e00b      	b.n	800c180 <_txe_byte_pool_prioritize+0x2c>
    }
    
    /* Now check for invalid pool ID.  */
    else if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a07      	ldr	r2, [pc, #28]	; (800c18c <_txe_byte_pool_prioritize+0x38>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d002      	beq.n	800c178 <_txe_byte_pool_prioritize+0x24>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800c172:	2302      	movs	r3, #2
 800c174:	60fb      	str	r3, [r7, #12]
 800c176:	e003      	b.n	800c180 <_txe_byte_pool_prioritize+0x2c>
    }
    else
    {

        /* Call actual byte pool prioritize function.  */
        status =  _tx_byte_pool_prioritize(pool_ptr);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f7fa fc75 	bl	8006a68 <_tx_byte_pool_prioritize>
 800c17e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c180:	68fb      	ldr	r3, [r7, #12]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	42595445 	.word	0x42595445

0800c190 <_txe_byte_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_release(VOID *memory_ptr)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c198:	2300      	movs	r3, #0
 800c19a:	617b      	str	r3, [r7, #20]

    /* First check the supplied memory pointer.  */
    if (memory_ptr == TX_NULL)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d102      	bne.n	800c1a8 <_txe_byte_release+0x18>
    {

        /* The byte memory pointer is invalid, return appropriate status.  */
        status =  TX_PTR_ERROR;
 800c1a2:	2303      	movs	r3, #3
 800c1a4:	617b      	str	r3, [r7, #20]
 800c1a6:	e01d      	b.n	800c1e4 <_txe_byte_release+0x54>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800c1a8:	4b14      	ldr	r3, [pc, #80]	; (800c1fc <_txe_byte_release+0x6c>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	613b      	str	r3, [r7, #16]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	4a13      	ldr	r2, [pc, #76]	; (800c200 <_txe_byte_release+0x70>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d101      	bne.n	800c1ba <_txe_byte_release+0x2a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800c1b6:	2313      	movs	r3, #19
 800c1b8:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c1ba:	f3ef 8305 	mrs	r3, IPSR
 800c1be:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c1c0:	68fa      	ldr	r2, [r7, #12]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c1c2:	4b10      	ldr	r3, [pc, #64]	; (800c204 <_txe_byte_release+0x74>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d00b      	beq.n	800c1e4 <_txe_byte_release+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c1cc:	f3ef 8305 	mrs	r3, IPSR
 800c1d0:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800c1d2:	68ba      	ldr	r2, [r7, #8]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c1d4:	4b0b      	ldr	r3, [pc, #44]	; (800c204 <_txe_byte_release+0x74>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c1de:	d201      	bcs.n	800c1e4 <_txe_byte_release+0x54>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c1e0:	2313      	movs	r3, #19
 800c1e2:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d103      	bne.n	800c1f2 <_txe_byte_release+0x62>
    {

        /* Call actual byte release function.  */
        status =  _tx_byte_release(memory_ptr);
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f7fa fdf4 	bl	8006dd8 <_tx_byte_release>
 800c1f0:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c1f2:	697b      	ldr	r3, [r7, #20]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3718      	adds	r7, #24
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	2400f034 	.word	0x2400f034
 800c200:	2400f180 	.word	0x2400f180
 800c204:	24000020 	.word	0x24000020

0800c208 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b090      	sub	sp, #64	; 0x40
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c214:	2300      	movs	r3, #0
 800c216:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d102      	bne.n	800c224 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800c21e:	2306      	movs	r3, #6
 800c220:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c222:	e065      	b.n	800c2f0 <_txe_event_flags_create+0xe8>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2b30      	cmp	r3, #48	; 0x30
 800c228:	d002      	beq.n	800c230 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800c22a:	2306      	movs	r3, #6
 800c22c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c22e:	e05f      	b.n	800c2f0 <_txe_event_flags_create+0xe8>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c230:	f3ef 8310 	mrs	r3, PRIMASK
 800c234:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c236:	b672      	cpsid	i
    return(primask_value);
 800c238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c23a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c23c:	4b33      	ldr	r3, [pc, #204]	; (800c30c <_txe_event_flags_create+0x104>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	3301      	adds	r3, #1
 800c242:	4a32      	ldr	r2, [pc, #200]	; (800c30c <_txe_event_flags_create+0x104>)
 800c244:	6013      	str	r3, [r2, #0]
 800c246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c248:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24c:	f383 8810 	msr	PRIMASK, r3
}
 800c250:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 800c252:	4b2f      	ldr	r3, [pc, #188]	; (800c310 <_txe_event_flags_create+0x108>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800c258:	2300      	movs	r3, #0
 800c25a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c25c:	e009      	b.n	800c272 <_txe_event_flags_create+0x6a>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 800c25e:	68fa      	ldr	r2, [r7, #12]
 800c260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c262:	429a      	cmp	r2, r3
 800c264:	d00b      	beq.n	800c27e <_txe_event_flags_create+0x76>
            }
            else
            {
        
                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 800c266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 800c26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26e:	3301      	adds	r3, #1
 800c270:	63bb      	str	r3, [r7, #56]	; 0x38
 800c272:	4b28      	ldr	r3, [pc, #160]	; (800c314 <_txe_event_flags_create+0x10c>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c278:	429a      	cmp	r2, r3
 800c27a:	d3f0      	bcc.n	800c25e <_txe_event_flags_create+0x56>
 800c27c:	e000      	b.n	800c280 <_txe_event_flags_create+0x78>
                break;
 800c27e:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c280:	f3ef 8310 	mrs	r3, PRIMASK
 800c284:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c286:	b672      	cpsid	i
    return(primask_value);
 800c288:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c28a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c28c:	4b1f      	ldr	r3, [pc, #124]	; (800c30c <_txe_event_flags_create+0x104>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	3b01      	subs	r3, #1
 800c292:	4a1e      	ldr	r2, [pc, #120]	; (800c30c <_txe_event_flags_create+0x104>)
 800c294:	6013      	str	r3, [r2, #0]
 800c296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c298:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c29a:	6a3b      	ldr	r3, [r7, #32]
 800c29c:	f383 8810 	msr	PRIMASK, r3
}
 800c2a0:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c2a2:	f7fe fad1 	bl	800a848 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 800c2a6:	68fa      	ldr	r2, [r7, #12]
 800c2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d102      	bne.n	800c2b4 <_txe_event_flags_create+0xac>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 800c2ae:	2306      	movs	r3, #6
 800c2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2b2:	e01d      	b.n	800c2f0 <_txe_event_flags_create+0xe8>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c2b4:	4b18      	ldr	r3, [pc, #96]	; (800c318 <_txe_event_flags_create+0x110>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2bc:	4a17      	ldr	r2, [pc, #92]	; (800c31c <_txe_event_flags_create+0x114>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d101      	bne.n	800c2c6 <_txe_event_flags_create+0xbe>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c2c2:	2313      	movs	r3, #19
 800c2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c2c6:	f3ef 8305 	mrs	r3, IPSR
 800c2ca:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c2cc:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c2ce:	4b14      	ldr	r3, [pc, #80]	; (800c320 <_txe_event_flags_create+0x118>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d00b      	beq.n	800c2f0 <_txe_event_flags_create+0xe8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c2d8:	f3ef 8305 	mrs	r3, IPSR
 800c2dc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c2de:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c2e0:	4b0f      	ldr	r3, [pc, #60]	; (800c320 <_txe_event_flags_create+0x118>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c2ea:	d201      	bcs.n	800c2f0 <_txe_event_flags_create+0xe8>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c2ec:	2313      	movs	r3, #19
 800c2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d104      	bne.n	800c300 <_txe_event_flags_create+0xf8>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 800c2f6:	68b9      	ldr	r1, [r7, #8]
 800c2f8:	68f8      	ldr	r0, [r7, #12]
 800c2fa:	f7fa ff0d 	bl	8007118 <_tx_event_flags_create>
 800c2fe:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 800c300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c302:	4618      	mov	r0, r3
 800c304:	3740      	adds	r7, #64	; 0x40
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	2400f0d0 	.word	0x2400f0d0
 800c310:	2400f00c 	.word	0x2400f00c
 800c314:	2400f010 	.word	0x2400f010
 800c318:	2400f034 	.word	0x2400f034
 800c31c:	2400f180 	.word	0x2400f180
 800c320:	24000020 	.word	0x24000020

0800c324 <_txe_event_flags_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b086      	sub	sp, #24
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c32c:	2300      	movs	r3, #0
 800c32e:	617b      	str	r3, [r7, #20]
#endif
    
    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d102      	bne.n	800c33c <_txe_event_flags_delete+0x18>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800c336:	2306      	movs	r3, #6
 800c338:	617b      	str	r3, [r7, #20]
 800c33a:	e023      	b.n	800c384 <_txe_event_flags_delete+0x60>
    }
    
    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a13      	ldr	r2, [pc, #76]	; (800c390 <_txe_event_flags_delete+0x6c>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d002      	beq.n	800c34c <_txe_event_flags_delete+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800c346:	2306      	movs	r3, #6
 800c348:	617b      	str	r3, [r7, #20]
 800c34a:	e01b      	b.n	800c384 <_txe_event_flags_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c34c:	f3ef 8305 	mrs	r3, IPSR
 800c350:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c352:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c354:	4b0f      	ldr	r3, [pc, #60]	; (800c394 <_txe_event_flags_delete+0x70>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4313      	orrs	r3, r2
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d002      	beq.n	800c364 <_txe_event_flags_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800c35e:	2313      	movs	r3, #19
 800c360:	617b      	str	r3, [r7, #20]
 800c362:	e00f      	b.n	800c384 <_txe_event_flags_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800c364:	4b0c      	ldr	r3, [pc, #48]	; (800c398 <_txe_event_flags_delete+0x74>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	4a0b      	ldr	r2, [pc, #44]	; (800c39c <_txe_event_flags_delete+0x78>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d101      	bne.n	800c376 <_txe_event_flags_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800c372:	2313      	movs	r3, #19
 800c374:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d103      	bne.n	800c384 <_txe_event_flags_delete+0x60>
        {
#endif

            /* Call actual event flag group delete function.  */
            status =  _tx_event_flags_delete(group_ptr);
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f7fa ff17 	bl	80071b0 <_tx_event_flags_delete>
 800c382:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 800c384:	697b      	ldr	r3, [r7, #20]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3718      	adds	r7, #24
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	4456444e 	.word	0x4456444e
 800c394:	24000020 	.word	0x24000020
 800c398:	2400f034 	.word	0x2400f034
 800c39c:	2400f180 	.word	0x2400f180

0800c3a0 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b08a      	sub	sp, #40	; 0x28
 800c3a4:	af02      	add	r7, sp, #8
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
 800c3ac:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d102      	bne.n	800c3be <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800c3b8:	2306      	movs	r3, #6
 800c3ba:	61fb      	str	r3, [r7, #28]
 800c3bc:	e025      	b.n	800c40a <_txe_event_flags_get+0x6a>
    }
    
    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a1e      	ldr	r2, [pc, #120]	; (800c43c <_txe_event_flags_get+0x9c>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d002      	beq.n	800c3ce <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800c3c8:	2306      	movs	r3, #6
 800c3ca:	61fb      	str	r3, [r7, #28]
 800c3cc:	e01d      	b.n	800c40a <_txe_event_flags_get+0x6a>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d102      	bne.n	800c3da <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800c3d4:	2303      	movs	r3, #3
 800c3d6:	61fb      	str	r3, [r7, #28]
 800c3d8:	e017      	b.n	800c40a <_txe_event_flags_get+0x6a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d014      	beq.n	800c40a <_txe_event_flags_get+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c3e0:	f3ef 8305 	mrs	r3, IPSR
 800c3e4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c3e6:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c3e8:	4b15      	ldr	r3, [pc, #84]	; (800c440 <_txe_event_flags_get+0xa0>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d002      	beq.n	800c3f8 <_txe_event_flags_get+0x58>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800c3f2:	2304      	movs	r3, #4
 800c3f4:	61fb      	str	r3, [r7, #28]
 800c3f6:	e008      	b.n	800c40a <_txe_event_flags_get+0x6a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800c3f8:	4b12      	ldr	r3, [pc, #72]	; (800c444 <_txe_event_flags_get+0xa4>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	4a11      	ldr	r2, [pc, #68]	; (800c448 <_txe_event_flags_get+0xa8>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d101      	bne.n	800c40a <_txe_event_flags_get+0x6a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800c406:	2304      	movs	r3, #4
 800c408:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d104      	bne.n	800c41a <_txe_event_flags_get+0x7a>
    {
    
        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b03      	cmp	r3, #3
 800c414:	d901      	bls.n	800c41a <_txe_event_flags_get+0x7a>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 800c416:	2308      	movs	r3, #8
 800c418:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d108      	bne.n	800c432 <_txe_event_flags_get+0x92>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 800c420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	68b9      	ldr	r1, [r7, #8]
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	f7fa ff4a 	bl	80072c4 <_tx_event_flags_get>
 800c430:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800c432:	69fb      	ldr	r3, [r7, #28]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3720      	adds	r7, #32
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	4456444e 	.word	0x4456444e
 800c440:	24000020 	.word	0x24000020
 800c444:	2400f034 	.word	0x2400f034
 800c448:	2400f180 	.word	0x2400f180

0800c44c <_txe_event_flags_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR **name, ULONG *current_flags, 
                    TX_THREAD **first_suspended, ULONG *suspended_count, 
                    TX_EVENT_FLAGS_GROUP **next_group)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b088      	sub	sp, #32
 800c450:	af02      	add	r7, sp, #8
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	607a      	str	r2, [r7, #4]
 800c458:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d102      	bne.n	800c466 <_txe_event_flags_info_get+0x1a>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800c460:	2306      	movs	r3, #6
 800c462:	617b      	str	r3, [r7, #20]
 800c464:	e012      	b.n	800c48c <_txe_event_flags_info_get+0x40>
    }
    
    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a0b      	ldr	r2, [pc, #44]	; (800c498 <_txe_event_flags_info_get+0x4c>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d002      	beq.n	800c476 <_txe_event_flags_info_get+0x2a>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800c470:	2306      	movs	r3, #6
 800c472:	617b      	str	r3, [r7, #20]
 800c474:	e00a      	b.n	800c48c <_txe_event_flags_info_get+0x40>
    }
    else
    {

        /* Otherwise, call the actual event flags group information get service.  */
        status =  _tx_event_flags_info_get(group_ptr, name, current_flags, first_suspended, 
 800c476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c478:	9301      	str	r3, [sp, #4]
 800c47a:	6a3b      	ldr	r3, [r7, #32]
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	68b9      	ldr	r1, [r7, #8]
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f7fa fffb 	bl	8007480 <_tx_event_flags_info_get>
 800c48a:	6178      	str	r0, [r7, #20]
                                                            suspended_count, next_group);
    }

    /* Return completion status.  */
    return(status);
 800c48c:	697b      	ldr	r3, [r7, #20]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3718      	adds	r7, #24
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	4456444e 	.word	0x4456444e

0800c49c <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b086      	sub	sp, #24
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d102      	bne.n	800c4b8 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800c4b2:	2306      	movs	r3, #6
 800c4b4:	617b      	str	r3, [r7, #20]
 800c4b6:	e00f      	b.n	800c4d8 <_txe_event_flags_set+0x3c>
    }
    
    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a0d      	ldr	r2, [pc, #52]	; (800c4f4 <_txe_event_flags_set+0x58>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d002      	beq.n	800c4c8 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800c4c2:	2306      	movs	r3, #6
 800c4c4:	617b      	str	r3, [r7, #20]
 800c4c6:	e007      	b.n	800c4d8 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b02      	cmp	r3, #2
 800c4cc:	d004      	beq.n	800c4d8 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d001      	beq.n	800c4d8 <_txe_event_flags_set+0x3c>
            {
        
                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 800c4d4:	2308      	movs	r3, #8
 800c4d6:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d105      	bne.n	800c4ea <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	68b9      	ldr	r1, [r7, #8]
 800c4e2:	68f8      	ldr	r0, [r7, #12]
 800c4e4:	f7fb f80e 	bl	8007504 <_tx_event_flags_set>
 800c4e8:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c4ea:	697b      	ldr	r3, [r7, #20]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3718      	adds	r7, #24
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	4456444e 	.word	0x4456444e

0800c4f8 <_txe_event_flags_set_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set_notify(TX_EVENT_FLAGS_GROUP *group_ptr, VOID (*events_set_notify)(TX_EVENT_FLAGS_GROUP *notify_group_ptr))
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Check for an invalid group pointer.  */
    if (group_ptr == TX_NULL)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d102      	bne.n	800c50e <_txe_event_flags_set_notify+0x16>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800c508:	2306      	movs	r3, #6
 800c50a:	60fb      	str	r3, [r7, #12]
 800c50c:	e00c      	b.n	800c528 <_txe_event_flags_set_notify+0x30>
    }
    
    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a08      	ldr	r2, [pc, #32]	; (800c534 <_txe_event_flags_set_notify+0x3c>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d002      	beq.n	800c51e <_txe_event_flags_set_notify+0x26>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 800c518:	2306      	movs	r3, #6
 800c51a:	60fb      	str	r3, [r7, #12]
 800c51c:	e004      	b.n	800c528 <_txe_event_flags_set_notify+0x30>
    }
    else
    {

        /* Call actual event flags set notify function.  */
        status =  _tx_event_flags_set_notify(group_ptr, events_set_notify);
 800c51e:	6839      	ldr	r1, [r7, #0]
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f7fb f9eb 	bl	80078fc <_tx_event_flags_set_notify>
 800c526:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c528:	68fb      	ldr	r3, [r7, #12]
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3710      	adds	r7, #16
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	4456444e 	.word	0x4456444e

0800c538 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b090      	sub	sp, #64	; 0x40
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	60f8      	str	r0, [r7, #12]
 800c540:	60b9      	str	r1, [r7, #8]
 800c542:	607a      	str	r2, [r7, #4]
 800c544:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c546:	2300      	movs	r3, #0
 800c548:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d102      	bne.n	800c556 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c550:	231c      	movs	r3, #28
 800c552:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c554:	e04f      	b.n	800c5f6 <_txe_mutex_create+0xbe>
    }
    
    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	2b34      	cmp	r3, #52	; 0x34
 800c55a:	d002      	beq.n	800c562 <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c55c:	231c      	movs	r3, #28
 800c55e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c560:	e049      	b.n	800c5f6 <_txe_mutex_create+0xbe>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c562:	f3ef 8310 	mrs	r3, PRIMASK
 800c566:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c568:	b672      	cpsid	i
    return(primask_value);
 800c56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c56c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c56e:	4b39      	ldr	r3, [pc, #228]	; (800c654 <_txe_mutex_create+0x11c>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	3301      	adds	r3, #1
 800c574:	4a37      	ldr	r2, [pc, #220]	; (800c654 <_txe_mutex_create+0x11c>)
 800c576:	6013      	str	r3, [r2, #0]
 800c578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c57e:	f383 8810 	msr	PRIMASK, r3
}
 800c582:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 800c584:	4b34      	ldr	r3, [pc, #208]	; (800c658 <_txe_mutex_create+0x120>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800c58a:	2300      	movs	r3, #0
 800c58c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c58e:	e009      	b.n	800c5a4 <_txe_mutex_create+0x6c>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c594:	429a      	cmp	r2, r3
 800c596:	d00b      	beq.n	800c5b0 <_txe_mutex_create+0x78>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 800c598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c59a:	6a1b      	ldr	r3, [r3, #32]
 800c59c:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 800c59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5a4:	4b2d      	ldr	r3, [pc, #180]	; (800c65c <_txe_mutex_create+0x124>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d3f0      	bcc.n	800c590 <_txe_mutex_create+0x58>
 800c5ae:	e000      	b.n	800c5b2 <_txe_mutex_create+0x7a>
                break;
 800c5b0:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c5b2:	f3ef 8310 	mrs	r3, PRIMASK
 800c5b6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c5b8:	b672      	cpsid	i
    return(primask_value);
 800c5ba:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c5bc:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c5be:	4b25      	ldr	r3, [pc, #148]	; (800c654 <_txe_mutex_create+0x11c>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	3b01      	subs	r3, #1
 800c5c4:	4a23      	ldr	r2, [pc, #140]	; (800c654 <_txe_mutex_create+0x11c>)
 800c5c6:	6013      	str	r3, [r2, #0]
 800c5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ca:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c5cc:	6a3b      	ldr	r3, [r7, #32]
 800c5ce:	f383 8810 	msr	PRIMASK, r3
}
 800c5d2:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c5d4:	f7fe f938 	bl	800a848 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d102      	bne.n	800c5e6 <_txe_mutex_create+0xae>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 800c5e0:	231c      	movs	r3, #28
 800c5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5e4:	e007      	b.n	800c5f6 <_txe_mutex_create+0xbe>
        }
        else
        {
        
            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d004      	beq.n	800c5f6 <_txe_mutex_create+0xbe>
            {

                if (inherit != TX_NO_INHERIT)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d001      	beq.n	800c5f6 <_txe_mutex_create+0xbe>
                {
        
                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 800c5f2:	231f      	movs	r3, #31
 800c5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d11d      	bne.n	800c638 <_txe_mutex_create+0x100>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800c5fc:	4b18      	ldr	r3, [pc, #96]	; (800c660 <_txe_mutex_create+0x128>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800c602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c604:	4a17      	ldr	r2, [pc, #92]	; (800c664 <_txe_mutex_create+0x12c>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d101      	bne.n	800c60e <_txe_mutex_create+0xd6>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800c60a:	2313      	movs	r3, #19
 800c60c:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c60e:	f3ef 8305 	mrs	r3, IPSR
 800c612:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c614:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c616:	4b14      	ldr	r3, [pc, #80]	; (800c668 <_txe_mutex_create+0x130>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4313      	orrs	r3, r2
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00b      	beq.n	800c638 <_txe_mutex_create+0x100>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c620:	f3ef 8305 	mrs	r3, IPSR
 800c624:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c626:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c628:	4b0f      	ldr	r3, [pc, #60]	; (800c668 <_txe_mutex_create+0x130>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4313      	orrs	r3, r2
 800c62e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c632:	d201      	bcs.n	800c638 <_txe_mutex_create+0x100>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c634:	2313      	movs	r3, #19
 800c636:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d105      	bne.n	800c64a <_txe_mutex_create+0x112>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	68b9      	ldr	r1, [r7, #8]
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f7fb fa9c 	bl	8007b80 <_tx_mutex_create>
 800c648:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 800c64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3740      	adds	r7, #64	; 0x40
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	2400f0d0 	.word	0x2400f0d0
 800c658:	2400f014 	.word	0x2400f014
 800c65c:	2400f018 	.word	0x2400f018
 800c660:	2400f034 	.word	0x2400f034
 800c664:	2400f180 	.word	0x2400f180
 800c668:	24000020 	.word	0x24000020

0800c66c <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c674:	2300      	movs	r3, #0
 800c676:	617b      	str	r3, [r7, #20]
#endif
    
    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d102      	bne.n	800c684 <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c67e:	231c      	movs	r3, #28
 800c680:	617b      	str	r3, [r7, #20]
 800c682:	e023      	b.n	800c6cc <_txe_mutex_delete+0x60>
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a13      	ldr	r2, [pc, #76]	; (800c6d8 <_txe_mutex_delete+0x6c>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d002      	beq.n	800c694 <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c68e:	231c      	movs	r3, #28
 800c690:	617b      	str	r3, [r7, #20]
 800c692:	e01b      	b.n	800c6cc <_txe_mutex_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c694:	f3ef 8305 	mrs	r3, IPSR
 800c698:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c69a:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c69c:	4b0f      	ldr	r3, [pc, #60]	; (800c6dc <_txe_mutex_delete+0x70>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d002      	beq.n	800c6ac <_txe_mutex_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800c6a6:	2313      	movs	r3, #19
 800c6a8:	617b      	str	r3, [r7, #20]
 800c6aa:	e00f      	b.n	800c6cc <_txe_mutex_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800c6ac:	4b0c      	ldr	r3, [pc, #48]	; (800c6e0 <_txe_mutex_delete+0x74>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	4a0b      	ldr	r2, [pc, #44]	; (800c6e4 <_txe_mutex_delete+0x78>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d101      	bne.n	800c6be <_txe_mutex_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800c6ba:	2313      	movs	r3, #19
 800c6bc:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d103      	bne.n	800c6cc <_txe_mutex_delete+0x60>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f7fb fab3 	bl	8007c30 <_tx_mutex_delete>
 800c6ca:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 800c6cc:	697b      	ldr	r3, [r7, #20]
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3718      	adds	r7, #24
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	4d555445 	.word	0x4d555445
 800c6dc:	24000020 	.word	0x24000020
 800c6e0:	2400f034 	.word	0x2400f034
 800c6e4:	2400f180 	.word	0x2400f180

0800c6e8 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b088      	sub	sp, #32
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d102      	bne.n	800c702 <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c6fc:	231c      	movs	r3, #28
 800c6fe:	61fb      	str	r3, [r7, #28]
 800c700:	e01f      	b.n	800c742 <_txe_mutex_get+0x5a>
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4a21      	ldr	r2, [pc, #132]	; (800c78c <_txe_mutex_get+0xa4>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d002      	beq.n	800c712 <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c70c:	231c      	movs	r3, #28
 800c70e:	61fb      	str	r3, [r7, #28]
 800c710:	e017      	b.n	800c742 <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d014      	beq.n	800c742 <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c718:	f3ef 8305 	mrs	r3, IPSR
 800c71c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c71e:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c720:	4b1b      	ldr	r3, [pc, #108]	; (800c790 <_txe_mutex_get+0xa8>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4313      	orrs	r3, r2
 800c726:	2b00      	cmp	r3, #0
 800c728:	d002      	beq.n	800c730 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800c72a:	2304      	movs	r3, #4
 800c72c:	61fb      	str	r3, [r7, #28]
 800c72e:	e008      	b.n	800c742 <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800c730:	4b18      	ldr	r3, [pc, #96]	; (800c794 <_txe_mutex_get+0xac>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	4a17      	ldr	r2, [pc, #92]	; (800c798 <_txe_mutex_get+0xb0>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d101      	bne.n	800c742 <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800c73e:	2304      	movs	r3, #4
 800c740:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d114      	bne.n	800c772 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c748:	f3ef 8305 	mrs	r3, IPSR
 800c74c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c74e:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c750:	4b0f      	ldr	r3, [pc, #60]	; (800c790 <_txe_mutex_get+0xa8>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4313      	orrs	r3, r2
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00b      	beq.n	800c772 <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c75a:	f3ef 8305 	mrs	r3, IPSR
 800c75e:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c760:	68fa      	ldr	r2, [r7, #12]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c762:	4b0b      	ldr	r3, [pc, #44]	; (800c790 <_txe_mutex_get+0xa8>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4313      	orrs	r3, r2
 800c768:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c76c:	d201      	bcs.n	800c772 <_txe_mutex_get+0x8a>
            {
        
                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c76e:	2313      	movs	r3, #19
 800c770:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d104      	bne.n	800c782 <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 800c778:	6839      	ldr	r1, [r7, #0]
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f7fb fafa 	bl	8007d74 <_tx_mutex_get>
 800c780:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800c782:	69fb      	ldr	r3, [r7, #28]
}
 800c784:	4618      	mov	r0, r3
 800c786:	3720      	adds	r7, #32
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	4d555445 	.word	0x4d555445
 800c790:	24000020 	.word	0x24000020
 800c794:	2400f034 	.word	0x2400f034
 800c798:	2400f180 	.word	0x2400f180

0800c79c <_txe_mutex_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_info_get(TX_MUTEX *mutex_ptr, CHAR **name, ULONG *count, TX_THREAD **owner,
                    TX_THREAD **first_suspended, ULONG *suspended_count, 
                    TX_MUTEX **next_mutex)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b08a      	sub	sp, #40	; 0x28
 800c7a0:	af04      	add	r7, sp, #16
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
 800c7a8:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d102      	bne.n	800c7b6 <_txe_mutex_info_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c7b0:	231c      	movs	r3, #28
 800c7b2:	617b      	str	r3, [r7, #20]
 800c7b4:	e014      	b.n	800c7e0 <_txe_mutex_info_get+0x44>
    }
    
    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a0c      	ldr	r2, [pc, #48]	; (800c7ec <_txe_mutex_info_get+0x50>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d002      	beq.n	800c7c6 <_txe_mutex_info_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c7c0:	231c      	movs	r3, #28
 800c7c2:	617b      	str	r3, [r7, #20]
 800c7c4:	e00c      	b.n	800c7e0 <_txe_mutex_info_get+0x44>
    }
    else
    {

        /* Otherwise, call the actual mutex information get service.  */
        status =  _tx_mutex_info_get(mutex_ptr, name, count, owner, first_suspended, 
 800c7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c8:	9302      	str	r3, [sp, #8]
 800c7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7cc:	9301      	str	r3, [sp, #4]
 800c7ce:	6a3b      	ldr	r3, [r7, #32]
 800c7d0:	9300      	str	r3, [sp, #0]
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	68b9      	ldr	r1, [r7, #8]
 800c7d8:	68f8      	ldr	r0, [r7, #12]
 800c7da:	f7fb fbd1 	bl	8007f80 <_tx_mutex_info_get>
 800c7de:	6178      	str	r0, [r7, #20]
                                                            suspended_count, next_mutex);
    }

    /* Return completion status.  */
    return(status);
 800c7e0:	697b      	ldr	r3, [r7, #20]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3718      	adds	r7, #24
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	4d555445 	.word	0x4d555445

0800c7f0 <_txe_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d102      	bne.n	800c804 <_txe_mutex_prioritize+0x14>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c7fe:	231c      	movs	r3, #28
 800c800:	60fb      	str	r3, [r7, #12]
 800c802:	e00b      	b.n	800c81c <_txe_mutex_prioritize+0x2c>
    }
    
    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a07      	ldr	r2, [pc, #28]	; (800c828 <_txe_mutex_prioritize+0x38>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d002      	beq.n	800c814 <_txe_mutex_prioritize+0x24>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c80e:	231c      	movs	r3, #28
 800c810:	60fb      	str	r3, [r7, #12]
 800c812:	e003      	b.n	800c81c <_txe_mutex_prioritize+0x2c>
    }
    else
    {

        /* Call actual mutex prioritize function.  */
        status =  _tx_mutex_prioritize(mutex_ptr);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f7fb fbf7 	bl	8008008 <_tx_mutex_prioritize>
 800c81a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800c81c:	68fb      	ldr	r3, [r7, #12]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	4d555445 	.word	0x4d555445

0800c82c <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b086      	sub	sp, #24
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c834:	2300      	movs	r3, #0
 800c836:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d102      	bne.n	800c844 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c83e:	231c      	movs	r3, #28
 800c840:	617b      	str	r3, [r7, #20]
 800c842:	e01c      	b.n	800c87e <_txe_mutex_put+0x52>
    }
    
    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a13      	ldr	r2, [pc, #76]	; (800c898 <_txe_mutex_put+0x6c>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d002      	beq.n	800c854 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 800c84e:	231c      	movs	r3, #28
 800c850:	617b      	str	r3, [r7, #20]
 800c852:	e014      	b.n	800c87e <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c854:	f3ef 8305 	mrs	r3, IPSR
 800c858:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c85a:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c85c:	4b0f      	ldr	r3, [pc, #60]	; (800c89c <_txe_mutex_put+0x70>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4313      	orrs	r3, r2
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00b      	beq.n	800c87e <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c866:	f3ef 8305 	mrs	r3, IPSR
 800c86a:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c86c:	68fa      	ldr	r2, [r7, #12]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c86e:	4b0b      	ldr	r3, [pc, #44]	; (800c89c <_txe_mutex_put+0x70>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4313      	orrs	r3, r2
 800c874:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c878:	d201      	bcs.n	800c87e <_txe_mutex_put+0x52>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c87a:	2313      	movs	r3, #19
 800c87c:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d103      	bne.n	800c88c <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f7fb fd33 	bl	80082f0 <_tx_mutex_put>
 800c88a:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800c88c:	697b      	ldr	r3, [r7, #20]
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3718      	adds	r7, #24
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	4d555445 	.word	0x4d555445
 800c89c:	24000020 	.word	0x24000020

0800c8a0 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, 
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b092      	sub	sp, #72	; 0x48
 800c8a4:	af02      	add	r7, sp, #8
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	60b9      	str	r1, [r7, #8]
 800c8aa:	607a      	str	r2, [r7, #4]
 800c8ac:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d102      	bne.n	800c8be <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800c8b8:	2309      	movs	r3, #9
 800c8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8bc:	e07f      	b.n	800c9be <_txe_queue_create+0x11e>
    }
    
    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 800c8be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8c0:	2b44      	cmp	r3, #68	; 0x44
 800c8c2:	d002      	beq.n	800c8ca <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800c8c4:	2309      	movs	r3, #9
 800c8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8c8:	e079      	b.n	800c9be <_txe_queue_create+0x11e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c8ca:	f3ef 8310 	mrs	r3, PRIMASK
 800c8ce:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c8d0:	b672      	cpsid	i
    return(primask_value);
 800c8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800c8d4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800c8d6:	4b42      	ldr	r3, [pc, #264]	; (800c9e0 <_txe_queue_create+0x140>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	4a40      	ldr	r2, [pc, #256]	; (800c9e0 <_txe_queue_create+0x140>)
 800c8de:	6013      	str	r3, [r2, #0]
 800c8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e6:	f383 8810 	msr	PRIMASK, r3
}
 800c8ea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 800c8ec:	4b3d      	ldr	r3, [pc, #244]	; (800c9e4 <_txe_queue_create+0x144>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8f6:	e009      	b.n	800c90c <_txe_queue_create+0x6c>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 800c8f8:	68fa      	ldr	r2, [r7, #12]
 800c8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d00b      	beq.n	800c918 <_txe_queue_create+0x78>
            }
            else
            {
        
                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 800c900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c904:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 800c906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c908:	3301      	adds	r3, #1
 800c90a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c90c:	4b36      	ldr	r3, [pc, #216]	; (800c9e8 <_txe_queue_create+0x148>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c912:	429a      	cmp	r2, r3
 800c914:	d3f0      	bcc.n	800c8f8 <_txe_queue_create+0x58>
 800c916:	e000      	b.n	800c91a <_txe_queue_create+0x7a>
                break;
 800c918:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800c91a:	f3ef 8310 	mrs	r3, PRIMASK
 800c91e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800c920:	b672      	cpsid	i
    return(primask_value);
 800c922:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c924:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c926:	4b2e      	ldr	r3, [pc, #184]	; (800c9e0 <_txe_queue_create+0x140>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	3b01      	subs	r3, #1
 800c92c:	4a2c      	ldr	r2, [pc, #176]	; (800c9e0 <_txe_queue_create+0x140>)
 800c92e:	6013      	str	r3, [r2, #0]
 800c930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c932:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800c934:	6a3b      	ldr	r3, [r7, #32]
 800c936:	f383 8810 	msr	PRIMASK, r3
}
 800c93a:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c93c:	f7fd ff84 	bl	800a848 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 800c940:	68fa      	ldr	r2, [r7, #12]
 800c942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c944:	429a      	cmp	r2, r3
 800c946:	d102      	bne.n	800c94e <_txe_queue_create+0xae>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 800c948:	2309      	movs	r3, #9
 800c94a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c94c:	e037      	b.n	800c9be <_txe_queue_create+0x11e>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d102      	bne.n	800c95a <_txe_queue_create+0xba>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 800c954:	2303      	movs	r3, #3
 800c956:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c958:	e031      	b.n	800c9be <_txe_queue_create+0x11e>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d102      	bne.n	800c966 <_txe_queue_create+0xc6>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800c960:	2305      	movs	r3, #5
 800c962:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c964:	e02b      	b.n	800c9be <_txe_queue_create+0x11e>
        }
    
        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2b10      	cmp	r3, #16
 800c96a:	d902      	bls.n	800c972 <_txe_queue_create+0xd2>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 800c96c:	2305      	movs	r3, #5
 800c96e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c970:	e025      	b.n	800c9be <_txe_queue_create+0x11e>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 800c972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c974:	089b      	lsrs	r3, r3, #2
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	429a      	cmp	r2, r3
 800c97a:	d902      	bls.n	800c982 <_txe_queue_create+0xe2>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 800c97c:	2305      	movs	r3, #5
 800c97e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c980:	e01d      	b.n	800c9be <_txe_queue_create+0x11e>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800c982:	4b1a      	ldr	r3, [pc, #104]	; (800c9ec <_txe_queue_create+0x14c>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800c988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98a:	4a19      	ldr	r2, [pc, #100]	; (800c9f0 <_txe_queue_create+0x150>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d101      	bne.n	800c994 <_txe_queue_create+0xf4>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c990:	2313      	movs	r3, #19
 800c992:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c994:	f3ef 8305 	mrs	r3, IPSR
 800c998:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c99a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c99c:	4b15      	ldr	r3, [pc, #84]	; (800c9f4 <_txe_queue_create+0x154>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d00b      	beq.n	800c9be <_txe_queue_create+0x11e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c9a6:	f3ef 8305 	mrs	r3, IPSR
 800c9aa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c9ac:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c9ae:	4b11      	ldr	r3, [pc, #68]	; (800c9f4 <_txe_queue_create+0x154>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c9b8:	d201      	bcs.n	800c9be <_txe_queue_create+0x11e>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c9ba:	2313      	movs	r3, #19
 800c9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c9be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d108      	bne.n	800c9d6 <_txe_queue_create+0x136>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 800c9c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9c6:	9300      	str	r3, [sp, #0]
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	68b9      	ldr	r1, [r7, #8]
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	f7fb feee 	bl	80087b0 <_tx_queue_create>
 800c9d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 800c9d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3740      	adds	r7, #64	; 0x40
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	2400f0d0 	.word	0x2400f0d0
 800c9e4:	2400f004 	.word	0x2400f004
 800c9e8:	2400f008 	.word	0x2400f008
 800c9ec:	2400f034 	.word	0x2400f034
 800c9f0:	2400f180 	.word	0x2400f180
 800c9f4:	24000020 	.word	0x24000020

0800c9f8 <_txe_queue_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_delete(TX_QUEUE *queue_ptr)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b086      	sub	sp, #24
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ca00:	2300      	movs	r3, #0
 800ca02:	617b      	str	r3, [r7, #20]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d102      	bne.n	800ca10 <_txe_queue_delete+0x18>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ca0a:	2309      	movs	r3, #9
 800ca0c:	617b      	str	r3, [r7, #20]
 800ca0e:	e01c      	b.n	800ca4a <_txe_queue_delete+0x52>
    }

    /* Now check for a valid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a13      	ldr	r2, [pc, #76]	; (800ca64 <_txe_queue_delete+0x6c>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d002      	beq.n	800ca20 <_txe_queue_delete+0x28>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ca1a:	2309      	movs	r3, #9
 800ca1c:	617b      	str	r3, [r7, #20]
 800ca1e:	e014      	b.n	800ca4a <_txe_queue_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ca20:	f3ef 8305 	mrs	r3, IPSR
 800ca24:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800ca26:	68fa      	ldr	r2, [r7, #12]
    {
    
        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ca28:	4b0f      	ldr	r3, [pc, #60]	; (800ca68 <_txe_queue_delete+0x70>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d002      	beq.n	800ca38 <_txe_queue_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800ca32:	2313      	movs	r3, #19
 800ca34:	617b      	str	r3, [r7, #20]
 800ca36:	e008      	b.n	800ca4a <_txe_queue_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {
        
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800ca38:	4b0c      	ldr	r3, [pc, #48]	; (800ca6c <_txe_queue_delete+0x74>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	4a0b      	ldr	r2, [pc, #44]	; (800ca70 <_txe_queue_delete+0x78>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d101      	bne.n	800ca4a <_txe_queue_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ca46:	2313      	movs	r3, #19
 800ca48:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d103      	bne.n	800ca58 <_txe_queue_delete+0x60>
    {

        /* Call actual queue delete function.  */
        status =  _tx_queue_delete(queue_ptr);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f7fb ff1f 	bl	8008894 <_tx_queue_delete>
 800ca56:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800ca58:	697b      	ldr	r3, [r7, #20]
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3718      	adds	r7, #24
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	51554555 	.word	0x51554555
 800ca68:	24000020 	.word	0x24000020
 800ca6c:	2400f034 	.word	0x2400f034
 800ca70:	2400f180 	.word	0x2400f180

0800ca74 <_txe_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d102      	bne.n	800ca88 <_txe_queue_flush+0x14>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ca82:	2309      	movs	r3, #9
 800ca84:	60fb      	str	r3, [r7, #12]
 800ca86:	e00b      	b.n	800caa0 <_txe_queue_flush+0x2c>
    }
    
    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a07      	ldr	r2, [pc, #28]	; (800caac <_txe_queue_flush+0x38>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d002      	beq.n	800ca98 <_txe_queue_flush+0x24>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800ca92:	2309      	movs	r3, #9
 800ca94:	60fb      	str	r3, [r7, #12]
 800ca96:	e003      	b.n	800caa0 <_txe_queue_flush+0x2c>
    }
    else
    {

        /* Call actual queue flush function.  */
        status =  _tx_queue_flush(queue_ptr);
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f7fb ff85 	bl	80089a8 <_tx_queue_flush>
 800ca9e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800caa0:	68fb      	ldr	r3, [r7, #12]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	51554555 	.word	0x51554555

0800cab0 <_txe_queue_front_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_front_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b088      	sub	sp, #32
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	60b9      	str	r1, [r7, #8]
 800caba:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cabc:	2300      	movs	r3, #0
 800cabe:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d102      	bne.n	800cacc <_txe_queue_front_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800cac6:	2309      	movs	r3, #9
 800cac8:	61fb      	str	r3, [r7, #28]
 800caca:	e025      	b.n	800cb18 <_txe_queue_front_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a18      	ldr	r2, [pc, #96]	; (800cb34 <_txe_queue_front_send+0x84>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d002      	beq.n	800cadc <_txe_queue_front_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800cad6:	2309      	movs	r3, #9
 800cad8:	61fb      	str	r3, [r7, #28]
 800cada:	e01d      	b.n	800cb18 <_txe_queue_front_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d102      	bne.n	800cae8 <_txe_queue_front_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800cae2:	2303      	movs	r3, #3
 800cae4:	61fb      	str	r3, [r7, #28]
 800cae6:	e017      	b.n	800cb18 <_txe_queue_front_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d014      	beq.n	800cb18 <_txe_queue_front_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800caee:	f3ef 8305 	mrs	r3, IPSR
 800caf2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800caf4:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800caf6:	4b10      	ldr	r3, [pc, #64]	; (800cb38 <_txe_queue_front_send+0x88>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4313      	orrs	r3, r2
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d002      	beq.n	800cb06 <_txe_queue_front_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800cb00:	2304      	movs	r3, #4
 800cb02:	61fb      	str	r3, [r7, #28]
 800cb04:	e008      	b.n	800cb18 <_txe_queue_front_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800cb06:	4b0d      	ldr	r3, [pc, #52]	; (800cb3c <_txe_queue_front_send+0x8c>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800cb0c:	69bb      	ldr	r3, [r7, #24]
 800cb0e:	4a0c      	ldr	r2, [pc, #48]	; (800cb40 <_txe_queue_front_send+0x90>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d101      	bne.n	800cb18 <_txe_queue_front_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800cb14:	2304      	movs	r3, #4
 800cb16:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d105      	bne.n	800cb2a <_txe_queue_front_send+0x7a>
    {

        /* Call actual queue front send function.  */
        status =  _tx_queue_front_send(queue_ptr, source_ptr, wait_option);
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	68b9      	ldr	r1, [r7, #8]
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f7fb ffc8 	bl	8008ab8 <_tx_queue_front_send>
 800cb28:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800cb2a:	69fb      	ldr	r3, [r7, #28]
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3720      	adds	r7, #32
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	51554555 	.word	0x51554555
 800cb38:	24000020 	.word	0x24000020
 800cb3c:	2400f034 	.word	0x2400f034
 800cb40:	2400f180 	.word	0x2400f180

0800cb44 <_txe_queue_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_info_get(TX_QUEUE *queue_ptr, CHAR **name, ULONG *enqueued, ULONG *available_storage,
                    TX_THREAD **first_suspended, ULONG *suspended_count, TX_QUEUE **next_queue)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b08a      	sub	sp, #40	; 0x28
 800cb48:	af04      	add	r7, sp, #16
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
 800cb50:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d102      	bne.n	800cb5e <_txe_queue_info_get+0x1a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800cb58:	2309      	movs	r3, #9
 800cb5a:	617b      	str	r3, [r7, #20]
 800cb5c:	e014      	b.n	800cb88 <_txe_queue_info_get+0x44>
    }
    
    /* Now check for a valid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a0c      	ldr	r2, [pc, #48]	; (800cb94 <_txe_queue_info_get+0x50>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d002      	beq.n	800cb6e <_txe_queue_info_get+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800cb68:	2309      	movs	r3, #9
 800cb6a:	617b      	str	r3, [r7, #20]
 800cb6c:	e00c      	b.n	800cb88 <_txe_queue_info_get+0x44>
    }
    else
    {

        /* Otherwise, call the actual queue information get service.  */
        status =  _tx_queue_info_get(queue_ptr, name, enqueued, available_storage, first_suspended, 
 800cb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb70:	9302      	str	r3, [sp, #8]
 800cb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb74:	9301      	str	r3, [sp, #4]
 800cb76:	6a3b      	ldr	r3, [r7, #32]
 800cb78:	9300      	str	r3, [sp, #0]
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	68b9      	ldr	r1, [r7, #8]
 800cb80:	68f8      	ldr	r0, [r7, #12]
 800cb82:	f7fc f8f7 	bl	8008d74 <_tx_queue_info_get>
 800cb86:	6178      	str	r0, [r7, #20]
                                                                    suspended_count, next_queue);
    }

    /* Return completion status.  */
    return(status);
 800cb88:	697b      	ldr	r3, [r7, #20]
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3718      	adds	r7, #24
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	51554555 	.word	0x51554555

0800cb98 <_txe_queue_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_prioritize(TX_QUEUE *queue_ptr)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d102      	bne.n	800cbac <_txe_queue_prioritize+0x14>
    {
        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800cba6:	2309      	movs	r3, #9
 800cba8:	60fb      	str	r3, [r7, #12]
 800cbaa:	e00b      	b.n	800cbc4 <_txe_queue_prioritize+0x2c>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a07      	ldr	r2, [pc, #28]	; (800cbd0 <_txe_queue_prioritize+0x38>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d002      	beq.n	800cbbc <_txe_queue_prioritize+0x24>
    {
        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800cbb6:	2309      	movs	r3, #9
 800cbb8:	60fb      	str	r3, [r7, #12]
 800cbba:	e003      	b.n	800cbc4 <_txe_queue_prioritize+0x2c>
    }
    else
    {

        /* Call actual queue prioritize function.  */
        status =  _tx_queue_prioritize(queue_ptr);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7fc f91d 	bl	8008dfc <_tx_queue_prioritize>
 800cbc2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	51554555 	.word	0x51554555

0800cbd4 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b088      	sub	sp, #32
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d102      	bne.n	800cbf0 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800cbea:	2309      	movs	r3, #9
 800cbec:	61fb      	str	r3, [r7, #28]
 800cbee:	e025      	b.n	800cc3c <_txe_queue_receive+0x68>
    }
    
    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4a18      	ldr	r2, [pc, #96]	; (800cc58 <_txe_queue_receive+0x84>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d002      	beq.n	800cc00 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800cbfa:	2309      	movs	r3, #9
 800cbfc:	61fb      	str	r3, [r7, #28]
 800cbfe:	e01d      	b.n	800cc3c <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d102      	bne.n	800cc0c <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800cc06:	2303      	movs	r3, #3
 800cc08:	61fb      	str	r3, [r7, #28]
 800cc0a:	e017      	b.n	800cc3c <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d014      	beq.n	800cc3c <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cc12:	f3ef 8305 	mrs	r3, IPSR
 800cc16:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cc18:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cc1a:	4b10      	ldr	r3, [pc, #64]	; (800cc5c <_txe_queue_receive+0x88>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	4313      	orrs	r3, r2
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d002      	beq.n	800cc2a <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800cc24:	2304      	movs	r3, #4
 800cc26:	61fb      	str	r3, [r7, #28]
 800cc28:	e008      	b.n	800cc3c <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800cc2a:	4b0d      	ldr	r3, [pc, #52]	; (800cc60 <_txe_queue_receive+0x8c>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800cc30:	69bb      	ldr	r3, [r7, #24]
 800cc32:	4a0c      	ldr	r2, [pc, #48]	; (800cc64 <_txe_queue_receive+0x90>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d101      	bne.n	800cc3c <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800cc38:	2304      	movs	r3, #4
 800cc3a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d105      	bne.n	800cc4e <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	68b9      	ldr	r1, [r7, #8]
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	f7fc f986 	bl	8008f58 <_tx_queue_receive>
 800cc4c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800cc4e:	69fb      	ldr	r3, [r7, #28]
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3720      	adds	r7, #32
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}
 800cc58:	51554555 	.word	0x51554555
 800cc5c:	24000020 	.word	0x24000020
 800cc60:	2400f034 	.word	0x2400f034
 800cc64:	2400f180 	.word	0x2400f180

0800cc68 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b088      	sub	sp, #32
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cc74:	2300      	movs	r3, #0
 800cc76:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d102      	bne.n	800cc84 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800cc7e:	2309      	movs	r3, #9
 800cc80:	61fb      	str	r3, [r7, #28]
 800cc82:	e025      	b.n	800ccd0 <_txe_queue_send+0x68>
    }
    
    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a18      	ldr	r2, [pc, #96]	; (800ccec <_txe_queue_send+0x84>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d002      	beq.n	800cc94 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800cc8e:	2309      	movs	r3, #9
 800cc90:	61fb      	str	r3, [r7, #28]
 800cc92:	e01d      	b.n	800ccd0 <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d102      	bne.n	800cca0 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800cc9a:	2303      	movs	r3, #3
 800cc9c:	61fb      	str	r3, [r7, #28]
 800cc9e:	e017      	b.n	800ccd0 <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d014      	beq.n	800ccd0 <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cca6:	f3ef 8305 	mrs	r3, IPSR
 800ccaa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ccac:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ccae:	4b10      	ldr	r3, [pc, #64]	; (800ccf0 <_txe_queue_send+0x88>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d002      	beq.n	800ccbe <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800ccb8:	2304      	movs	r3, #4
 800ccba:	61fb      	str	r3, [r7, #28]
 800ccbc:	e008      	b.n	800ccd0 <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
    
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800ccbe:	4b0d      	ldr	r3, [pc, #52]	; (800ccf4 <_txe_queue_send+0x8c>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	4a0c      	ldr	r2, [pc, #48]	; (800ccf8 <_txe_queue_send+0x90>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d101      	bne.n	800ccd0 <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800cccc:	2304      	movs	r3, #4
 800ccce:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d105      	bne.n	800cce2 <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	68b9      	ldr	r1, [r7, #8]
 800ccda:	68f8      	ldr	r0, [r7, #12]
 800ccdc:	f7fc fb02 	bl	80092e4 <_tx_queue_send>
 800cce0:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800cce2:	69fb      	ldr	r3, [r7, #28]
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3720      	adds	r7, #32
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	51554555 	.word	0x51554555
 800ccf0:	24000020 	.word	0x24000020
 800ccf4:	2400f034 	.word	0x2400f034
 800ccf8:	2400f180 	.word	0x2400f180

0800ccfc <_txe_queue_send_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send_notify(TX_QUEUE *queue_ptr, VOID (*queue_send_notify)(TX_QUEUE *notify_queue_ptr))
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d102      	bne.n	800cd12 <_txe_queue_send_notify+0x16>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800cd0c:	2309      	movs	r3, #9
 800cd0e:	60fb      	str	r3, [r7, #12]
 800cd10:	e00c      	b.n	800cd2c <_txe_queue_send_notify+0x30>
    }

    /* Now check for a valid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a08      	ldr	r2, [pc, #32]	; (800cd38 <_txe_queue_send_notify+0x3c>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d002      	beq.n	800cd22 <_txe_queue_send_notify+0x26>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 800cd1c:	2309      	movs	r3, #9
 800cd1e:	60fb      	str	r3, [r7, #12]
 800cd20:	e004      	b.n	800cd2c <_txe_queue_send_notify+0x30>
    }
    else
    {

        /* Call actual queue send notify function.  */
        status =  _tx_queue_send_notify(queue_ptr, queue_send_notify);
 800cd22:	6839      	ldr	r1, [r7, #0]
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f7fc fc29 	bl	800957c <_tx_queue_send_notify>
 800cd2a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	51554555 	.word	0x51554555

0800cd3c <_txe_semaphore_ceiling_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_ceiling_put(TX_SEMAPHORE *semaphore_ptr, ULONG ceiling)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d102      	bne.n	800cd52 <_txe_semaphore_ceiling_put+0x16>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cd4c:	230c      	movs	r3, #12
 800cd4e:	60fb      	str	r3, [r7, #12]
 800cd50:	e012      	b.n	800cd78 <_txe_semaphore_ceiling_put+0x3c>
    }
    
    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4a0b      	ldr	r2, [pc, #44]	; (800cd84 <_txe_semaphore_ceiling_put+0x48>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d002      	beq.n	800cd62 <_txe_semaphore_ceiling_put+0x26>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cd5c:	230c      	movs	r3, #12
 800cd5e:	60fb      	str	r3, [r7, #12]
 800cd60:	e00a      	b.n	800cd78 <_txe_semaphore_ceiling_put+0x3c>
    }

    /* Determine if the ceiling is valid - must be greater than 1.  */
    else if (ceiling == ((ULONG) 0))
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d102      	bne.n	800cd6e <_txe_semaphore_ceiling_put+0x32>
    {

        /* Invalid ceiling, return error.  */
        status =  TX_INVALID_CEILING;
 800cd68:	2322      	movs	r3, #34	; 0x22
 800cd6a:	60fb      	str	r3, [r7, #12]
 800cd6c:	e004      	b.n	800cd78 <_txe_semaphore_ceiling_put+0x3c>
    }
    else
    {

        /* Call actual semaphore ceiling put function.  */
        status =  _tx_semaphore_ceiling_put(semaphore_ptr, ceiling);
 800cd6e:	6839      	ldr	r1, [r7, #0]
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f7fc fc1f 	bl	80095b4 <_tx_semaphore_ceiling_put>
 800cd76:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800cd78:	68fb      	ldr	r3, [r7, #12]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	53454d41 	.word	0x53454d41

0800cd88 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b090      	sub	sp, #64	; 0x40
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
 800cd94:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cd96:	2300      	movs	r3, #0
 800cd98:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d102      	bne.n	800cda6 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cda0:	230c      	movs	r3, #12
 800cda2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cda4:	e050      	b.n	800ce48 <_txe_semaphore_create+0xc0>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	2b28      	cmp	r3, #40	; 0x28
 800cdaa:	d002      	beq.n	800cdb2 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cdac:	230c      	movs	r3, #12
 800cdae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdb0:	e04a      	b.n	800ce48 <_txe_semaphore_create+0xc0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800cdb2:	f3ef 8310 	mrs	r3, PRIMASK
 800cdb6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800cdb8:	b672      	cpsid	i
    return(primask_value);
 800cdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800cdbc:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800cdbe:	4b35      	ldr	r3, [pc, #212]	; (800ce94 <_txe_semaphore_create+0x10c>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	4a33      	ldr	r2, [pc, #204]	; (800ce94 <_txe_semaphore_create+0x10c>)
 800cdc6:	6013      	str	r3, [r2, #0]
 800cdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdca:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800cdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdce:	f383 8810 	msr	PRIMASK, r3
}
 800cdd2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800cdd4:	4b30      	ldr	r3, [pc, #192]	; (800ce98 <_txe_semaphore_create+0x110>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800cdda:	2300      	movs	r3, #0
 800cddc:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdde:	e009      	b.n	800cdf4 <_txe_semaphore_create+0x6c>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d00b      	beq.n	800ce00 <_txe_semaphore_create+0x78>
            }
            else
            {
            
                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800cde8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdea:	695b      	ldr	r3, [r3, #20]
 800cdec:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800cdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	63bb      	str	r3, [r7, #56]	; 0x38
 800cdf4:	4b29      	ldr	r3, [pc, #164]	; (800ce9c <_txe_semaphore_create+0x114>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d3f0      	bcc.n	800cde0 <_txe_semaphore_create+0x58>
 800cdfe:	e000      	b.n	800ce02 <_txe_semaphore_create+0x7a>
                break;
 800ce00:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ce02:	f3ef 8310 	mrs	r3, PRIMASK
 800ce06:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ce08:	b672      	cpsid	i
    return(primask_value);
 800ce0a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800ce0c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800ce0e:	4b21      	ldr	r3, [pc, #132]	; (800ce94 <_txe_semaphore_create+0x10c>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	3b01      	subs	r3, #1
 800ce14:	4a1f      	ldr	r2, [pc, #124]	; (800ce94 <_txe_semaphore_create+0x10c>)
 800ce16:	6013      	str	r3, [r2, #0]
 800ce18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1a:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ce1c:	6a3b      	ldr	r3, [r7, #32]
 800ce1e:	f383 8810 	msr	PRIMASK, r3
}
 800ce22:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ce24:	f7fd fd10 	bl	800a848 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d102      	bne.n	800ce36 <_txe_semaphore_create+0xae>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800ce30:	230c      	movs	r3, #12
 800ce32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce34:	e008      	b.n	800ce48 <_txe_semaphore_create+0xc0>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {
        
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800ce36:	4b1a      	ldr	r3, [pc, #104]	; (800cea0 <_txe_semaphore_create+0x118>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800ce3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3e:	4a19      	ldr	r2, [pc, #100]	; (800cea4 <_txe_semaphore_create+0x11c>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d101      	bne.n	800ce48 <_txe_semaphore_create+0xc0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ce44:	2313      	movs	r3, #19
 800ce46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ce48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d114      	bne.n	800ce78 <_txe_semaphore_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ce4e:	f3ef 8305 	mrs	r3, IPSR
 800ce52:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ce54:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ce56:	4b14      	ldr	r3, [pc, #80]	; (800cea8 <_txe_semaphore_create+0x120>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00b      	beq.n	800ce78 <_txe_semaphore_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ce60:	f3ef 8305 	mrs	r3, IPSR
 800ce64:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ce66:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ce68:	4b0f      	ldr	r3, [pc, #60]	; (800cea8 <_txe_semaphore_create+0x120>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ce72:	d201      	bcs.n	800ce78 <_txe_semaphore_create+0xf0>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800ce74:	2313      	movs	r3, #19
 800ce76:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ce78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d105      	bne.n	800ce8a <_txe_semaphore_create+0x102>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	68b9      	ldr	r1, [r7, #8]
 800ce82:	68f8      	ldr	r0, [r7, #12]
 800ce84:	f7fc fc8a 	bl	800979c <_tx_semaphore_create>
 800ce88:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 800ce8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3740      	adds	r7, #64	; 0x40
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	2400f0d0 	.word	0x2400f0d0
 800ce98:	2400effc 	.word	0x2400effc
 800ce9c:	2400f000 	.word	0x2400f000
 800cea0:	2400f034 	.word	0x2400f034
 800cea4:	2400f180 	.word	0x2400f180
 800cea8:	24000020 	.word	0x24000020

0800ceac <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b086      	sub	sp, #24
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d102      	bne.n	800cec4 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cebe:	230c      	movs	r3, #12
 800cec0:	617b      	str	r3, [r7, #20]
 800cec2:	e01c      	b.n	800cefe <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a13      	ldr	r2, [pc, #76]	; (800cf18 <_txe_semaphore_delete+0x6c>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d002      	beq.n	800ced4 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cece:	230c      	movs	r3, #12
 800ced0:	617b      	str	r3, [r7, #20]
 800ced2:	e014      	b.n	800cefe <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ced4:	f3ef 8305 	mrs	r3, IPSR
 800ced8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800ceda:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cedc:	4b0f      	ldr	r3, [pc, #60]	; (800cf1c <_txe_semaphore_delete+0x70>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4313      	orrs	r3, r2
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d002      	beq.n	800ceec <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800cee6:	2313      	movs	r3, #19
 800cee8:	617b      	str	r3, [r7, #20]
 800ceea:	e008      	b.n	800cefe <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {
        
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800ceec:	4b0c      	ldr	r3, [pc, #48]	; (800cf20 <_txe_semaphore_delete+0x74>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	4a0b      	ldr	r2, [pc, #44]	; (800cf24 <_txe_semaphore_delete+0x78>)
 800cef6:	4293      	cmp	r3, r2
 800cef8:	d101      	bne.n	800cefe <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800cefa:	2313      	movs	r3, #19
 800cefc:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d103      	bne.n	800cf0c <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f7fc fc99 	bl	800983c <_tx_semaphore_delete>
 800cf0a:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800cf0c:	697b      	ldr	r3, [r7, #20]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3718      	adds	r7, #24
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	53454d41 	.word	0x53454d41
 800cf1c:	24000020 	.word	0x24000020
 800cf20:	2400f034 	.word	0x2400f034
 800cf24:	2400f180 	.word	0x2400f180

0800cf28 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b086      	sub	sp, #24
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cf32:	2300      	movs	r3, #0
 800cf34:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d102      	bne.n	800cf42 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cf3c:	230c      	movs	r3, #12
 800cf3e:	617b      	str	r3, [r7, #20]
 800cf40:	e01f      	b.n	800cf82 <_txe_semaphore_get+0x5a>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a15      	ldr	r2, [pc, #84]	; (800cf9c <_txe_semaphore_get+0x74>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d002      	beq.n	800cf52 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cf4c:	230c      	movs	r3, #12
 800cf4e:	617b      	str	r3, [r7, #20]
 800cf50:	e017      	b.n	800cf82 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d014      	beq.n	800cf82 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cf58:	f3ef 8305 	mrs	r3, IPSR
 800cf5c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800cf5e:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cf60:	4b0f      	ldr	r3, [pc, #60]	; (800cfa0 <_txe_semaphore_get+0x78>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4313      	orrs	r3, r2
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d002      	beq.n	800cf70 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800cf6a:	2304      	movs	r3, #4
 800cf6c:	617b      	str	r3, [r7, #20]
 800cf6e:	e008      	b.n	800cf82 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 800cf70:	4b0c      	ldr	r3, [pc, #48]	; (800cfa4 <_txe_semaphore_get+0x7c>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	4a0b      	ldr	r2, [pc, #44]	; (800cfa8 <_txe_semaphore_get+0x80>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d101      	bne.n	800cf82 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 800cf7e:	2304      	movs	r3, #4
 800cf80:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d104      	bne.n	800cf92 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f7fc fce0 	bl	8009950 <_tx_semaphore_get>
 800cf90:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800cf92:	697b      	ldr	r3, [r7, #20]
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3718      	adds	r7, #24
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	53454d41 	.word	0x53454d41
 800cfa0:	24000020 	.word	0x24000020
 800cfa4:	2400f034 	.word	0x2400f034
 800cfa8:	2400f180 	.word	0x2400f180

0800cfac <_txe_semaphore_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_info_get(TX_SEMAPHORE *semaphore_ptr, CHAR **name, ULONG *current_value, 
                    TX_THREAD **first_suspended, ULONG *suspended_count, 
                    TX_SEMAPHORE **next_semaphore)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b088      	sub	sp, #32
 800cfb0:	af02      	add	r7, sp, #8
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	607a      	str	r2, [r7, #4]
 800cfb8:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d102      	bne.n	800cfc6 <_txe_semaphore_info_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cfc0:	230c      	movs	r3, #12
 800cfc2:	617b      	str	r3, [r7, #20]
 800cfc4:	e012      	b.n	800cfec <_txe_semaphore_info_get+0x40>
    }
    
    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a0b      	ldr	r2, [pc, #44]	; (800cff8 <_txe_semaphore_info_get+0x4c>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d002      	beq.n	800cfd6 <_txe_semaphore_info_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800cfd0:	230c      	movs	r3, #12
 800cfd2:	617b      	str	r3, [r7, #20]
 800cfd4:	e00a      	b.n	800cfec <_txe_semaphore_info_get+0x40>
    }
    else
    {

        /* Otherwise, call the actual semaphore information get service.  */
        status =  _tx_semaphore_info_get(semaphore_ptr, name, current_value, first_suspended, 
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd8:	9301      	str	r3, [sp, #4]
 800cfda:	6a3b      	ldr	r3, [r7, #32]
 800cfdc:	9300      	str	r3, [sp, #0]
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	68b9      	ldr	r1, [r7, #8]
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f7fc fd43 	bl	8009a70 <_tx_semaphore_info_get>
 800cfea:	6178      	str	r0, [r7, #20]
                                                                suspended_count, next_semaphore);
    }

    /* Return completion status.  */
    return(status);
 800cfec:	697b      	ldr	r3, [r7, #20]
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3718      	adds	r7, #24
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	53454d41 	.word	0x53454d41

0800cffc <_txe_semaphore_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_prioritize(TX_SEMAPHORE *semaphore_ptr)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d102      	bne.n	800d010 <_txe_semaphore_prioritize+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d00a:	230c      	movs	r3, #12
 800d00c:	60fb      	str	r3, [r7, #12]
 800d00e:	e00b      	b.n	800d028 <_txe_semaphore_prioritize+0x2c>
    }
    
    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a07      	ldr	r2, [pc, #28]	; (800d034 <_txe_semaphore_prioritize+0x38>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d002      	beq.n	800d020 <_txe_semaphore_prioritize+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d01a:	230c      	movs	r3, #12
 800d01c:	60fb      	str	r3, [r7, #12]
 800d01e:	e003      	b.n	800d028 <_txe_semaphore_prioritize+0x2c>
    }
    else
    {

        /* Call actual semaphore prioritize function.  */
        status =  _tx_semaphore_prioritize(semaphore_ptr);
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f7fc fd63 	bl	8009aec <_tx_semaphore_prioritize>
 800d026:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d028:	68fb      	ldr	r3, [r7, #12]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	53454d41 	.word	0x53454d41

0800d038 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d102      	bne.n	800d04c <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d046:	230c      	movs	r3, #12
 800d048:	60fb      	str	r3, [r7, #12]
 800d04a:	e00b      	b.n	800d064 <_txe_semaphore_put+0x2c>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a07      	ldr	r2, [pc, #28]	; (800d070 <_txe_semaphore_put+0x38>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d002      	beq.n	800d05c <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d056:	230c      	movs	r3, #12
 800d058:	60fb      	str	r3, [r7, #12]
 800d05a:	e003      	b.n	800d064 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f7fc fdf3 	bl	8009c48 <_tx_semaphore_put>
 800d062:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d064:	68fb      	ldr	r3, [r7, #12]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	53454d41 	.word	0x53454d41

0800d074 <_txe_semaphore_put_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put_notify(TX_SEMAPHORE *semaphore_ptr, VOID (*semaphore_put_notify)(TX_SEMAPHORE *notify_semaphore_ptr))
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d102      	bne.n	800d08a <_txe_semaphore_put_notify+0x16>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d084:	230c      	movs	r3, #12
 800d086:	60fb      	str	r3, [r7, #12]
 800d088:	e00c      	b.n	800d0a4 <_txe_semaphore_put_notify+0x30>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4a08      	ldr	r2, [pc, #32]	; (800d0b0 <_txe_semaphore_put_notify+0x3c>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d002      	beq.n	800d09a <_txe_semaphore_put_notify+0x26>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800d094:	230c      	movs	r3, #12
 800d096:	60fb      	str	r3, [r7, #12]
 800d098:	e004      	b.n	800d0a4 <_txe_semaphore_put_notify+0x30>
    }
    else
    {

        /* Call actual semaphore put notify function.  */
        status =  _tx_semaphore_put_notify(semaphore_ptr, semaphore_put_notify);
 800d09a:	6839      	ldr	r1, [r7, #0]
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f7fc fe3d 	bl	8009d1c <_tx_semaphore_put_notify>
 800d0a2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	53454d41 	.word	0x53454d41

0800d0b4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b098      	sub	sp, #96	; 0x60
 800d0b8:	af06      	add	r7, sp, #24
 800d0ba:	60f8      	str	r0, [r7, #12]
 800d0bc:	60b9      	str	r1, [r7, #8]
 800d0be:	607a      	str	r2, [r7, #4]
 800d0c0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d102      	bne.n	800d0d2 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d0cc:	230e      	movs	r3, #14
 800d0ce:	647b      	str	r3, [r7, #68]	; 0x44
 800d0d0:	e0b7      	b.n	800d242 <_txe_thread_create+0x18e>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800d0d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d0d4:	2be8      	cmp	r3, #232	; 0xe8
 800d0d6:	d002      	beq.n	800d0de <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d0d8:	230e      	movs	r3, #14
 800d0da:	647b      	str	r3, [r7, #68]	; 0x44
 800d0dc:	e0b1      	b.n	800d242 <_txe_thread_create+0x18e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d0de:	f3ef 8310 	mrs	r3, PRIMASK
 800d0e2:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d0e4:	b672      	cpsid	i
    return(primask_value);
 800d0e6:	6a3b      	ldr	r3, [r7, #32]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d0e8:	637b      	str	r3, [r7, #52]	; 0x34

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d0ea:	4b63      	ldr	r3, [pc, #396]	; (800d278 <_txe_thread_create+0x1c4>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	4a61      	ldr	r2, [pc, #388]	; (800d278 <_txe_thread_create+0x1c4>)
 800d0f2:	6013      	str	r3, [r2, #0]
 800d0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fa:	f383 8810 	msr	PRIMASK, r3
}
 800d0fe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800d100:	2300      	movs	r3, #0
 800d102:	643b      	str	r3, [r7, #64]	; 0x40
        next_thread =  _tx_thread_created_ptr;
 800d104:	4b5d      	ldr	r3, [pc, #372]	; (800d27c <_txe_thread_create+0x1c8>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800d10a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d10c:	633b      	str	r3, [r7, #48]	; 0x30
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800d10e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d110:	3b01      	subs	r3, #1
 800d112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d114:	4413      	add	r3, r2
 800d116:	633b      	str	r3, [r7, #48]	; 0x30
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800d118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11a:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800d11c:	2300      	movs	r3, #0
 800d11e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d120:	e02b      	b.n	800d17a <_txe_thread_create+0xc6>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800d122:	68fa      	ldr	r2, [r7, #12]
 800d124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d126:	429a      	cmp	r2, r3
 800d128:	d101      	bne.n	800d12e <_txe_thread_create+0x7a>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800d12a:	2301      	movs	r3, #1
 800d12c:	643b      	str	r3, [r7, #64]	; 0x40
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800d12e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d130:	2b01      	cmp	r3, #1
 800d132:	d028      	beq.n	800d186 <_txe_thread_create+0xd2>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800d134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d308      	bcc.n	800d150 <_txe_thread_create+0x9c>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800d13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d140:	691b      	ldr	r3, [r3, #16]
 800d142:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d144:	429a      	cmp	r2, r3
 800d146:	d203      	bcs.n	800d150 <_txe_thread_create+0x9c>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800d148:	2300      	movs	r3, #0
 800d14a:	653b      	str	r3, [r7, #80]	; 0x50
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800d14c:	2301      	movs	r3, #1
 800d14e:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800d150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d152:	68db      	ldr	r3, [r3, #12]
 800d154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d156:	429a      	cmp	r2, r3
 800d158:	d308      	bcc.n	800d16c <_txe_thread_create+0xb8>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800d15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d160:	429a      	cmp	r2, r3
 800d162:	d203      	bcs.n	800d16c <_txe_thread_create+0xb8>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800d164:	2300      	movs	r3, #0
 800d166:	653b      	str	r3, [r7, #80]	; 0x50
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800d168:	2301      	movs	r3, #1
 800d16a:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d172:	63bb      	str	r3, [r7, #56]	; 0x38
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800d174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d176:	3301      	adds	r3, #1
 800d178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d17a:	4b41      	ldr	r3, [pc, #260]	; (800d280 <_txe_thread_create+0x1cc>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d180:	429a      	cmp	r2, r3
 800d182:	d3ce      	bcc.n	800d122 <_txe_thread_create+0x6e>
 800d184:	e000      	b.n	800d188 <_txe_thread_create+0xd4>
                break;
 800d186:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d188:	f3ef 8310 	mrs	r3, PRIMASK
 800d18c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d18e:	b672      	cpsid	i
    return(primask_value);
 800d190:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d192:	637b      	str	r3, [r7, #52]	; 0x34

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d194:	4b38      	ldr	r3, [pc, #224]	; (800d278 <_txe_thread_create+0x1c4>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	3b01      	subs	r3, #1
 800d19a:	4a37      	ldr	r2, [pc, #220]	; (800d278 <_txe_thread_create+0x1c4>)
 800d19c:	6013      	str	r3, [r2, #0]
 800d19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1a0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	f383 8810 	msr	PRIMASK, r3
}
 800d1a8:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d1aa:	f7fd fb4d 	bl	800a848 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800d1ae:	68fa      	ldr	r2, [r7, #12]
 800d1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d102      	bne.n	800d1bc <_txe_thread_create+0x108>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800d1b6:	230e      	movs	r3, #14
 800d1b8:	647b      	str	r3, [r7, #68]	; 0x44
 800d1ba:	e042      	b.n	800d242 <_txe_thread_create+0x18e>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800d1bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d102      	bne.n	800d1c8 <_txe_thread_create+0x114>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800d1c2:	2303      	movs	r3, #3
 800d1c4:	647b      	str	r3, [r7, #68]	; 0x44
 800d1c6:	e03c      	b.n	800d242 <_txe_thread_create+0x18e>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d102      	bne.n	800d1d4 <_txe_thread_create+0x120>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800d1ce:	2303      	movs	r3, #3
 800d1d0:	647b      	str	r3, [r7, #68]	; 0x44
 800d1d2:	e036      	b.n	800d242 <_txe_thread_create+0x18e>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800d1d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1d6:	2bc7      	cmp	r3, #199	; 0xc7
 800d1d8:	d802      	bhi.n	800d1e0 <_txe_thread_create+0x12c>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800d1da:	2305      	movs	r3, #5
 800d1dc:	647b      	str	r3, [r7, #68]	; 0x44
 800d1de:	e030      	b.n	800d242 <_txe_thread_create+0x18e>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800d1e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1e2:	2b1f      	cmp	r3, #31
 800d1e4:	d902      	bls.n	800d1ec <_txe_thread_create+0x138>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800d1e6:	230f      	movs	r3, #15
 800d1e8:	647b      	str	r3, [r7, #68]	; 0x44
 800d1ea:	e02a      	b.n	800d242 <_txe_thread_create+0x18e>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800d1ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d1ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d902      	bls.n	800d1fa <_txe_thread_create+0x146>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800d1f4:	2318      	movs	r3, #24
 800d1f6:	647b      	str	r3, [r7, #68]	; 0x44
 800d1f8:	e023      	b.n	800d242 <_txe_thread_create+0x18e>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800d1fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d902      	bls.n	800d206 <_txe_thread_create+0x152>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800d200:	2310      	movs	r3, #16
 800d202:	647b      	str	r3, [r7, #68]	; 0x44
 800d204:	e01d      	b.n	800d242 <_txe_thread_create+0x18e>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800d206:	4b1f      	ldr	r3, [pc, #124]	; (800d284 <_txe_thread_create+0x1d0>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800d20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20e:	4a1e      	ldr	r2, [pc, #120]	; (800d288 <_txe_thread_create+0x1d4>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d101      	bne.n	800d218 <_txe_thread_create+0x164>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d214:	2313      	movs	r3, #19
 800d216:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d218:	f3ef 8305 	mrs	r3, IPSR
 800d21c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d21e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d220:	4b1a      	ldr	r3, [pc, #104]	; (800d28c <_txe_thread_create+0x1d8>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4313      	orrs	r3, r2
 800d226:	2b00      	cmp	r3, #0
 800d228:	d00b      	beq.n	800d242 <_txe_thread_create+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d22a:	f3ef 8305 	mrs	r3, IPSR
 800d22e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d230:	693a      	ldr	r2, [r7, #16]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d232:	4b16      	ldr	r3, [pc, #88]	; (800d28c <_txe_thread_create+0x1d8>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	4313      	orrs	r3, r2
 800d238:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d23c:	d201      	bcs.n	800d242 <_txe_thread_create+0x18e>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800d23e:	2313      	movs	r3, #19
 800d240:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d244:	2b00      	cmp	r3, #0
 800d246:	d112      	bne.n	800d26e <_txe_thread_create+0x1ba>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800d248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d24a:	9305      	str	r3, [sp, #20]
 800d24c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d24e:	9304      	str	r3, [sp, #16]
 800d250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d252:	9303      	str	r3, [sp, #12]
 800d254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d256:	9302      	str	r3, [sp, #8]
 800d258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d25a:	9301      	str	r3, [sp, #4]
 800d25c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d25e:	9300      	str	r3, [sp, #0]
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	68b9      	ldr	r1, [r7, #8]
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	f7fc fd74 	bl	8009d54 <_tx_thread_create>
 800d26c:	6478      	str	r0, [r7, #68]	; 0x44
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800d26e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800d270:	4618      	mov	r0, r3
 800d272:	3748      	adds	r7, #72	; 0x48
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	2400f0d0 	.word	0x2400f0d0
 800d27c:	2400f03c 	.word	0x2400f03c
 800d280:	2400f040 	.word	0x2400f040
 800d284:	2400f034 	.word	0x2400f034
 800d288:	2400f180 	.word	0x2400f180
 800d28c:	24000020 	.word	0x24000020

0800d290 <_txe_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_delete(TX_THREAD *thread_ptr)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d298:	f3ef 8305 	mrs	r3, IPSR
 800d29c:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800d29e:	68ba      	ldr	r2, [r7, #8]

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d2a0:	4b0f      	ldr	r3, [pc, #60]	; (800d2e0 <_txe_thread_delete+0x50>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d002      	beq.n	800d2b0 <_txe_thread_delete+0x20>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800d2aa:	2313      	movs	r3, #19
 800d2ac:	60fb      	str	r3, [r7, #12]
 800d2ae:	e011      	b.n	800d2d4 <_txe_thread_delete+0x44>
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d102      	bne.n	800d2bc <_txe_thread_delete+0x2c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d2b6:	230e      	movs	r3, #14
 800d2b8:	60fb      	str	r3, [r7, #12]
 800d2ba:	e00b      	b.n	800d2d4 <_txe_thread_delete+0x44>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a08      	ldr	r2, [pc, #32]	; (800d2e4 <_txe_thread_delete+0x54>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d002      	beq.n	800d2cc <_txe_thread_delete+0x3c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d2c6:	230e      	movs	r3, #14
 800d2c8:	60fb      	str	r3, [r7, #12]
 800d2ca:	e003      	b.n	800d2d4 <_txe_thread_delete+0x44>
    }
    else
    {

        /* Call actual thread delete function.  */
        status =  _tx_thread_delete(thread_ptr);
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f7fc fe27 	bl	8009f20 <_tx_thread_delete>
 800d2d2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3710      	adds	r7, #16
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	24000020 	.word	0x24000020
 800d2e4:	54485244 	.word	0x54485244

0800d2e8 <_txe_thread_entry_exit_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_entry_exit_notify(TX_THREAD *thread_ptr, VOID (*thread_entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type))
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d102      	bne.n	800d2fe <_txe_thread_entry_exit_notify+0x16>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d2f8:	230e      	movs	r3, #14
 800d2fa:	60fb      	str	r3, [r7, #12]
 800d2fc:	e00c      	b.n	800d318 <_txe_thread_entry_exit_notify+0x30>
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a08      	ldr	r2, [pc, #32]	; (800d324 <_txe_thread_entry_exit_notify+0x3c>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d002      	beq.n	800d30e <_txe_thread_entry_exit_notify+0x26>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d308:	230e      	movs	r3, #14
 800d30a:	60fb      	str	r3, [r7, #12]
 800d30c:	e004      	b.n	800d318 <_txe_thread_entry_exit_notify+0x30>
    }
    else
    {

        /* Call actual thread entry/exit notify function.  */
        status =  _tx_thread_entry_exit_notify(thread_ptr, thread_entry_exit_notify);
 800d30e:	6839      	ldr	r1, [r7, #0]
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f7fc fe5d 	bl	8009fd0 <_tx_thread_entry_exit_notify>
 800d316:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d318:	68fb      	ldr	r3, [r7, #12]
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	54485244 	.word	0x54485244

0800d328 <_txe_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count, 
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice, 
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b08c      	sub	sp, #48	; 0x30
 800d32c:	af06      	add	r7, sp, #24
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]
 800d334:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d102      	bne.n	800d342 <_txe_thread_info_get+0x1a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d33c:	230e      	movs	r3, #14
 800d33e:	617b      	str	r3, [r7, #20]
 800d340:	e018      	b.n	800d374 <_txe_thread_info_get+0x4c>
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4a0e      	ldr	r2, [pc, #56]	; (800d380 <_txe_thread_info_get+0x58>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d002      	beq.n	800d352 <_txe_thread_info_get+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d34c:	230e      	movs	r3, #14
 800d34e:	617b      	str	r3, [r7, #20]
 800d350:	e010      	b.n	800d374 <_txe_thread_info_get+0x4c>
    }
    else
    {

        /* Call the actual thread information get service.  */
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold, 
 800d352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d354:	9304      	str	r3, [sp, #16]
 800d356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d358:	9303      	str	r3, [sp, #12]
 800d35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d35c:	9302      	str	r3, [sp, #8]
 800d35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d360:	9301      	str	r3, [sp, #4]
 800d362:	6a3b      	ldr	r3, [r7, #32]
 800d364:	9300      	str	r3, [sp, #0]
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	68b9      	ldr	r1, [r7, #8]
 800d36c:	68f8      	ldr	r0, [r7, #12]
 800d36e:	f7fc fe67 	bl	800a040 <_tx_thread_info_get>
 800d372:	6178      	str	r0, [r7, #20]
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
 800d374:	697b      	ldr	r3, [r7, #20]
}
 800d376:	4618      	mov	r0, r3
 800d378:	3718      	adds	r7, #24
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	54485244 	.word	0x54485244

0800d384 <_txe_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d102      	bne.n	800d39c <_txe_thread_preemption_change+0x18>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d396:	230e      	movs	r3, #14
 800d398:	617b      	str	r3, [r7, #20]
 800d39a:	e028      	b.n	800d3ee <_txe_thread_preemption_change+0x6a>
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	4a15      	ldr	r2, [pc, #84]	; (800d3f8 <_txe_thread_preemption_change+0x74>)
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d002      	beq.n	800d3ac <_txe_thread_preemption_change+0x28>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d3a6:	230e      	movs	r3, #14
 800d3a8:	617b      	str	r3, [r7, #20]
 800d3aa:	e020      	b.n	800d3ee <_txe_thread_preemption_change+0x6a>
    }

    /* Check for a valid old threshold pointer.  */
    else if (old_threshold == TX_NULL)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d102      	bne.n	800d3b8 <_txe_thread_preemption_change+0x34>
    {

        /* Invalid destination pointer, return appropriate error code.  */
        status =  TX_PTR_ERROR;
 800d3b2:	2303      	movs	r3, #3
 800d3b4:	617b      	str	r3, [r7, #20]
 800d3b6:	e01a      	b.n	800d3ee <_txe_thread_preemption_change+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d3b8:	f3ef 8305 	mrs	r3, IPSR
 800d3bc:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d3be:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d3c0:	4b0e      	ldr	r3, [pc, #56]	; (800d3fc <_txe_thread_preemption_change+0x78>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d002      	beq.n	800d3d0 <_txe_thread_preemption_change+0x4c>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800d3ca:	2313      	movs	r3, #19
 800d3cc:	617b      	str	r3, [r7, #20]
 800d3ce:	e00e      	b.n	800d3ee <_txe_thread_preemption_change+0x6a>
    }

    /* Determine if the preemption-threshold is valid.  */
    else if (new_threshold > thread_ptr -> tx_thread_user_priority)
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d3d6:	68ba      	ldr	r2, [r7, #8]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d902      	bls.n	800d3e2 <_txe_thread_preemption_change+0x5e>
    {

        /* Return an error status.  */
        status =  TX_THRESH_ERROR;
 800d3dc:	2318      	movs	r3, #24
 800d3de:	617b      	str	r3, [r7, #20]
 800d3e0:	e005      	b.n	800d3ee <_txe_thread_preemption_change+0x6a>
    }
    else
    {

        /* Call actual change thread preemption function.  */
        status =  _tx_thread_preemption_change(thread_ptr, new_threshold, old_threshold);
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	68b9      	ldr	r1, [r7, #8]
 800d3e6:	68f8      	ldr	r0, [r7, #12]
 800d3e8:	f7fc fec0 	bl	800a16c <_tx_thread_preemption_change>
 800d3ec:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800d3ee:	697b      	ldr	r3, [r7, #20]
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3718      	adds	r7, #24
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	54485244 	.word	0x54485244
 800d3fc:	24000020 	.word	0x24000020

0800d400 <_txe_thread_priority_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_priority_change(TX_THREAD *thread_ptr, UINT new_priority, UINT *old_priority)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d102      	bne.n	800d418 <_txe_thread_priority_change+0x18>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d412:	230e      	movs	r3, #14
 800d414:	617b      	str	r3, [r7, #20]
 800d416:	e025      	b.n	800d464 <_txe_thread_priority_change+0x64>
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	4a14      	ldr	r2, [pc, #80]	; (800d470 <_txe_thread_priority_change+0x70>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d002      	beq.n	800d428 <_txe_thread_priority_change+0x28>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d422:	230e      	movs	r3, #14
 800d424:	617b      	str	r3, [r7, #20]
 800d426:	e01d      	b.n	800d464 <_txe_thread_priority_change+0x64>
    }

    /* Check for a valid old priority pointer.  */
    else if (old_priority == TX_NULL)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d102      	bne.n	800d434 <_txe_thread_priority_change+0x34>
    {

        /* Invalid destination pointer, return appropriate error code.  */
        status =  TX_PTR_ERROR;
 800d42e:	2303      	movs	r3, #3
 800d430:	617b      	str	r3, [r7, #20]
 800d432:	e017      	b.n	800d464 <_txe_thread_priority_change+0x64>
    }

    /* Determine if the priority is legal.  */
    else if (new_priority >= ((UINT) TX_MAX_PRIORITIES))
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	2b1f      	cmp	r3, #31
 800d438:	d902      	bls.n	800d440 <_txe_thread_priority_change+0x40>
    {
      
        /* Return an error status.  */
        status =  TX_PRIORITY_ERROR;
 800d43a:	230f      	movs	r3, #15
 800d43c:	617b      	str	r3, [r7, #20]
 800d43e:	e011      	b.n	800d464 <_txe_thread_priority_change+0x64>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d440:	f3ef 8305 	mrs	r3, IPSR
 800d444:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d446:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d448:	4b0a      	ldr	r3, [pc, #40]	; (800d474 <_txe_thread_priority_change+0x74>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4313      	orrs	r3, r2
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d002      	beq.n	800d458 <_txe_thread_priority_change+0x58>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800d452:	2313      	movs	r3, #19
 800d454:	617b      	str	r3, [r7, #20]
 800d456:	e005      	b.n	800d464 <_txe_thread_priority_change+0x64>
    }
    else
    {

        /* Call actual change thread priority function.  */
        status =  _tx_thread_priority_change(thread_ptr, new_priority, old_priority);
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	68b9      	ldr	r1, [r7, #8]
 800d45c:	68f8      	ldr	r0, [r7, #12]
 800d45e:	f7fc ff19 	bl	800a294 <_tx_thread_priority_change>
 800d462:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800d464:	697b      	ldr	r3, [r7, #20]
}
 800d466:	4618      	mov	r0, r3
 800d468:	3718      	adds	r7, #24
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	54485244 	.word	0x54485244
 800d474:	24000020 	.word	0x24000020

0800d478 <_txe_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _txe_thread_relinquish(VOID)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0

TX_THREAD   *current_thread;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d47e:	4b0a      	ldr	r3, [pc, #40]	; (800d4a8 <_txe_thread_relinquish+0x30>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	607b      	str	r3, [r7, #4]

    /* Make sure a thread is executing.  */
    if (current_thread != TX_NULL)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00a      	beq.n	800d4a0 <_txe_thread_relinquish+0x28>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d48a:	f3ef 8305 	mrs	r3, IPSR
 800d48e:	603b      	str	r3, [r7, #0]
    return(ipsr_value);
 800d490:	683a      	ldr	r2, [r7, #0]
    {

        /* Now make sure the call is not from an ISR or Initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 800d492:	4b06      	ldr	r3, [pc, #24]	; (800d4ac <_txe_thread_relinquish+0x34>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	4313      	orrs	r3, r2
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d101      	bne.n	800d4a0 <_txe_thread_relinquish+0x28>
        {
        
            /* Okay to call the real relinquish function.  */
            _tx_thread_relinquish();
 800d49c:	f7fc ffb4 	bl	800a408 <_tx_thread_relinquish>
        }
    }
}
 800d4a0:	bf00      	nop
 800d4a2:	3708      	adds	r7, #8
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	2400f034 	.word	0x2400f034
 800d4ac:	24000020 	.word	0x24000020

0800d4b0 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d102      	bne.n	800d4c4 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d4be:	230e      	movs	r3, #14
 800d4c0:	60fb      	str	r3, [r7, #12]
 800d4c2:	e00b      	b.n	800d4dc <_txe_thread_resume+0x2c>
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	4a07      	ldr	r2, [pc, #28]	; (800d4e8 <_txe_thread_resume+0x38>)
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d002      	beq.n	800d4d4 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d4ce:	230e      	movs	r3, #14
 800d4d0:	60fb      	str	r3, [r7, #12]
 800d4d2:	e003      	b.n	800d4dc <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f7fc fffb 	bl	800a4d0 <_tx_thread_resume>
 800d4da:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3710      	adds	r7, #16
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	54485244 	.word	0x54485244

0800d4ec <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d102      	bne.n	800d500 <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d4fa:	230e      	movs	r3, #14
 800d4fc:	60fb      	str	r3, [r7, #12]
 800d4fe:	e00b      	b.n	800d518 <_txe_thread_suspend+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	4a07      	ldr	r2, [pc, #28]	; (800d524 <_txe_thread_suspend+0x38>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d002      	beq.n	800d510 <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d50a:	230e      	movs	r3, #14
 800d50c:	60fb      	str	r3, [r7, #12]
 800d50e:	e003      	b.n	800d518 <_txe_thread_suspend+0x2c>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7fd f92b 	bl	800a76c <_tx_thread_suspend>
 800d516:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d518:	68fb      	ldr	r3, [r7, #12]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	54485244 	.word	0x54485244

0800d528 <_txe_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_terminate(TX_THREAD *thread_ptr)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d102      	bne.n	800d53c <_txe_thread_terminate+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d536:	230e      	movs	r3, #14
 800d538:	60fb      	str	r3, [r7, #12]
 800d53a:	e017      	b.n	800d56c <_txe_thread_terminate+0x44>
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a0d      	ldr	r2, [pc, #52]	; (800d578 <_txe_thread_terminate+0x50>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d002      	beq.n	800d54c <_txe_thread_terminate+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d546:	230e      	movs	r3, #14
 800d548:	60fb      	str	r3, [r7, #12]
 800d54a:	e00f      	b.n	800d56c <_txe_thread_terminate+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d54c:	f3ef 8305 	mrs	r3, IPSR
 800d550:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800d552:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d554:	4b09      	ldr	r3, [pc, #36]	; (800d57c <_txe_thread_terminate+0x54>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4313      	orrs	r3, r2
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d002      	beq.n	800d564 <_txe_thread_terminate+0x3c>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800d55e:	2313      	movs	r3, #19
 800d560:	60fb      	str	r3, [r7, #12]
 800d562:	e003      	b.n	800d56c <_txe_thread_terminate+0x44>
    }
    else
    {

        /* Call actual thread terminate function.  */
        status =  _tx_thread_terminate(thread_ptr);
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f7fd fc47 	bl	800adf8 <_tx_thread_terminate>
 800d56a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d56c:	68fb      	ldr	r3, [r7, #12]
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3710      	adds	r7, #16
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	54485244 	.word	0x54485244
 800d57c:	24000020 	.word	0x24000020

0800d580 <_txe_thread_time_slice_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_time_slice_change(TX_THREAD *thread_ptr, ULONG new_time_slice, ULONG *old_time_slice)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b086      	sub	sp, #24
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d102      	bne.n	800d598 <_txe_thread_time_slice_change+0x18>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d592:	230e      	movs	r3, #14
 800d594:	617b      	str	r3, [r7, #20]
 800d596:	e01f      	b.n	800d5d8 <_txe_thread_time_slice_change+0x58>
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4a11      	ldr	r2, [pc, #68]	; (800d5e4 <_txe_thread_time_slice_change+0x64>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d002      	beq.n	800d5a8 <_txe_thread_time_slice_change+0x28>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d5a2:	230e      	movs	r3, #14
 800d5a4:	617b      	str	r3, [r7, #20]
 800d5a6:	e017      	b.n	800d5d8 <_txe_thread_time_slice_change+0x58>
    }

    /* Check for a valid old time-slice pointer.  */
    else if (old_time_slice == TX_NULL)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d102      	bne.n	800d5b4 <_txe_thread_time_slice_change+0x34>
    {

        /* Invalid destination pointer, return appropriate error code.  */
        status =  TX_PTR_ERROR;
 800d5ae:	2303      	movs	r3, #3
 800d5b0:	617b      	str	r3, [r7, #20]
 800d5b2:	e011      	b.n	800d5d8 <_txe_thread_time_slice_change+0x58>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d5b4:	f3ef 8305 	mrs	r3, IPSR
 800d5b8:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d5ba:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d5bc:	4b0a      	ldr	r3, [pc, #40]	; (800d5e8 <_txe_thread_time_slice_change+0x68>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4313      	orrs	r3, r2
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d002      	beq.n	800d5cc <_txe_thread_time_slice_change+0x4c>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800d5c6:	2313      	movs	r3, #19
 800d5c8:	617b      	str	r3, [r7, #20]
 800d5ca:	e005      	b.n	800d5d8 <_txe_thread_time_slice_change+0x58>
    }
    else
    {

        /* Call actual change time slice function.  */
        status =  _tx_thread_time_slice_change(thread_ptr, new_time_slice, old_time_slice);
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	68b9      	ldr	r1, [r7, #8]
 800d5d0:	68f8      	ldr	r0, [r7, #12]
 800d5d2:	f7fd fd1d 	bl	800b010 <_tx_thread_time_slice_change>
 800d5d6:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800d5d8:	697b      	ldr	r3, [r7, #20]
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3718      	adds	r7, #24
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	54485244 	.word	0x54485244
 800d5e8:	24000020 	.word	0x24000020

0800d5ec <_txe_thread_wait_abort>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_wait_abort(TX_THREAD  *thread_ptr)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d102      	bne.n	800d600 <_txe_thread_wait_abort+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d5fa:	230e      	movs	r3, #14
 800d5fc:	60fb      	str	r3, [r7, #12]
 800d5fe:	e00b      	b.n	800d618 <_txe_thread_wait_abort+0x2c>
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4a07      	ldr	r2, [pc, #28]	; (800d624 <_txe_thread_wait_abort+0x38>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d002      	beq.n	800d610 <_txe_thread_wait_abort+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d60a:	230e      	movs	r3, #14
 800d60c:	60fb      	str	r3, [r7, #12]
 800d60e:	e003      	b.n	800d618 <_txe_thread_wait_abort+0x2c>
    }
    else
    {

        /* Call actual thread wait abort function.  */
        status =  _tx_thread_wait_abort(thread_ptr);
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f7fd fd69 	bl	800b0e8 <_tx_thread_wait_abort>
 800d616:	60f8      	str	r0, [r7, #12]
    }

    /* Return status to the caller.  */
    return(status);
 800d618:	68fb      	ldr	r3, [r7, #12]
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3710      	adds	r7, #16
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	54485244 	.word	0x54485244

0800d628 <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d102      	bne.n	800d63c <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d636:	2315      	movs	r3, #21
 800d638:	60fb      	str	r3, [r7, #12]
 800d63a:	e00b      	b.n	800d654 <_txe_timer_activate+0x2c>
    }
    
    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4a07      	ldr	r2, [pc, #28]	; (800d660 <_txe_timer_activate+0x38>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d002      	beq.n	800d64c <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d646:	2315      	movs	r3, #21
 800d648:	60fb      	str	r3, [r7, #12]
 800d64a:	e003      	b.n	800d654 <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f7fd fdf9 	bl	800b244 <_tx_timer_activate>
 800d652:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d654:	68fb      	ldr	r3, [r7, #12]
}
 800d656:	4618      	mov	r0, r3
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	4154494d 	.word	0x4154494d

0800d664 <_txe_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b086      	sub	sp, #24
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d102      	bne.n	800d67c <_txe_timer_change+0x18>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d676:	2315      	movs	r3, #21
 800d678:	617b      	str	r3, [r7, #20]
 800d67a:	e020      	b.n	800d6be <_txe_timer_change+0x5a>
    }
    
    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4a11      	ldr	r2, [pc, #68]	; (800d6c8 <_txe_timer_change+0x64>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d002      	beq.n	800d68c <_txe_timer_change+0x28>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d686:	2315      	movs	r3, #21
 800d688:	617b      	str	r3, [r7, #20]
 800d68a:	e018      	b.n	800d6be <_txe_timer_change+0x5a>
    }

    /* Check for an illegal initial tick value.  */
    else if (initial_ticks == ((ULONG) 0))
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d102      	bne.n	800d698 <_txe_timer_change+0x34>
    {

        /* Invalid initial tick value, return appropriate error code.  */
        status =  TX_TICK_ERROR;
 800d692:	2316      	movs	r3, #22
 800d694:	617b      	str	r3, [r7, #20]
 800d696:	e012      	b.n	800d6be <_txe_timer_change+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d698:	f3ef 8305 	mrs	r3, IPSR
 800d69c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d69e:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800d6a0:	4b0a      	ldr	r3, [pc, #40]	; (800d6cc <_txe_timer_change+0x68>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4313      	orrs	r3, r2
 800d6a6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d6aa:	d302      	bcc.n	800d6b2 <_txe_timer_change+0x4e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800d6ac:	2313      	movs	r3, #19
 800d6ae:	617b      	str	r3, [r7, #20]
 800d6b0:	e005      	b.n	800d6be <_txe_timer_change+0x5a>
    }
    else
    {

        /* Call actual application timer function.  */
        status =  _tx_timer_change(timer_ptr, initial_ticks, reschedule_ticks);
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	68b9      	ldr	r1, [r7, #8]
 800d6b6:	68f8      	ldr	r0, [r7, #12]
 800d6b8:	f7fd fdee 	bl	800b298 <_tx_timer_change>
 800d6bc:	6178      	str	r0, [r7, #20]
    }
    
    /* Return completion status.  */
    return(status);
 800d6be:	697b      	ldr	r3, [r7, #20]
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3718      	adds	r7, #24
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	4154494d 	.word	0x4154494d
 800d6cc:	24000020 	.word	0x24000020

0800d6d0 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b094      	sub	sp, #80	; 0x50
 800d6d4:	af04      	add	r7, sp, #16
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
 800d6dc:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d102      	bne.n	800d6ee <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d6e8:	2315      	movs	r3, #21
 800d6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6ec:	e055      	b.n	800d79a <_txe_timer_create+0xca>
    }
    
    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 800d6ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6f0:	2b34      	cmp	r3, #52	; 0x34
 800d6f2:	d002      	beq.n	800d6fa <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d6f4:	2315      	movs	r3, #21
 800d6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6f8:	e04f      	b.n	800d79a <_txe_timer_create+0xca>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d6fa:	f3ef 8310 	mrs	r3, PRIMASK
 800d6fe:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d700:	b672      	cpsid	i
    return(primask_value);
 800d702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d704:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d706:	4b40      	ldr	r3, [pc, #256]	; (800d808 <_txe_timer_create+0x138>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	3301      	adds	r3, #1
 800d70c:	4a3e      	ldr	r2, [pc, #248]	; (800d808 <_txe_timer_create+0x138>)
 800d70e:	6013      	str	r3, [r2, #0]
 800d710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d712:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d716:	f383 8810 	msr	PRIMASK, r3
}
 800d71a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 800d71c:	4b3b      	ldr	r3, [pc, #236]	; (800d80c <_txe_timer_create+0x13c>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800d722:	2300      	movs	r3, #0
 800d724:	63bb      	str	r3, [r7, #56]	; 0x38
 800d726:	e009      	b.n	800d73c <_txe_timer_create+0x6c>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d00b      	beq.n	800d748 <_txe_timer_create+0x78>
            }
            else
            {
        
                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 800d730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d734:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800d736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d738:	3301      	adds	r3, #1
 800d73a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d73c:	4b34      	ldr	r3, [pc, #208]	; (800d810 <_txe_timer_create+0x140>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d742:	429a      	cmp	r2, r3
 800d744:	d3f0      	bcc.n	800d728 <_txe_timer_create+0x58>
 800d746:	e000      	b.n	800d74a <_txe_timer_create+0x7a>
                break;
 800d748:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800d74a:	f3ef 8310 	mrs	r3, PRIMASK
 800d74e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800d750:	b672      	cpsid	i
    return(primask_value);
 800d752:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d754:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d756:	4b2c      	ldr	r3, [pc, #176]	; (800d808 <_txe_timer_create+0x138>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	3b01      	subs	r3, #1
 800d75c:	4a2a      	ldr	r2, [pc, #168]	; (800d808 <_txe_timer_create+0x138>)
 800d75e:	6013      	str	r3, [r2, #0]
 800d760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d762:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	f383 8810 	msr	PRIMASK, r3
}
 800d76a:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d76c:	f7fd f86c 	bl	800a848 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d774:	429a      	cmp	r2, r3
 800d776:	d102      	bne.n	800d77e <_txe_timer_create+0xae>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 800d778:	2315      	movs	r3, #21
 800d77a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d77c:	e00d      	b.n	800d79a <_txe_timer_create+0xca>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 800d77e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d780:	2b00      	cmp	r3, #0
 800d782:	d102      	bne.n	800d78a <_txe_timer_create+0xba>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 800d784:	2316      	movs	r3, #22
 800d786:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d788:	e007      	b.n	800d79a <_txe_timer_create+0xca>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 800d78a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d004      	beq.n	800d79a <_txe_timer_create+0xca>
            {
    
                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 800d790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d792:	2b00      	cmp	r3, #0
 800d794:	d001      	beq.n	800d79a <_txe_timer_create+0xca>
                {
        
                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 800d796:	2317      	movs	r3, #23
 800d798:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d11d      	bne.n	800d7dc <_txe_timer_create+0x10c>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800d7a0:	4b1c      	ldr	r3, [pc, #112]	; (800d814 <_txe_timer_create+0x144>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a8:	4a1b      	ldr	r2, [pc, #108]	; (800d818 <_txe_timer_create+0x148>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d101      	bne.n	800d7b2 <_txe_timer_create+0xe2>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800d7ae:	2313      	movs	r3, #19
 800d7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d7b2:	f3ef 8305 	mrs	r3, IPSR
 800d7b6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d7b8:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d7ba:	4b18      	ldr	r3, [pc, #96]	; (800d81c <_txe_timer_create+0x14c>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d00b      	beq.n	800d7dc <_txe_timer_create+0x10c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d7c4:	f3ef 8305 	mrs	r3, IPSR
 800d7c8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d7ca:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d7cc:	4b13      	ldr	r3, [pc, #76]	; (800d81c <_txe_timer_create+0x14c>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4313      	orrs	r3, r2
 800d7d2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800d7d6:	d201      	bcs.n	800d7dc <_txe_timer_create+0x10c>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d7d8:	2313      	movs	r3, #19
 800d7da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d7dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d10c      	bne.n	800d7fc <_txe_timer_create+0x12c>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 800d7e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7e4:	9302      	str	r3, [sp, #8]
 800d7e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7e8:	9301      	str	r3, [sp, #4]
 800d7ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7ec:	9300      	str	r3, [sp, #0]
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	68b9      	ldr	r1, [r7, #8]
 800d7f4:	68f8      	ldr	r0, [r7, #12]
 800d7f6:	f7fd fd73 	bl	800b2e0 <_tx_timer_create>
 800d7fa:	63f8      	str	r0, [r7, #60]	; 0x3c
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 800d7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3740      	adds	r7, #64	; 0x40
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	2400f0d0 	.word	0x2400f0d0
 800d80c:	2400f174 	.word	0x2400f174
 800d810:	2400f178 	.word	0x2400f178
 800d814:	2400f034 	.word	0x2400f034
 800d818:	2400f180 	.word	0x2400f180
 800d81c:	24000020 	.word	0x24000020

0800d820 <_txe_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b084      	sub	sp, #16
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d102      	bne.n	800d834 <_txe_timer_deactivate+0x14>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d82e:	2315      	movs	r3, #21
 800d830:	60fb      	str	r3, [r7, #12]
 800d832:	e00b      	b.n	800d84c <_txe_timer_deactivate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a07      	ldr	r2, [pc, #28]	; (800d858 <_txe_timer_deactivate+0x38>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d002      	beq.n	800d844 <_txe_timer_deactivate+0x24>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d83e:	2315      	movs	r3, #21
 800d840:	60fb      	str	r3, [r7, #12]
 800d842:	e003      	b.n	800d84c <_txe_timer_deactivate+0x2c>
    }
    else
    {
    
        /* Call actual application timer deactivate function.  */
        status =  _tx_timer_deactivate(timer_ptr);
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f7fd fdad 	bl	800b3a4 <_tx_timer_deactivate>
 800d84a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800d84c:	68fb      	ldr	r3, [r7, #12]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3710      	adds	r7, #16
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	4154494d 	.word	0x4154494d

0800d85c <_txe_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_delete(TX_TIMER *timer_ptr)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b086      	sub	sp, #24
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d864:	2300      	movs	r3, #0
 800d866:	617b      	str	r3, [r7, #20]
#endif
    
    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d102      	bne.n	800d874 <_txe_timer_delete+0x18>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d86e:	2315      	movs	r3, #21
 800d870:	617b      	str	r3, [r7, #20]
 800d872:	e023      	b.n	800d8bc <_txe_timer_delete+0x60>
    }
    
    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a13      	ldr	r2, [pc, #76]	; (800d8c8 <_txe_timer_delete+0x6c>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d002      	beq.n	800d884 <_txe_timer_delete+0x28>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d87e:	2315      	movs	r3, #21
 800d880:	617b      	str	r3, [r7, #20]
 800d882:	e01b      	b.n	800d8bc <_txe_timer_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d884:	f3ef 8305 	mrs	r3, IPSR
 800d888:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800d88a:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d88c:	4b0f      	ldr	r3, [pc, #60]	; (800d8cc <_txe_timer_delete+0x70>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4313      	orrs	r3, r2
 800d892:	2b00      	cmp	r3, #0
 800d894:	d002      	beq.n	800d89c <_txe_timer_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800d896:	2313      	movs	r3, #19
 800d898:	617b      	str	r3, [r7, #20]
 800d89a:	e00f      	b.n	800d8bc <_txe_timer_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800d89c:	4b0c      	ldr	r3, [pc, #48]	; (800d8d0 <_txe_timer_delete+0x74>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	4a0b      	ldr	r2, [pc, #44]	; (800d8d4 <_txe_timer_delete+0x78>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d101      	bne.n	800d8ae <_txe_timer_delete+0x52>
        {
        
            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800d8aa:	2313      	movs	r3, #19
 800d8ac:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d103      	bne.n	800d8bc <_txe_timer_delete+0x60>
        {
#endif

            /* Call actual application timer delete function.  */
            status =  _tx_timer_delete(timer_ptr);
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f7fd fe1d 	bl	800b4f4 <_tx_timer_delete>
 800d8ba:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 800d8bc:	697b      	ldr	r3, [r7, #20]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3718      	adds	r7, #24
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	4154494d 	.word	0x4154494d
 800d8cc:	24000020 	.word	0x24000020
 800d8d0:	2400f034 	.word	0x2400f034
 800d8d4:	2400f180 	.word	0x2400f180

0800d8d8 <_txe_timer_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_info_get(TX_TIMER *timer_ptr, CHAR **name, UINT *active, ULONG *remaining_ticks, 
                ULONG *reschedule_ticks, TX_TIMER **next_timer)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b088      	sub	sp, #32
 800d8dc:	af02      	add	r7, sp, #8
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	607a      	str	r2, [r7, #4]
 800d8e4:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d102      	bne.n	800d8f2 <_txe_timer_info_get+0x1a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d8ec:	2315      	movs	r3, #21
 800d8ee:	617b      	str	r3, [r7, #20]
 800d8f0:	e012      	b.n	800d918 <_txe_timer_info_get+0x40>
    }
    
    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4a0b      	ldr	r2, [pc, #44]	; (800d924 <_txe_timer_info_get+0x4c>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d002      	beq.n	800d902 <_txe_timer_info_get+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800d8fc:	2315      	movs	r3, #21
 800d8fe:	617b      	str	r3, [r7, #20]
 800d900:	e00a      	b.n	800d918 <_txe_timer_info_get+0x40>
    }
    else
    {

        /* Otherwise, call the actual timer information get service.  */
        status =  _tx_timer_info_get(timer_ptr, name, active, remaining_ticks, reschedule_ticks, next_timer);
 800d902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d904:	9301      	str	r3, [sp, #4]
 800d906:	6a3b      	ldr	r3, [r7, #32]
 800d908:	9300      	str	r3, [sp, #0]
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	68b9      	ldr	r1, [r7, #8]
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f7fd fe55 	bl	800b5c0 <_tx_timer_info_get>
 800d916:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 800d918:	697b      	ldr	r3, [r7, #20]
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3718      	adds	r7, #24
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	4154494d 	.word	0x4154494d

0800d928 <_txm_power_of_two_block_size>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
ULONG  _txm_power_of_two_block_size(ULONG size)
{
 800d928:	b480      	push	{r7}
 800d92a:	b083      	sub	sp, #12
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
    /* Check for 0 size. */
    if(size == 0)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d101      	bne.n	800d93a <_txm_power_of_two_block_size+0x12>
        return 0;
 800d936:	2300      	movs	r3, #0
 800d938:	e024      	b.n	800d984 <_txm_power_of_two_block_size+0x5c>
    
    /* Minimum MPU block size is 32. */
    if(size <= 32)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2b20      	cmp	r3, #32
 800d93e:	d801      	bhi.n	800d944 <_txm_power_of_two_block_size+0x1c>
        return 32;
 800d940:	2320      	movs	r3, #32
 800d942:	e01f      	b.n	800d984 <_txm_power_of_two_block_size+0x5c>
    
    /* Bit twiddling trick to round to next high power of 2
       (if original size is power of 2, it will return original size. Perfect!) */
    size--;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	3b01      	subs	r3, #1
 800d948:	607b      	str	r3, [r7, #4]
    size |= size >> 1;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	085b      	lsrs	r3, r3, #1
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	4313      	orrs	r3, r2
 800d952:	607b      	str	r3, [r7, #4]
    size |= size >> 2;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	089b      	lsrs	r3, r3, #2
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	4313      	orrs	r3, r2
 800d95c:	607b      	str	r3, [r7, #4]
    size |= size >> 4;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	091b      	lsrs	r3, r3, #4
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	4313      	orrs	r3, r2
 800d966:	607b      	str	r3, [r7, #4]
    size |= size >> 8;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	0a1b      	lsrs	r3, r3, #8
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	4313      	orrs	r3, r2
 800d970:	607b      	str	r3, [r7, #4]
    size |= size >> 16;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	0c1b      	lsrs	r3, r3, #16
 800d976:	687a      	ldr	r2, [r7, #4]
 800d978:	4313      	orrs	r3, r2
 800d97a:	607b      	str	r3, [r7, #4]
    size++;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	3301      	adds	r3, #1
 800d980:	607b      	str	r3, [r7, #4]
    
    /* Return a power of 2 size at or above the input size.  */
    return(size);
 800d982:	687b      	ldr	r3, [r7, #4]
}
 800d984:	4618      	mov	r0, r3
 800d986:	370c      	adds	r7, #12
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <_txm_module_manager_alignment_adjust>:
VOID  _txm_module_manager_alignment_adjust(TXM_MODULE_PREAMBLE *module_preamble,
                                           ULONG *code_size,
                                           ULONG *code_alignment,
                                           ULONG *data_size,
                                           ULONG *data_alignment)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b08a      	sub	sp, #40	; 0x28
 800d994:	af00      	add	r7, sp, #0
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	607a      	str	r2, [r7, #4]
 800d99c:	603b      	str	r3, [r7, #0]
ULONG   local_data_alignment;
ULONG   code_size_accum;
ULONG   data_size_accum;

    /* Copy the input parameters into local variables for ease of use.  */
    local_code_size =       *code_size;
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	627b      	str	r3, [r7, #36]	; 0x24
    local_code_alignment =  *code_alignment;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	623b      	str	r3, [r7, #32]
    local_data_size =       *data_size;
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	61fb      	str	r3, [r7, #28]
    local_data_alignment =  *data_alignment;
 800d9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	61bb      	str	r3, [r7, #24]
       will be distributed:
       1. 1/4 of the largest power of two that is greater than or equal to code size.
       2. 1/4 of the largest power of two that is greater than or equal to code size.
       3. Largest power of 2 that fits in the remaining space.
       4. Smallest power of 2 that exceeds the remaining space, minimum 32.  */
    local_code_alignment =  _txm_power_of_two_block_size(local_code_size) >> 2;
 800d9b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9b8:	f7ff ffb6 	bl	800d928 <_txm_power_of_two_block_size>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	089b      	lsrs	r3, r3, #2
 800d9c0:	623b      	str	r3, [r7, #32]
    code_size_accum =  local_code_alignment + local_code_alignment;
 800d9c2:	6a3b      	ldr	r3, [r7, #32]
 800d9c4:	005b      	lsls	r3, r3, #1
 800d9c6:	617b      	str	r3, [r7, #20]
    code_size_accum =  code_size_accum + (_txm_power_of_two_block_size(local_code_size - code_size_accum) >> 1);
 800d9c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	1ad3      	subs	r3, r2, r3
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7ff ffaa 	bl	800d928 <_txm_power_of_two_block_size>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	085b      	lsrs	r3, r3, #1
 800d9d8:	697a      	ldr	r2, [r7, #20]
 800d9da:	4413      	add	r3, r2
 800d9dc:	617b      	str	r3, [r7, #20]
    code_size_accum =  code_size_accum + _txm_power_of_two_block_size(local_code_size - code_size_accum);
 800d9de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	1ad3      	subs	r3, r2, r3
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7ff ff9f 	bl	800d928 <_txm_power_of_two_block_size>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	4413      	add	r3, r2
 800d9f0:	617b      	str	r3, [r7, #20]
    local_code_size =  code_size_accum;
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	627b      	str	r3, [r7, #36]	; 0x24
       will be distributed:
       1. 1/4 of the largest power of two that is greater than or equal to data size.
       2. 1/4 of the largest power of two that is greater than or equal to data size.
       3. Largest power of 2 that fits in the remaining space.
       4. Smallest power of 2 that exceeds the remaining space, minimum 32.  */
    local_data_alignment =  _txm_power_of_two_block_size(local_data_size) >> 2;
 800d9f6:	69f8      	ldr	r0, [r7, #28]
 800d9f8:	f7ff ff96 	bl	800d928 <_txm_power_of_two_block_size>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	089b      	lsrs	r3, r3, #2
 800da00:	61bb      	str	r3, [r7, #24]
    data_size_accum =  local_data_alignment + local_data_alignment;
 800da02:	69bb      	ldr	r3, [r7, #24]
 800da04:	005b      	lsls	r3, r3, #1
 800da06:	613b      	str	r3, [r7, #16]
    data_size_accum =  data_size_accum + (_txm_power_of_two_block_size(local_data_size - data_size_accum) >> 1);
 800da08:	69fa      	ldr	r2, [r7, #28]
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	4618      	mov	r0, r3
 800da10:	f7ff ff8a 	bl	800d928 <_txm_power_of_two_block_size>
 800da14:	4603      	mov	r3, r0
 800da16:	085b      	lsrs	r3, r3, #1
 800da18:	693a      	ldr	r2, [r7, #16]
 800da1a:	4413      	add	r3, r2
 800da1c:	613b      	str	r3, [r7, #16]
    data_size_accum =  data_size_accum + _txm_power_of_two_block_size(local_data_size - data_size_accum);
 800da1e:	69fa      	ldr	r2, [r7, #28]
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	1ad3      	subs	r3, r2, r3
 800da24:	4618      	mov	r0, r3
 800da26:	f7ff ff7f 	bl	800d928 <_txm_power_of_two_block_size>
 800da2a:	4602      	mov	r2, r0
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	4413      	add	r3, r2
 800da30:	613b      	str	r3, [r7, #16]
    local_data_size =  data_size_accum;
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	61fb      	str	r3, [r7, #28]
    
    /* Return all the information to the caller.  */
    *code_size =        local_code_size;
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da3a:	601a      	str	r2, [r3, #0]
    *code_alignment =   local_code_alignment;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6a3a      	ldr	r2, [r7, #32]
 800da40:	601a      	str	r2, [r3, #0]
    *data_size =        local_data_size;
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	69fa      	ldr	r2, [r7, #28]
 800da46:	601a      	str	r2, [r3, #0]
    *data_alignment =   local_data_alignment;
 800da48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4a:	69ba      	ldr	r2, [r7, #24]
 800da4c:	601a      	str	r2, [r3, #0]
    *code_alignment =   local_code_alignment;
    *data_size =        local_data_size;
    *data_alignment =   local_data_alignment;

#endif
}
 800da4e:	bf00      	nop
 800da50:	3728      	adds	r7, #40	; 0x28
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <_txm_module_manager_application_request>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_application_request(ULONG request_id, ALIGN_TYPE param_1, ALIGN_TYPE param_2, ALIGN_TYPE param_3)
{
 800da56:	b480      	push	{r7}
 800da58:	b085      	sub	sp, #20
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	60f8      	str	r0, [r7, #12]
 800da5e:	60b9      	str	r1, [r7, #8]
 800da60:	607a      	str	r2, [r7, #4]
 800da62:	603b      	str	r3, [r7, #0]

    /* By default, simply return the status of not available.  */
    return(TX_NOT_AVAILABLE); 
 800da64:	231d      	movs	r3, #29
}
 800da66:	4618      	mov	r0, r3
 800da68:	3714      	adds	r7, #20
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
	...

0800da74 <_txm_module_manager_callback_request>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_callback_request(TX_QUEUE *module_callback_queue, TXM_MODULE_CALLBACK_MESSAGE  *callback_message)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b08a      	sub	sp, #40	; 0x28
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800da7e:	f3ef 8310 	mrs	r3, PRIMASK
 800da82:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800da84:	b672      	cpsid	i
    return(primask_value);
 800da86:	693b      	ldr	r3, [r7, #16]
UINT                            found;
UINT                            status;


    /* Lockout interrupts.  */
    TX_DISABLE
 800da88:	61bb      	str	r3, [r7, #24]
    
    /* Determine if the queue is valid.  */
    if ((module_callback_queue) && (module_callback_queue -> tx_queue_id == TX_QUEUE_ID))
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	f000 8087 	beq.w	800dba0 <_txm_module_manager_callback_request+0x12c>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	4a4a      	ldr	r2, [pc, #296]	; (800dbc0 <_txm_module_manager_callback_request+0x14c>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	f040 8081 	bne.w	800dba0 <_txm_module_manager_callback_request+0x12c>
    {

        /* Yes, the queue is valid.  */
        
        /* Pickup the current callback request in the queue.  */
        queued_message =  (TXM_MODULE_CALLBACK_MESSAGE *) module_callback_queue -> tx_queue_read;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6a1b      	ldr	r3, [r3, #32]
 800daa2:	627b      	str	r3, [r7, #36]	; 0x24
    
        /* Pickup the number of items enqueued.  */
        enqueued =  module_callback_queue -> tx_queue_enqueued;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	691b      	ldr	r3, [r3, #16]
 800daa8:	623b      	str	r3, [r7, #32]
        
        /* Set the found flag to false.  */
        found =  TX_FALSE;
 800daaa:	2300      	movs	r3, #0
 800daac:	61fb      	str	r3, [r7, #28]

        /* Loop to look for duplicates in the queue.  */
        while (enqueued != 0)
 800daae:	e057      	b.n	800db60 <_txm_module_manager_callback_request+0xec>
        {
        
            /* Does this entry match the new callback message?  */
            if ((queued_message -> txm_module_callback_message_application_function == callback_message -> txm_module_callback_message_application_function) &&
 800dab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab2:	689a      	ldr	r2, [r3, #8]
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d143      	bne.n	800db44 <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_param_1 == callback_message -> txm_module_callback_message_param_1) &&
 800dabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabe:	68da      	ldr	r2, [r3, #12]
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	68db      	ldr	r3, [r3, #12]
            if ((queued_message -> txm_module_callback_message_application_function == callback_message -> txm_module_callback_message_application_function) &&
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d13d      	bne.n	800db44 <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_param_2 == callback_message -> txm_module_callback_message_param_2) &&
 800dac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daca:	691a      	ldr	r2, [r3, #16]
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	691b      	ldr	r3, [r3, #16]
                (queued_message -> txm_module_callback_message_param_1 == callback_message -> txm_module_callback_message_param_1) &&
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d137      	bne.n	800db44 <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_param_3 == callback_message -> txm_module_callback_message_param_3) &&
 800dad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad6:	695a      	ldr	r2, [r3, #20]
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	695b      	ldr	r3, [r3, #20]
                (queued_message -> txm_module_callback_message_param_2 == callback_message -> txm_module_callback_message_param_2) &&
 800dadc:	429a      	cmp	r2, r3
 800dade:	d131      	bne.n	800db44 <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_param_4 == callback_message -> txm_module_callback_message_param_4) &&
 800dae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae2:	699a      	ldr	r2, [r3, #24]
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	699b      	ldr	r3, [r3, #24]
                (queued_message -> txm_module_callback_message_param_3 == callback_message -> txm_module_callback_message_param_3) &&
 800dae8:	429a      	cmp	r2, r3
 800daea:	d12b      	bne.n	800db44 <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_param_5 == callback_message -> txm_module_callback_message_param_5) &&
 800daec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daee:	69da      	ldr	r2, [r3, #28]
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	69db      	ldr	r3, [r3, #28]
                (queued_message -> txm_module_callback_message_param_4 == callback_message -> txm_module_callback_message_param_4) &&
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d125      	bne.n	800db44 <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_param_6 == callback_message -> txm_module_callback_message_param_6) &&
 800daf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafa:	6a1a      	ldr	r2, [r3, #32]
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	6a1b      	ldr	r3, [r3, #32]
                (queued_message -> txm_module_callback_message_param_5 == callback_message -> txm_module_callback_message_param_5) &&
 800db00:	429a      	cmp	r2, r3
 800db02:	d11f      	bne.n	800db44 <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_param_7 == callback_message -> txm_module_callback_message_param_7) &&
 800db04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                (queued_message -> txm_module_callback_message_param_6 == callback_message -> txm_module_callback_message_param_6) &&
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d119      	bne.n	800db44 <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_param_8 == callback_message -> txm_module_callback_message_param_8) &&
 800db10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                (queued_message -> txm_module_callback_message_param_7 == callback_message -> txm_module_callback_message_param_7) &&
 800db18:	429a      	cmp	r2, r3
 800db1a:	d113      	bne.n	800db44 <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_reserved1 == callback_message -> txm_module_callback_message_reserved1) &&
 800db1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                (queued_message -> txm_module_callback_message_param_8 == callback_message -> txm_module_callback_message_param_8) &&
 800db24:	429a      	cmp	r2, r3
 800db26:	d10d      	bne.n	800db44 <_txm_module_manager_callback_request+0xd0>
                (queued_message -> txm_module_callback_message_reserved2 == callback_message -> txm_module_callback_message_reserved2))
 800db28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                (queued_message -> txm_module_callback_message_reserved1 == callback_message -> txm_module_callback_message_reserved1) &&
 800db30:	429a      	cmp	r2, r3
 800db32:	d107      	bne.n	800db44 <_txm_module_manager_callback_request+0xd0>
            {
            
                /* Update the activation count in the queued request.  */
                queued_message -> txm_module_callback_message_activation_count++;
 800db34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	1c5a      	adds	r2, r3, #1
 800db3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3c:	605a      	str	r2, [r3, #4]
            
                /* Set the found flag to true.  */
                found =  TX_TRUE;
 800db3e:	2301      	movs	r3, #1
 800db40:	61fb      	str	r3, [r7, #28]
                
                /* Get out of the loop.  */
                break;
 800db42:	e010      	b.n	800db66 <_txm_module_manager_callback_request+0xf2>
            }
            
            /* Decrease the number of messages to examine.  */
            enqueued--;
 800db44:	6a3b      	ldr	r3, [r7, #32]
 800db46:	3b01      	subs	r3, #1
 800db48:	623b      	str	r3, [r7, #32]
            
            /* Move the callback message to the next message.  */
            queued_message++;
 800db4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4c:	3334      	adds	r3, #52	; 0x34
 800db4e:	627b      	str	r3, [r7, #36]	; 0x24
            
            /* Check for wrap?  */
            if (((ULONG *) queued_message) >= module_callback_queue -> tx_queue_end)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	69db      	ldr	r3, [r3, #28]
 800db54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db56:	429a      	cmp	r2, r3
 800db58:	d302      	bcc.n	800db60 <_txm_module_manager_callback_request+0xec>
            {
            
                /* Yes, set the queued message to the beginning of the queue.  */
                queued_message =  (TXM_MODULE_CALLBACK_MESSAGE *) module_callback_queue -> tx_queue_start;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	699b      	ldr	r3, [r3, #24]
 800db5e:	627b      	str	r3, [r7, #36]	; 0x24
        while (enqueued != 0)
 800db60:	6a3b      	ldr	r3, [r7, #32]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d1a4      	bne.n	800dab0 <_txm_module_manager_callback_request+0x3c>
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f383 8810 	msr	PRIMASK, r3
}
 800db70:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Determine if we need to send the new callback request.  */
        if (found == TX_FALSE)
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d10d      	bne.n	800db94 <_txm_module_manager_callback_request+0x120>
        {
          
            /* Yes, send the message.  */
            status =  _tx_queue_send(module_callback_queue, (VOID *) callback_message, TX_NO_WAIT);
 800db78:	2200      	movs	r2, #0
 800db7a:	6839      	ldr	r1, [r7, #0]
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f7fb fbb1 	bl	80092e4 <_tx_queue_send>
 800db82:	6178      	str	r0, [r7, #20]
          
            /* Determine if an error was detected.  */
            if (status != TX_SUCCESS)
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d004      	beq.n	800db94 <_txm_module_manager_callback_request+0x120>
            {
            
                /* Error, increment the error counter and return.  */
                _txm_module_manager_callback_error_count++;
 800db8a:	4b0e      	ldr	r3, [pc, #56]	; (800dbc4 <_txm_module_manager_callback_request+0x150>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	3301      	adds	r3, #1
 800db90:	4a0c      	ldr	r2, [pc, #48]	; (800dbc4 <_txm_module_manager_callback_request+0x150>)
 800db92:	6013      	str	r3, [r2, #0]
            }
        }
        
        /* Increment the total number of callbacks.  */
        _txm_module_manager_callback_total_count++;
 800db94:	4b0c      	ldr	r3, [pc, #48]	; (800dbc8 <_txm_module_manager_callback_request+0x154>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	3301      	adds	r3, #1
 800db9a:	4a0b      	ldr	r2, [pc, #44]	; (800dbc8 <_txm_module_manager_callback_request+0x154>)
 800db9c:	6013      	str	r3, [r2, #0]
 800db9e:	e00a      	b.n	800dbb6 <_txm_module_manager_callback_request+0x142>
    {
    
        /* Module instance is not valid.  */

        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 800dba0:	4b08      	ldr	r3, [pc, #32]	; (800dbc4 <_txm_module_manager_callback_request+0x150>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	3301      	adds	r3, #1
 800dba6:	4a07      	ldr	r2, [pc, #28]	; (800dbc4 <_txm_module_manager_callback_request+0x150>)
 800dba8:	6013      	str	r3, [r2, #0]
 800dbaa:	69bb      	ldr	r3, [r7, #24]
 800dbac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	f383 8810 	msr	PRIMASK, r3
}
 800dbb4:	bf00      	nop
        
        /* Restore interrupts.  */
        TX_RESTORE
    }
}
 800dbb6:	bf00      	nop
 800dbb8:	3728      	adds	r7, #40	; 0x28
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	51554555 	.word	0x51554555
 800dbc4:	2400f730 	.word	0x2400f730
 800dbc8:	2400f72c 	.word	0x2400f72c

0800dbcc <_txm_module_manager_event_flags_notify_trampoline>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_event_flags_notify_trampoline(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b096      	sub	sp, #88	; 0x58
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800dbd4:	f3ef 8310 	mrs	r3, PRIMASK
 800dbd8:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile (" CPSID i" : : : "memory" );
 800dbda:	b672      	cpsid	i
    return(primask_value);
 800dbdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

  
    /* We now know the callback is for a module.  */
        
    /* Disable interrupts.  */
    TX_DISABLE
 800dbde:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup the module instance pointer.  */
    module_instance =  (TXM_MODULE_INSTANCE *) group_ptr -> tx_event_flags_group_module_instance;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbe4:	653b      	str	r3, [r7, #80]	; 0x50

    /* Determine if this module is still valid.  */
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 800dbe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d034      	beq.n	800dc56 <_txm_module_manager_event_flags_notify_trampoline+0x8a>
 800dbec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4a20      	ldr	r2, [pc, #128]	; (800dc74 <_txm_module_manager_event_flags_notify_trampoline+0xa8>)
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	d12f      	bne.n	800dc56 <_txm_module_manager_event_flags_notify_trampoline+0x8a>
        (module_instance -> txm_module_instance_state == TXM_MODULE_STARTED))
 800dbf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbf8:	689b      	ldr	r3, [r3, #8]
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 800dbfa:	2b02      	cmp	r3, #2
 800dbfc:	d12b      	bne.n	800dc56 <_txm_module_manager_event_flags_notify_trampoline+0x8a>
    {
        
        /* Yes, the module is still valid.  */        
         
        /* Pickup the module's callback message queue.  */
        module_callback_queue =  &(module_instance -> txm_module_instance_callback_request_queue);
 800dbfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc00:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800dc04:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Build the queue notification message.  */
        callback_message.txm_module_callback_message_type =                  TXM_EVENTS_SET_CALLBACK;
 800dc06:	2301      	movs	r3, #1
 800dc08:	60fb      	str	r3, [r7, #12]
        callback_message.txm_module_callback_message_activation_count =      1;
 800dc0a:	2301      	movs	r3, #1
 800dc0c:	613b      	str	r3, [r7, #16]
        callback_message.txm_module_callback_message_application_function =  (VOID (*)(VOID)) group_ptr -> tx_event_flags_group_set_module_notify;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc12:	617b      	str	r3, [r7, #20]
        callback_message.txm_module_callback_message_param_1 =               (ALIGN_TYPE) group_ptr;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	61bb      	str	r3, [r7, #24]
        callback_message.txm_module_callback_message_param_2 =               0;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	61fb      	str	r3, [r7, #28]
        callback_message.txm_module_callback_message_param_3 =               0;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	623b      	str	r3, [r7, #32]
        callback_message.txm_module_callback_message_param_4 =               0;
 800dc20:	2300      	movs	r3, #0
 800dc22:	627b      	str	r3, [r7, #36]	; 0x24
        callback_message.txm_module_callback_message_param_5 =               0;
 800dc24:	2300      	movs	r3, #0
 800dc26:	62bb      	str	r3, [r7, #40]	; 0x28
        callback_message.txm_module_callback_message_param_6 =               0;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        callback_message.txm_module_callback_message_param_7 =               0;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	633b      	str	r3, [r7, #48]	; 0x30
        callback_message.txm_module_callback_message_param_8 =               0;
 800dc30:	2300      	movs	r3, #0
 800dc32:	637b      	str	r3, [r7, #52]	; 0x34
        callback_message.txm_module_callback_message_reserved1 =             0;
 800dc34:	2300      	movs	r3, #0
 800dc36:	63bb      	str	r3, [r7, #56]	; 0x38
        callback_message.txm_module_callback_message_reserved2 =             0;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc3e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dc40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc42:	f383 8810 	msr	PRIMASK, r3
}
 800dc46:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Call the general processing that will place the callback on the 
           module's callback request queue.  */
        _txm_module_manager_callback_request(module_callback_queue, &callback_message);
 800dc48:	f107 030c 	add.w	r3, r7, #12
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dc50:	f7ff ff10 	bl	800da74 <_txm_module_manager_callback_request>
 800dc54:	e00a      	b.n	800dc6c <_txm_module_manager_event_flags_notify_trampoline+0xa0>
    {
    
        /* Module no longer valid.  */
        
        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 800dc56:	4b08      	ldr	r3, [pc, #32]	; (800dc78 <_txm_module_manager_event_flags_notify_trampoline+0xac>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	4a06      	ldr	r2, [pc, #24]	; (800dc78 <_txm_module_manager_event_flags_notify_trampoline+0xac>)
 800dc5e:	6013      	str	r3, [r2, #0]
 800dc60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc62:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800dc64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc66:	f383 8810 	msr	PRIMASK, r3
}
 800dc6a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    }
}         
 800dc6c:	bf00      	nop
 800dc6e:	3758      	adds	r7, #88	; 0x58
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	4d4f4455 	.word	0x4d4f4455
 800dc78:	2400f730 	.word	0x2400f730

0800dc7c <_txm_module_manager_external_memory_enable>:
/**************************************************************************/
UINT  _txm_module_manager_external_memory_enable(TXM_MODULE_INSTANCE *module_instance,
                                                 VOID *start_address,
                                                 ULONG length,
                                                 UINT attributes)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b08c      	sub	sp, #48	; 0x30
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	607a      	str	r2, [r7, #4]
 800dc88:	603b      	str	r3, [r7, #0]
ULONG   region_size;
ULONG   srd_bits;
ULONG   size_register;
ULONG   address;
ULONG   shared_index;
ULONG   attributes_check = 0;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 800dc8e:	4b48      	ldr	r3, [pc, #288]	; (800ddb0 <_txm_module_manager_external_memory_enable+0x134>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	2b01      	cmp	r3, #1
 800dc94:	d001      	beq.n	800dc9a <_txm_module_manager_external_memory_enable+0x1e>
    {
        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE);
 800dc96:	231d      	movs	r3, #29
 800dc98:	e086      	b.n	800dda8 <_txm_module_manager_external_memory_enable+0x12c>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d101      	bne.n	800dca4 <_txm_module_manager_external_memory_enable+0x28>
    {
        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 800dca0:	2303      	movs	r3, #3
 800dca2:	e081      	b.n	800dda8 <_txm_module_manager_external_memory_enable+0x12c>
    }

    /* Get module manager protection mutex.  */
    _tx_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 800dca4:	f04f 31ff 	mov.w	r1, #4294967295
 800dca8:	4842      	ldr	r0, [pc, #264]	; (800ddb4 <_txm_module_manager_external_memory_enable+0x138>)
 800dcaa:	f7fa f863 	bl	8007d74 <_tx_mutex_get>

    /* Determine if the module instance is valid.  */
    if (module_instance -> txm_module_instance_id != TXM_MODULE_ID)
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4a41      	ldr	r2, [pc, #260]	; (800ddb8 <_txm_module_manager_external_memory_enable+0x13c>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d004      	beq.n	800dcc2 <_txm_module_manager_external_memory_enable+0x46>
    {
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800dcb8:	483e      	ldr	r0, [pc, #248]	; (800ddb4 <_txm_module_manager_external_memory_enable+0x138>)
 800dcba:	f7fa fb19 	bl	80082f0 <_tx_mutex_put>

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 800dcbe:	2303      	movs	r3, #3
 800dcc0:	e072      	b.n	800dda8 <_txm_module_manager_external_memory_enable+0x12c>
    }
    
    /* Determine if the module instance is in the loaded state.  */
    if (module_instance -> txm_module_instance_state != TXM_MODULE_LOADED)
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	689b      	ldr	r3, [r3, #8]
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d004      	beq.n	800dcd4 <_txm_module_manager_external_memory_enable+0x58>
    {
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800dcca:	483a      	ldr	r0, [pc, #232]	; (800ddb4 <_txm_module_manager_external_memory_enable+0x138>)
 800dccc:	f7fa fb10 	bl	80082f0 <_tx_mutex_put>

        /* Return error if the module is not ready.  */
        return(TX_START_ERROR);
 800dcd0:	2310      	movs	r3, #16
 800dcd2:	e069      	b.n	800dda8 <_txm_module_manager_external_memory_enable+0x12c>
    }
    
    /* Determine if there are shared memory entries available.  */
    if(module_instance -> txm_module_instance_shared_memory_count >= TXM_MODULE_MPU_SHARED_ENTRIES)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dcda:	2b02      	cmp	r3, #2
 800dcdc:	d904      	bls.n	800dce8 <_txm_module_manager_external_memory_enable+0x6c>
    {
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800dcde:	4835      	ldr	r0, [pc, #212]	; (800ddb4 <_txm_module_manager_external_memory_enable+0x138>)
 800dce0:	f7fa fb06 	bl	80082f0 <_tx_mutex_put>
        
        /* No more entries available.  */
        return(TX_NO_MEMORY);
 800dce4:	2310      	movs	r3, #16
 800dce6:	e05f      	b.n	800dda8 <_txm_module_manager_external_memory_enable+0x12c>
    }
    
    /* Start address and length must adhere to Cortex-M7 MPU.
       The address must align with the block size.  */
    
    block_size = _txm_power_of_two_block_size(length);
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f7ff fe1d 	bl	800d928 <_txm_power_of_two_block_size>
 800dcee:	62b8      	str	r0, [r7, #40]	; 0x28
    address = (ULONG) start_address;
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	627b      	str	r3, [r7, #36]	; 0x24
    if(address != (address & ~(block_size - 1)))
 800dcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf6:	425a      	negs	r2, r3
 800dcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfa:	4013      	ands	r3, r2
 800dcfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d004      	beq.n	800dd0c <_txm_module_manager_external_memory_enable+0x90>
    {
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800dd02:	482c      	ldr	r0, [pc, #176]	; (800ddb4 <_txm_module_manager_external_memory_enable+0x138>)
 800dd04:	f7fa faf4 	bl	80082f0 <_tx_mutex_put>
        
        /* Return alignment error.  */
        return(TXM_MODULE_ALIGNMENT_ERROR);
 800dd08:	23f0      	movs	r3, #240	; 0xf0
 800dd0a:	e04d      	b.n	800dda8 <_txm_module_manager_external_memory_enable+0x12c>
    
    /* At this point, we have a valid address and block size.
       Set up MPU registers.  */
    
    /* Pick up index into shared memory entries.  */
    shared_index = TXM_MODULE_MPU_SHARED_INDEX + module_instance -> txm_module_instance_shared_memory_count;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dd12:	3309      	adds	r3, #9
 800dd14:	623b      	str	r3, [r7, #32]
    
    /* Save address register with address, MPU region, set Valid bit.  */
    module_instance -> txm_module_instance_mpu_registers[shared_index].txm_module_mpu_region_address = address | shared_index | 0x10;
 800dd16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd18:	6a3b      	ldr	r3, [r7, #32]
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	f043 0210 	orr.w	r2, r3, #16
 800dd20:	68f9      	ldr	r1, [r7, #12]
 800dd22:	6a3b      	ldr	r3, [r7, #32]
 800dd24:	330c      	adds	r3, #12
 800dd26:	00db      	lsls	r3, r3, #3
 800dd28:	440b      	add	r3, r1
 800dd2a:	605a      	str	r2, [r3, #4]
    
    /* Calculate the region size.  */
    region_size = (_txm_module_manager_region_size_get(block_size) << 1);
 800dd2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd2e:	f005 f84f 	bl	8012dd0 <_txm_module_manager_region_size_get>
 800dd32:	4603      	mov	r3, r0
 800dd34:	005b      	lsls	r3, r3, #1
 800dd36:	61fb      	str	r3, [r7, #28]
    
    /* Calculate the subregion bits.  */
    srd_bits = _txm_module_manager_calculate_srd_bits(block_size, length);
 800dd38:	6879      	ldr	r1, [r7, #4]
 800dd3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd3c:	f005 f8c9 	bl	8012ed2 <_txm_module_manager_calculate_srd_bits>
 800dd40:	61b8      	str	r0, [r7, #24]
    
    /* Generate SRD, size, and enable attributes.  */
    size_register = srd_bits | region_size | TXM_ENABLE_REGION | TXM_MODULE_MPU_SHARED_ACCESS_CONTROL;
 800dd42:	69ba      	ldr	r2, [r7, #24]
 800dd44:	69fb      	ldr	r3, [r7, #28]
 800dd46:	431a      	orrs	r2, r3
 800dd48:	4b1c      	ldr	r3, [pc, #112]	; (800ddbc <_txm_module_manager_external_memory_enable+0x140>)
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	617b      	str	r3, [r7, #20]
    
    /* Check for optional write attribute.  */
    if(attributes & TXM_MODULE_MANAGER_SHARED_ATTRIBUTE_WRITE)
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	f003 0301 	and.w	r3, r3, #1
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d002      	beq.n	800dd5e <_txm_module_manager_external_memory_enable+0xe2>
    {
        attributes_check = TXM_MODULE_MANAGER_ATTRIBUTE_WRITE_MPU_BIT;
 800dd58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dd5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    
    /* Save attribute-size register. */
    module_instance -> txm_module_instance_mpu_registers[shared_index].txm_module_mpu_region_attribute_size = attributes_check | size_register;
 800dd5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	431a      	orrs	r2, r3
 800dd64:	68f9      	ldr	r1, [r7, #12]
 800dd66:	6a3b      	ldr	r3, [r7, #32]
 800dd68:	330c      	adds	r3, #12
 800dd6a:	00db      	lsls	r3, r3, #3
 800dd6c:	440b      	add	r3, r1
 800dd6e:	609a      	str	r2, [r3, #8]
    
    /* Keep track of shared memory address and length in module instance.  */
    module_instance -> txm_module_instance_shared_memory_address[module_instance -> txm_module_instance_shared_memory_count] = address;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	323a      	adds	r2, #58	; 0x3a
 800dd7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    module_instance -> txm_module_instance_shared_memory_length[module_instance -> txm_module_instance_shared_memory_count] = length;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dd86:	68fa      	ldr	r2, [r7, #12]
 800dd88:	333c      	adds	r3, #60	; 0x3c
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	4413      	add	r3, r2
 800dd8e:	687a      	ldr	r2, [r7, #4]
 800dd90:	605a      	str	r2, [r3, #4]
    
    /* Increment counter.  */
    module_instance -> txm_module_instance_shared_memory_count++;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800dd98:	1c5a      	adds	r2, r3, #1
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    
    /* Release the protection mutex.  */
    _tx_mutex_put(&_txm_module_manager_mutex);
 800dda0:	4804      	ldr	r0, [pc, #16]	; (800ddb4 <_txm_module_manager_external_memory_enable+0x138>)
 800dda2:	f7fa faa5 	bl	80082f0 <_tx_mutex_put>
    
    /* Return success.  */
    return(TX_SUCCESS);
 800dda6:	2300      	movs	r3, #0
    
    /* Return success.  */
    return(TX_SUCCESS);

#endif
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3730      	adds	r7, #48	; 0x30
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	2400f728 	.word	0x2400f728
 800ddb4:	2400f6ec 	.word	0x2400f6ec
 800ddb8:	4d4f4455 	.word	0x4d4f4455
 800ddbc:	12030001 	.word	0x12030001

0800ddc0 <_txm_module_manager_in_place_load>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_in_place_load(TXM_MODULE_INSTANCE *module_instance, CHAR *module_name, VOID *module_location)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b08c      	sub	sp, #48	; 0x30
 800ddc4:	af02      	add	r7, sp, #8
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	607a      	str	r2, [r7, #4]
ULONG                   code_allocation_size_ignored;
UINT                    status;


    /* Pickup the module's information.  */
    module_preamble =  (TXM_MODULE_PREAMBLE *) module_location;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Pickup the basic module sizes.  */
    code_size =  module_preamble -> txm_module_preamble_code_size;
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddd4:	623b      	str	r3, [r7, #32]

    /* Check for valid sizes.  */
    if (code_size == 0)
 800ddd6:	6a3b      	ldr	r3, [r7, #32]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d101      	bne.n	800dde0 <_txm_module_manager_in_place_load+0x20>
    {

        /* Invalid module preamble.  */
        return(TXM_MODULE_INVALID);
 800dddc:	23f2      	movs	r3, #242	; 0xf2
 800ddde:	e028      	b.n	800de32 <_txm_module_manager_in_place_load+0x72>
    }

    /* Get the amount of the bytes we need to allocate for the module's code
       as well as the required alignment. Note that because this is an in-place
       load, we only want the code alignment so we can check it.  */
    status =  _txm_module_manager_util_code_allocation_size_and_alignment_get(module_preamble, &code_alignment, &code_allocation_size_ignored);
 800dde0:	f107 0210 	add.w	r2, r7, #16
 800dde4:	f107 0314 	add.w	r3, r7, #20
 800dde8:	4619      	mov	r1, r3
 800ddea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ddec:	f006 fd9a 	bl	8014924 <_txm_module_manager_util_code_allocation_size_and_alignment_get>
 800ddf0:	61f8      	str	r0, [r7, #28]
    if (status != TX_SUCCESS)
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d001      	beq.n	800ddfc <_txm_module_manager_in_place_load+0x3c>
    {

        /* Math overflow error occurred.  */
        return(status);
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	e01a      	b.n	800de32 <_txm_module_manager_in_place_load+0x72>
    }

    /* Since this is an in-place load, check the alignment of the module's instruction area (code).  */
    TXM_MODULE_MANAGER_CHECK_CODE_ALIGNMENT(module_location, code_alignment)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	61bb      	str	r3, [r7, #24]
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	3b01      	subs	r3, #1
 800de04:	69ba      	ldr	r2, [r7, #24]
 800de06:	4013      	ands	r3, r2
 800de08:	61bb      	str	r3, [r7, #24]
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d004      	beq.n	800de1a <_txm_module_manager_in_place_load+0x5a>
 800de10:	480a      	ldr	r0, [pc, #40]	; (800de3c <_txm_module_manager_in_place_load+0x7c>)
 800de12:	f7fa fa6d 	bl	80082f0 <_tx_mutex_put>
 800de16:	23f0      	movs	r3, #240	; 0xf0
 800de18:	e00b      	b.n	800de32 <_txm_module_manager_in_place_load+0x72>

    /* Now load the module in-place.  */
    status =  _txm_module_manager_internal_load(module_instance, module_name, module_location,
 800de1a:	2300      	movs	r3, #0
 800de1c:	9301      	str	r3, [sp, #4]
 800de1e:	2300      	movs	r3, #0
 800de20:	9300      	str	r3, [sp, #0]
 800de22:	6a3b      	ldr	r3, [r7, #32]
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	68b9      	ldr	r1, [r7, #8]
 800de28:	68f8      	ldr	r0, [r7, #12]
 800de2a:	f000 f85f 	bl	800deec <_txm_module_manager_internal_load>
 800de2e:	61f8      	str	r0, [r7, #28]
                                                code_size, TX_NULL, 0);

    /* Return status.  */
    return(status);
 800de30:	69fb      	ldr	r3, [r7, #28]
}
 800de32:	4618      	mov	r0, r3
 800de34:	3728      	adds	r7, #40	; 0x28
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	2400f6ec 	.word	0x2400f6ec

0800de40 <_txm_module_manager_initialize>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_initialize(VOID *module_memory_start, ULONG module_memory_size)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b084      	sub	sp, #16
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800de4a:	f3ef 8305 	mrs	r3, IPSR
 800de4e:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800de50:	68fa      	ldr	r2, [r7, #12]

    /* Check for interrupt call.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != 0)
 800de52:	4b1b      	ldr	r3, [pc, #108]	; (800dec0 <_txm_module_manager_initialize+0x80>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4313      	orrs	r3, r2
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d00b      	beq.n	800de74 <_txm_module_manager_initialize+0x34>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800de5c:	f3ef 8305 	mrs	r3, IPSR
 800de60:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800de62:	68ba      	ldr	r2, [r7, #8]
    {
    
        /* Now, make sure the call is from an interrupt and not initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800de64:	4b16      	ldr	r3, [pc, #88]	; (800dec0 <_txm_module_manager_initialize+0x80>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4313      	orrs	r3, r2
 800de6a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800de6e:	d201      	bcs.n	800de74 <_txm_module_manager_initialize+0x34>
        {
        
            /* Invalid caller of this function, return appropriate error code.  */
            return(TX_CALLER_ERROR);
 800de70:	2313      	movs	r3, #19
 800de72:	e020      	b.n	800deb6 <_txm_module_manager_initialize+0x76>
        }
    }

    /* Setup the module properties supported by this module manager.  */
    _txm_module_manager_properties_supported =  TXM_MODULE_MANAGER_SUPPORTED_OPTIONS;
 800de74:	4b13      	ldr	r3, [pc, #76]	; (800dec4 <_txm_module_manager_initialize+0x84>)
 800de76:	2207      	movs	r2, #7
 800de78:	601a      	str	r2, [r3, #0]

    /* Setup the module properties required by this module manager.   */
    _txm_module_manager_properties_required =   TXM_MODULE_MANAGER_REQUIRED_OPTIONS;
 800de7a:	4b13      	ldr	r3, [pc, #76]	; (800dec8 <_txm_module_manager_initialize+0x88>)
 800de7c:	2200      	movs	r2, #0
 800de7e:	601a      	str	r2, [r3, #0]

    /* Clear the module manager ready flag.  */
    _txm_module_manager_ready =  TX_FALSE;
 800de80:	4b12      	ldr	r3, [pc, #72]	; (800decc <_txm_module_manager_initialize+0x8c>)
 800de82:	2200      	movs	r2, #0
 800de84:	601a      	str	r2, [r3, #0]

    /* Initialize the empty module list.  */
    _txm_module_manager_loaded_list_ptr =  TX_NULL;
 800de86:	4b12      	ldr	r3, [pc, #72]	; (800ded0 <_txm_module_manager_initialize+0x90>)
 800de88:	2200      	movs	r2, #0
 800de8a:	601a      	str	r2, [r3, #0]

    /* Clear the number of loaded modules.  */
    _txm_module_manger_loaded_count =  0;
 800de8c:	4b11      	ldr	r3, [pc, #68]	; (800ded4 <_txm_module_manager_initialize+0x94>)
 800de8e:	2200      	movs	r2, #0
 800de90:	601a      	str	r2, [r3, #0]

    /* Create the module manager protection mutex.  */
    _tx_mutex_create(&_txm_module_manager_mutex, "Module Manager Protection Mutex", TX_NO_INHERIT);
 800de92:	2200      	movs	r2, #0
 800de94:	4910      	ldr	r1, [pc, #64]	; (800ded8 <_txm_module_manager_initialize+0x98>)
 800de96:	4811      	ldr	r0, [pc, #68]	; (800dedc <_txm_module_manager_initialize+0x9c>)
 800de98:	f7f9 fe72 	bl	8007b80 <_tx_mutex_create>

    /* Create a byte pool for allocating RAM areas for modules.  */ 
    _tx_byte_pool_create(&_txm_module_manager_byte_pool, "Module Manager Byte Pool", module_memory_start, module_memory_size);
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	490f      	ldr	r1, [pc, #60]	; (800dee0 <_txm_module_manager_initialize+0xa0>)
 800dea2:	4810      	ldr	r0, [pc, #64]	; (800dee4 <_txm_module_manager_initialize+0xa4>)
 800dea4:	f7f8 fc7e 	bl	80067a4 <_tx_byte_pool_create>

    /* Indicate the module manager object pool has not been created.  */
    _txm_module_manager_object_pool_created =  TX_FALSE;
 800dea8:	4b0f      	ldr	r3, [pc, #60]	; (800dee8 <_txm_module_manager_initialize+0xa8>)
 800deaa:	2200      	movs	r2, #0
 800deac:	601a      	str	r2, [r3, #0]

    /* Mark the module manager as ready!  */
    _txm_module_manager_ready =  TX_TRUE;
 800deae:	4b07      	ldr	r3, [pc, #28]	; (800decc <_txm_module_manager_initialize+0x8c>)
 800deb0:	2201      	movs	r2, #1
 800deb2:	601a      	str	r2, [r3, #0]
    
    /* Return success.  */
    return(TX_SUCCESS);
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3710      	adds	r7, #16
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	24000020 	.word	0x24000020
 800dec4:	2400f678 	.word	0x2400f678
 800dec8:	2400f67c 	.word	0x2400f67c
 800decc:	2400f728 	.word	0x2400f728
 800ded0:	2400f720 	.word	0x2400f720
 800ded4:	2400f724 	.word	0x2400f724
 800ded8:	0801657c 	.word	0x0801657c
 800dedc:	2400f6ec 	.word	0x2400f6ec
 800dee0:	0801659c 	.word	0x0801659c
 800dee4:	2400f680 	.word	0x2400f680
 800dee8:	2400f6e8 	.word	0x2400f6e8

0800deec <_txm_module_manager_internal_load>:
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_internal_load(TXM_MODULE_INSTANCE *module_instance, CHAR *module_name, VOID *module_location,
                                        ULONG code_size, VOID *code_allocation_ptr, ULONG code_allocation_size)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b09e      	sub	sp, #120	; 0x78
 800def0:	af02      	add	r7, sp, #8
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
 800def8:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800defa:	f3ef 8305 	mrs	r3, IPSR
 800defe:	637b      	str	r3, [r7, #52]	; 0x34
    return(ipsr_value);
 800df00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
CHAR                    *memory_ptr;
UINT                    status;


    /* Check for interrupt call.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != 0)
 800df02:	4b7c      	ldr	r3, [pc, #496]	; (800e0f4 <_txm_module_manager_internal_load+0x208>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4313      	orrs	r3, r2
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d00b      	beq.n	800df24 <_txm_module_manager_internal_load+0x38>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800df0c:	f3ef 8305 	mrs	r3, IPSR
 800df10:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800df12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    {
    
        /* Now, make sure the call is from an interrupt and not initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800df14:	4b77      	ldr	r3, [pc, #476]	; (800e0f4 <_txm_module_manager_internal_load+0x208>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4313      	orrs	r3, r2
 800df1a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800df1e:	d201      	bcs.n	800df24 <_txm_module_manager_internal_load+0x38>
        {
        
            /* Invalid caller of this function, return appropriate error code.  */
            return(TX_CALLER_ERROR);
 800df20:	2313      	movs	r3, #19
 800df22:	e214      	b.n	800e34e <_txm_module_manager_internal_load+0x462>
        }
    }

    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 800df24:	4b74      	ldr	r3, [pc, #464]	; (800e0f8 <_txm_module_manager_internal_load+0x20c>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d001      	beq.n	800df30 <_txm_module_manager_internal_load+0x44>
    {
    
        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE); 
 800df2c:	231d      	movs	r3, #29
 800df2e:	e20e      	b.n	800e34e <_txm_module_manager_internal_load+0x462>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d101      	bne.n	800df3a <_txm_module_manager_internal_load+0x4e>
    {
    
        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 800df36:	2303      	movs	r3, #3
 800df38:	e209      	b.n	800e34e <_txm_module_manager_internal_load+0x462>
    }

    /* Get module manager protection mutex.  */
    _tx_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 800df3a:	f04f 31ff 	mov.w	r1, #4294967295
 800df3e:	486f      	ldr	r0, [pc, #444]	; (800e0fc <_txm_module_manager_internal_load+0x210>)
 800df40:	f7f9 ff18 	bl	8007d74 <_tx_mutex_get>

    /* Determine if the module is already valid.  */
    if (module_instance -> txm_module_instance_id == TXM_MODULE_ID)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a6d      	ldr	r2, [pc, #436]	; (800e100 <_txm_module_manager_internal_load+0x214>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d104      	bne.n	800df58 <_txm_module_manager_internal_load+0x6c>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800df4e:	486b      	ldr	r0, [pc, #428]	; (800e0fc <_txm_module_manager_internal_load+0x210>)
 800df50:	f7fa f9ce 	bl	80082f0 <_tx_mutex_put>

        /* Module already loaded.  */
        return(TXM_MODULE_ALREADY_LOADED);
 800df54:	23f1      	movs	r3, #241	; 0xf1
 800df56:	e1fa      	b.n	800e34e <_txm_module_manager_internal_load+0x462>
    }

    /* Pickup the module's information.  */
    module_preamble = (TXM_MODULE_PREAMBLE *) module_location;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Check to make sure there is a valid module to load.  */
    if (module_preamble -> txm_module_preamble_id != TXM_MODULE_ID)
 800df5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4a67      	ldr	r2, [pc, #412]	; (800e100 <_txm_module_manager_internal_load+0x214>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d004      	beq.n	800df70 <_txm_module_manager_internal_load+0x84>
    {
    
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800df66:	4865      	ldr	r0, [pc, #404]	; (800e0fc <_txm_module_manager_internal_load+0x210>)
 800df68:	f7fa f9c2 	bl	80082f0 <_tx_mutex_put>

        /* Invalid module preamble.  */
        return(TXM_MODULE_INVALID);
 800df6c:	23f2      	movs	r3, #242	; 0xf2
 800df6e:	e1ee      	b.n	800e34e <_txm_module_manager_internal_load+0x462>
    }

    /* Check the properties of this module.  */
    module_properties =  module_preamble -> txm_module_preamble_property_flags & TXM_MODULE_OPTIONS_MASK;
 800df70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df72:	695b      	ldr	r3, [r3, #20]
 800df74:	b2db      	uxtb	r3, r3
 800df76:	65bb      	str	r3, [r7, #88]	; 0x58
    if (/* Ensure the requested properties are supported.  */
        ((module_properties & _txm_module_manager_properties_supported) != module_properties) ||
 800df78:	4b62      	ldr	r3, [pc, #392]	; (800e104 <_txm_module_manager_internal_load+0x218>)
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df7e:	4013      	ands	r3, r2
    if (/* Ensure the requested properties are supported.  */
 800df80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df82:	429a      	cmp	r2, r3
 800df84:	d111      	bne.n	800dfaa <_txm_module_manager_internal_load+0xbe>
        /* Ensure the required properties are there.  */
        ((_txm_module_manager_properties_required & module_properties) != _txm_module_manager_properties_required) ||
 800df86:	4b60      	ldr	r3, [pc, #384]	; (800e108 <_txm_module_manager_internal_load+0x21c>)
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df8c:	401a      	ands	r2, r3
 800df8e:	4b5e      	ldr	r3, [pc, #376]	; (800e108 <_txm_module_manager_internal_load+0x21c>)
 800df90:	681b      	ldr	r3, [r3, #0]
        ((module_properties & _txm_module_manager_properties_supported) != module_properties) ||
 800df92:	429a      	cmp	r2, r3
 800df94:	d109      	bne.n	800dfaa <_txm_module_manager_internal_load+0xbe>
        /* If memory protection is enabled, then so must user mode.  */
        ((module_properties & TXM_MODULE_MEMORY_PROTECTION) && !(module_properties & TXM_MODULE_USER_MODE))
 800df96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df98:	f003 0302 	and.w	r3, r3, #2
        ((_txm_module_manager_properties_required & module_properties) != _txm_module_manager_properties_required) ||
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d009      	beq.n	800dfb4 <_txm_module_manager_internal_load+0xc8>
        ((module_properties & TXM_MODULE_MEMORY_PROTECTION) && !(module_properties & TXM_MODULE_USER_MODE))
 800dfa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfa2:	f003 0301 	and.w	r3, r3, #1
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d104      	bne.n	800dfb4 <_txm_module_manager_internal_load+0xc8>
        )
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800dfaa:	4854      	ldr	r0, [pc, #336]	; (800e0fc <_txm_module_manager_internal_load+0x210>)
 800dfac:	f7fa f9a0 	bl	80082f0 <_tx_mutex_put>

        /* Invalid properties. Return error.  */
        return(TXM_MODULE_INVALID_PROPERTIES);
 800dfb0:	23f3      	movs	r3, #243	; 0xf3
 800dfb2:	e1cc      	b.n	800e34e <_txm_module_manager_internal_load+0x462>
    }
    
    /* Check for valid module entry offsets.  */
    if ((module_preamble -> txm_module_preamble_shell_entry_function == 0) ||
 800dfb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfb6:	699b      	ldr	r3, [r3, #24]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d003      	beq.n	800dfc4 <_txm_module_manager_internal_load+0xd8>
        (module_preamble -> txm_module_preamble_start_function == 0))
 800dfbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfbe:	69db      	ldr	r3, [r3, #28]
    if ((module_preamble -> txm_module_preamble_shell_entry_function == 0) ||
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d104      	bne.n	800dfce <_txm_module_manager_internal_load+0xe2>
    {
    
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800dfc4:	484d      	ldr	r0, [pc, #308]	; (800e0fc <_txm_module_manager_internal_load+0x210>)
 800dfc6:	f7fa f993 	bl	80082f0 <_tx_mutex_put>

        /* Invalid module preamble.  */
        return(TXM_MODULE_INVALID);
 800dfca:	23f2      	movs	r3, #242	; 0xf2
 800dfcc:	e1bf      	b.n	800e34e <_txm_module_manager_internal_load+0x462>
    }

    /* Check for valid sizes.  */
    if ((module_preamble -> txm_module_preamble_code_size == 0) ||
 800dfce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d00b      	beq.n	800dfee <_txm_module_manager_internal_load+0x102>
        (module_preamble -> txm_module_preamble_data_size == 0) ||
 800dfd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if ((module_preamble -> txm_module_preamble_code_size == 0) ||
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d007      	beq.n	800dfee <_txm_module_manager_internal_load+0x102>
        (module_preamble -> txm_module_preamble_start_stop_stack_size == 0) ||
 800dfde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        (module_preamble -> txm_module_preamble_data_size == 0) ||
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d003      	beq.n	800dfee <_txm_module_manager_internal_load+0x102>
        (module_preamble -> txm_module_preamble_callback_stack_size == 0))
 800dfe6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        (module_preamble -> txm_module_preamble_start_stop_stack_size == 0) ||
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d104      	bne.n	800dff8 <_txm_module_manager_internal_load+0x10c>
    {
    
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800dfee:	4843      	ldr	r0, [pc, #268]	; (800e0fc <_txm_module_manager_internal_load+0x210>)
 800dff0:	f7fa f97e 	bl	80082f0 <_tx_mutex_put>

        /* Invalid module preamble.  */
        return(TXM_MODULE_INVALID);
 800dff4:	23f2      	movs	r3, #242	; 0xf2
 800dff6:	e1aa      	b.n	800e34e <_txm_module_manager_internal_load+0x462>
    }

    /* Initialize module control block to all zeros.  */
    TX_MEMSET(module_instance, 0, sizeof(TXM_MODULE_INSTANCE));
 800dff8:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800dffc:	2100      	movs	r1, #0
 800dffe:	68f8      	ldr	r0, [r7, #12]
 800e000:	f007 f934 	bl	801526c <memset>

    /* Pickup the basic module sizes.  */
    data_size =              module_preamble -> txm_module_preamble_data_size;
 800e004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e008:	61fb      	str	r3, [r7, #28]
    start_stop_stack_size =  module_preamble -> txm_module_preamble_start_stop_stack_size;
 800e00a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e00e:	657b      	str	r3, [r7, #84]	; 0x54
    callback_stack_size =    module_preamble -> txm_module_preamble_callback_stack_size;
 800e010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e014:	653b      	str	r3, [r7, #80]	; 0x50
    /* Adjust the size of the module elements to be aligned to the default alignment. We do this
       so that when we partition the allocated memory, we can simply place these regions right beside
       each other without having to align their pointers. Note this only works when they all have
       the same alignment.  */

    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(data_size, TXM_MODULE_DATA_ALIGNMENT, data_size);
 800e016:	69fb      	ldr	r3, [r7, #28]
 800e018:	f113 0f05 	cmn.w	r3, #5
 800e01c:	d901      	bls.n	800e022 <_txm_module_manager_internal_load+0x136>
 800e01e:	23f8      	movs	r3, #248	; 0xf8
 800e020:	e195      	b.n	800e34e <_txm_module_manager_internal_load+0x462>
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	3304      	adds	r3, #4
 800e026:	61fb      	str	r3, [r7, #28]
    data_size =              ((data_size - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	3b01      	subs	r3, #1
 800e02c:	f023 0303 	bic.w	r3, r3, #3
 800e030:	61fb      	str	r3, [r7, #28]

    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(start_stop_stack_size, TXM_MODULE_DATA_ALIGNMENT, start_stop_stack_size);
 800e032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e034:	f113 0f05 	cmn.w	r3, #5
 800e038:	d901      	bls.n	800e03e <_txm_module_manager_internal_load+0x152>
 800e03a:	23f8      	movs	r3, #248	; 0xf8
 800e03c:	e187      	b.n	800e34e <_txm_module_manager_internal_load+0x462>
 800e03e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e040:	3304      	adds	r3, #4
 800e042:	657b      	str	r3, [r7, #84]	; 0x54
    start_stop_stack_size =  ((start_stop_stack_size - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 800e044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e046:	3b01      	subs	r3, #1
 800e048:	f023 0303 	bic.w	r3, r3, #3
 800e04c:	657b      	str	r3, [r7, #84]	; 0x54

    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(callback_stack_size, TXM_MODULE_DATA_ALIGNMENT, callback_stack_size);
 800e04e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e050:	f113 0f05 	cmn.w	r3, #5
 800e054:	d901      	bls.n	800e05a <_txm_module_manager_internal_load+0x16e>
 800e056:	23f8      	movs	r3, #248	; 0xf8
 800e058:	e179      	b.n	800e34e <_txm_module_manager_internal_load+0x462>
 800e05a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e05c:	3304      	adds	r3, #4
 800e05e:	653b      	str	r3, [r7, #80]	; 0x50
    callback_stack_size =    ((callback_stack_size - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 800e060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e062:	3b01      	subs	r3, #1
 800e064:	f023 0303 	bic.w	r3, r3, #3
 800e068:	653b      	str	r3, [r7, #80]	; 0x50

    /* Update the data size to account for the default thread stacks.  */
    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(data_size, start_stop_stack_size, data_size);
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	43db      	mvns	r3, r3
 800e06e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e070:	429a      	cmp	r2, r3
 800e072:	d901      	bls.n	800e078 <_txm_module_manager_internal_load+0x18c>
 800e074:	23f8      	movs	r3, #248	; 0xf8
 800e076:	e16a      	b.n	800e34e <_txm_module_manager_internal_load+0x462>
 800e078:	69fa      	ldr	r2, [r7, #28]
 800e07a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e07c:	4413      	add	r3, r2
 800e07e:	61fb      	str	r3, [r7, #28]
    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(data_size, callback_stack_size, data_size);
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	43db      	mvns	r3, r3
 800e084:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e086:	429a      	cmp	r2, r3
 800e088:	d901      	bls.n	800e08e <_txm_module_manager_internal_load+0x1a2>
 800e08a:	23f8      	movs	r3, #248	; 0xf8
 800e08c:	e15f      	b.n	800e34e <_txm_module_manager_internal_load+0x462>
 800e08e:	69fa      	ldr	r2, [r7, #28]
 800e090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e092:	4413      	add	r3, r2
 800e094:	61fb      	str	r3, [r7, #28]
   
    /* Setup the default code and data alignments.  */
    data_alignment =  (ULONG) TXM_MODULE_DATA_ALIGNMENT;
 800e096:	2304      	movs	r3, #4
 800e098:	61bb      	str	r3, [r7, #24]

    /* Get the port-specific alignment for the data size. Note we only want data 
       so we pass values of 1 for code (to avoid any possible div by 0 errors).  */
    code_size_ignored = 1;
 800e09a:	2301      	movs	r3, #1
 800e09c:	627b      	str	r3, [r7, #36]	; 0x24
    code_alignment_ignored = 1;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	623b      	str	r3, [r7, #32]
    TXM_MODULE_MANAGER_ALIGNMENT_ADJUST(module_preamble, code_size_ignored, code_alignment_ignored, data_size, data_alignment)
 800e0a2:	f107 001c 	add.w	r0, r7, #28
 800e0a6:	f107 0220 	add.w	r2, r7, #32
 800e0aa:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800e0ae:	f107 0318 	add.w	r3, r7, #24
 800e0b2:	9300      	str	r3, [sp, #0]
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e0b8:	f7ff fc6a 	bl	800d990 <_txm_module_manager_alignment_adjust>
                            ...
                            End of Module's Data Area
    Highest Address:    */

    /* Add an extra alignment increment so we can align the pointer after allocation.  */
    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(data_size, data_alignment, data_allocation_size);
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	43da      	mvns	r2, r3
 800e0c0:	69bb      	ldr	r3, [r7, #24]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d201      	bcs.n	800e0ca <_txm_module_manager_internal_load+0x1de>
 800e0c6:	23f8      	movs	r3, #248	; 0xf8
 800e0c8:	e141      	b.n	800e34e <_txm_module_manager_internal_load+0x462>
 800e0ca:	69fa      	ldr	r2, [r7, #28]
 800e0cc:	69bb      	ldr	r3, [r7, #24]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Allocate memory for the module.  */
    status =  _tx_byte_allocate(&_txm_module_manager_byte_pool, (VOID **) &memory_ptr, data_allocation_size, TX_NO_WAIT);
 800e0d2:	f107 0114 	add.w	r1, r7, #20
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e0da:	480c      	ldr	r0, [pc, #48]	; (800e10c <_txm_module_manager_internal_load+0x220>)
 800e0dc:	f7f8 fa28 	bl	8006530 <_tx_byte_allocate>
 800e0e0:	64b8      	str	r0, [r7, #72]	; 0x48
    
    /* Determine if the module memory allocation was successful.  */
    if (status)
 800e0e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d013      	beq.n	800e110 <_txm_module_manager_internal_load+0x224>
    {
    
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 800e0e8:	4804      	ldr	r0, [pc, #16]	; (800e0fc <_txm_module_manager_internal_load+0x210>)
 800e0ea:	f7fa f901 	bl	80082f0 <_tx_mutex_put>

        /* No memory, return an error.  */
        return(TX_NO_MEMORY);
 800e0ee:	2310      	movs	r3, #16
 800e0f0:	e12d      	b.n	800e34e <_txm_module_manager_internal_load+0x462>
 800e0f2:	bf00      	nop
 800e0f4:	24000020 	.word	0x24000020
 800e0f8:	2400f728 	.word	0x2400f728
 800e0fc:	2400f6ec 	.word	0x2400f6ec
 800e100:	4d4f4455 	.word	0x4d4f4455
 800e104:	2400f678 	.word	0x2400f678
 800e108:	2400f67c 	.word	0x2400f67c
 800e10c:	2400f680 	.word	0x2400f680
    }

    /* Clear the allocated memory.  */
    TX_MEMSET(memory_ptr, ((UCHAR) 0), data_allocation_size);
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e114:	2100      	movs	r1, #0
 800e116:	4618      	mov	r0, r3
 800e118:	f007 f8a8 	bl	801526c <memset>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800e11c:	f3ef 8310 	mrs	r3, PRIMASK
 800e120:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800e122:	b672      	cpsid	i
    return(primask_value);
 800e124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    
    /* Disable interrupts.  */
    TX_DISABLE
 800e126:	647b      	str	r3, [r7, #68]	; 0x44
   
    /* Setup the module instance structure.  */
    module_instance -> txm_module_instance_id = TXM_MODULE_ID;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	4a8b      	ldr	r2, [pc, #556]	; (800e358 <_txm_module_manager_internal_load+0x46c>)
 800e12c:	601a      	str	r2, [r3, #0]

    /* Save the module name.  */
    module_instance -> txm_module_instance_name =  module_name;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	68ba      	ldr	r2, [r7, #8]
 800e132:	605a      	str	r2, [r3, #4]

    /* Save the module properties.  */
    module_instance -> txm_module_instance_property_flags =  module_preamble -> txm_module_preamble_property_flags;
 800e134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e136:	695a      	ldr	r2, [r3, #20]
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	60da      	str	r2, [r3, #12]

    /* Set the module data memory allocation. This is the address released 
       when the module is unloaded.  */
    module_instance -> txm_module_instance_data_allocation_ptr =  (VOID *) memory_ptr;
 800e13c:	697a      	ldr	r2, [r7, #20]
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	625a      	str	r2, [r3, #36]	; 0x24

    /* Save the data allocation size.  */
    module_instance -> txm_module_instance_data_allocation_size =   data_allocation_size;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e146:	629a      	str	r2, [r3, #40]	; 0x28

    /* Calculate the actual start of the data area. This needs to be adjusted based on the alignment.  */
    data_start =  (ALIGN_TYPE) memory_ptr;
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	643b      	str	r3, [r7, #64]	; 0x40
    data_start =  (data_start + (((ALIGN_TYPE)data_alignment) - 1)) & ~(((ALIGN_TYPE)data_alignment) - 1);
 800e14c:	69ba      	ldr	r2, [r7, #24]
 800e14e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e150:	4413      	add	r3, r2
 800e152:	1e5a      	subs	r2, r3, #1
 800e154:	69bb      	ldr	r3, [r7, #24]
 800e156:	425b      	negs	r3, r3
 800e158:	4013      	ands	r3, r2
 800e15a:	643b      	str	r3, [r7, #64]	; 0x40
    memory_ptr =  (CHAR *) data_start;
 800e15c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e15e:	617b      	str	r3, [r7, #20]
    module_instance -> txm_module_instance_data_start =  (VOID *) memory_ptr;
 800e160:	697a      	ldr	r2, [r7, #20]
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Compute the end of the data memory allocation.  */
    module_instance -> txm_module_instance_data_end =  (VOID *) (memory_ptr + (data_size - 1));
 800e166:	697a      	ldr	r2, [r7, #20]
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	3b01      	subs	r3, #1
 800e16c:	441a      	add	r2, r3
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	631a      	str	r2, [r3, #48]	; 0x30

    /* Save the size of the data area.  */
    module_instance -> txm_module_instance_data_size =  data_size;
 800e172:	69fa      	ldr	r2, [r7, #28]
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	639a      	str	r2, [r3, #56]	; 0x38

    /* Set the module code memory allocation. This is the address released 
       when the module is unloaded.  */
    module_instance -> txm_module_instance_code_allocation_ptr =  (VOID *) code_allocation_ptr;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e17c:	611a      	str	r2, [r3, #16]

    /* Save the code allocation size.  */
    module_instance -> txm_module_instance_code_allocation_size =   code_allocation_size;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e182:	615a      	str	r2, [r3, #20]

    /* Setup the code pointers.  Since the code was loaded in-place, this is effectively just the values supplied in the API call.  */
    module_instance -> txm_module_instance_code_start =     (VOID *) module_location;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	619a      	str	r2, [r3, #24]
    module_instance -> txm_module_instance_code_end =       (VOID *) (((CHAR *) module_location) + (code_size - 1));
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	3b01      	subs	r3, #1
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	441a      	add	r2, r3
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	61da      	str	r2, [r3, #28]

    /* Setup the code size.  */
    module_instance -> txm_module_instance_code_size =      code_size;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	683a      	ldr	r2, [r7, #0]
 800e19a:	621a      	str	r2, [r3, #32]

    /* Save the module's total memory usage.  */
    module_instance -> txm_module_instance_total_ram_usage =  data_allocation_size + code_allocation_size;
 800e19c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e19e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e1a0:	441a      	add	r2, r3
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the module state to started.  */
    module_instance -> txm_module_instance_state =  TXM_MODULE_LOADED;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	609a      	str	r2, [r3, #8]

    /* Save the preamble pointer.  */
    module_instance -> txm_module_instance_preamble_ptr =  module_preamble;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e1b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Save the module application ID in the module instance.  */
    module_instance -> txm_module_instance_application_module_id =  module_preamble -> txm_module_preamble_application_module_id;
 800e1b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1b4:	691a      	ldr	r2, [r3, #16]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
  
    /* Setup the module's start/stop thread stack area.  */
    module_instance -> txm_module_instance_start_stop_stack_start_address =  (VOID *) (memory_ptr);
 800e1bc:	697a      	ldr	r2, [r7, #20]
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	641a      	str	r2, [r3, #64]	; 0x40
    module_instance -> txm_module_instance_start_stop_stack_size =           start_stop_stack_size;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e1c6:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
    module_instance -> txm_module_instance_start_stop_stack_end_address =    (VOID *) (memory_ptr + (start_stop_stack_size - 1));
 800e1ca:	697a      	ldr	r2, [r7, #20]
 800e1cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1ce:	3b01      	subs	r3, #1
 800e1d0:	441a      	add	r2, r3
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Move the memory pointer forward.  */
    memory_ptr =  memory_ptr + start_stop_stack_size;
 800e1d6:	697a      	ldr	r2, [r7, #20]
 800e1d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1da:	4413      	add	r3, r2
 800e1dc:	617b      	str	r3, [r7, #20]

    /* Save the start/stop thread priority.  */
    module_instance -> txm_module_instance_start_stop_priority =     module_preamble -> txm_module_preamble_start_stop_priority;
 800e1de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e1e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8

    /* Setup the module's callback thread stack area.  */
    module_instance -> txm_module_instance_callback_stack_start_address =  (VOID *) (memory_ptr);
 800e1e8:	697a      	ldr	r2, [r7, #20]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	649a      	str	r2, [r3, #72]	; 0x48
    module_instance -> txm_module_instance_callback_stack_size =           callback_stack_size;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e1f2:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
    module_instance -> txm_module_instance_callback_stack_end_address =    (VOID *) (memory_ptr + (callback_stack_size - 1));
 800e1f6:	697a      	ldr	r2, [r7, #20]
 800e1f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1fa:	3b01      	subs	r3, #1
 800e1fc:	441a      	add	r2, r3
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Move the memory pointer forward.  */
    memory_ptr =  memory_ptr + callback_stack_size;
 800e202:	697a      	ldr	r2, [r7, #20]
 800e204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e206:	4413      	add	r3, r2
 800e208:	617b      	str	r3, [r7, #20]

    /* Save the callback thread priority.  */
    module_instance -> txm_module_instance_callback_priority =  module_preamble -> txm_module_preamble_callback_priority;
 800e20a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e20c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0

    /* Setup the start of the module data section.  */
    module_instance -> txm_module_instance_module_data_base_address =  (VOID *) (memory_ptr);
 800e214:	697a      	ldr	r2, [r7, #20]
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	635a      	str	r2, [r3, #52]	; 0x34

    /* Calculate the function adjustments based on the specific implementation of the module manager/module.  */
    TXM_MODULE_MANAGER_CALCULATE_ADJUSTMENTS(module_preamble -> txm_module_preamble_property_flags, shell_function_adjust, start_function_adjust, stop_function_adjust, callback_function_adjust)
 800e21a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e21c:	695b      	ldr	r3, [r3, #20]
 800e21e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e222:	2b00      	cmp	r3, #0
 800e224:	d108      	bne.n	800e238 <_txm_module_manager_internal_load+0x34c>
 800e226:	2318      	movs	r3, #24
 800e228:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e22a:	231c      	movs	r3, #28
 800e22c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e22e:	2320      	movs	r3, #32
 800e230:	667b      	str	r3, [r7, #100]	; 0x64
 800e232:	232c      	movs	r3, #44	; 0x2c
 800e234:	663b      	str	r3, [r7, #96]	; 0x60
 800e236:	e017      	b.n	800e268 <_txm_module_manager_internal_load+0x37c>
 800e238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e23a:	695b      	ldr	r3, [r3, #20]
 800e23c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e244:	d108      	bne.n	800e258 <_txm_module_manager_internal_load+0x36c>
 800e246:	2300      	movs	r3, #0
 800e248:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e24a:	2300      	movs	r3, #0
 800e24c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e24e:	2300      	movs	r3, #0
 800e250:	667b      	str	r3, [r7, #100]	; 0x64
 800e252:	2300      	movs	r3, #0
 800e254:	663b      	str	r3, [r7, #96]	; 0x60
 800e256:	e007      	b.n	800e268 <_txm_module_manager_internal_load+0x37c>
 800e258:	2318      	movs	r3, #24
 800e25a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e25c:	231c      	movs	r3, #28
 800e25e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e260:	2320      	movs	r3, #32
 800e262:	667b      	str	r3, [r7, #100]	; 0x64
 800e264:	232c      	movs	r3, #44	; 0x2c
 800e266:	663b      	str	r3, [r7, #96]	; 0x60

    /* Build actual addresses based on load...  Setup all the function pointers. Any adjustments needed to shell entry, start function, and callback function are defined in the 
       module preamble. */
    module_instance -> txm_module_instance_shell_entry_function  =          (VOID (*)(TX_THREAD *, TXM_MODULE_INSTANCE *)) (((CHAR *) module_instance -> txm_module_instance_code_start) + 
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	699b      	ldr	r3, [r3, #24]
 800e26c:	4619      	mov	r1, r3
                                                                                                                                      (module_preamble -> txm_module_preamble_shell_entry_function) + 
 800e26e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e270:	699a      	ldr	r2, [r3, #24]
 800e272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e274:	4413      	add	r3, r2
    module_instance -> txm_module_instance_shell_entry_function  =          (VOID (*)(TX_THREAD *, TXM_MODULE_INSTANCE *)) (((CHAR *) module_instance -> txm_module_instance_code_start) + 
 800e276:	18ca      	adds	r2, r1, r3
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                                                                      (shell_function_adjust));
    module_instance -> txm_module_instance_start_thread_entry =             (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) + 
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	699b      	ldr	r3, [r3, #24]
                                                                                                                                      (module_preamble -> txm_module_preamble_start_function) + 
 800e280:	4619      	mov	r1, r3
 800e282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e284:	69da      	ldr	r2, [r3, #28]
 800e286:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e288:	4413      	add	r3, r2
    module_instance -> txm_module_instance_start_thread_entry =             (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) + 
 800e28a:	18ca      	adds	r2, r1, r3
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	659a      	str	r2, [r3, #88]	; 0x58
                                                                                                                                      (start_function_adjust));
    module_instance -> txm_module_instance_callback_request_thread_entry =  (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) + 
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	699b      	ldr	r3, [r3, #24]
                                                                                                                                      (module_preamble -> txm_module_preamble_callback_function) +
 800e294:	4619      	mov	r1, r3
 800e296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e29a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e29c:	4413      	add	r3, r2
    module_instance -> txm_module_instance_callback_request_thread_entry =  (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) + 
 800e29e:	18ca      	adds	r2, r1, r3
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	661a      	str	r2, [r3, #96]	; 0x60
                                                                                                                                      (callback_function_adjust));    
    /* Determine if there is a stop function for this module.  */
    if (module_preamble -> txm_module_preamble_stop_function)
 800e2a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2a6:	6a1b      	ldr	r3, [r3, #32]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00a      	beq.n	800e2c2 <_txm_module_manager_internal_load+0x3d6>
    {
    
        /* Yes, there is a stop function, build the address.  */
        module_instance -> txm_module_instance_stop_thread_entry =  (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) + 
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	699b      	ldr	r3, [r3, #24]
                                                                                                                                      (module_preamble -> txm_module_preamble_stop_function) + 
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2b4:	6a1a      	ldr	r2, [r3, #32]
 800e2b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e2b8:	4413      	add	r3, r2
        module_instance -> txm_module_instance_stop_thread_entry =  (VOID (*)(ULONG)) (((CHAR *) module_instance -> txm_module_instance_code_start) + 
 800e2ba:	18ca      	adds	r2, r1, r3
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	65da      	str	r2, [r3, #92]	; 0x5c
 800e2c0:	e002      	b.n	800e2c8 <_txm_module_manager_internal_load+0x3dc>
    }
    else
    {
    
        /* No, there is no stop function. Just set the pointer to NULL.  */
        module_instance -> txm_module_instance_stop_thread_entry =  TX_NULL;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    
    /* Load the module control block with port-specific information. */
    TXM_MODULE_MANAGER_MODULE_SETUP(module_instance);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	f003 0301 	and.w	r3, r3, #1
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d008      	beq.n	800e2e6 <_txm_module_manager_internal_load+0x3fa>
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	68db      	ldr	r3, [r3, #12]
 800e2d8:	f003 0302 	and.w	r3, r3, #2
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d002      	beq.n	800e2e6 <_txm_module_manager_internal_load+0x3fa>
 800e2e0:	68f8      	ldr	r0, [r7, #12]
 800e2e2:	f004 fe31 	bl	8012f48 <_txm_module_manager_mm_register_setup>
    
    /* Now add the module to the linked list of created modules.  */
    if (_txm_module_manger_loaded_count++ == 0)
 800e2e6:	4b1d      	ldr	r3, [pc, #116]	; (800e35c <_txm_module_manager_internal_load+0x470>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	1c5a      	adds	r2, r3, #1
 800e2ec:	491b      	ldr	r1, [pc, #108]	; (800e35c <_txm_module_manager_internal_load+0x470>)
 800e2ee:	600a      	str	r2, [r1, #0]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d10b      	bne.n	800e30c <_txm_module_manager_internal_load+0x420>
    {

        /* The loaded module list is empty.  Add module to empty list.  */
        _txm_module_manager_loaded_list_ptr =                     module_instance;
 800e2f4:	4a1a      	ldr	r2, [pc, #104]	; (800e360 <_txm_module_manager_internal_load+0x474>)
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	6013      	str	r3, [r2, #0]
        module_instance -> txm_module_instance_loaded_next =      module_instance;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	68fa      	ldr	r2, [r7, #12]
 800e2fe:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4
        module_instance -> txm_module_instance_loaded_previous =  module_instance;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	68fa      	ldr	r2, [r7, #12]
 800e306:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
 800e30a:	e016      	b.n	800e33a <_txm_module_manager_internal_load+0x44e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_module =      _txm_module_manager_loaded_list_ptr;
 800e30c:	4b14      	ldr	r3, [pc, #80]	; (800e360 <_txm_module_manager_internal_load+0x474>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	63fb      	str	r3, [r7, #60]	; 0x3c
        previous_module =  next_module -> txm_module_instance_loaded_previous;
 800e312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e314:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 800e318:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Place the new module in the list.  */
        next_module -> txm_module_instance_loaded_previous =  module_instance;
 800e31a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e31c:	68fa      	ldr	r2, [r7, #12]
 800e31e:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
        previous_module -> txm_module_instance_loaded_next =  module_instance;
 800e322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e324:	68fa      	ldr	r2, [r7, #12]
 800e326:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

        /* Setup this module's created links.  */
        module_instance -> txm_module_instance_loaded_previous =  previous_module;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e32e:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
        module_instance -> txm_module_instance_loaded_next =      next_module;    
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e336:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4
 800e33a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e33c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800e33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e340:	f383 8810 	msr	PRIMASK, r3
}
 800e344:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    _tx_mutex_put(&_txm_module_manager_mutex);
 800e346:	4807      	ldr	r0, [pc, #28]	; (800e364 <_txm_module_manager_internal_load+0x478>)
 800e348:	f7f9 ffd2 	bl	80082f0 <_tx_mutex_put>

    /* Return success.  */
    return(TX_SUCCESS);
 800e34c:	2300      	movs	r3, #0
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3770      	adds	r7, #112	; 0x70
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	4d4f4455 	.word	0x4d4f4455
 800e35c:	2400f724 	.word	0x2400f724
 800e360:	2400f720 	.word	0x2400f720
 800e364:	2400f6ec 	.word	0x2400f6ec

0800e368 <_txm_module_manager_tx_block_allocate_dispatch>:
    TX_BLOCK_POOL *pool_ptr, -> param_0
    VOID **block_ptr, -> param_1
    ULONG wait_option -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_block_allocate_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b086      	sub	sp, #24
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	607a      	str	r2, [r7, #4]
 800e374:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	68db      	ldr	r3, [r3, #12]
 800e37a:	f003 0302 	and.w	r3, r3, #2
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d02b      	beq.n	800e3da <_txm_module_manager_tx_block_allocate_dispatch+0x72>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BLOCK_POOL)))
 800e382:	2230      	movs	r2, #48	; 0x30
 800e384:	68b9      	ldr	r1, [r7, #8]
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	f004 fee8 	bl	801315c <_txm_module_manager_inside_data_check>
 800e38c:	4603      	mov	r3, r0
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d111      	bne.n	800e3b6 <_txm_module_manager_tx_block_allocate_dispatch+0x4e>
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800e398:	d812      	bhi.n	800e3c0 <_txm_module_manager_tx_block_allocate_dispatch+0x58>
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	699b      	ldr	r3, [r3, #24]
 800e39e:	461a      	mov	r2, r3
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d30c      	bcc.n	800e3c0 <_txm_module_manager_tx_block_allocate_dispatch+0x58>
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	69db      	ldr	r3, [r3, #28]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d804      	bhi.n	800e3c0 <_txm_module_manager_tx_block_allocate_dispatch+0x58>
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d001      	beq.n	800e3c0 <_txm_module_manager_tx_block_allocate_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 800e3bc:	23f4      	movs	r3, #244	; 0xf4
 800e3be:	e014      	b.n	800e3ea <_txm_module_manager_tx_block_allocate_dispatch+0x82>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(VOID *)))
 800e3c0:	2204      	movs	r2, #4
 800e3c2:	6879      	ldr	r1, [r7, #4]
 800e3c4:	68f8      	ldr	r0, [r7, #12]
 800e3c6:	f004 fec9 	bl	801315c <_txm_module_manager_inside_data_check>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d104      	bne.n	800e3da <_txm_module_manager_tx_block_allocate_dispatch+0x72>
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d001      	beq.n	800e3da <_txm_module_manager_tx_block_allocate_dispatch+0x72>
            return(TXM_MODULE_INVALID_MEMORY);
 800e3d6:	23f4      	movs	r3, #244	; 0xf4
 800e3d8:	e007      	b.n	800e3ea <_txm_module_manager_tx_block_allocate_dispatch+0x82>
    }

    return_value = (ALIGN_TYPE) _txe_block_allocate(
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	6879      	ldr	r1, [r7, #4]
 800e3de:	683a      	ldr	r2, [r7, #0]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7fd fb9b 	bl	800bb1c <_txe_block_allocate>
 800e3e6:	6178      	str	r0, [r7, #20]
        (TX_BLOCK_POOL *) param_0,
        (VOID **) param_1,
        (ULONG) param_2
    );
    return(return_value);
 800e3e8:	697b      	ldr	r3, [r7, #20]
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3718      	adds	r7, #24
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
	...

0800e3f4 <_txm_module_manager_tx_block_pool_create_dispatch>:
    VOID *pool_start, -> extra_parameters[1]
    ULONG pool_size, -> extra_parameters[2]
    UINT pool_control_block_size -> extra_parameters[3]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_block_pool_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800e3f4:	b5b0      	push	{r4, r5, r7, lr}
 800e3f6:	b088      	sub	sp, #32
 800e3f8:	af02      	add	r7, sp, #8
 800e3fa:	60f8      	str	r0, [r7, #12]
 800e3fc:	60b9      	str	r1, [r7, #8]
 800e3fe:	607a      	str	r2, [r7, #4]
 800e400:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	68db      	ldr	r3, [r3, #12]
 800e406:	f003 0302 	and.w	r3, r3, #2
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d05f      	beq.n	800e4ce <_txm_module_manager_tx_block_pool_create_dispatch+0xda>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_BLOCK_POOL)))
 800e40e:	4b3d      	ldr	r3, [pc, #244]	; (800e504 <_txm_module_manager_tx_block_pool_create_dispatch+0x110>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2b01      	cmp	r3, #1
 800e414:	d119      	bne.n	800e44a <_txm_module_manager_tx_block_pool_create_dispatch+0x56>
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800e41c:	d815      	bhi.n	800e44a <_txm_module_manager_tx_block_pool_create_dispatch+0x56>
 800e41e:	4b3a      	ldr	r3, [pc, #232]	; (800e508 <_txm_module_manager_tx_block_pool_create_dispatch+0x114>)
 800e420:	699b      	ldr	r3, [r3, #24]
 800e422:	3310      	adds	r3, #16
 800e424:	68ba      	ldr	r2, [r7, #8]
 800e426:	429a      	cmp	r2, r3
 800e428:	d30f      	bcc.n	800e44a <_txm_module_manager_tx_block_pool_create_dispatch+0x56>
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	3330      	adds	r3, #48	; 0x30
 800e42e:	4a36      	ldr	r2, [pc, #216]	; (800e508 <_txm_module_manager_tx_block_pool_create_dispatch+0x114>)
 800e430:	6991      	ldr	r1, [r2, #24]
 800e432:	4a35      	ldr	r2, [pc, #212]	; (800e508 <_txm_module_manager_tx_block_pool_create_dispatch+0x114>)
 800e434:	69d2      	ldr	r2, [r2, #28]
 800e436:	440a      	add	r2, r1
 800e438:	4293      	cmp	r3, r2
 800e43a:	d806      	bhi.n	800e44a <_txm_module_manager_tx_block_pool_create_dispatch+0x56>
 800e43c:	2130      	movs	r1, #48	; 0x30
 800e43e:	68b8      	ldr	r0, [r7, #8]
 800e440:	f006 fa26 	bl	8014890 <_txm_module_manager_object_size_check>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d004      	beq.n	800e454 <_txm_module_manager_tx_block_pool_create_dispatch+0x60>
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d001      	beq.n	800e454 <_txm_module_manager_tx_block_pool_create_dispatch+0x60>
            return(TXM_MODULE_INVALID_MEMORY);
 800e450:	23f4      	movs	r3, #244	; 0xf4
 800e452:	e052      	b.n	800e4fa <_txm_module_manager_tx_block_pool_create_dispatch+0x106>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 800e454:	2201      	movs	r2, #1
 800e456:	6879      	ldr	r1, [r7, #4]
 800e458:	68f8      	ldr	r0, [r7, #12]
 800e45a:	f004 fe7f 	bl	801315c <_txm_module_manager_inside_data_check>
 800e45e:	4603      	mov	r3, r0
 800e460:	2b00      	cmp	r3, #0
 800e462:	d115      	bne.n	800e490 <_txm_module_manager_tx_block_pool_create_dispatch+0x9c>
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e46a:	d00c      	beq.n	800e486 <_txm_module_manager_tx_block_pool_create_dispatch+0x92>
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	699b      	ldr	r3, [r3, #24]
 800e470:	461a      	mov	r2, r3
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	4293      	cmp	r3, r2
 800e476:	d306      	bcc.n	800e486 <_txm_module_manager_tx_block_pool_create_dispatch+0x92>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	1c5a      	adds	r2, r3, #1
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	69db      	ldr	r3, [r3, #28]
 800e480:	3301      	adds	r3, #1
 800e482:	429a      	cmp	r2, r3
 800e484:	d904      	bls.n	800e490 <_txm_module_manager_tx_block_pool_create_dispatch+0x9c>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d001      	beq.n	800e490 <_txm_module_manager_tx_block_pool_create_dispatch+0x9c>
            return(TXM_MODULE_INVALID_MEMORY);
 800e48c:	23f4      	movs	r3, #244	; 0xf4
 800e48e:	e034      	b.n	800e4fa <_txm_module_manager_tx_block_pool_create_dispatch+0x106>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[2])))
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	2208      	movs	r2, #8
 800e494:	4619      	mov	r1, r3
 800e496:	68f8      	ldr	r0, [r7, #12]
 800e498:	f004 fe60 	bl	801315c <_txm_module_manager_inside_data_check>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d101      	bne.n	800e4a6 <_txm_module_manager_tx_block_pool_create_dispatch+0xb2>
            return(TXM_MODULE_INVALID_MEMORY);
 800e4a2:	23f4      	movs	r3, #244	; 0xf4
 800e4a4:	e029      	b.n	800e4fa <_txm_module_manager_tx_block_pool_create_dispatch+0x106>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], extra_parameters[2]))
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	3304      	adds	r3, #4
 800e4aa:	6819      	ldr	r1, [r3, #0]
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	3308      	adds	r3, #8
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	68f8      	ldr	r0, [r7, #12]
 800e4b6:	f004 fe51 	bl	801315c <_txm_module_manager_inside_data_check>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d106      	bne.n	800e4ce <_txm_module_manager_tx_block_pool_create_dispatch+0xda>
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	3304      	adds	r3, #4
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d001      	beq.n	800e4ce <_txm_module_manager_tx_block_pool_create_dispatch+0xda>
            return(TXM_MODULE_INVALID_MEMORY);
 800e4ca:	23f4      	movs	r3, #244	; 0xf4
 800e4cc:	e015      	b.n	800e4fa <_txm_module_manager_tx_block_pool_create_dispatch+0x106>
    }

    return_value = (ALIGN_TYPE) _txe_block_pool_create(
 800e4ce:	68b8      	ldr	r0, [r7, #8]
 800e4d0:	6879      	ldr	r1, [r7, #4]
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	681c      	ldr	r4, [r3, #0]
        (TX_BLOCK_POOL *) param_0,
        (CHAR *) param_1,
        (ULONG) extra_parameters[0],
        (VOID *) extra_parameters[1],
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	3304      	adds	r3, #4
 800e4da:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_block_pool_create(
 800e4dc:	461d      	mov	r5, r3
        (ULONG) extra_parameters[2],
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	3308      	adds	r3, #8
    return_value = (ALIGN_TYPE) _txe_block_pool_create(
 800e4e2:	681b      	ldr	r3, [r3, #0]
        (UINT) extra_parameters[3]
 800e4e4:	683a      	ldr	r2, [r7, #0]
 800e4e6:	320c      	adds	r2, #12
    return_value = (ALIGN_TYPE) _txe_block_pool_create(
 800e4e8:	6812      	ldr	r2, [r2, #0]
 800e4ea:	9201      	str	r2, [sp, #4]
 800e4ec:	9300      	str	r3, [sp, #0]
 800e4ee:	462b      	mov	r3, r5
 800e4f0:	4622      	mov	r2, r4
 800e4f2:	f7fd fb5d 	bl	800bbb0 <_txe_block_pool_create>
 800e4f6:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800e4f8:	697b      	ldr	r3, [r7, #20]
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3718      	adds	r7, #24
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bdb0      	pop	{r4, r5, r7, pc}
 800e502:	bf00      	nop
 800e504:	2400f6e8 	.word	0x2400f6e8
 800e508:	2400f6b4 	.word	0x2400f6b4

0800e50c <_txm_module_manager_tx_block_pool_delete_dispatch>:

/* UINT _txe_block_pool_delete(
    TX_BLOCK_POOL *pool_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_block_pool_delete_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	f003 0302 	and.w	r3, r3, #2
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d01e      	beq.n	800e560 <_txm_module_manager_tx_block_pool_delete_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BLOCK_POOL)))
 800e522:	2230      	movs	r2, #48	; 0x30
 800e524:	6839      	ldr	r1, [r7, #0]
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f004 fe18 	bl	801315c <_txm_module_manager_inside_data_check>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d111      	bne.n	800e556 <_txm_module_manager_tx_block_pool_delete_dispatch+0x4a>
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800e538:	d812      	bhi.n	800e560 <_txm_module_manager_tx_block_pool_delete_dispatch+0x54>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	699b      	ldr	r3, [r3, #24]
 800e53e:	461a      	mov	r2, r3
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	4293      	cmp	r3, r2
 800e544:	d30c      	bcc.n	800e560 <_txm_module_manager_tx_block_pool_delete_dispatch+0x54>
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	69db      	ldr	r3, [r3, #28]
 800e550:	3301      	adds	r3, #1
 800e552:	429a      	cmp	r2, r3
 800e554:	d804      	bhi.n	800e560 <_txm_module_manager_tx_block_pool_delete_dispatch+0x54>
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d001      	beq.n	800e560 <_txm_module_manager_tx_block_pool_delete_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 800e55c:	23f4      	movs	r3, #244	; 0xf4
 800e55e:	e00d      	b.n	800e57c <_txm_module_manager_tx_block_pool_delete_dispatch+0x70>
    }

    return_value = (ALIGN_TYPE) _txe_block_pool_delete(
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	4618      	mov	r0, r3
 800e564:	f7fd fbc8 	bl	800bcf8 <_txe_block_pool_delete>
 800e568:	60f8      	str	r0, [r7, #12]
        (TX_BLOCK_POOL *) param_0
    );

    /* Deallocate object memory.  */
    if (return_value == TX_SUCCESS)
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d104      	bne.n	800e57a <_txm_module_manager_tx_block_pool_delete_dispatch+0x6e>
    {
        return_value = _txm_module_manager_object_deallocate((VOID *) param_0);
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	4618      	mov	r0, r3
 800e574:	f004 fea8 	bl	80132c8 <_txm_module_manager_object_deallocate>
 800e578:	60f8      	str	r0, [r7, #12]
    }
    return(return_value);
 800e57a:	68fb      	ldr	r3, [r7, #12]
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3710      	adds	r7, #16
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <_txm_module_manager_tx_block_pool_info_get_dispatch>:
    TX_THREAD **first_suspended, -> extra_parameters[2]
    ULONG *suspended_count, -> extra_parameters[3]
    TX_BLOCK_POOL **next_pool -> extra_parameters[4]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_block_pool_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800e584:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e586:	b08b      	sub	sp, #44	; 0x2c
 800e588:	af04      	add	r7, sp, #16
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	607a      	str	r2, [r7, #4]
 800e590:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	68db      	ldr	r3, [r3, #12]
 800e596:	f003 0302 	and.w	r3, r3, #2
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	f000 808f 	beq.w	800e6be <_txm_module_manager_tx_block_pool_info_get_dispatch+0x13a>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BLOCK_POOL)))
 800e5a0:	2230      	movs	r2, #48	; 0x30
 800e5a2:	68b9      	ldr	r1, [r7, #8]
 800e5a4:	68f8      	ldr	r0, [r7, #12]
 800e5a6:	f004 fdd9 	bl	801315c <_txm_module_manager_inside_data_check>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d111      	bne.n	800e5d4 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x50>
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800e5b6:	d812      	bhi.n	800e5de <_txm_module_manager_tx_block_pool_info_get_dispatch+0x5a>
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	699b      	ldr	r3, [r3, #24]
 800e5bc:	461a      	mov	r2, r3
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d30c      	bcc.n	800e5de <_txm_module_manager_tx_block_pool_info_get_dispatch+0x5a>
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	69db      	ldr	r3, [r3, #28]
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d804      	bhi.n	800e5de <_txm_module_manager_tx_block_pool_info_get_dispatch+0x5a>
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d001      	beq.n	800e5de <_txm_module_manager_tx_block_pool_info_get_dispatch+0x5a>
            return(TXM_MODULE_INVALID_MEMORY);
 800e5da:	23f4      	movs	r3, #244	; 0xf4
 800e5dc:	e08c      	b.n	800e6f8 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(CHAR *)))
 800e5de:	2204      	movs	r2, #4
 800e5e0:	6879      	ldr	r1, [r7, #4]
 800e5e2:	68f8      	ldr	r0, [r7, #12]
 800e5e4:	f004 fdba 	bl	801315c <_txm_module_manager_inside_data_check>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d104      	bne.n	800e5f8 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x74>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d001      	beq.n	800e5f8 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x74>
            return(TXM_MODULE_INVALID_MEMORY);
 800e5f4:	23f4      	movs	r3, #244	; 0xf4
 800e5f6:	e07f      	b.n	800e6f8 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[5])))
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	2214      	movs	r2, #20
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	68f8      	ldr	r0, [r7, #12]
 800e600:	f004 fdac 	bl	801315c <_txm_module_manager_inside_data_check>
 800e604:	4603      	mov	r3, r0
 800e606:	2b00      	cmp	r3, #0
 800e608:	d101      	bne.n	800e60e <_txm_module_manager_tx_block_pool_info_get_dispatch+0x8a>
            return(TXM_MODULE_INVALID_MEMORY);
 800e60a:	23f4      	movs	r3, #244	; 0xf4
 800e60c:	e074      	b.n	800e6f8 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	2204      	movs	r2, #4
 800e614:	4619      	mov	r1, r3
 800e616:	68f8      	ldr	r0, [r7, #12]
 800e618:	f004 fda0 	bl	801315c <_txm_module_manager_inside_data_check>
 800e61c:	4603      	mov	r3, r0
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d105      	bne.n	800e62e <_txm_module_manager_tx_block_pool_info_get_dispatch+0xaa>
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d001      	beq.n	800e62e <_txm_module_manager_tx_block_pool_info_get_dispatch+0xaa>
            return(TXM_MODULE_INVALID_MEMORY);
 800e62a:	23f4      	movs	r3, #244	; 0xf4
 800e62c:	e064      	b.n	800e6f8 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	3304      	adds	r3, #4
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	2204      	movs	r2, #4
 800e636:	4619      	mov	r1, r3
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	f004 fd8f 	bl	801315c <_txm_module_manager_inside_data_check>
 800e63e:	4603      	mov	r3, r0
 800e640:	2b00      	cmp	r3, #0
 800e642:	d106      	bne.n	800e652 <_txm_module_manager_tx_block_pool_info_get_dispatch+0xce>
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	3304      	adds	r3, #4
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d001      	beq.n	800e652 <_txm_module_manager_tx_block_pool_info_get_dispatch+0xce>
            return(TXM_MODULE_INVALID_MEMORY);
 800e64e:	23f4      	movs	r3, #244	; 0xf4
 800e650:	e052      	b.n	800e6f8 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(TX_THREAD *)))
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	3308      	adds	r3, #8
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	2204      	movs	r2, #4
 800e65a:	4619      	mov	r1, r3
 800e65c:	68f8      	ldr	r0, [r7, #12]
 800e65e:	f004 fd7d 	bl	801315c <_txm_module_manager_inside_data_check>
 800e662:	4603      	mov	r3, r0
 800e664:	2b00      	cmp	r3, #0
 800e666:	d106      	bne.n	800e676 <_txm_module_manager_tx_block_pool_info_get_dispatch+0xf2>
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	3308      	adds	r3, #8
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d001      	beq.n	800e676 <_txm_module_manager_tx_block_pool_info_get_dispatch+0xf2>
            return(TXM_MODULE_INVALID_MEMORY);
 800e672:	23f4      	movs	r3, #244	; 0xf4
 800e674:	e040      	b.n	800e6f8 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	330c      	adds	r3, #12
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	2204      	movs	r2, #4
 800e67e:	4619      	mov	r1, r3
 800e680:	68f8      	ldr	r0, [r7, #12]
 800e682:	f004 fd6b 	bl	801315c <_txm_module_manager_inside_data_check>
 800e686:	4603      	mov	r3, r0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d106      	bne.n	800e69a <_txm_module_manager_tx_block_pool_info_get_dispatch+0x116>
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	330c      	adds	r3, #12
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d001      	beq.n	800e69a <_txm_module_manager_tx_block_pool_info_get_dispatch+0x116>
            return(TXM_MODULE_INVALID_MEMORY);
 800e696:	23f4      	movs	r3, #244	; 0xf4
 800e698:	e02e      	b.n	800e6f8 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(TX_BLOCK_POOL *)))
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	3310      	adds	r3, #16
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	2204      	movs	r2, #4
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	68f8      	ldr	r0, [r7, #12]
 800e6a6:	f004 fd59 	bl	801315c <_txm_module_manager_inside_data_check>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d106      	bne.n	800e6be <_txm_module_manager_tx_block_pool_info_get_dispatch+0x13a>
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	3310      	adds	r3, #16
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d001      	beq.n	800e6be <_txm_module_manager_tx_block_pool_info_get_dispatch+0x13a>
            return(TXM_MODULE_INVALID_MEMORY);
 800e6ba:	23f4      	movs	r3, #244	; 0xf4
 800e6bc:	e01c      	b.n	800e6f8 <_txm_module_manager_tx_block_pool_info_get_dispatch+0x174>
    }

    return_value = (ALIGN_TYPE) _txe_block_pool_info_get(
 800e6be:	68b8      	ldr	r0, [r7, #8]
 800e6c0:	6879      	ldr	r1, [r7, #4]
        (TX_BLOCK_POOL *) param_0,
        (CHAR **) param_1,
        (ULONG *) extra_parameters[0],
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_block_pool_info_get(
 800e6c6:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[1],
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	3304      	adds	r3, #4
 800e6cc:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_block_pool_info_get(
 800e6ce:	461e      	mov	r6, r3
        (TX_THREAD **) extra_parameters[2],
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	3308      	adds	r3, #8
 800e6d4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_block_pool_info_get(
 800e6d6:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	330c      	adds	r3, #12
 800e6dc:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_block_pool_info_get(
 800e6de:	461c      	mov	r4, r3
        (TX_BLOCK_POOL **) extra_parameters[4]
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	3310      	adds	r3, #16
 800e6e4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_block_pool_info_get(
 800e6e6:	9302      	str	r3, [sp, #8]
 800e6e8:	9401      	str	r4, [sp, #4]
 800e6ea:	9200      	str	r2, [sp, #0]
 800e6ec:	4633      	mov	r3, r6
 800e6ee:	462a      	mov	r2, r5
 800e6f0:	f7fd fb40 	bl	800bd74 <_txe_block_pool_info_get>
 800e6f4:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800e6f6:	697b      	ldr	r3, [r7, #20]
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	371c      	adds	r7, #28
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e700 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch>:
    ULONG *releases, -> extra_parameters[0]
    ULONG *suspensions, -> extra_parameters[1]
    ULONG *timeouts -> extra_parameters[2]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_block_pool_performance_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800e700:	b590      	push	{r4, r7, lr}
 800e702:	b089      	sub	sp, #36	; 0x24
 800e704:	af02      	add	r7, sp, #8
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	607a      	str	r2, [r7, #4]
 800e70c:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	f003 0302 	and.w	r3, r3, #2
 800e716:	2b00      	cmp	r3, #0
 800e718:	d06a      	beq.n	800e7f0 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0xf0>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BLOCK_POOL)))
 800e71a:	2230      	movs	r2, #48	; 0x30
 800e71c:	68b9      	ldr	r1, [r7, #8]
 800e71e:	68f8      	ldr	r0, [r7, #12]
 800e720:	f004 fd1c 	bl	801315c <_txm_module_manager_inside_data_check>
 800e724:	4603      	mov	r3, r0
 800e726:	2b00      	cmp	r3, #0
 800e728:	d111      	bne.n	800e74e <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x4e>
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800e730:	d812      	bhi.n	800e758 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x58>
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	699b      	ldr	r3, [r3, #24]
 800e736:	461a      	mov	r2, r3
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d30c      	bcc.n	800e758 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x58>
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	69db      	ldr	r3, [r3, #28]
 800e748:	3301      	adds	r3, #1
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d804      	bhi.n	800e758 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x58>
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d001      	beq.n	800e758 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 800e754:	23f4      	movs	r3, #244	; 0xf4
 800e756:	e05d      	b.n	800e814 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x114>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800e758:	2204      	movs	r2, #4
 800e75a:	6879      	ldr	r1, [r7, #4]
 800e75c:	68f8      	ldr	r0, [r7, #12]
 800e75e:	f004 fcfd 	bl	801315c <_txm_module_manager_inside_data_check>
 800e762:	4603      	mov	r3, r0
 800e764:	2b00      	cmp	r3, #0
 800e766:	d104      	bne.n	800e772 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x72>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d001      	beq.n	800e772 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x72>
            return(TXM_MODULE_INVALID_MEMORY);
 800e76e:	23f4      	movs	r3, #244	; 0xf4
 800e770:	e050      	b.n	800e814 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x114>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[3])))
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	220c      	movs	r2, #12
 800e776:	4619      	mov	r1, r3
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f004 fcef 	bl	801315c <_txm_module_manager_inside_data_check>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d101      	bne.n	800e788 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x88>
            return(TXM_MODULE_INVALID_MEMORY);
 800e784:	23f4      	movs	r3, #244	; 0xf4
 800e786:	e045      	b.n	800e814 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x114>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	2204      	movs	r2, #4
 800e78e:	4619      	mov	r1, r3
 800e790:	68f8      	ldr	r0, [r7, #12]
 800e792:	f004 fce3 	bl	801315c <_txm_module_manager_inside_data_check>
 800e796:	4603      	mov	r3, r0
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d105      	bne.n	800e7a8 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0xa8>
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d001      	beq.n	800e7a8 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0xa8>
            return(TXM_MODULE_INVALID_MEMORY);
 800e7a4:	23f4      	movs	r3, #244	; 0xf4
 800e7a6:	e035      	b.n	800e814 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x114>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	3304      	adds	r3, #4
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	2204      	movs	r2, #4
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	68f8      	ldr	r0, [r7, #12]
 800e7b4:	f004 fcd2 	bl	801315c <_txm_module_manager_inside_data_check>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d106      	bne.n	800e7cc <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0xcc>
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	3304      	adds	r3, #4
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d001      	beq.n	800e7cc <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0xcc>
            return(TXM_MODULE_INVALID_MEMORY);
 800e7c8:	23f4      	movs	r3, #244	; 0xf4
 800e7ca:	e023      	b.n	800e814 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x114>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	3308      	adds	r3, #8
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	2204      	movs	r2, #4
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	68f8      	ldr	r0, [r7, #12]
 800e7d8:	f004 fcc0 	bl	801315c <_txm_module_manager_inside_data_check>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d106      	bne.n	800e7f0 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0xf0>
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	3308      	adds	r3, #8
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d001      	beq.n	800e7f0 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0xf0>
            return(TXM_MODULE_INVALID_MEMORY);
 800e7ec:	23f4      	movs	r3, #244	; 0xf4
 800e7ee:	e011      	b.n	800e814 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch+0x114>
    }

    return_value = (ALIGN_TYPE) _tx_block_pool_performance_info_get(
 800e7f0:	68b8      	ldr	r0, [r7, #8]
 800e7f2:	6879      	ldr	r1, [r7, #4]
        (TX_BLOCK_POOL *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_block_pool_performance_info_get(
 800e7f8:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[1],
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	3304      	adds	r3, #4
 800e7fe:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_block_pool_performance_info_get(
 800e800:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[2]
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	3308      	adds	r3, #8
 800e806:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_block_pool_performance_info_get(
 800e808:	9300      	str	r3, [sp, #0]
 800e80a:	4623      	mov	r3, r4
 800e80c:	f006 f8c8 	bl	80149a0 <_tx_block_pool_performance_info_get>
 800e810:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800e812:	697b      	ldr	r3, [r7, #20]
}
 800e814:	4618      	mov	r0, r3
 800e816:	371c      	adds	r7, #28
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd90      	pop	{r4, r7, pc}

0800e81c <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch>:
    ULONG *releases, -> param_1
    ULONG *suspensions, -> extra_parameters[0]
    ULONG *timeouts -> extra_parameters[1]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_block_pool_performance_system_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b086      	sub	sp, #24
 800e820:	af00      	add	r7, sp, #0
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	607a      	str	r2, [r7, #4]
 800e828:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	68db      	ldr	r3, [r3, #12]
 800e82e:	f003 0302 	and.w	r3, r3, #2
 800e832:	2b00      	cmp	r3, #0
 800e834:	d046      	beq.n	800e8c4 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0xa8>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(ULONG)))
 800e836:	2204      	movs	r2, #4
 800e838:	68b9      	ldr	r1, [r7, #8]
 800e83a:	68f8      	ldr	r0, [r7, #12]
 800e83c:	f004 fc8e 	bl	801315c <_txm_module_manager_inside_data_check>
 800e840:	4603      	mov	r3, r0
 800e842:	2b00      	cmp	r3, #0
 800e844:	d104      	bne.n	800e850 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x34>
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d001      	beq.n	800e850 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x34>
            return(TXM_MODULE_INVALID_MEMORY);
 800e84c:	23f4      	movs	r3, #244	; 0xf4
 800e84e:	e045      	b.n	800e8dc <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0xc0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800e850:	2204      	movs	r2, #4
 800e852:	6879      	ldr	r1, [r7, #4]
 800e854:	68f8      	ldr	r0, [r7, #12]
 800e856:	f004 fc81 	bl	801315c <_txm_module_manager_inside_data_check>
 800e85a:	4603      	mov	r3, r0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d104      	bne.n	800e86a <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x4e>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d001      	beq.n	800e86a <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x4e>
            return(TXM_MODULE_INVALID_MEMORY);
 800e866:	23f4      	movs	r3, #244	; 0xf4
 800e868:	e038      	b.n	800e8dc <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0xc0>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[2])))
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	2208      	movs	r2, #8
 800e86e:	4619      	mov	r1, r3
 800e870:	68f8      	ldr	r0, [r7, #12]
 800e872:	f004 fc73 	bl	801315c <_txm_module_manager_inside_data_check>
 800e876:	4603      	mov	r3, r0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d101      	bne.n	800e880 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x64>
            return(TXM_MODULE_INVALID_MEMORY);
 800e87c:	23f4      	movs	r3, #244	; 0xf4
 800e87e:	e02d      	b.n	800e8dc <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0xc0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2204      	movs	r2, #4
 800e886:	4619      	mov	r1, r3
 800e888:	68f8      	ldr	r0, [r7, #12]
 800e88a:	f004 fc67 	bl	801315c <_txm_module_manager_inside_data_check>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d105      	bne.n	800e8a0 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x84>
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d001      	beq.n	800e8a0 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0x84>
            return(TXM_MODULE_INVALID_MEMORY);
 800e89c:	23f4      	movs	r3, #244	; 0xf4
 800e89e:	e01d      	b.n	800e8dc <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0xc0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	3304      	adds	r3, #4
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2204      	movs	r2, #4
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	f004 fc56 	bl	801315c <_txm_module_manager_inside_data_check>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d106      	bne.n	800e8c4 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0xa8>
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	3304      	adds	r3, #4
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d001      	beq.n	800e8c4 <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0xa8>
            return(TXM_MODULE_INVALID_MEMORY);
 800e8c0:	23f4      	movs	r3, #244	; 0xf4
 800e8c2:	e00b      	b.n	800e8dc <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch+0xc0>
    }

    return_value = (ALIGN_TYPE) _tx_block_pool_performance_system_info_get(
 800e8c4:	68b8      	ldr	r0, [r7, #8]
 800e8c6:	6879      	ldr	r1, [r7, #4]
        (ULONG *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_block_pool_performance_system_info_get(
 800e8cc:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[1]
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	3304      	adds	r3, #4
 800e8d2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_block_pool_performance_system_info_get(
 800e8d4:	f006 f892 	bl	80149fc <_tx_block_pool_performance_system_info_get>
 800e8d8:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800e8da:	697b      	ldr	r3, [r7, #20]
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3718      	adds	r7, #24
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <_txm_module_manager_tx_block_pool_prioritize_dispatch>:

/* UINT _txe_block_pool_prioritize(
    TX_BLOCK_POOL *pool_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_block_pool_prioritize_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b084      	sub	sp, #16
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	68db      	ldr	r3, [r3, #12]
 800e8f2:	f003 0302 	and.w	r3, r3, #2
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d01e      	beq.n	800e938 <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BLOCK_POOL)))
 800e8fa:	2230      	movs	r2, #48	; 0x30
 800e8fc:	6839      	ldr	r1, [r7, #0]
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f004 fc2c 	bl	801315c <_txm_module_manager_inside_data_check>
 800e904:	4603      	mov	r3, r0
 800e906:	2b00      	cmp	r3, #0
 800e908:	d111      	bne.n	800e92e <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x4a>
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800e910:	d812      	bhi.n	800e938 <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x54>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	699b      	ldr	r3, [r3, #24]
 800e916:	461a      	mov	r2, r3
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d30c      	bcc.n	800e938 <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x54>
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	69db      	ldr	r3, [r3, #28]
 800e928:	3301      	adds	r3, #1
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d804      	bhi.n	800e938 <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x54>
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d001      	beq.n	800e938 <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 800e934:	23f4      	movs	r3, #244	; 0xf4
 800e936:	e005      	b.n	800e944 <_txm_module_manager_tx_block_pool_prioritize_dispatch+0x60>
    }

    return_value = (ALIGN_TYPE) _txe_block_pool_prioritize(
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7fd fa44 	bl	800bdc8 <_txe_block_pool_prioritize>
 800e940:	60f8      	str	r0, [r7, #12]
        (TX_BLOCK_POOL *) param_0
    );
    return(return_value);
 800e942:	68fb      	ldr	r3, [r7, #12]
}
 800e944:	4618      	mov	r0, r3
 800e946:	3710      	adds	r7, #16
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <_txm_module_manager_tx_block_release_dispatch>:

/* UINT _txe_block_release(
    VOID *block_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_block_release_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b084      	sub	sp, #16
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;
ALIGN_TYPE block_header_start;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	68db      	ldr	r3, [r3, #12]
 800e95a:	f003 0302 	and.w	r3, r3, #2
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d013      	beq.n	800e98a <_txm_module_manager_tx_block_release_dispatch+0x3e>
    {
        /* Is the pointer non-null?  */
        if ((void *) param_0 != TX_NULL)
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d010      	beq.n	800e98a <_txm_module_manager_tx_block_release_dispatch+0x3e>
        {

            /* Calculate the beginning of the header info for this block (the header
               consists of 1 pointers.  */
            block_header_start =  param_0 - sizeof(ALIGN_TYPE);
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	3b04      	subs	r3, #4
 800e96c:	60fb      	str	r3, [r7, #12]

            if (/* Did we underflow when doing the subtract?  */
 800e96e:	68fa      	ldr	r2, [r7, #12]
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	429a      	cmp	r2, r3
 800e974:	d807      	bhi.n	800e986 <_txm_module_manager_tx_block_release_dispatch+0x3a>
                (block_header_start > param_0) ||
                /* Ensure the pointer is inside the module's data. Note that we only
                   check the pointer in the header because only that pointer is
                   dereferenced during the pointer's validity check in _tx_block_release. */
                (!TXM_MODULE_MANAGER_CHECK_INSIDE_DATA(module_instance, block_header_start, sizeof(ALIGN_TYPE))))
 800e976:	2204      	movs	r2, #4
 800e978:	68f9      	ldr	r1, [r7, #12]
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f004 fbee 	bl	801315c <_txm_module_manager_inside_data_check>
 800e980:	4603      	mov	r3, r0
                (block_header_start > param_0) ||
 800e982:	2b00      	cmp	r3, #0
 800e984:	d101      	bne.n	800e98a <_txm_module_manager_tx_block_release_dispatch+0x3e>
            {

                /* Invalid pointer.  */
                return(TXM_MODULE_INVALID_MEMORY);
 800e986:	23f4      	movs	r3, #244	; 0xf4
 800e988:	e005      	b.n	800e996 <_txm_module_manager_tx_block_release_dispatch+0x4a>
            }
        }
    }

    return_value = (ALIGN_TYPE) _txe_block_release(
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7fd fa39 	bl	800be04 <_txe_block_release>
 800e992:	60b8      	str	r0, [r7, #8]
        (VOID *) param_0
    );
    return(return_value);
 800e994:	68bb      	ldr	r3, [r7, #8]
}
 800e996:	4618      	mov	r0, r3
 800e998:	3710      	adds	r7, #16
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <_txm_module_manager_tx_byte_allocate_dispatch>:
    VOID **memory_ptr, -> param_1
    ULONG memory_size, -> extra_parameters[0]
    ULONG wait_option -> extra_parameters[1]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_allocate_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	b086      	sub	sp, #24
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	60f8      	str	r0, [r7, #12]
 800e9a6:	60b9      	str	r1, [r7, #8]
 800e9a8:	607a      	str	r2, [r7, #4]
 800e9aa:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	68db      	ldr	r3, [r3, #12]
 800e9b0:	f003 0302 	and.w	r3, r3, #2
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d036      	beq.n	800ea26 <_txm_module_manager_tx_byte_allocate_dispatch+0x88>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BYTE_POOL)))
 800e9b8:	2234      	movs	r2, #52	; 0x34
 800e9ba:	68b9      	ldr	r1, [r7, #8]
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f004 fbcd 	bl	801315c <_txm_module_manager_inside_data_check>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d111      	bne.n	800e9ec <_txm_module_manager_tx_byte_allocate_dispatch+0x4e>
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800e9ce:	d812      	bhi.n	800e9f6 <_txm_module_manager_tx_byte_allocate_dispatch+0x58>
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	699b      	ldr	r3, [r3, #24]
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	d30c      	bcc.n	800e9f6 <_txm_module_manager_tx_byte_allocate_dispatch+0x58>
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	69db      	ldr	r3, [r3, #28]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d804      	bhi.n	800e9f6 <_txm_module_manager_tx_byte_allocate_dispatch+0x58>
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d001      	beq.n	800e9f6 <_txm_module_manager_tx_byte_allocate_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 800e9f2:	23f4      	movs	r3, #244	; 0xf4
 800e9f4:	e022      	b.n	800ea3c <_txm_module_manager_tx_byte_allocate_dispatch+0x9e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(VOID *)))
 800e9f6:	2204      	movs	r2, #4
 800e9f8:	6879      	ldr	r1, [r7, #4]
 800e9fa:	68f8      	ldr	r0, [r7, #12]
 800e9fc:	f004 fbae 	bl	801315c <_txm_module_manager_inside_data_check>
 800ea00:	4603      	mov	r3, r0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d104      	bne.n	800ea10 <_txm_module_manager_tx_byte_allocate_dispatch+0x72>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d001      	beq.n	800ea10 <_txm_module_manager_tx_byte_allocate_dispatch+0x72>
            return(TXM_MODULE_INVALID_MEMORY);
 800ea0c:	23f4      	movs	r3, #244	; 0xf4
 800ea0e:	e015      	b.n	800ea3c <_txm_module_manager_tx_byte_allocate_dispatch+0x9e>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[2])))
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	2208      	movs	r2, #8
 800ea14:	4619      	mov	r1, r3
 800ea16:	68f8      	ldr	r0, [r7, #12]
 800ea18:	f004 fba0 	bl	801315c <_txm_module_manager_inside_data_check>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d101      	bne.n	800ea26 <_txm_module_manager_tx_byte_allocate_dispatch+0x88>
            return(TXM_MODULE_INVALID_MEMORY);
 800ea22:	23f4      	movs	r3, #244	; 0xf4
 800ea24:	e00a      	b.n	800ea3c <_txm_module_manager_tx_byte_allocate_dispatch+0x9e>
    }

    return_value = (ALIGN_TYPE) _txe_byte_allocate(
 800ea26:	68b8      	ldr	r0, [r7, #8]
 800ea28:	6879      	ldr	r1, [r7, #4]
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	681a      	ldr	r2, [r3, #0]
        (TX_BYTE_POOL *) param_0,
        (VOID **) param_1,
        (ULONG) extra_parameters[0],
        (ULONG) extra_parameters[1]
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _txe_byte_allocate(
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f7fd fa16 	bl	800be64 <_txe_byte_allocate>
 800ea38:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800ea3a:	697b      	ldr	r3, [r7, #20]
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3718      	adds	r7, #24
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <_txm_module_manager_tx_byte_pool_create_dispatch>:
    VOID *pool_start, -> extra_parameters[0]
    ULONG pool_size, -> extra_parameters[1]
    UINT pool_control_block_size -> extra_parameters[2]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_pool_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800ea44:	b590      	push	{r4, r7, lr}
 800ea46:	b089      	sub	sp, #36	; 0x24
 800ea48:	af02      	add	r7, sp, #8
 800ea4a:	60f8      	str	r0, [r7, #12]
 800ea4c:	60b9      	str	r1, [r7, #8]
 800ea4e:	607a      	str	r2, [r7, #4]
 800ea50:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	68db      	ldr	r3, [r3, #12]
 800ea56:	f003 0302 	and.w	r3, r3, #2
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d05d      	beq.n	800eb1a <_txm_module_manager_tx_byte_pool_create_dispatch+0xd6>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_BYTE_POOL)))
 800ea5e:	4b3a      	ldr	r3, [pc, #232]	; (800eb48 <_txm_module_manager_tx_byte_pool_create_dispatch+0x104>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d119      	bne.n	800ea9a <_txm_module_manager_tx_byte_pool_create_dispatch+0x56>
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800ea6c:	d815      	bhi.n	800ea9a <_txm_module_manager_tx_byte_pool_create_dispatch+0x56>
 800ea6e:	4b37      	ldr	r3, [pc, #220]	; (800eb4c <_txm_module_manager_tx_byte_pool_create_dispatch+0x108>)
 800ea70:	699b      	ldr	r3, [r3, #24]
 800ea72:	3310      	adds	r3, #16
 800ea74:	68ba      	ldr	r2, [r7, #8]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d30f      	bcc.n	800ea9a <_txm_module_manager_tx_byte_pool_create_dispatch+0x56>
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	3334      	adds	r3, #52	; 0x34
 800ea7e:	4a33      	ldr	r2, [pc, #204]	; (800eb4c <_txm_module_manager_tx_byte_pool_create_dispatch+0x108>)
 800ea80:	6991      	ldr	r1, [r2, #24]
 800ea82:	4a32      	ldr	r2, [pc, #200]	; (800eb4c <_txm_module_manager_tx_byte_pool_create_dispatch+0x108>)
 800ea84:	69d2      	ldr	r2, [r2, #28]
 800ea86:	440a      	add	r2, r1
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d806      	bhi.n	800ea9a <_txm_module_manager_tx_byte_pool_create_dispatch+0x56>
 800ea8c:	2134      	movs	r1, #52	; 0x34
 800ea8e:	68b8      	ldr	r0, [r7, #8]
 800ea90:	f005 fefe 	bl	8014890 <_txm_module_manager_object_size_check>
 800ea94:	4603      	mov	r3, r0
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d004      	beq.n	800eaa4 <_txm_module_manager_tx_byte_pool_create_dispatch+0x60>
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d001      	beq.n	800eaa4 <_txm_module_manager_tx_byte_pool_create_dispatch+0x60>
            return(TXM_MODULE_INVALID_MEMORY);
 800eaa0:	23f4      	movs	r3, #244	; 0xf4
 800eaa2:	e04c      	b.n	800eb3e <_txm_module_manager_tx_byte_pool_create_dispatch+0xfa>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	6879      	ldr	r1, [r7, #4]
 800eaa8:	68f8      	ldr	r0, [r7, #12]
 800eaaa:	f004 fb57 	bl	801315c <_txm_module_manager_inside_data_check>
 800eaae:	4603      	mov	r3, r0
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d115      	bne.n	800eae0 <_txm_module_manager_tx_byte_pool_create_dispatch+0x9c>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaba:	d00c      	beq.n	800ead6 <_txm_module_manager_tx_byte_pool_create_dispatch+0x92>
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	699b      	ldr	r3, [r3, #24]
 800eac0:	461a      	mov	r2, r3
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d306      	bcc.n	800ead6 <_txm_module_manager_tx_byte_pool_create_dispatch+0x92>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	1c5a      	adds	r2, r3, #1
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	69db      	ldr	r3, [r3, #28]
 800ead0:	3301      	adds	r3, #1
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d904      	bls.n	800eae0 <_txm_module_manager_tx_byte_pool_create_dispatch+0x9c>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d001      	beq.n	800eae0 <_txm_module_manager_tx_byte_pool_create_dispatch+0x9c>
            return(TXM_MODULE_INVALID_MEMORY);
 800eadc:	23f4      	movs	r3, #244	; 0xf4
 800eade:	e02e      	b.n	800eb3e <_txm_module_manager_tx_byte_pool_create_dispatch+0xfa>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[3])))
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	220c      	movs	r2, #12
 800eae4:	4619      	mov	r1, r3
 800eae6:	68f8      	ldr	r0, [r7, #12]
 800eae8:	f004 fb38 	bl	801315c <_txm_module_manager_inside_data_check>
 800eaec:	4603      	mov	r3, r0
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d101      	bne.n	800eaf6 <_txm_module_manager_tx_byte_pool_create_dispatch+0xb2>
            return(TXM_MODULE_INVALID_MEMORY);
 800eaf2:	23f4      	movs	r3, #244	; 0xf4
 800eaf4:	e023      	b.n	800eb3e <_txm_module_manager_tx_byte_pool_create_dispatch+0xfa>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], extra_parameters[1]))
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	6819      	ldr	r1, [r3, #0]
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	3304      	adds	r3, #4
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	461a      	mov	r2, r3
 800eb02:	68f8      	ldr	r0, [r7, #12]
 800eb04:	f004 fb2a 	bl	801315c <_txm_module_manager_inside_data_check>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d105      	bne.n	800eb1a <_txm_module_manager_tx_byte_pool_create_dispatch+0xd6>
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d001      	beq.n	800eb1a <_txm_module_manager_tx_byte_pool_create_dispatch+0xd6>
            return(TXM_MODULE_INVALID_MEMORY);
 800eb16:	23f4      	movs	r3, #244	; 0xf4
 800eb18:	e011      	b.n	800eb3e <_txm_module_manager_tx_byte_pool_create_dispatch+0xfa>
    }

    return_value = (ALIGN_TYPE) _txe_byte_pool_create(
 800eb1a:	68b8      	ldr	r0, [r7, #8]
 800eb1c:	6879      	ldr	r1, [r7, #4]
        (TX_BYTE_POOL *) param_0,
        (CHAR *) param_1,
        (VOID *) extra_parameters[0],
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_byte_pool_create(
 800eb22:	461c      	mov	r4, r3
        (ULONG) extra_parameters[1],
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _txe_byte_pool_create(
 800eb28:	681a      	ldr	r2, [r3, #0]
        (UINT) extra_parameters[2]
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	3308      	adds	r3, #8
    return_value = (ALIGN_TYPE) _txe_byte_pool_create(
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	9300      	str	r3, [sp, #0]
 800eb32:	4613      	mov	r3, r2
 800eb34:	4622      	mov	r2, r4
 800eb36:	f7fd fa09 	bl	800bf4c <_txe_byte_pool_create>
 800eb3a:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800eb3c:	697b      	ldr	r3, [r7, #20]
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	371c      	adds	r7, #28
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd90      	pop	{r4, r7, pc}
 800eb46:	bf00      	nop
 800eb48:	2400f6e8 	.word	0x2400f6e8
 800eb4c:	2400f6b4 	.word	0x2400f6b4

0800eb50 <_txm_module_manager_tx_byte_pool_delete_dispatch>:

/* UINT _txe_byte_pool_delete(
    TX_BYTE_POOL *pool_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_pool_delete_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	68db      	ldr	r3, [r3, #12]
 800eb5e:	f003 0302 	and.w	r3, r3, #2
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d01e      	beq.n	800eba4 <_txm_module_manager_tx_byte_pool_delete_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BYTE_POOL)))
 800eb66:	2234      	movs	r2, #52	; 0x34
 800eb68:	6839      	ldr	r1, [r7, #0]
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f004 faf6 	bl	801315c <_txm_module_manager_inside_data_check>
 800eb70:	4603      	mov	r3, r0
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d111      	bne.n	800eb9a <_txm_module_manager_tx_byte_pool_delete_dispatch+0x4a>
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800eb7c:	d812      	bhi.n	800eba4 <_txm_module_manager_tx_byte_pool_delete_dispatch+0x54>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	699b      	ldr	r3, [r3, #24]
 800eb82:	461a      	mov	r2, r3
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	4293      	cmp	r3, r2
 800eb88:	d30c      	bcc.n	800eba4 <_txm_module_manager_tx_byte_pool_delete_dispatch+0x54>
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	69db      	ldr	r3, [r3, #28]
 800eb94:	3301      	adds	r3, #1
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d804      	bhi.n	800eba4 <_txm_module_manager_tx_byte_pool_delete_dispatch+0x54>
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d001      	beq.n	800eba4 <_txm_module_manager_tx_byte_pool_delete_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 800eba0:	23f4      	movs	r3, #244	; 0xf4
 800eba2:	e00d      	b.n	800ebc0 <_txm_module_manager_tx_byte_pool_delete_dispatch+0x70>
    }

    return_value = (ALIGN_TYPE) _txe_byte_pool_delete(
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7fd fa6c 	bl	800c084 <_txe_byte_pool_delete>
 800ebac:	60f8      	str	r0, [r7, #12]
        (TX_BYTE_POOL *) param_0
    );

    /* Deallocate object memory.  */
    if (return_value == TX_SUCCESS)
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d104      	bne.n	800ebbe <_txm_module_manager_tx_byte_pool_delete_dispatch+0x6e>
    {
        return_value = _txm_module_manager_object_deallocate((VOID *) param_0);
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f004 fb86 	bl	80132c8 <_txm_module_manager_object_deallocate>
 800ebbc:	60f8      	str	r0, [r7, #12]
    }
    return(return_value);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3710      	adds	r7, #16
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <_txm_module_manager_tx_byte_pool_info_get_dispatch>:
    TX_THREAD **first_suspended, -> extra_parameters[2]
    ULONG *suspended_count, -> extra_parameters[3]
    TX_BYTE_POOL **next_pool -> extra_parameters[4]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_pool_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800ebc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebca:	b08b      	sub	sp, #44	; 0x2c
 800ebcc:	af04      	add	r7, sp, #16
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	607a      	str	r2, [r7, #4]
 800ebd4:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	68db      	ldr	r3, [r3, #12]
 800ebda:	f003 0302 	and.w	r3, r3, #2
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	f000 808f 	beq.w	800ed02 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x13a>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BYTE_POOL)))
 800ebe4:	2234      	movs	r2, #52	; 0x34
 800ebe6:	68b9      	ldr	r1, [r7, #8]
 800ebe8:	68f8      	ldr	r0, [r7, #12]
 800ebea:	f004 fab7 	bl	801315c <_txm_module_manager_inside_data_check>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d111      	bne.n	800ec18 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x50>
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800ebfa:	d812      	bhi.n	800ec22 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x5a>
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	699b      	ldr	r3, [r3, #24]
 800ec00:	461a      	mov	r2, r3
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	4293      	cmp	r3, r2
 800ec06:	d30c      	bcc.n	800ec22 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x5a>
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	69db      	ldr	r3, [r3, #28]
 800ec12:	3301      	adds	r3, #1
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d804      	bhi.n	800ec22 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x5a>
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d001      	beq.n	800ec22 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x5a>
            return(TXM_MODULE_INVALID_MEMORY);
 800ec1e:	23f4      	movs	r3, #244	; 0xf4
 800ec20:	e08c      	b.n	800ed3c <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(CHAR *)))
 800ec22:	2204      	movs	r2, #4
 800ec24:	6879      	ldr	r1, [r7, #4]
 800ec26:	68f8      	ldr	r0, [r7, #12]
 800ec28:	f004 fa98 	bl	801315c <_txm_module_manager_inside_data_check>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d104      	bne.n	800ec3c <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x74>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d001      	beq.n	800ec3c <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x74>
            return(TXM_MODULE_INVALID_MEMORY);
 800ec38:	23f4      	movs	r3, #244	; 0xf4
 800ec3a:	e07f      	b.n	800ed3c <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[5])))
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	2214      	movs	r2, #20
 800ec40:	4619      	mov	r1, r3
 800ec42:	68f8      	ldr	r0, [r7, #12]
 800ec44:	f004 fa8a 	bl	801315c <_txm_module_manager_inside_data_check>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d101      	bne.n	800ec52 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x8a>
            return(TXM_MODULE_INVALID_MEMORY);
 800ec4e:	23f4      	movs	r3, #244	; 0xf4
 800ec50:	e074      	b.n	800ed3c <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	2204      	movs	r2, #4
 800ec58:	4619      	mov	r1, r3
 800ec5a:	68f8      	ldr	r0, [r7, #12]
 800ec5c:	f004 fa7e 	bl	801315c <_txm_module_manager_inside_data_check>
 800ec60:	4603      	mov	r3, r0
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d105      	bne.n	800ec72 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0xaa>
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d001      	beq.n	800ec72 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0xaa>
            return(TXM_MODULE_INVALID_MEMORY);
 800ec6e:	23f4      	movs	r3, #244	; 0xf4
 800ec70:	e064      	b.n	800ed3c <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	3304      	adds	r3, #4
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	2204      	movs	r2, #4
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	f004 fa6d 	bl	801315c <_txm_module_manager_inside_data_check>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d106      	bne.n	800ec96 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0xce>
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	3304      	adds	r3, #4
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d001      	beq.n	800ec96 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0xce>
            return(TXM_MODULE_INVALID_MEMORY);
 800ec92:	23f4      	movs	r3, #244	; 0xf4
 800ec94:	e052      	b.n	800ed3c <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(TX_THREAD *)))
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	3308      	adds	r3, #8
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2204      	movs	r2, #4
 800ec9e:	4619      	mov	r1, r3
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	f004 fa5b 	bl	801315c <_txm_module_manager_inside_data_check>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d106      	bne.n	800ecba <_txm_module_manager_tx_byte_pool_info_get_dispatch+0xf2>
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	3308      	adds	r3, #8
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d001      	beq.n	800ecba <_txm_module_manager_tx_byte_pool_info_get_dispatch+0xf2>
            return(TXM_MODULE_INVALID_MEMORY);
 800ecb6:	23f4      	movs	r3, #244	; 0xf4
 800ecb8:	e040      	b.n	800ed3c <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	330c      	adds	r3, #12
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	2204      	movs	r2, #4
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	68f8      	ldr	r0, [r7, #12]
 800ecc6:	f004 fa49 	bl	801315c <_txm_module_manager_inside_data_check>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d106      	bne.n	800ecde <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x116>
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	330c      	adds	r3, #12
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d001      	beq.n	800ecde <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x116>
            return(TXM_MODULE_INVALID_MEMORY);
 800ecda:	23f4      	movs	r3, #244	; 0xf4
 800ecdc:	e02e      	b.n	800ed3c <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(TX_BYTE_POOL *)))
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	3310      	adds	r3, #16
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	2204      	movs	r2, #4
 800ece6:	4619      	mov	r1, r3
 800ece8:	68f8      	ldr	r0, [r7, #12]
 800ecea:	f004 fa37 	bl	801315c <_txm_module_manager_inside_data_check>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d106      	bne.n	800ed02 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x13a>
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	3310      	adds	r3, #16
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d001      	beq.n	800ed02 <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x13a>
            return(TXM_MODULE_INVALID_MEMORY);
 800ecfe:	23f4      	movs	r3, #244	; 0xf4
 800ed00:	e01c      	b.n	800ed3c <_txm_module_manager_tx_byte_pool_info_get_dispatch+0x174>
    }

    return_value = (ALIGN_TYPE) _txe_byte_pool_info_get(
 800ed02:	68b8      	ldr	r0, [r7, #8]
 800ed04:	6879      	ldr	r1, [r7, #4]
        (TX_BYTE_POOL *) param_0,
        (CHAR **) param_1,
        (ULONG *) extra_parameters[0],
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_byte_pool_info_get(
 800ed0a:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[1],
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	3304      	adds	r3, #4
 800ed10:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_byte_pool_info_get(
 800ed12:	461e      	mov	r6, r3
        (TX_THREAD **) extra_parameters[2],
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	3308      	adds	r3, #8
 800ed18:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_byte_pool_info_get(
 800ed1a:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	330c      	adds	r3, #12
 800ed20:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_byte_pool_info_get(
 800ed22:	461c      	mov	r4, r3
        (TX_BYTE_POOL **) extra_parameters[4]
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	3310      	adds	r3, #16
 800ed28:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_byte_pool_info_get(
 800ed2a:	9302      	str	r3, [sp, #8]
 800ed2c:	9401      	str	r4, [sp, #4]
 800ed2e:	9200      	str	r2, [sp, #0]
 800ed30:	4633      	mov	r3, r6
 800ed32:	462a      	mov	r2, r5
 800ed34:	f7fd f9e4 	bl	800c100 <_txe_byte_pool_info_get>
 800ed38:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800ed3a:	697b      	ldr	r3, [r7, #20]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	371c      	adds	r7, #28
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed44 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch>:
    ULONG *splits, -> extra_parameters[3]
    ULONG *suspensions, -> extra_parameters[4]
    ULONG *timeouts -> extra_parameters[5]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_pool_performance_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800ed44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed46:	b08b      	sub	sp, #44	; 0x2c
 800ed48:	af04      	add	r7, sp, #16
 800ed4a:	60f8      	str	r0, [r7, #12]
 800ed4c:	60b9      	str	r1, [r7, #8]
 800ed4e:	607a      	str	r2, [r7, #4]
 800ed50:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	68db      	ldr	r3, [r3, #12]
 800ed56:	f003 0302 	and.w	r3, r3, #2
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	f000 80a1 	beq.w	800eea2 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x15e>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BYTE_POOL)))
 800ed60:	2234      	movs	r2, #52	; 0x34
 800ed62:	68b9      	ldr	r1, [r7, #8]
 800ed64:	68f8      	ldr	r0, [r7, #12]
 800ed66:	f004 f9f9 	bl	801315c <_txm_module_manager_inside_data_check>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d111      	bne.n	800ed94 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x50>
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800ed76:	d812      	bhi.n	800ed9e <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x5a>
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	699b      	ldr	r3, [r3, #24]
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d30c      	bcc.n	800ed9e <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x5a>
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	69db      	ldr	r3, [r3, #28]
 800ed8e:	3301      	adds	r3, #1
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d804      	bhi.n	800ed9e <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x5a>
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d001      	beq.n	800ed9e <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x5a>
            return(TXM_MODULE_INVALID_MEMORY);
 800ed9a:	23f4      	movs	r3, #244	; 0xf4
 800ed9c:	e0a3      	b.n	800eee6 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x1a2>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800ed9e:	2204      	movs	r2, #4
 800eda0:	6879      	ldr	r1, [r7, #4]
 800eda2:	68f8      	ldr	r0, [r7, #12]
 800eda4:	f004 f9da 	bl	801315c <_txm_module_manager_inside_data_check>
 800eda8:	4603      	mov	r3, r0
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d104      	bne.n	800edb8 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x74>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d001      	beq.n	800edb8 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x74>
            return(TXM_MODULE_INVALID_MEMORY);
 800edb4:	23f4      	movs	r3, #244	; 0xf4
 800edb6:	e096      	b.n	800eee6 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x1a2>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[6])))
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	2218      	movs	r2, #24
 800edbc:	4619      	mov	r1, r3
 800edbe:	68f8      	ldr	r0, [r7, #12]
 800edc0:	f004 f9cc 	bl	801315c <_txm_module_manager_inside_data_check>
 800edc4:	4603      	mov	r3, r0
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d101      	bne.n	800edce <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x8a>
            return(TXM_MODULE_INVALID_MEMORY);
 800edca:	23f4      	movs	r3, #244	; 0xf4
 800edcc:	e08b      	b.n	800eee6 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x1a2>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	2204      	movs	r2, #4
 800edd4:	4619      	mov	r1, r3
 800edd6:	68f8      	ldr	r0, [r7, #12]
 800edd8:	f004 f9c0 	bl	801315c <_txm_module_manager_inside_data_check>
 800eddc:	4603      	mov	r3, r0
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d105      	bne.n	800edee <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0xaa>
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d001      	beq.n	800edee <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0xaa>
            return(TXM_MODULE_INVALID_MEMORY);
 800edea:	23f4      	movs	r3, #244	; 0xf4
 800edec:	e07b      	b.n	800eee6 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x1a2>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	3304      	adds	r3, #4
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	2204      	movs	r2, #4
 800edf6:	4619      	mov	r1, r3
 800edf8:	68f8      	ldr	r0, [r7, #12]
 800edfa:	f004 f9af 	bl	801315c <_txm_module_manager_inside_data_check>
 800edfe:	4603      	mov	r3, r0
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d106      	bne.n	800ee12 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0xce>
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	3304      	adds	r3, #4
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d001      	beq.n	800ee12 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0xce>
            return(TXM_MODULE_INVALID_MEMORY);
 800ee0e:	23f4      	movs	r3, #244	; 0xf4
 800ee10:	e069      	b.n	800eee6 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x1a2>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	3308      	adds	r3, #8
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	2204      	movs	r2, #4
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f004 f99d 	bl	801315c <_txm_module_manager_inside_data_check>
 800ee22:	4603      	mov	r3, r0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d106      	bne.n	800ee36 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0xf2>
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	3308      	adds	r3, #8
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d001      	beq.n	800ee36 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0xf2>
            return(TXM_MODULE_INVALID_MEMORY);
 800ee32:	23f4      	movs	r3, #244	; 0xf4
 800ee34:	e057      	b.n	800eee6 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x1a2>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	330c      	adds	r3, #12
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	2204      	movs	r2, #4
 800ee3e:	4619      	mov	r1, r3
 800ee40:	68f8      	ldr	r0, [r7, #12]
 800ee42:	f004 f98b 	bl	801315c <_txm_module_manager_inside_data_check>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d106      	bne.n	800ee5a <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x116>
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	330c      	adds	r3, #12
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d001      	beq.n	800ee5a <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x116>
            return(TXM_MODULE_INVALID_MEMORY);
 800ee56:	23f4      	movs	r3, #244	; 0xf4
 800ee58:	e045      	b.n	800eee6 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x1a2>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(ULONG)))
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	3310      	adds	r3, #16
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	2204      	movs	r2, #4
 800ee62:	4619      	mov	r1, r3
 800ee64:	68f8      	ldr	r0, [r7, #12]
 800ee66:	f004 f979 	bl	801315c <_txm_module_manager_inside_data_check>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d106      	bne.n	800ee7e <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x13a>
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	3310      	adds	r3, #16
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d001      	beq.n	800ee7e <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x13a>
            return(TXM_MODULE_INVALID_MEMORY);
 800ee7a:	23f4      	movs	r3, #244	; 0xf4
 800ee7c:	e033      	b.n	800eee6 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x1a2>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[5], sizeof(ULONG)))
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	3314      	adds	r3, #20
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	2204      	movs	r2, #4
 800ee86:	4619      	mov	r1, r3
 800ee88:	68f8      	ldr	r0, [r7, #12]
 800ee8a:	f004 f967 	bl	801315c <_txm_module_manager_inside_data_check>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d106      	bne.n	800eea2 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x15e>
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	3314      	adds	r3, #20
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d001      	beq.n	800eea2 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x15e>
            return(TXM_MODULE_INVALID_MEMORY);
 800ee9e:	23f4      	movs	r3, #244	; 0xf4
 800eea0:	e021      	b.n	800eee6 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch+0x1a2>
    }

    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_info_get(
 800eea2:	68b8      	ldr	r0, [r7, #8]
 800eea4:	6879      	ldr	r1, [r7, #4]
        (TX_BYTE_POOL *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_info_get(
 800eeaa:	461e      	mov	r6, r3
        (ULONG *) extra_parameters[1],
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	3304      	adds	r3, #4
 800eeb0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_info_get(
 800eeb2:	469c      	mov	ip, r3
        (ULONG *) extra_parameters[2],
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	3308      	adds	r3, #8
 800eeb8:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_info_get(
 800eeba:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	330c      	adds	r3, #12
 800eec0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_info_get(
 800eec2:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[4],
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	3310      	adds	r3, #16
 800eec8:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_info_get(
 800eeca:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[5]
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	3314      	adds	r3, #20
 800eed0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_info_get(
 800eed2:	9303      	str	r3, [sp, #12]
 800eed4:	9502      	str	r5, [sp, #8]
 800eed6:	9401      	str	r4, [sp, #4]
 800eed8:	9200      	str	r2, [sp, #0]
 800eeda:	4663      	mov	r3, ip
 800eedc:	4632      	mov	r2, r6
 800eede:	f005 fdb5 	bl	8014a4c <_tx_byte_pool_performance_info_get>
 800eee2:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800eee4:	697b      	ldr	r3, [r7, #20]
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	371c      	adds	r7, #28
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eeee <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch>:
    ULONG *splits, -> extra_parameters[2]
    ULONG *suspensions, -> extra_parameters[3]
    ULONG *timeouts -> extra_parameters[4]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800eeee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eef0:	b08b      	sub	sp, #44	; 0x2c
 800eef2:	af04      	add	r7, sp, #16
 800eef4:	60f8      	str	r0, [r7, #12]
 800eef6:	60b9      	str	r1, [r7, #8]
 800eef8:	607a      	str	r2, [r7, #4]
 800eefa:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	68db      	ldr	r3, [r3, #12]
 800ef00:	f003 0302 	and.w	r3, r3, #2
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d07c      	beq.n	800f002 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x114>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(ULONG)))
 800ef08:	2204      	movs	r2, #4
 800ef0a:	68b9      	ldr	r1, [r7, #8]
 800ef0c:	68f8      	ldr	r0, [r7, #12]
 800ef0e:	f004 f925 	bl	801315c <_txm_module_manager_inside_data_check>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d104      	bne.n	800ef22 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x34>
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d001      	beq.n	800ef22 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x34>
            return(TXM_MODULE_INVALID_MEMORY);
 800ef1e:	23f4      	movs	r3, #244	; 0xf4
 800ef20:	e08c      	b.n	800f03c <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x14e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800ef22:	2204      	movs	r2, #4
 800ef24:	6879      	ldr	r1, [r7, #4]
 800ef26:	68f8      	ldr	r0, [r7, #12]
 800ef28:	f004 f918 	bl	801315c <_txm_module_manager_inside_data_check>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d104      	bne.n	800ef3c <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x4e>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d001      	beq.n	800ef3c <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x4e>
            return(TXM_MODULE_INVALID_MEMORY);
 800ef38:	23f4      	movs	r3, #244	; 0xf4
 800ef3a:	e07f      	b.n	800f03c <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x14e>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[5])))
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	2214      	movs	r2, #20
 800ef40:	4619      	mov	r1, r3
 800ef42:	68f8      	ldr	r0, [r7, #12]
 800ef44:	f004 f90a 	bl	801315c <_txm_module_manager_inside_data_check>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d101      	bne.n	800ef52 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x64>
            return(TXM_MODULE_INVALID_MEMORY);
 800ef4e:	23f4      	movs	r3, #244	; 0xf4
 800ef50:	e074      	b.n	800f03c <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x14e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	2204      	movs	r2, #4
 800ef58:	4619      	mov	r1, r3
 800ef5a:	68f8      	ldr	r0, [r7, #12]
 800ef5c:	f004 f8fe 	bl	801315c <_txm_module_manager_inside_data_check>
 800ef60:	4603      	mov	r3, r0
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d105      	bne.n	800ef72 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x84>
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d001      	beq.n	800ef72 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x84>
            return(TXM_MODULE_INVALID_MEMORY);
 800ef6e:	23f4      	movs	r3, #244	; 0xf4
 800ef70:	e064      	b.n	800f03c <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x14e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	3304      	adds	r3, #4
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	2204      	movs	r2, #4
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	68f8      	ldr	r0, [r7, #12]
 800ef7e:	f004 f8ed 	bl	801315c <_txm_module_manager_inside_data_check>
 800ef82:	4603      	mov	r3, r0
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d106      	bne.n	800ef96 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0xa8>
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	3304      	adds	r3, #4
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d001      	beq.n	800ef96 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0xa8>
            return(TXM_MODULE_INVALID_MEMORY);
 800ef92:	23f4      	movs	r3, #244	; 0xf4
 800ef94:	e052      	b.n	800f03c <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x14e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	3308      	adds	r3, #8
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	2204      	movs	r2, #4
 800ef9e:	4619      	mov	r1, r3
 800efa0:	68f8      	ldr	r0, [r7, #12]
 800efa2:	f004 f8db 	bl	801315c <_txm_module_manager_inside_data_check>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d106      	bne.n	800efba <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0xcc>
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	3308      	adds	r3, #8
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d001      	beq.n	800efba <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0xcc>
            return(TXM_MODULE_INVALID_MEMORY);
 800efb6:	23f4      	movs	r3, #244	; 0xf4
 800efb8:	e040      	b.n	800f03c <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x14e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	330c      	adds	r3, #12
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	2204      	movs	r2, #4
 800efc2:	4619      	mov	r1, r3
 800efc4:	68f8      	ldr	r0, [r7, #12]
 800efc6:	f004 f8c9 	bl	801315c <_txm_module_manager_inside_data_check>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d106      	bne.n	800efde <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0xf0>
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	330c      	adds	r3, #12
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d001      	beq.n	800efde <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0xf0>
            return(TXM_MODULE_INVALID_MEMORY);
 800efda:	23f4      	movs	r3, #244	; 0xf4
 800efdc:	e02e      	b.n	800f03c <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x14e>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(ULONG)))
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	3310      	adds	r3, #16
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	2204      	movs	r2, #4
 800efe6:	4619      	mov	r1, r3
 800efe8:	68f8      	ldr	r0, [r7, #12]
 800efea:	f004 f8b7 	bl	801315c <_txm_module_manager_inside_data_check>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d106      	bne.n	800f002 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x114>
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	3310      	adds	r3, #16
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d001      	beq.n	800f002 <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x114>
            return(TXM_MODULE_INVALID_MEMORY);
 800effe:	23f4      	movs	r3, #244	; 0xf4
 800f000:	e01c      	b.n	800f03c <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch+0x14e>
    }

    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_system_info_get(
 800f002:	68b8      	ldr	r0, [r7, #8]
 800f004:	6879      	ldr	r1, [r7, #4]
        (ULONG *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_system_info_get(
 800f00a:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[1],
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	3304      	adds	r3, #4
 800f010:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_system_info_get(
 800f012:	461e      	mov	r6, r3
        (ULONG *) extra_parameters[2],
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	3308      	adds	r3, #8
 800f018:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_system_info_get(
 800f01a:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	330c      	adds	r3, #12
 800f020:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_system_info_get(
 800f022:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[4]
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	3310      	adds	r3, #16
 800f028:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_byte_pool_performance_system_info_get(
 800f02a:	9302      	str	r3, [sp, #8]
 800f02c:	9401      	str	r4, [sp, #4]
 800f02e:	9200      	str	r2, [sp, #0]
 800f030:	4633      	mov	r3, r6
 800f032:	462a      	mov	r2, r5
 800f034:	f005 fd4a 	bl	8014acc <_tx_byte_pool_performance_system_info_get>
 800f038:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800f03a:	697b      	ldr	r3, [r7, #20]
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	371c      	adds	r7, #28
 800f040:	46bd      	mov	sp, r7
 800f042:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f044 <_txm_module_manager_tx_byte_pool_prioritize_dispatch>:

/* UINT _txe_byte_pool_prioritize(
    TX_BYTE_POOL *pool_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_pool_prioritize_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	68db      	ldr	r3, [r3, #12]
 800f052:	f003 0302 	and.w	r3, r3, #2
 800f056:	2b00      	cmp	r3, #0
 800f058:	d01e      	beq.n	800f098 <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_BYTE_POOL)))
 800f05a:	2234      	movs	r2, #52	; 0x34
 800f05c:	6839      	ldr	r1, [r7, #0]
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f004 f87c 	bl	801315c <_txm_module_manager_inside_data_check>
 800f064:	4603      	mov	r3, r0
 800f066:	2b00      	cmp	r3, #0
 800f068:	d111      	bne.n	800f08e <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x4a>
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800f070:	d812      	bhi.n	800f098 <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x54>
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	699b      	ldr	r3, [r3, #24]
 800f076:	461a      	mov	r2, r3
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d30c      	bcc.n	800f098 <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x54>
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	69db      	ldr	r3, [r3, #28]
 800f088:	3301      	adds	r3, #1
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d804      	bhi.n	800f098 <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x54>
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d001      	beq.n	800f098 <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 800f094:	23f4      	movs	r3, #244	; 0xf4
 800f096:	e005      	b.n	800f0a4 <_txm_module_manager_tx_byte_pool_prioritize_dispatch+0x60>
    }

    return_value = (ALIGN_TYPE) _txe_byte_pool_prioritize(
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fd f85a 	bl	800c154 <_txe_byte_pool_prioritize>
 800f0a0:	60f8      	str	r0, [r7, #12]
        (TX_BYTE_POOL *) param_0
    );
    return(return_value);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3710      	adds	r7, #16
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <_txm_module_manager_tx_byte_release_dispatch>:

/* UINT _txe_byte_release(
    VOID *memory_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_byte_release_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;
ALIGN_TYPE block_header_start;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	68db      	ldr	r3, [r3, #12]
 800f0ba:	f003 0302 	and.w	r3, r3, #2
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d013      	beq.n	800f0ea <_txm_module_manager_tx_byte_release_dispatch+0x3e>
    {
        /* Is the pointer non-null?  */
        if ((void *) param_0 != TX_NULL)
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d010      	beq.n	800f0ea <_txm_module_manager_tx_byte_release_dispatch+0x3e>
        {

            /* Calculate the beginning of the header info for this block (the header
               consists of 2 pointers).  */
            block_header_start =  param_0 - 2*sizeof(ALIGN_TYPE);
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	3b08      	subs	r3, #8
 800f0cc:	60fb      	str	r3, [r7, #12]

            if (/* Did we underflow when doing the subtract?  */
 800f0ce:	68fa      	ldr	r2, [r7, #12]
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d807      	bhi.n	800f0e6 <_txm_module_manager_tx_byte_release_dispatch+0x3a>
                (block_header_start > param_0) ||
                /* Ensure the pointer is inside the module's data. Note that we only
                   check the pointers in the header because only those two are
                   dereferenced during the pointer's validity check in _tx_byte_release. */
                (!TXM_MODULE_MANAGER_CHECK_INSIDE_DATA(module_instance, block_header_start, 2*sizeof(ALIGN_TYPE))))
 800f0d6:	2208      	movs	r2, #8
 800f0d8:	68f9      	ldr	r1, [r7, #12]
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f004 f83e 	bl	801315c <_txm_module_manager_inside_data_check>
 800f0e0:	4603      	mov	r3, r0
                (block_header_start > param_0) ||
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d101      	bne.n	800f0ea <_txm_module_manager_tx_byte_release_dispatch+0x3e>
            {

                /* Invalid pointer.  */
                return(TXM_MODULE_INVALID_MEMORY);
 800f0e6:	23f4      	movs	r3, #244	; 0xf4
 800f0e8:	e005      	b.n	800f0f6 <_txm_module_manager_tx_byte_release_dispatch+0x4a>
            }
        }
    }

    return_value = (ALIGN_TYPE) _txe_byte_release(
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f7fd f84f 	bl	800c190 <_txe_byte_release>
 800f0f2:	60b8      	str	r0, [r7, #8]
        (VOID *) param_0
    );
    return(return_value);
 800f0f4:	68bb      	ldr	r3, [r7, #8]
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3710      	adds	r7, #16
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
	...

0800f100 <_txm_module_manager_tx_event_flags_create_dispatch>:
    TX_EVENT_FLAGS_GROUP *group_ptr, -> param_0
    CHAR *name_ptr, -> param_1
    UINT event_control_block_size -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_event_flags_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b086      	sub	sp, #24
 800f104:	af00      	add	r7, sp, #0
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	60b9      	str	r1, [r7, #8]
 800f10a:	607a      	str	r2, [r7, #4]
 800f10c:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	68db      	ldr	r3, [r3, #12]
 800f112:	f003 0302 	and.w	r3, r3, #2
 800f116:	2b00      	cmp	r3, #0
 800f118:	d040      	beq.n	800f19c <_txm_module_manager_tx_event_flags_create_dispatch+0x9c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_EVENT_FLAGS_GROUP)))
 800f11a:	4b26      	ldr	r3, [pc, #152]	; (800f1b4 <_txm_module_manager_tx_event_flags_create_dispatch+0xb4>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	2b01      	cmp	r3, #1
 800f120:	d119      	bne.n	800f156 <_txm_module_manager_tx_event_flags_create_dispatch+0x56>
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800f128:	d815      	bhi.n	800f156 <_txm_module_manager_tx_event_flags_create_dispatch+0x56>
 800f12a:	4b23      	ldr	r3, [pc, #140]	; (800f1b8 <_txm_module_manager_tx_event_flags_create_dispatch+0xb8>)
 800f12c:	699b      	ldr	r3, [r3, #24]
 800f12e:	3310      	adds	r3, #16
 800f130:	68ba      	ldr	r2, [r7, #8]
 800f132:	429a      	cmp	r2, r3
 800f134:	d30f      	bcc.n	800f156 <_txm_module_manager_tx_event_flags_create_dispatch+0x56>
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	3330      	adds	r3, #48	; 0x30
 800f13a:	4a1f      	ldr	r2, [pc, #124]	; (800f1b8 <_txm_module_manager_tx_event_flags_create_dispatch+0xb8>)
 800f13c:	6991      	ldr	r1, [r2, #24]
 800f13e:	4a1e      	ldr	r2, [pc, #120]	; (800f1b8 <_txm_module_manager_tx_event_flags_create_dispatch+0xb8>)
 800f140:	69d2      	ldr	r2, [r2, #28]
 800f142:	440a      	add	r2, r1
 800f144:	4293      	cmp	r3, r2
 800f146:	d806      	bhi.n	800f156 <_txm_module_manager_tx_event_flags_create_dispatch+0x56>
 800f148:	2130      	movs	r1, #48	; 0x30
 800f14a:	68b8      	ldr	r0, [r7, #8]
 800f14c:	f005 fba0 	bl	8014890 <_txm_module_manager_object_size_check>
 800f150:	4603      	mov	r3, r0
 800f152:	2b00      	cmp	r3, #0
 800f154:	d004      	beq.n	800f160 <_txm_module_manager_tx_event_flags_create_dispatch+0x60>
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d001      	beq.n	800f160 <_txm_module_manager_tx_event_flags_create_dispatch+0x60>
            return(TXM_MODULE_INVALID_MEMORY);
 800f15c:	23f4      	movs	r3, #244	; 0xf4
 800f15e:	e025      	b.n	800f1ac <_txm_module_manager_tx_event_flags_create_dispatch+0xac>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 800f160:	2201      	movs	r2, #1
 800f162:	6879      	ldr	r1, [r7, #4]
 800f164:	68f8      	ldr	r0, [r7, #12]
 800f166:	f003 fff9 	bl	801315c <_txm_module_manager_inside_data_check>
 800f16a:	4603      	mov	r3, r0
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d115      	bne.n	800f19c <_txm_module_manager_tx_event_flags_create_dispatch+0x9c>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f176:	d00c      	beq.n	800f192 <_txm_module_manager_tx_event_flags_create_dispatch+0x92>
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	699b      	ldr	r3, [r3, #24]
 800f17c:	461a      	mov	r2, r3
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4293      	cmp	r3, r2
 800f182:	d306      	bcc.n	800f192 <_txm_module_manager_tx_event_flags_create_dispatch+0x92>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	1c5a      	adds	r2, r3, #1
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	69db      	ldr	r3, [r3, #28]
 800f18c:	3301      	adds	r3, #1
 800f18e:	429a      	cmp	r2, r3
 800f190:	d904      	bls.n	800f19c <_txm_module_manager_tx_event_flags_create_dispatch+0x9c>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d001      	beq.n	800f19c <_txm_module_manager_tx_event_flags_create_dispatch+0x9c>
            return(TXM_MODULE_INVALID_MEMORY);
 800f198:	23f4      	movs	r3, #244	; 0xf4
 800f19a:	e007      	b.n	800f1ac <_txm_module_manager_tx_event_flags_create_dispatch+0xac>
    }

    return_value = (ALIGN_TYPE) _txe_event_flags_create(
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	6879      	ldr	r1, [r7, #4]
 800f1a0:	683a      	ldr	r2, [r7, #0]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7fd f830 	bl	800c208 <_txe_event_flags_create>
 800f1a8:	6178      	str	r0, [r7, #20]
        (TX_EVENT_FLAGS_GROUP *) param_0,
        (CHAR *) param_1,
        (UINT) param_2
    );
    return(return_value);
 800f1aa:	697b      	ldr	r3, [r7, #20]
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3718      	adds	r7, #24
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	2400f6e8 	.word	0x2400f6e8
 800f1b8:	2400f6b4 	.word	0x2400f6b4

0800f1bc <_txm_module_manager_tx_event_flags_delete_dispatch>:

/* UINT _txe_event_flags_delete(
    TX_EVENT_FLAGS_GROUP *group_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_event_flags_delete_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b084      	sub	sp, #16
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
 800f1c4:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	f003 0302 	and.w	r3, r3, #2
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d01e      	beq.n	800f210 <_txm_module_manager_tx_event_flags_delete_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_EVENT_FLAGS_GROUP)))
 800f1d2:	2230      	movs	r2, #48	; 0x30
 800f1d4:	6839      	ldr	r1, [r7, #0]
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f003 ffc0 	bl	801315c <_txm_module_manager_inside_data_check>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d111      	bne.n	800f206 <_txm_module_manager_tx_event_flags_delete_dispatch+0x4a>
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800f1e8:	d812      	bhi.n	800f210 <_txm_module_manager_tx_event_flags_delete_dispatch+0x54>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	699b      	ldr	r3, [r3, #24]
 800f1ee:	461a      	mov	r2, r3
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d30c      	bcc.n	800f210 <_txm_module_manager_tx_event_flags_delete_dispatch+0x54>
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	69db      	ldr	r3, [r3, #28]
 800f200:	3301      	adds	r3, #1
 800f202:	429a      	cmp	r2, r3
 800f204:	d804      	bhi.n	800f210 <_txm_module_manager_tx_event_flags_delete_dispatch+0x54>
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d001      	beq.n	800f210 <_txm_module_manager_tx_event_flags_delete_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 800f20c:	23f4      	movs	r3, #244	; 0xf4
 800f20e:	e00d      	b.n	800f22c <_txm_module_manager_tx_event_flags_delete_dispatch+0x70>
    }

    return_value = (ALIGN_TYPE) _txe_event_flags_delete(
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	4618      	mov	r0, r3
 800f214:	f7fd f886 	bl	800c324 <_txe_event_flags_delete>
 800f218:	60f8      	str	r0, [r7, #12]
        (TX_EVENT_FLAGS_GROUP *) param_0
    );

    /* Deallocate object memory.  */
    if (return_value == TX_SUCCESS)
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d104      	bne.n	800f22a <_txm_module_manager_tx_event_flags_delete_dispatch+0x6e>
    {
        return_value = _txm_module_manager_object_deallocate((VOID *) param_0);
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	4618      	mov	r0, r3
 800f224:	f004 f850 	bl	80132c8 <_txm_module_manager_object_deallocate>
 800f228:	60f8      	str	r0, [r7, #12]
    }
    return(return_value);
 800f22a:	68fb      	ldr	r3, [r7, #12]
}
 800f22c:	4618      	mov	r0, r3
 800f22e:	3710      	adds	r7, #16
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <_txm_module_manager_tx_event_flags_get_dispatch>:
    UINT get_option, -> extra_parameters[0]
    ULONG *actual_flags_ptr, -> extra_parameters[1]
    ULONG wait_option -> extra_parameters[2]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_event_flags_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b088      	sub	sp, #32
 800f238:	af02      	add	r7, sp, #8
 800f23a:	60f8      	str	r0, [r7, #12]
 800f23c:	60b9      	str	r1, [r7, #8]
 800f23e:	607a      	str	r2, [r7, #4]
 800f240:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	68db      	ldr	r3, [r3, #12]
 800f246:	f003 0302 	and.w	r3, r3, #2
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d03b      	beq.n	800f2c6 <_txm_module_manager_tx_event_flags_get_dispatch+0x92>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_EVENT_FLAGS_GROUP)))
 800f24e:	2230      	movs	r2, #48	; 0x30
 800f250:	68b9      	ldr	r1, [r7, #8]
 800f252:	68f8      	ldr	r0, [r7, #12]
 800f254:	f003 ff82 	bl	801315c <_txm_module_manager_inside_data_check>
 800f258:	4603      	mov	r3, r0
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d111      	bne.n	800f282 <_txm_module_manager_tx_event_flags_get_dispatch+0x4e>
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800f264:	d812      	bhi.n	800f28c <_txm_module_manager_tx_event_flags_get_dispatch+0x58>
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	699b      	ldr	r3, [r3, #24]
 800f26a:	461a      	mov	r2, r3
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	4293      	cmp	r3, r2
 800f270:	d30c      	bcc.n	800f28c <_txm_module_manager_tx_event_flags_get_dispatch+0x58>
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	69db      	ldr	r3, [r3, #28]
 800f27c:	3301      	adds	r3, #1
 800f27e:	429a      	cmp	r2, r3
 800f280:	d804      	bhi.n	800f28c <_txm_module_manager_tx_event_flags_get_dispatch+0x58>
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d001      	beq.n	800f28c <_txm_module_manager_tx_event_flags_get_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 800f288:	23f4      	movs	r3, #244	; 0xf4
 800f28a:	e02d      	b.n	800f2e8 <_txm_module_manager_tx_event_flags_get_dispatch+0xb4>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	3304      	adds	r3, #4
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	2204      	movs	r2, #4
 800f294:	4619      	mov	r1, r3
 800f296:	68f8      	ldr	r0, [r7, #12]
 800f298:	f003 ff60 	bl	801315c <_txm_module_manager_inside_data_check>
 800f29c:	4603      	mov	r3, r0
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d106      	bne.n	800f2b0 <_txm_module_manager_tx_event_flags_get_dispatch+0x7c>
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	3304      	adds	r3, #4
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d001      	beq.n	800f2b0 <_txm_module_manager_tx_event_flags_get_dispatch+0x7c>
            return(TXM_MODULE_INVALID_MEMORY);
 800f2ac:	23f4      	movs	r3, #244	; 0xf4
 800f2ae:	e01b      	b.n	800f2e8 <_txm_module_manager_tx_event_flags_get_dispatch+0xb4>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[3])))
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	220c      	movs	r2, #12
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	68f8      	ldr	r0, [r7, #12]
 800f2b8:	f003 ff50 	bl	801315c <_txm_module_manager_inside_data_check>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d101      	bne.n	800f2c6 <_txm_module_manager_tx_event_flags_get_dispatch+0x92>
            return(TXM_MODULE_INVALID_MEMORY);
 800f2c2:	23f4      	movs	r3, #244	; 0xf4
 800f2c4:	e010      	b.n	800f2e8 <_txm_module_manager_tx_event_flags_get_dispatch+0xb4>
    }

    return_value = (ALIGN_TYPE) _txe_event_flags_get(
 800f2c6:	68b8      	ldr	r0, [r7, #8]
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	681a      	ldr	r2, [r3, #0]
        (TX_EVENT_FLAGS_GROUP *) param_0,
        (ULONG) param_1,
        (UINT) extra_parameters[0],
        (ULONG *) extra_parameters[1],
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	3304      	adds	r3, #4
 800f2d0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_event_flags_get(
 800f2d2:	4619      	mov	r1, r3
        (ULONG) extra_parameters[2]
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	3308      	adds	r3, #8
    return_value = (ALIGN_TYPE) _txe_event_flags_get(
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	9300      	str	r3, [sp, #0]
 800f2dc:	460b      	mov	r3, r1
 800f2de:	6879      	ldr	r1, [r7, #4]
 800f2e0:	f7fd f85e 	bl	800c3a0 <_txe_event_flags_get>
 800f2e4:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800f2e6:	697b      	ldr	r3, [r7, #20]
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3718      	adds	r7, #24
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <_txm_module_manager_tx_event_flags_info_get_dispatch>:
    TX_THREAD **first_suspended, -> extra_parameters[1]
    ULONG *suspended_count, -> extra_parameters[2]
    TX_EVENT_FLAGS_GROUP **next_group -> extra_parameters[3]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_event_flags_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800f2f0:	b5b0      	push	{r4, r5, r7, lr}
 800f2f2:	b088      	sub	sp, #32
 800f2f4:	af02      	add	r7, sp, #8
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	60b9      	str	r1, [r7, #8]
 800f2fa:	607a      	str	r2, [r7, #4]
 800f2fc:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	68db      	ldr	r3, [r3, #12]
 800f302:	f003 0302 	and.w	r3, r3, #2
 800f306:	2b00      	cmp	r3, #0
 800f308:	d07c      	beq.n	800f404 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x114>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_EVENT_FLAGS_GROUP)))
 800f30a:	2230      	movs	r2, #48	; 0x30
 800f30c:	68b9      	ldr	r1, [r7, #8]
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	f003 ff24 	bl	801315c <_txm_module_manager_inside_data_check>
 800f314:	4603      	mov	r3, r0
 800f316:	2b00      	cmp	r3, #0
 800f318:	d111      	bne.n	800f33e <_txm_module_manager_tx_event_flags_info_get_dispatch+0x4e>
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800f320:	d812      	bhi.n	800f348 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x58>
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	699b      	ldr	r3, [r3, #24]
 800f326:	461a      	mov	r2, r3
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d30c      	bcc.n	800f348 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x58>
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	69db      	ldr	r3, [r3, #28]
 800f338:	3301      	adds	r3, #1
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d804      	bhi.n	800f348 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x58>
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d001      	beq.n	800f348 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 800f344:	23f4      	movs	r3, #244	; 0xf4
 800f346:	e075      	b.n	800f434 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(CHAR *)))
 800f348:	2204      	movs	r2, #4
 800f34a:	6879      	ldr	r1, [r7, #4]
 800f34c:	68f8      	ldr	r0, [r7, #12]
 800f34e:	f003 ff05 	bl	801315c <_txm_module_manager_inside_data_check>
 800f352:	4603      	mov	r3, r0
 800f354:	2b00      	cmp	r3, #0
 800f356:	d104      	bne.n	800f362 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x72>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d001      	beq.n	800f362 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x72>
            return(TXM_MODULE_INVALID_MEMORY);
 800f35e:	23f4      	movs	r3, #244	; 0xf4
 800f360:	e068      	b.n	800f434 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[4])))
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	2210      	movs	r2, #16
 800f366:	4619      	mov	r1, r3
 800f368:	68f8      	ldr	r0, [r7, #12]
 800f36a:	f003 fef7 	bl	801315c <_txm_module_manager_inside_data_check>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d101      	bne.n	800f378 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x88>
            return(TXM_MODULE_INVALID_MEMORY);
 800f374:	23f4      	movs	r3, #244	; 0xf4
 800f376:	e05d      	b.n	800f434 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	2204      	movs	r2, #4
 800f37e:	4619      	mov	r1, r3
 800f380:	68f8      	ldr	r0, [r7, #12]
 800f382:	f003 feeb 	bl	801315c <_txm_module_manager_inside_data_check>
 800f386:	4603      	mov	r3, r0
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d105      	bne.n	800f398 <_txm_module_manager_tx_event_flags_info_get_dispatch+0xa8>
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d001      	beq.n	800f398 <_txm_module_manager_tx_event_flags_info_get_dispatch+0xa8>
            return(TXM_MODULE_INVALID_MEMORY);
 800f394:	23f4      	movs	r3, #244	; 0xf4
 800f396:	e04d      	b.n	800f434 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(TX_THREAD *)))
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	3304      	adds	r3, #4
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	2204      	movs	r2, #4
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	68f8      	ldr	r0, [r7, #12]
 800f3a4:	f003 feda 	bl	801315c <_txm_module_manager_inside_data_check>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d106      	bne.n	800f3bc <_txm_module_manager_tx_event_flags_info_get_dispatch+0xcc>
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	3304      	adds	r3, #4
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d001      	beq.n	800f3bc <_txm_module_manager_tx_event_flags_info_get_dispatch+0xcc>
            return(TXM_MODULE_INVALID_MEMORY);
 800f3b8:	23f4      	movs	r3, #244	; 0xf4
 800f3ba:	e03b      	b.n	800f434 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	3308      	adds	r3, #8
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	2204      	movs	r2, #4
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	68f8      	ldr	r0, [r7, #12]
 800f3c8:	f003 fec8 	bl	801315c <_txm_module_manager_inside_data_check>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d106      	bne.n	800f3e0 <_txm_module_manager_tx_event_flags_info_get_dispatch+0xf0>
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	3308      	adds	r3, #8
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d001      	beq.n	800f3e0 <_txm_module_manager_tx_event_flags_info_get_dispatch+0xf0>
            return(TXM_MODULE_INVALID_MEMORY);
 800f3dc:	23f4      	movs	r3, #244	; 0xf4
 800f3de:	e029      	b.n	800f434 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(TX_EVENT_FLAGS_GROUP *)))
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	330c      	adds	r3, #12
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	2204      	movs	r2, #4
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	68f8      	ldr	r0, [r7, #12]
 800f3ec:	f003 feb6 	bl	801315c <_txm_module_manager_inside_data_check>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d106      	bne.n	800f404 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x114>
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	330c      	adds	r3, #12
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d001      	beq.n	800f404 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x114>
            return(TXM_MODULE_INVALID_MEMORY);
 800f400:	23f4      	movs	r3, #244	; 0xf4
 800f402:	e017      	b.n	800f434 <_txm_module_manager_tx_event_flags_info_get_dispatch+0x144>
    }

    return_value = (ALIGN_TYPE) _txe_event_flags_info_get(
 800f404:	68b8      	ldr	r0, [r7, #8]
 800f406:	6879      	ldr	r1, [r7, #4]
        (TX_EVENT_FLAGS_GROUP *) param_0,
        (CHAR **) param_1,
        (ULONG *) extra_parameters[0],
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_event_flags_info_get(
 800f40c:	461c      	mov	r4, r3
        (TX_THREAD **) extra_parameters[1],
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	3304      	adds	r3, #4
 800f412:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_event_flags_info_get(
 800f414:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[2],
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	3308      	adds	r3, #8
 800f41a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_event_flags_info_get(
 800f41c:	461a      	mov	r2, r3
        (TX_EVENT_FLAGS_GROUP **) extra_parameters[3]
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	330c      	adds	r3, #12
 800f422:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_event_flags_info_get(
 800f424:	9301      	str	r3, [sp, #4]
 800f426:	9200      	str	r2, [sp, #0]
 800f428:	462b      	mov	r3, r5
 800f42a:	4622      	mov	r2, r4
 800f42c:	f7fd f80e 	bl	800c44c <_txe_event_flags_info_get>
 800f430:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800f432:	697b      	ldr	r3, [r7, #20]
}
 800f434:	4618      	mov	r0, r3
 800f436:	3718      	adds	r7, #24
 800f438:	46bd      	mov	sp, r7
 800f43a:	bdb0      	pop	{r4, r5, r7, pc}

0800f43c <_txm_module_manager_tx_event_flags_performance_info_get_dispatch>:
    ULONG *gets, -> extra_parameters[0]
    ULONG *suspensions, -> extra_parameters[1]
    ULONG *timeouts -> extra_parameters[2]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_event_flags_performance_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800f43c:	b590      	push	{r4, r7, lr}
 800f43e:	b089      	sub	sp, #36	; 0x24
 800f440:	af02      	add	r7, sp, #8
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	607a      	str	r2, [r7, #4]
 800f448:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	68db      	ldr	r3, [r3, #12]
 800f44e:	f003 0302 	and.w	r3, r3, #2
 800f452:	2b00      	cmp	r3, #0
 800f454:	d06a      	beq.n	800f52c <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0xf0>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_EVENT_FLAGS_GROUP)))
 800f456:	2230      	movs	r2, #48	; 0x30
 800f458:	68b9      	ldr	r1, [r7, #8]
 800f45a:	68f8      	ldr	r0, [r7, #12]
 800f45c:	f003 fe7e 	bl	801315c <_txm_module_manager_inside_data_check>
 800f460:	4603      	mov	r3, r0
 800f462:	2b00      	cmp	r3, #0
 800f464:	d111      	bne.n	800f48a <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x4e>
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800f46c:	d812      	bhi.n	800f494 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x58>
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	699b      	ldr	r3, [r3, #24]
 800f472:	461a      	mov	r2, r3
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	4293      	cmp	r3, r2
 800f478:	d30c      	bcc.n	800f494 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x58>
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	69db      	ldr	r3, [r3, #28]
 800f484:	3301      	adds	r3, #1
 800f486:	429a      	cmp	r2, r3
 800f488:	d804      	bhi.n	800f494 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x58>
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d001      	beq.n	800f494 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 800f490:	23f4      	movs	r3, #244	; 0xf4
 800f492:	e05d      	b.n	800f550 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x114>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800f494:	2204      	movs	r2, #4
 800f496:	6879      	ldr	r1, [r7, #4]
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	f003 fe5f 	bl	801315c <_txm_module_manager_inside_data_check>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d104      	bne.n	800f4ae <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x72>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d001      	beq.n	800f4ae <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x72>
            return(TXM_MODULE_INVALID_MEMORY);
 800f4aa:	23f4      	movs	r3, #244	; 0xf4
 800f4ac:	e050      	b.n	800f550 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x114>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[3])))
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	220c      	movs	r2, #12
 800f4b2:	4619      	mov	r1, r3
 800f4b4:	68f8      	ldr	r0, [r7, #12]
 800f4b6:	f003 fe51 	bl	801315c <_txm_module_manager_inside_data_check>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d101      	bne.n	800f4c4 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x88>
            return(TXM_MODULE_INVALID_MEMORY);
 800f4c0:	23f4      	movs	r3, #244	; 0xf4
 800f4c2:	e045      	b.n	800f550 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x114>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	2204      	movs	r2, #4
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	f003 fe45 	bl	801315c <_txm_module_manager_inside_data_check>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d105      	bne.n	800f4e4 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0xa8>
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d001      	beq.n	800f4e4 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0xa8>
            return(TXM_MODULE_INVALID_MEMORY);
 800f4e0:	23f4      	movs	r3, #244	; 0xf4
 800f4e2:	e035      	b.n	800f550 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x114>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	3304      	adds	r3, #4
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	2204      	movs	r2, #4
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	68f8      	ldr	r0, [r7, #12]
 800f4f0:	f003 fe34 	bl	801315c <_txm_module_manager_inside_data_check>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d106      	bne.n	800f508 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0xcc>
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	3304      	adds	r3, #4
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d001      	beq.n	800f508 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0xcc>
            return(TXM_MODULE_INVALID_MEMORY);
 800f504:	23f4      	movs	r3, #244	; 0xf4
 800f506:	e023      	b.n	800f550 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x114>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	3308      	adds	r3, #8
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2204      	movs	r2, #4
 800f510:	4619      	mov	r1, r3
 800f512:	68f8      	ldr	r0, [r7, #12]
 800f514:	f003 fe22 	bl	801315c <_txm_module_manager_inside_data_check>
 800f518:	4603      	mov	r3, r0
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d106      	bne.n	800f52c <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0xf0>
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	3308      	adds	r3, #8
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d001      	beq.n	800f52c <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0xf0>
            return(TXM_MODULE_INVALID_MEMORY);
 800f528:	23f4      	movs	r3, #244	; 0xf4
 800f52a:	e011      	b.n	800f550 <_txm_module_manager_tx_event_flags_performance_info_get_dispatch+0x114>
    }

    return_value = (ALIGN_TYPE) _tx_event_flags_performance_info_get(
 800f52c:	68b8      	ldr	r0, [r7, #8]
 800f52e:	6879      	ldr	r1, [r7, #4]
        (TX_EVENT_FLAGS_GROUP *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_event_flags_performance_info_get(
 800f534:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[1],
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	3304      	adds	r3, #4
 800f53a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_event_flags_performance_info_get(
 800f53c:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[2]
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	3308      	adds	r3, #8
 800f542:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_event_flags_performance_info_get(
 800f544:	9300      	str	r3, [sp, #0]
 800f546:	4623      	mov	r3, r4
 800f548:	f005 fafa 	bl	8014b40 <_tx_event_flags_performance_info_get>
 800f54c:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800f54e:	697b      	ldr	r3, [r7, #20]
}
 800f550:	4618      	mov	r0, r3
 800f552:	371c      	adds	r7, #28
 800f554:	46bd      	mov	sp, r7
 800f556:	bd90      	pop	{r4, r7, pc}

0800f558 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch>:
    ULONG *gets, -> param_1
    ULONG *suspensions, -> extra_parameters[0]
    ULONG *timeouts -> extra_parameters[1]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_event_flags_performance_system_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	607a      	str	r2, [r7, #4]
 800f564:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	68db      	ldr	r3, [r3, #12]
 800f56a:	f003 0302 	and.w	r3, r3, #2
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d046      	beq.n	800f600 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0xa8>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(ULONG)))
 800f572:	2204      	movs	r2, #4
 800f574:	68b9      	ldr	r1, [r7, #8]
 800f576:	68f8      	ldr	r0, [r7, #12]
 800f578:	f003 fdf0 	bl	801315c <_txm_module_manager_inside_data_check>
 800f57c:	4603      	mov	r3, r0
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d104      	bne.n	800f58c <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x34>
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d001      	beq.n	800f58c <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x34>
            return(TXM_MODULE_INVALID_MEMORY);
 800f588:	23f4      	movs	r3, #244	; 0xf4
 800f58a:	e045      	b.n	800f618 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0xc0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800f58c:	2204      	movs	r2, #4
 800f58e:	6879      	ldr	r1, [r7, #4]
 800f590:	68f8      	ldr	r0, [r7, #12]
 800f592:	f003 fde3 	bl	801315c <_txm_module_manager_inside_data_check>
 800f596:	4603      	mov	r3, r0
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d104      	bne.n	800f5a6 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x4e>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d001      	beq.n	800f5a6 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x4e>
            return(TXM_MODULE_INVALID_MEMORY);
 800f5a2:	23f4      	movs	r3, #244	; 0xf4
 800f5a4:	e038      	b.n	800f618 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0xc0>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[2])))
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	2208      	movs	r2, #8
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	68f8      	ldr	r0, [r7, #12]
 800f5ae:	f003 fdd5 	bl	801315c <_txm_module_manager_inside_data_check>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d101      	bne.n	800f5bc <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x64>
            return(TXM_MODULE_INVALID_MEMORY);
 800f5b8:	23f4      	movs	r3, #244	; 0xf4
 800f5ba:	e02d      	b.n	800f618 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0xc0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	2204      	movs	r2, #4
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	68f8      	ldr	r0, [r7, #12]
 800f5c6:	f003 fdc9 	bl	801315c <_txm_module_manager_inside_data_check>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d105      	bne.n	800f5dc <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x84>
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d001      	beq.n	800f5dc <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0x84>
            return(TXM_MODULE_INVALID_MEMORY);
 800f5d8:	23f4      	movs	r3, #244	; 0xf4
 800f5da:	e01d      	b.n	800f618 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0xc0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	3304      	adds	r3, #4
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	2204      	movs	r2, #4
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	68f8      	ldr	r0, [r7, #12]
 800f5e8:	f003 fdb8 	bl	801315c <_txm_module_manager_inside_data_check>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d106      	bne.n	800f600 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0xa8>
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	3304      	adds	r3, #4
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d001      	beq.n	800f600 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0xa8>
            return(TXM_MODULE_INVALID_MEMORY);
 800f5fc:	23f4      	movs	r3, #244	; 0xf4
 800f5fe:	e00b      	b.n	800f618 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch+0xc0>
    }

    return_value = (ALIGN_TYPE) _tx_event_flags_performance_system_info_get(
 800f600:	68b8      	ldr	r0, [r7, #8]
 800f602:	6879      	ldr	r1, [r7, #4]
        (ULONG *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_event_flags_performance_system_info_get(
 800f608:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[1]
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	3304      	adds	r3, #4
 800f60e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_event_flags_performance_system_info_get(
 800f610:	f005 fac4 	bl	8014b9c <_tx_event_flags_performance_system_info_get>
 800f614:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800f616:	697b      	ldr	r3, [r7, #20]
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3718      	adds	r7, #24
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <_txm_module_manager_tx_event_flags_set_dispatch>:
    TX_EVENT_FLAGS_GROUP *group_ptr, -> param_0
    ULONG flags_to_set, -> param_1
    UINT set_option -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_event_flags_set_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b086      	sub	sp, #24
 800f624:	af00      	add	r7, sp, #0
 800f626:	60f8      	str	r0, [r7, #12]
 800f628:	60b9      	str	r1, [r7, #8]
 800f62a:	607a      	str	r2, [r7, #4]
 800f62c:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	f003 0302 	and.w	r3, r3, #2
 800f636:	2b00      	cmp	r3, #0
 800f638:	d01e      	beq.n	800f678 <_txm_module_manager_tx_event_flags_set_dispatch+0x58>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_EVENT_FLAGS_GROUP)))
 800f63a:	2230      	movs	r2, #48	; 0x30
 800f63c:	68b9      	ldr	r1, [r7, #8]
 800f63e:	68f8      	ldr	r0, [r7, #12]
 800f640:	f003 fd8c 	bl	801315c <_txm_module_manager_inside_data_check>
 800f644:	4603      	mov	r3, r0
 800f646:	2b00      	cmp	r3, #0
 800f648:	d111      	bne.n	800f66e <_txm_module_manager_tx_event_flags_set_dispatch+0x4e>
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800f650:	d812      	bhi.n	800f678 <_txm_module_manager_tx_event_flags_set_dispatch+0x58>
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	699b      	ldr	r3, [r3, #24]
 800f656:	461a      	mov	r2, r3
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d30c      	bcc.n	800f678 <_txm_module_manager_tx_event_flags_set_dispatch+0x58>
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	69db      	ldr	r3, [r3, #28]
 800f668:	3301      	adds	r3, #1
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d804      	bhi.n	800f678 <_txm_module_manager_tx_event_flags_set_dispatch+0x58>
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d001      	beq.n	800f678 <_txm_module_manager_tx_event_flags_set_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 800f674:	23f4      	movs	r3, #244	; 0xf4
 800f676:	e007      	b.n	800f688 <_txm_module_manager_tx_event_flags_set_dispatch+0x68>
    }

    return_value = (ALIGN_TYPE) _txe_event_flags_set(
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	683a      	ldr	r2, [r7, #0]
 800f67c:	6879      	ldr	r1, [r7, #4]
 800f67e:	4618      	mov	r0, r3
 800f680:	f7fc ff0c 	bl	800c49c <_txe_event_flags_set>
 800f684:	6178      	str	r0, [r7, #20]
        (TX_EVENT_FLAGS_GROUP *) param_0,
        (ULONG) param_1,
        (UINT) param_2
    );
    return(return_value);
 800f686:	697b      	ldr	r3, [r7, #20]
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3718      	adds	r7, #24
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <_txm_module_manager_tx_event_flags_set_notify_dispatch>:
/* UINT _txe_event_flags_set_notify(
    TX_EVENT_FLAGS_GROUP *group_ptr, -> param_0
    VOID (*events_set_notify)(TX_EVENT_FLAGS_GROUP *) -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_tx_event_flags_set_notify_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b088      	sub	sp, #32
 800f694:	af00      	add	r7, sp, #0
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;
TX_EVENT_FLAGS_GROUP *event_flags_ptr = (TX_EVENT_FLAGS_GROUP *)param_0;
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	61bb      	str	r3, [r7, #24]
VOID (*events_set_notify)(TX_EVENT_FLAGS_GROUP *);

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	68db      	ldr	r3, [r3, #12]
 800f6a4:	f003 0302 	and.w	r3, r3, #2
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d028      	beq.n	800f6fe <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x6e>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_EVENT_FLAGS_GROUP)))
 800f6ac:	2230      	movs	r2, #48	; 0x30
 800f6ae:	68b9      	ldr	r1, [r7, #8]
 800f6b0:	68f8      	ldr	r0, [r7, #12]
 800f6b2:	f003 fd53 	bl	801315c <_txm_module_manager_inside_data_check>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d111      	bne.n	800f6e0 <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x50>
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	f113 0f31 	cmn.w	r3, #49	; 0x31
 800f6c2:	d812      	bhi.n	800f6ea <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x5a>
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	699b      	ldr	r3, [r3, #24]
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	4293      	cmp	r3, r2
 800f6ce:	d30c      	bcc.n	800f6ea <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x5a>
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	69db      	ldr	r3, [r3, #28]
 800f6da:	3301      	adds	r3, #1
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d804      	bhi.n	800f6ea <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x5a>
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d001      	beq.n	800f6ea <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x5a>
            return(TXM_MODULE_INVALID_MEMORY);
 800f6e6:	23f4      	movs	r3, #244	; 0xf4
 800f6e8:	e01e      	b.n	800f728 <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x98>

        /* Since we need to write to the object, ensure it's valid.  */
        if ((event_flags_ptr == TX_NULL) || (event_flags_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID))
 800f6ea:	69bb      	ldr	r3, [r7, #24]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d004      	beq.n	800f6fa <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x6a>
 800f6f0:	69bb      	ldr	r3, [r7, #24]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4a0e      	ldr	r2, [pc, #56]	; (800f730 <_txm_module_manager_tx_event_flags_set_notify_dispatch+0xa0>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d001      	beq.n	800f6fe <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x6e>
            return(TX_GROUP_ERROR);
 800f6fa:	2306      	movs	r3, #6
 800f6fc:	e014      	b.n	800f728 <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x98>
    }

    /* Is it a disable request?  */
    if ((void *) param_1 == TX_NULL)
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d102      	bne.n	800f70a <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x7a>
    {

        /* Clear the callback.  */
        events_set_notify = (VOID (*)(TX_EVENT_FLAGS_GROUP *)) TX_NULL;
 800f704:	2300      	movs	r3, #0
 800f706:	61fb      	str	r3, [r7, #28]
 800f708:	e007      	b.n	800f71a <_txm_module_manager_tx_event_flags_set_notify_dispatch+0x8a>
    }
    else
    {

        /* Setup trampoline values.  */
        event_flags_ptr -> tx_event_flags_group_module_instance = (VOID *) module_instance;
 800f70a:	69bb      	ldr	r3, [r7, #24]
 800f70c:	68fa      	ldr	r2, [r7, #12]
 800f70e:	629a      	str	r2, [r3, #40]	; 0x28
        event_flags_ptr -> tx_event_flags_group_set_module_notify = (VOID (*)(TX_EVENT_FLAGS_GROUP *)) param_1;
 800f710:	687a      	ldr	r2, [r7, #4]
 800f712:	69bb      	ldr	r3, [r7, #24]
 800f714:	62da      	str	r2, [r3, #44]	; 0x2c
        events_set_notify = _txm_module_manager_event_flags_notify_trampoline;
 800f716:	4b07      	ldr	r3, [pc, #28]	; (800f734 <_txm_module_manager_tx_event_flags_set_notify_dispatch+0xa4>)
 800f718:	61fb      	str	r3, [r7, #28]
    }

    return_value = (ALIGN_TYPE) _txe_event_flags_set_notify(
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	69f9      	ldr	r1, [r7, #28]
 800f71e:	4618      	mov	r0, r3
 800f720:	f7fc feea 	bl	800c4f8 <_txe_event_flags_set_notify>
 800f724:	6178      	str	r0, [r7, #20]
        (TX_EVENT_FLAGS_GROUP *) param_0,
        (VOID (*)(TX_EVENT_FLAGS_GROUP *)) events_set_notify
    );
    return(return_value);
 800f726:	697b      	ldr	r3, [r7, #20]
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3720      	adds	r7, #32
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	4456444e 	.word	0x4456444e
 800f734:	0800dbcd 	.word	0x0800dbcd

0800f738 <_txm_module_manager_tx_mutex_create_dispatch>:
    CHAR *name_ptr, -> param_1
    UINT inherit, -> extra_parameters[0]
    UINT mutex_control_block_size -> extra_parameters[1]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_mutex_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b086      	sub	sp, #24
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	60f8      	str	r0, [r7, #12]
 800f740:	60b9      	str	r1, [r7, #8]
 800f742:	607a      	str	r2, [r7, #4]
 800f744:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	68db      	ldr	r3, [r3, #12]
 800f74a:	f003 0302 	and.w	r3, r3, #2
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d04b      	beq.n	800f7ea <_txm_module_manager_tx_mutex_create_dispatch+0xb2>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_MUTEX)))
 800f752:	4b2d      	ldr	r3, [pc, #180]	; (800f808 <_txm_module_manager_tx_mutex_create_dispatch+0xd0>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2b01      	cmp	r3, #1
 800f758:	d119      	bne.n	800f78e <_txm_module_manager_tx_mutex_create_dispatch+0x56>
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800f760:	d815      	bhi.n	800f78e <_txm_module_manager_tx_mutex_create_dispatch+0x56>
 800f762:	4b2a      	ldr	r3, [pc, #168]	; (800f80c <_txm_module_manager_tx_mutex_create_dispatch+0xd4>)
 800f764:	699b      	ldr	r3, [r3, #24]
 800f766:	3310      	adds	r3, #16
 800f768:	68ba      	ldr	r2, [r7, #8]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d30f      	bcc.n	800f78e <_txm_module_manager_tx_mutex_create_dispatch+0x56>
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	3334      	adds	r3, #52	; 0x34
 800f772:	4a26      	ldr	r2, [pc, #152]	; (800f80c <_txm_module_manager_tx_mutex_create_dispatch+0xd4>)
 800f774:	6991      	ldr	r1, [r2, #24]
 800f776:	4a25      	ldr	r2, [pc, #148]	; (800f80c <_txm_module_manager_tx_mutex_create_dispatch+0xd4>)
 800f778:	69d2      	ldr	r2, [r2, #28]
 800f77a:	440a      	add	r2, r1
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d806      	bhi.n	800f78e <_txm_module_manager_tx_mutex_create_dispatch+0x56>
 800f780:	2134      	movs	r1, #52	; 0x34
 800f782:	68b8      	ldr	r0, [r7, #8]
 800f784:	f005 f884 	bl	8014890 <_txm_module_manager_object_size_check>
 800f788:	4603      	mov	r3, r0
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d004      	beq.n	800f798 <_txm_module_manager_tx_mutex_create_dispatch+0x60>
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d001      	beq.n	800f798 <_txm_module_manager_tx_mutex_create_dispatch+0x60>
            return(TXM_MODULE_INVALID_MEMORY);
 800f794:	23f4      	movs	r3, #244	; 0xf4
 800f796:	e033      	b.n	800f800 <_txm_module_manager_tx_mutex_create_dispatch+0xc8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 800f798:	2201      	movs	r2, #1
 800f79a:	6879      	ldr	r1, [r7, #4]
 800f79c:	68f8      	ldr	r0, [r7, #12]
 800f79e:	f003 fcdd 	bl	801315c <_txm_module_manager_inside_data_check>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d115      	bne.n	800f7d4 <_txm_module_manager_tx_mutex_create_dispatch+0x9c>
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ae:	d00c      	beq.n	800f7ca <_txm_module_manager_tx_mutex_create_dispatch+0x92>
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	699b      	ldr	r3, [r3, #24]
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d306      	bcc.n	800f7ca <_txm_module_manager_tx_mutex_create_dispatch+0x92>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	1c5a      	adds	r2, r3, #1
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	69db      	ldr	r3, [r3, #28]
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d904      	bls.n	800f7d4 <_txm_module_manager_tx_mutex_create_dispatch+0x9c>
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d001      	beq.n	800f7d4 <_txm_module_manager_tx_mutex_create_dispatch+0x9c>
            return(TXM_MODULE_INVALID_MEMORY);
 800f7d0:	23f4      	movs	r3, #244	; 0xf4
 800f7d2:	e015      	b.n	800f800 <_txm_module_manager_tx_mutex_create_dispatch+0xc8>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[2])))
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	2208      	movs	r2, #8
 800f7d8:	4619      	mov	r1, r3
 800f7da:	68f8      	ldr	r0, [r7, #12]
 800f7dc:	f003 fcbe 	bl	801315c <_txm_module_manager_inside_data_check>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d101      	bne.n	800f7ea <_txm_module_manager_tx_mutex_create_dispatch+0xb2>
            return(TXM_MODULE_INVALID_MEMORY);
 800f7e6:	23f4      	movs	r3, #244	; 0xf4
 800f7e8:	e00a      	b.n	800f800 <_txm_module_manager_tx_mutex_create_dispatch+0xc8>
    }

    return_value = (ALIGN_TYPE) _txe_mutex_create(
 800f7ea:	68b8      	ldr	r0, [r7, #8]
 800f7ec:	6879      	ldr	r1, [r7, #4]
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	681a      	ldr	r2, [r3, #0]
        (TX_MUTEX *) param_0,
        (CHAR *) param_1,
        (UINT) extra_parameters[0],
        (UINT) extra_parameters[1]
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _txe_mutex_create(
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f7fc fe9e 	bl	800c538 <_txe_mutex_create>
 800f7fc:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800f7fe:	697b      	ldr	r3, [r7, #20]
}
 800f800:	4618      	mov	r0, r3
 800f802:	3718      	adds	r7, #24
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}
 800f808:	2400f6e8 	.word	0x2400f6e8
 800f80c:	2400f6b4 	.word	0x2400f6b4

0800f810 <_txm_module_manager_tx_mutex_delete_dispatch>:

/* UINT _txe_mutex_delete(
    TX_MUTEX *mutex_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_mutex_delete_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b084      	sub	sp, #16
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	f003 0302 	and.w	r3, r3, #2
 800f822:	2b00      	cmp	r3, #0
 800f824:	d01e      	beq.n	800f864 <_txm_module_manager_tx_mutex_delete_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_MUTEX)))
 800f826:	2234      	movs	r2, #52	; 0x34
 800f828:	6839      	ldr	r1, [r7, #0]
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f003 fc96 	bl	801315c <_txm_module_manager_inside_data_check>
 800f830:	4603      	mov	r3, r0
 800f832:	2b00      	cmp	r3, #0
 800f834:	d111      	bne.n	800f85a <_txm_module_manager_tx_mutex_delete_dispatch+0x4a>
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800f83c:	d812      	bhi.n	800f864 <_txm_module_manager_tx_mutex_delete_dispatch+0x54>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	699b      	ldr	r3, [r3, #24]
 800f842:	461a      	mov	r2, r3
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	4293      	cmp	r3, r2
 800f848:	d30c      	bcc.n	800f864 <_txm_module_manager_tx_mutex_delete_dispatch+0x54>
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	69db      	ldr	r3, [r3, #28]
 800f854:	3301      	adds	r3, #1
 800f856:	429a      	cmp	r2, r3
 800f858:	d804      	bhi.n	800f864 <_txm_module_manager_tx_mutex_delete_dispatch+0x54>
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d001      	beq.n	800f864 <_txm_module_manager_tx_mutex_delete_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 800f860:	23f4      	movs	r3, #244	; 0xf4
 800f862:	e00d      	b.n	800f880 <_txm_module_manager_tx_mutex_delete_dispatch+0x70>
    }

    return_value = (ALIGN_TYPE) _txe_mutex_delete(
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	4618      	mov	r0, r3
 800f868:	f7fc ff00 	bl	800c66c <_txe_mutex_delete>
 800f86c:	60f8      	str	r0, [r7, #12]
        (TX_MUTEX *) param_0
    );

    /* Deallocate object memory.  */
    if (return_value == TX_SUCCESS)
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d104      	bne.n	800f87e <_txm_module_manager_tx_mutex_delete_dispatch+0x6e>
    {
        return_value = _txm_module_manager_object_deallocate((VOID *) param_0);
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	4618      	mov	r0, r3
 800f878:	f003 fd26 	bl	80132c8 <_txm_module_manager_object_deallocate>
 800f87c:	60f8      	str	r0, [r7, #12]
    }
    return(return_value);
 800f87e:	68fb      	ldr	r3, [r7, #12]
}
 800f880:	4618      	mov	r0, r3
 800f882:	3710      	adds	r7, #16
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}

0800f888 <_txm_module_manager_tx_mutex_get_dispatch>:
/* UINT _txe_mutex_get(
    TX_MUTEX *mutex_ptr, -> param_0
    ULONG wait_option -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_tx_mutex_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b086      	sub	sp, #24
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	60f8      	str	r0, [r7, #12]
 800f890:	60b9      	str	r1, [r7, #8]
 800f892:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	f003 0302 	and.w	r3, r3, #2
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d01e      	beq.n	800f8de <_txm_module_manager_tx_mutex_get_dispatch+0x56>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_MUTEX)))
 800f8a0:	2234      	movs	r2, #52	; 0x34
 800f8a2:	68b9      	ldr	r1, [r7, #8]
 800f8a4:	68f8      	ldr	r0, [r7, #12]
 800f8a6:	f003 fc59 	bl	801315c <_txm_module_manager_inside_data_check>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d111      	bne.n	800f8d4 <_txm_module_manager_tx_mutex_get_dispatch+0x4c>
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800f8b6:	d812      	bhi.n	800f8de <_txm_module_manager_tx_mutex_get_dispatch+0x56>
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	699b      	ldr	r3, [r3, #24]
 800f8bc:	461a      	mov	r2, r3
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d30c      	bcc.n	800f8de <_txm_module_manager_tx_mutex_get_dispatch+0x56>
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	69db      	ldr	r3, [r3, #28]
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d804      	bhi.n	800f8de <_txm_module_manager_tx_mutex_get_dispatch+0x56>
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d001      	beq.n	800f8de <_txm_module_manager_tx_mutex_get_dispatch+0x56>
            return(TXM_MODULE_INVALID_MEMORY);
 800f8da:	23f4      	movs	r3, #244	; 0xf4
 800f8dc:	e006      	b.n	800f8ec <_txm_module_manager_tx_mutex_get_dispatch+0x64>
    }

    return_value = (ALIGN_TYPE) _txe_mutex_get(
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	6879      	ldr	r1, [r7, #4]
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fc ff00 	bl	800c6e8 <_txe_mutex_get>
 800f8e8:	6178      	str	r0, [r7, #20]
        (TX_MUTEX *) param_0,
        (ULONG) param_1
    );
    return(return_value);
 800f8ea:	697b      	ldr	r3, [r7, #20]
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3718      	adds	r7, #24
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <_txm_module_manager_tx_mutex_info_get_dispatch>:
    TX_THREAD **first_suspended, -> extra_parameters[2]
    ULONG *suspended_count, -> extra_parameters[3]
    TX_MUTEX **next_mutex -> extra_parameters[4]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_mutex_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800f8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8f6:	b08b      	sub	sp, #44	; 0x2c
 800f8f8:	af04      	add	r7, sp, #16
 800f8fa:	60f8      	str	r0, [r7, #12]
 800f8fc:	60b9      	str	r1, [r7, #8]
 800f8fe:	607a      	str	r2, [r7, #4]
 800f900:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	68db      	ldr	r3, [r3, #12]
 800f906:	f003 0302 	and.w	r3, r3, #2
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	f000 808f 	beq.w	800fa2e <_txm_module_manager_tx_mutex_info_get_dispatch+0x13a>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_MUTEX)))
 800f910:	2234      	movs	r2, #52	; 0x34
 800f912:	68b9      	ldr	r1, [r7, #8]
 800f914:	68f8      	ldr	r0, [r7, #12]
 800f916:	f003 fc21 	bl	801315c <_txm_module_manager_inside_data_check>
 800f91a:	4603      	mov	r3, r0
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d111      	bne.n	800f944 <_txm_module_manager_tx_mutex_info_get_dispatch+0x50>
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800f926:	d812      	bhi.n	800f94e <_txm_module_manager_tx_mutex_info_get_dispatch+0x5a>
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	699b      	ldr	r3, [r3, #24]
 800f92c:	461a      	mov	r2, r3
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	4293      	cmp	r3, r2
 800f932:	d30c      	bcc.n	800f94e <_txm_module_manager_tx_mutex_info_get_dispatch+0x5a>
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	69db      	ldr	r3, [r3, #28]
 800f93e:	3301      	adds	r3, #1
 800f940:	429a      	cmp	r2, r3
 800f942:	d804      	bhi.n	800f94e <_txm_module_manager_tx_mutex_info_get_dispatch+0x5a>
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d001      	beq.n	800f94e <_txm_module_manager_tx_mutex_info_get_dispatch+0x5a>
            return(TXM_MODULE_INVALID_MEMORY);
 800f94a:	23f4      	movs	r3, #244	; 0xf4
 800f94c:	e08c      	b.n	800fa68 <_txm_module_manager_tx_mutex_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(CHAR *)))
 800f94e:	2204      	movs	r2, #4
 800f950:	6879      	ldr	r1, [r7, #4]
 800f952:	68f8      	ldr	r0, [r7, #12]
 800f954:	f003 fc02 	bl	801315c <_txm_module_manager_inside_data_check>
 800f958:	4603      	mov	r3, r0
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d104      	bne.n	800f968 <_txm_module_manager_tx_mutex_info_get_dispatch+0x74>
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d001      	beq.n	800f968 <_txm_module_manager_tx_mutex_info_get_dispatch+0x74>
            return(TXM_MODULE_INVALID_MEMORY);
 800f964:	23f4      	movs	r3, #244	; 0xf4
 800f966:	e07f      	b.n	800fa68 <_txm_module_manager_tx_mutex_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[5])))
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	2214      	movs	r2, #20
 800f96c:	4619      	mov	r1, r3
 800f96e:	68f8      	ldr	r0, [r7, #12]
 800f970:	f003 fbf4 	bl	801315c <_txm_module_manager_inside_data_check>
 800f974:	4603      	mov	r3, r0
 800f976:	2b00      	cmp	r3, #0
 800f978:	d101      	bne.n	800f97e <_txm_module_manager_tx_mutex_info_get_dispatch+0x8a>
            return(TXM_MODULE_INVALID_MEMORY);
 800f97a:	23f4      	movs	r3, #244	; 0xf4
 800f97c:	e074      	b.n	800fa68 <_txm_module_manager_tx_mutex_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2204      	movs	r2, #4
 800f984:	4619      	mov	r1, r3
 800f986:	68f8      	ldr	r0, [r7, #12]
 800f988:	f003 fbe8 	bl	801315c <_txm_module_manager_inside_data_check>
 800f98c:	4603      	mov	r3, r0
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d105      	bne.n	800f99e <_txm_module_manager_tx_mutex_info_get_dispatch+0xaa>
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d001      	beq.n	800f99e <_txm_module_manager_tx_mutex_info_get_dispatch+0xaa>
            return(TXM_MODULE_INVALID_MEMORY);
 800f99a:	23f4      	movs	r3, #244	; 0xf4
 800f99c:	e064      	b.n	800fa68 <_txm_module_manager_tx_mutex_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(TX_THREAD *)))
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	3304      	adds	r3, #4
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	2204      	movs	r2, #4
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f003 fbd7 	bl	801315c <_txm_module_manager_inside_data_check>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d106      	bne.n	800f9c2 <_txm_module_manager_tx_mutex_info_get_dispatch+0xce>
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	3304      	adds	r3, #4
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d001      	beq.n	800f9c2 <_txm_module_manager_tx_mutex_info_get_dispatch+0xce>
            return(TXM_MODULE_INVALID_MEMORY);
 800f9be:	23f4      	movs	r3, #244	; 0xf4
 800f9c0:	e052      	b.n	800fa68 <_txm_module_manager_tx_mutex_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(TX_THREAD *)))
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	3308      	adds	r3, #8
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2204      	movs	r2, #4
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	68f8      	ldr	r0, [r7, #12]
 800f9ce:	f003 fbc5 	bl	801315c <_txm_module_manager_inside_data_check>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d106      	bne.n	800f9e6 <_txm_module_manager_tx_mutex_info_get_dispatch+0xf2>
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	3308      	adds	r3, #8
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d001      	beq.n	800f9e6 <_txm_module_manager_tx_mutex_info_get_dispatch+0xf2>
            return(TXM_MODULE_INVALID_MEMORY);
 800f9e2:	23f4      	movs	r3, #244	; 0xf4
 800f9e4:	e040      	b.n	800fa68 <_txm_module_manager_tx_mutex_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	330c      	adds	r3, #12
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	2204      	movs	r2, #4
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	68f8      	ldr	r0, [r7, #12]
 800f9f2:	f003 fbb3 	bl	801315c <_txm_module_manager_inside_data_check>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d106      	bne.n	800fa0a <_txm_module_manager_tx_mutex_info_get_dispatch+0x116>
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	330c      	adds	r3, #12
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d001      	beq.n	800fa0a <_txm_module_manager_tx_mutex_info_get_dispatch+0x116>
            return(TXM_MODULE_INVALID_MEMORY);
 800fa06:	23f4      	movs	r3, #244	; 0xf4
 800fa08:	e02e      	b.n	800fa68 <_txm_module_manager_tx_mutex_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(TX_MUTEX *)))
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	3310      	adds	r3, #16
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	2204      	movs	r2, #4
 800fa12:	4619      	mov	r1, r3
 800fa14:	68f8      	ldr	r0, [r7, #12]
 800fa16:	f003 fba1 	bl	801315c <_txm_module_manager_inside_data_check>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d106      	bne.n	800fa2e <_txm_module_manager_tx_mutex_info_get_dispatch+0x13a>
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	3310      	adds	r3, #16
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d001      	beq.n	800fa2e <_txm_module_manager_tx_mutex_info_get_dispatch+0x13a>
            return(TXM_MODULE_INVALID_MEMORY);
 800fa2a:	23f4      	movs	r3, #244	; 0xf4
 800fa2c:	e01c      	b.n	800fa68 <_txm_module_manager_tx_mutex_info_get_dispatch+0x174>
    }

    return_value = (ALIGN_TYPE) _txe_mutex_info_get(
 800fa2e:	68b8      	ldr	r0, [r7, #8]
 800fa30:	6879      	ldr	r1, [r7, #4]
        (TX_MUTEX *) param_0,
        (CHAR **) param_1,
        (ULONG *) extra_parameters[0],
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_mutex_info_get(
 800fa36:	461d      	mov	r5, r3
        (TX_THREAD **) extra_parameters[1],
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	3304      	adds	r3, #4
 800fa3c:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_mutex_info_get(
 800fa3e:	461e      	mov	r6, r3
        (TX_THREAD **) extra_parameters[2],
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	3308      	adds	r3, #8
 800fa44:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_mutex_info_get(
 800fa46:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	330c      	adds	r3, #12
 800fa4c:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_mutex_info_get(
 800fa4e:	461c      	mov	r4, r3
        (TX_MUTEX **) extra_parameters[4]
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	3310      	adds	r3, #16
 800fa54:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_mutex_info_get(
 800fa56:	9302      	str	r3, [sp, #8]
 800fa58:	9401      	str	r4, [sp, #4]
 800fa5a:	9200      	str	r2, [sp, #0]
 800fa5c:	4633      	mov	r3, r6
 800fa5e:	462a      	mov	r2, r5
 800fa60:	f7fc fe9c 	bl	800c79c <_txe_mutex_info_get>
 800fa64:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800fa66:	697b      	ldr	r3, [r7, #20]
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	371c      	adds	r7, #28
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fa70 <_txm_module_manager_tx_mutex_performance_info_get_dispatch>:
    ULONG *timeouts, -> extra_parameters[2]
    ULONG *inversions, -> extra_parameters[3]
    ULONG *inheritances -> extra_parameters[4]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_mutex_performance_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800fa70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa72:	b08b      	sub	sp, #44	; 0x2c
 800fa74:	af04      	add	r7, sp, #16
 800fa76:	60f8      	str	r0, [r7, #12]
 800fa78:	60b9      	str	r1, [r7, #8]
 800fa7a:	607a      	str	r2, [r7, #4]
 800fa7c:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	68db      	ldr	r3, [r3, #12]
 800fa82:	f003 0302 	and.w	r3, r3, #2
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	f000 808f 	beq.w	800fbaa <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x13a>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_MUTEX)))
 800fa8c:	2234      	movs	r2, #52	; 0x34
 800fa8e:	68b9      	ldr	r1, [r7, #8]
 800fa90:	68f8      	ldr	r0, [r7, #12]
 800fa92:	f003 fb63 	bl	801315c <_txm_module_manager_inside_data_check>
 800fa96:	4603      	mov	r3, r0
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d111      	bne.n	800fac0 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x50>
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800faa2:	d812      	bhi.n	800faca <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x5a>
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	699b      	ldr	r3, [r3, #24]
 800faa8:	461a      	mov	r2, r3
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	4293      	cmp	r3, r2
 800faae:	d30c      	bcc.n	800faca <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x5a>
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	69db      	ldr	r3, [r3, #28]
 800faba:	3301      	adds	r3, #1
 800fabc:	429a      	cmp	r2, r3
 800fabe:	d804      	bhi.n	800faca <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x5a>
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d001      	beq.n	800faca <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x5a>
            return(TXM_MODULE_INVALID_MEMORY);
 800fac6:	23f4      	movs	r3, #244	; 0xf4
 800fac8:	e08c      	b.n	800fbe4 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800faca:	2204      	movs	r2, #4
 800facc:	6879      	ldr	r1, [r7, #4]
 800face:	68f8      	ldr	r0, [r7, #12]
 800fad0:	f003 fb44 	bl	801315c <_txm_module_manager_inside_data_check>
 800fad4:	4603      	mov	r3, r0
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d104      	bne.n	800fae4 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x74>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d001      	beq.n	800fae4 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x74>
            return(TXM_MODULE_INVALID_MEMORY);
 800fae0:	23f4      	movs	r3, #244	; 0xf4
 800fae2:	e07f      	b.n	800fbe4 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[5])))
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	2214      	movs	r2, #20
 800fae8:	4619      	mov	r1, r3
 800faea:	68f8      	ldr	r0, [r7, #12]
 800faec:	f003 fb36 	bl	801315c <_txm_module_manager_inside_data_check>
 800faf0:	4603      	mov	r3, r0
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d101      	bne.n	800fafa <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x8a>
            return(TXM_MODULE_INVALID_MEMORY);
 800faf6:	23f4      	movs	r3, #244	; 0xf4
 800faf8:	e074      	b.n	800fbe4 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	2204      	movs	r2, #4
 800fb00:	4619      	mov	r1, r3
 800fb02:	68f8      	ldr	r0, [r7, #12]
 800fb04:	f003 fb2a 	bl	801315c <_txm_module_manager_inside_data_check>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d105      	bne.n	800fb1a <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0xaa>
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d001      	beq.n	800fb1a <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0xaa>
            return(TXM_MODULE_INVALID_MEMORY);
 800fb16:	23f4      	movs	r3, #244	; 0xf4
 800fb18:	e064      	b.n	800fbe4 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	3304      	adds	r3, #4
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	2204      	movs	r2, #4
 800fb22:	4619      	mov	r1, r3
 800fb24:	68f8      	ldr	r0, [r7, #12]
 800fb26:	f003 fb19 	bl	801315c <_txm_module_manager_inside_data_check>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d106      	bne.n	800fb3e <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0xce>
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	3304      	adds	r3, #4
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d001      	beq.n	800fb3e <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0xce>
            return(TXM_MODULE_INVALID_MEMORY);
 800fb3a:	23f4      	movs	r3, #244	; 0xf4
 800fb3c:	e052      	b.n	800fbe4 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	3308      	adds	r3, #8
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	2204      	movs	r2, #4
 800fb46:	4619      	mov	r1, r3
 800fb48:	68f8      	ldr	r0, [r7, #12]
 800fb4a:	f003 fb07 	bl	801315c <_txm_module_manager_inside_data_check>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d106      	bne.n	800fb62 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0xf2>
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	3308      	adds	r3, #8
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d001      	beq.n	800fb62 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0xf2>
            return(TXM_MODULE_INVALID_MEMORY);
 800fb5e:	23f4      	movs	r3, #244	; 0xf4
 800fb60:	e040      	b.n	800fbe4 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	330c      	adds	r3, #12
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2204      	movs	r2, #4
 800fb6a:	4619      	mov	r1, r3
 800fb6c:	68f8      	ldr	r0, [r7, #12]
 800fb6e:	f003 faf5 	bl	801315c <_txm_module_manager_inside_data_check>
 800fb72:	4603      	mov	r3, r0
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d106      	bne.n	800fb86 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x116>
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	330c      	adds	r3, #12
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d001      	beq.n	800fb86 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x116>
            return(TXM_MODULE_INVALID_MEMORY);
 800fb82:	23f4      	movs	r3, #244	; 0xf4
 800fb84:	e02e      	b.n	800fbe4 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(ULONG)))
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	3310      	adds	r3, #16
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	2204      	movs	r2, #4
 800fb8e:	4619      	mov	r1, r3
 800fb90:	68f8      	ldr	r0, [r7, #12]
 800fb92:	f003 fae3 	bl	801315c <_txm_module_manager_inside_data_check>
 800fb96:	4603      	mov	r3, r0
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d106      	bne.n	800fbaa <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x13a>
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	3310      	adds	r3, #16
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d001      	beq.n	800fbaa <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x13a>
            return(TXM_MODULE_INVALID_MEMORY);
 800fba6:	23f4      	movs	r3, #244	; 0xf4
 800fba8:	e01c      	b.n	800fbe4 <_txm_module_manager_tx_mutex_performance_info_get_dispatch+0x174>
    }

    return_value = (ALIGN_TYPE) _tx_mutex_performance_info_get(
 800fbaa:	68b8      	ldr	r0, [r7, #8]
 800fbac:	6879      	ldr	r1, [r7, #4]
        (TX_MUTEX *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_info_get(
 800fbb2:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[1],
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	3304      	adds	r3, #4
 800fbb8:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_info_get(
 800fbba:	461e      	mov	r6, r3
        (ULONG *) extra_parameters[2],
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	3308      	adds	r3, #8
 800fbc0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_info_get(
 800fbc2:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	330c      	adds	r3, #12
 800fbc8:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_info_get(
 800fbca:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[4]
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	3310      	adds	r3, #16
 800fbd0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_info_get(
 800fbd2:	9302      	str	r3, [sp, #8]
 800fbd4:	9401      	str	r4, [sp, #4]
 800fbd6:	9200      	str	r2, [sp, #0]
 800fbd8:	4633      	mov	r3, r6
 800fbda:	462a      	mov	r2, r5
 800fbdc:	f005 f806 	bl	8014bec <_tx_mutex_performance_info_get>
 800fbe0:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800fbe2:	697b      	ldr	r3, [r7, #20]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	371c      	adds	r7, #28
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fbec <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch>:
    ULONG *timeouts, -> extra_parameters[1]
    ULONG *inversions, -> extra_parameters[2]
    ULONG *inheritances -> extra_parameters[3]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_mutex_performance_system_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800fbec:	b5b0      	push	{r4, r5, r7, lr}
 800fbee:	b088      	sub	sp, #32
 800fbf0:	af02      	add	r7, sp, #8
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	607a      	str	r2, [r7, #4]
 800fbf8:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	68db      	ldr	r3, [r3, #12]
 800fbfe:	f003 0302 	and.w	r3, r3, #2
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d06a      	beq.n	800fcdc <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0xf0>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(ULONG)))
 800fc06:	2204      	movs	r2, #4
 800fc08:	68b9      	ldr	r1, [r7, #8]
 800fc0a:	68f8      	ldr	r0, [r7, #12]
 800fc0c:	f003 faa6 	bl	801315c <_txm_module_manager_inside_data_check>
 800fc10:	4603      	mov	r3, r0
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d104      	bne.n	800fc20 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x34>
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d001      	beq.n	800fc20 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x34>
            return(TXM_MODULE_INVALID_MEMORY);
 800fc1c:	23f4      	movs	r3, #244	; 0xf4
 800fc1e:	e075      	b.n	800fd0c <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x120>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 800fc20:	2204      	movs	r2, #4
 800fc22:	6879      	ldr	r1, [r7, #4]
 800fc24:	68f8      	ldr	r0, [r7, #12]
 800fc26:	f003 fa99 	bl	801315c <_txm_module_manager_inside_data_check>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d104      	bne.n	800fc3a <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x4e>
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d001      	beq.n	800fc3a <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x4e>
            return(TXM_MODULE_INVALID_MEMORY);
 800fc36:	23f4      	movs	r3, #244	; 0xf4
 800fc38:	e068      	b.n	800fd0c <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x120>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[4])))
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	2210      	movs	r2, #16
 800fc3e:	4619      	mov	r1, r3
 800fc40:	68f8      	ldr	r0, [r7, #12]
 800fc42:	f003 fa8b 	bl	801315c <_txm_module_manager_inside_data_check>
 800fc46:	4603      	mov	r3, r0
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d101      	bne.n	800fc50 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x64>
            return(TXM_MODULE_INVALID_MEMORY);
 800fc4c:	23f4      	movs	r3, #244	; 0xf4
 800fc4e:	e05d      	b.n	800fd0c <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x120>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	2204      	movs	r2, #4
 800fc56:	4619      	mov	r1, r3
 800fc58:	68f8      	ldr	r0, [r7, #12]
 800fc5a:	f003 fa7f 	bl	801315c <_txm_module_manager_inside_data_check>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d105      	bne.n	800fc70 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x84>
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d001      	beq.n	800fc70 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x84>
            return(TXM_MODULE_INVALID_MEMORY);
 800fc6c:	23f4      	movs	r3, #244	; 0xf4
 800fc6e:	e04d      	b.n	800fd0c <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x120>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	3304      	adds	r3, #4
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	2204      	movs	r2, #4
 800fc78:	4619      	mov	r1, r3
 800fc7a:	68f8      	ldr	r0, [r7, #12]
 800fc7c:	f003 fa6e 	bl	801315c <_txm_module_manager_inside_data_check>
 800fc80:	4603      	mov	r3, r0
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d106      	bne.n	800fc94 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0xa8>
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	3304      	adds	r3, #4
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d001      	beq.n	800fc94 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0xa8>
            return(TXM_MODULE_INVALID_MEMORY);
 800fc90:	23f4      	movs	r3, #244	; 0xf4
 800fc92:	e03b      	b.n	800fd0c <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x120>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	3308      	adds	r3, #8
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	2204      	movs	r2, #4
 800fc9c:	4619      	mov	r1, r3
 800fc9e:	68f8      	ldr	r0, [r7, #12]
 800fca0:	f003 fa5c 	bl	801315c <_txm_module_manager_inside_data_check>
 800fca4:	4603      	mov	r3, r0
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d106      	bne.n	800fcb8 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0xcc>
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	3308      	adds	r3, #8
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d001      	beq.n	800fcb8 <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0xcc>
            return(TXM_MODULE_INVALID_MEMORY);
 800fcb4:	23f4      	movs	r3, #244	; 0xf4
 800fcb6:	e029      	b.n	800fd0c <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x120>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	330c      	adds	r3, #12
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	2204      	movs	r2, #4
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	68f8      	ldr	r0, [r7, #12]
 800fcc4:	f003 fa4a 	bl	801315c <_txm_module_manager_inside_data_check>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d106      	bne.n	800fcdc <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0xf0>
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	330c      	adds	r3, #12
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d001      	beq.n	800fcdc <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0xf0>
            return(TXM_MODULE_INVALID_MEMORY);
 800fcd8:	23f4      	movs	r3, #244	; 0xf4
 800fcda:	e017      	b.n	800fd0c <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch+0x120>
    }

    return_value = (ALIGN_TYPE) _tx_mutex_performance_system_info_get(
 800fcdc:	68b8      	ldr	r0, [r7, #8]
 800fcde:	6879      	ldr	r1, [r7, #4]
        (ULONG *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_system_info_get(
 800fce4:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[1],
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	3304      	adds	r3, #4
 800fcea:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_system_info_get(
 800fcec:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[2],
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	3308      	adds	r3, #8
 800fcf2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_system_info_get(
 800fcf4:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3]
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	330c      	adds	r3, #12
 800fcfa:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_mutex_performance_system_info_get(
 800fcfc:	9301      	str	r3, [sp, #4]
 800fcfe:	9200      	str	r2, [sp, #0]
 800fd00:	462b      	mov	r3, r5
 800fd02:	4622      	mov	r2, r4
 800fd04:	f004 ffac 	bl	8014c60 <_tx_mutex_performance_system_info_get>
 800fd08:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800fd0a:	697b      	ldr	r3, [r7, #20]
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3718      	adds	r7, #24
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bdb0      	pop	{r4, r5, r7, pc}

0800fd14 <_txm_module_manager_tx_mutex_prioritize_dispatch>:

/* UINT _txe_mutex_prioritize(
    TX_MUTEX *mutex_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_mutex_prioritize_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b084      	sub	sp, #16
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
 800fd1c:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	68db      	ldr	r3, [r3, #12]
 800fd22:	f003 0302 	and.w	r3, r3, #2
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d01e      	beq.n	800fd68 <_txm_module_manager_tx_mutex_prioritize_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_MUTEX)))
 800fd2a:	2234      	movs	r2, #52	; 0x34
 800fd2c:	6839      	ldr	r1, [r7, #0]
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f003 fa14 	bl	801315c <_txm_module_manager_inside_data_check>
 800fd34:	4603      	mov	r3, r0
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d111      	bne.n	800fd5e <_txm_module_manager_tx_mutex_prioritize_dispatch+0x4a>
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800fd40:	d812      	bhi.n	800fd68 <_txm_module_manager_tx_mutex_prioritize_dispatch+0x54>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	699b      	ldr	r3, [r3, #24]
 800fd46:	461a      	mov	r2, r3
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d30c      	bcc.n	800fd68 <_txm_module_manager_tx_mutex_prioritize_dispatch+0x54>
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	69db      	ldr	r3, [r3, #28]
 800fd58:	3301      	adds	r3, #1
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d804      	bhi.n	800fd68 <_txm_module_manager_tx_mutex_prioritize_dispatch+0x54>
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d001      	beq.n	800fd68 <_txm_module_manager_tx_mutex_prioritize_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 800fd64:	23f4      	movs	r3, #244	; 0xf4
 800fd66:	e005      	b.n	800fd74 <_txm_module_manager_tx_mutex_prioritize_dispatch+0x60>
    }

    return_value = (ALIGN_TYPE) _txe_mutex_prioritize(
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7fc fd40 	bl	800c7f0 <_txe_mutex_prioritize>
 800fd70:	60f8      	str	r0, [r7, #12]
        (TX_MUTEX *) param_0
    );
    return(return_value);
 800fd72:	68fb      	ldr	r3, [r7, #12]
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3710      	adds	r7, #16
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}

0800fd7c <_txm_module_manager_tx_mutex_put_dispatch>:

/* UINT _txe_mutex_put(
    TX_MUTEX *mutex_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_mutex_put_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	f003 0302 	and.w	r3, r3, #2
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d01e      	beq.n	800fdd0 <_txm_module_manager_tx_mutex_put_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_MUTEX)))
 800fd92:	2234      	movs	r2, #52	; 0x34
 800fd94:	6839      	ldr	r1, [r7, #0]
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f003 f9e0 	bl	801315c <_txm_module_manager_inside_data_check>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d111      	bne.n	800fdc6 <_txm_module_manager_tx_mutex_put_dispatch+0x4a>
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	f113 0f35 	cmn.w	r3, #53	; 0x35
 800fda8:	d812      	bhi.n	800fdd0 <_txm_module_manager_tx_mutex_put_dispatch+0x54>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	699b      	ldr	r3, [r3, #24]
 800fdae:	461a      	mov	r2, r3
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d30c      	bcc.n	800fdd0 <_txm_module_manager_tx_mutex_put_dispatch+0x54>
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	69db      	ldr	r3, [r3, #28]
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d804      	bhi.n	800fdd0 <_txm_module_manager_tx_mutex_put_dispatch+0x54>
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d001      	beq.n	800fdd0 <_txm_module_manager_tx_mutex_put_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 800fdcc:	23f4      	movs	r3, #244	; 0xf4
 800fdce:	e005      	b.n	800fddc <_txm_module_manager_tx_mutex_put_dispatch+0x60>
    }

    return_value = (ALIGN_TYPE) _txe_mutex_put(
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fc fd2a 	bl	800c82c <_txe_mutex_put>
 800fdd8:	60f8      	str	r0, [r7, #12]
        (TX_MUTEX *) param_0
    );
    return(return_value);
 800fdda:	68fb      	ldr	r3, [r7, #12]
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3710      	adds	r7, #16
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <_txm_module_manager_tx_queue_create_dispatch>:
    VOID *queue_start, -> extra_parameters[1]
    ULONG queue_size, -> extra_parameters[2]
    UINT queue_control_block_size -> extra_parameters[3]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 800fde4:	b5b0      	push	{r4, r5, r7, lr}
 800fde6:	b088      	sub	sp, #32
 800fde8:	af02      	add	r7, sp, #8
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	607a      	str	r2, [r7, #4]
 800fdf0:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	68db      	ldr	r3, [r3, #12]
 800fdf6:	f003 0302 	and.w	r3, r3, #2
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d05f      	beq.n	800febe <_txm_module_manager_tx_queue_create_dispatch+0xda>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_QUEUE)))
 800fdfe:	4b3d      	ldr	r3, [pc, #244]	; (800fef4 <_txm_module_manager_tx_queue_create_dispatch+0x110>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	2b01      	cmp	r3, #1
 800fe04:	d119      	bne.n	800fe3a <_txm_module_manager_tx_queue_create_dispatch+0x56>
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800fe0c:	d815      	bhi.n	800fe3a <_txm_module_manager_tx_queue_create_dispatch+0x56>
 800fe0e:	4b3a      	ldr	r3, [pc, #232]	; (800fef8 <_txm_module_manager_tx_queue_create_dispatch+0x114>)
 800fe10:	699b      	ldr	r3, [r3, #24]
 800fe12:	3310      	adds	r3, #16
 800fe14:	68ba      	ldr	r2, [r7, #8]
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d30f      	bcc.n	800fe3a <_txm_module_manager_tx_queue_create_dispatch+0x56>
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	3344      	adds	r3, #68	; 0x44
 800fe1e:	4a36      	ldr	r2, [pc, #216]	; (800fef8 <_txm_module_manager_tx_queue_create_dispatch+0x114>)
 800fe20:	6991      	ldr	r1, [r2, #24]
 800fe22:	4a35      	ldr	r2, [pc, #212]	; (800fef8 <_txm_module_manager_tx_queue_create_dispatch+0x114>)
 800fe24:	69d2      	ldr	r2, [r2, #28]
 800fe26:	440a      	add	r2, r1
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	d806      	bhi.n	800fe3a <_txm_module_manager_tx_queue_create_dispatch+0x56>
 800fe2c:	2144      	movs	r1, #68	; 0x44
 800fe2e:	68b8      	ldr	r0, [r7, #8]
 800fe30:	f004 fd2e 	bl	8014890 <_txm_module_manager_object_size_check>
 800fe34:	4603      	mov	r3, r0
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d004      	beq.n	800fe44 <_txm_module_manager_tx_queue_create_dispatch+0x60>
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d001      	beq.n	800fe44 <_txm_module_manager_tx_queue_create_dispatch+0x60>
            return(TXM_MODULE_INVALID_MEMORY);
 800fe40:	23f4      	movs	r3, #244	; 0xf4
 800fe42:	e052      	b.n	800feea <_txm_module_manager_tx_queue_create_dispatch+0x106>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 800fe44:	2201      	movs	r2, #1
 800fe46:	6879      	ldr	r1, [r7, #4]
 800fe48:	68f8      	ldr	r0, [r7, #12]
 800fe4a:	f003 f987 	bl	801315c <_txm_module_manager_inside_data_check>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d115      	bne.n	800fe80 <_txm_module_manager_tx_queue_create_dispatch+0x9c>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe5a:	d00c      	beq.n	800fe76 <_txm_module_manager_tx_queue_create_dispatch+0x92>
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	699b      	ldr	r3, [r3, #24]
 800fe60:	461a      	mov	r2, r3
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	4293      	cmp	r3, r2
 800fe66:	d306      	bcc.n	800fe76 <_txm_module_manager_tx_queue_create_dispatch+0x92>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	1c5a      	adds	r2, r3, #1
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	69db      	ldr	r3, [r3, #28]
 800fe70:	3301      	adds	r3, #1
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d904      	bls.n	800fe80 <_txm_module_manager_tx_queue_create_dispatch+0x9c>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d001      	beq.n	800fe80 <_txm_module_manager_tx_queue_create_dispatch+0x9c>
            return(TXM_MODULE_INVALID_MEMORY);
 800fe7c:	23f4      	movs	r3, #244	; 0xf4
 800fe7e:	e034      	b.n	800feea <_txm_module_manager_tx_queue_create_dispatch+0x106>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[4])))
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	2210      	movs	r2, #16
 800fe84:	4619      	mov	r1, r3
 800fe86:	68f8      	ldr	r0, [r7, #12]
 800fe88:	f003 f968 	bl	801315c <_txm_module_manager_inside_data_check>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d101      	bne.n	800fe96 <_txm_module_manager_tx_queue_create_dispatch+0xb2>
            return(TXM_MODULE_INVALID_MEMORY);
 800fe92:	23f4      	movs	r3, #244	; 0xf4
 800fe94:	e029      	b.n	800feea <_txm_module_manager_tx_queue_create_dispatch+0x106>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], extra_parameters[2]))
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	3304      	adds	r3, #4
 800fe9a:	6819      	ldr	r1, [r3, #0]
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	3308      	adds	r3, #8
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	461a      	mov	r2, r3
 800fea4:	68f8      	ldr	r0, [r7, #12]
 800fea6:	f003 f959 	bl	801315c <_txm_module_manager_inside_data_check>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	d106      	bne.n	800febe <_txm_module_manager_tx_queue_create_dispatch+0xda>
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	3304      	adds	r3, #4
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d001      	beq.n	800febe <_txm_module_manager_tx_queue_create_dispatch+0xda>
            return(TXM_MODULE_INVALID_MEMORY);
 800feba:	23f4      	movs	r3, #244	; 0xf4
 800febc:	e015      	b.n	800feea <_txm_module_manager_tx_queue_create_dispatch+0x106>
    }

    return_value = (ALIGN_TYPE) _txe_queue_create(
 800febe:	68b8      	ldr	r0, [r7, #8]
 800fec0:	6879      	ldr	r1, [r7, #4]
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	681c      	ldr	r4, [r3, #0]
        (TX_QUEUE *) param_0,
        (CHAR *) param_1,
        (UINT) extra_parameters[0],
        (VOID *) extra_parameters[1],
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	3304      	adds	r3, #4
 800feca:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_queue_create(
 800fecc:	461d      	mov	r5, r3
        (ULONG) extra_parameters[2],
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	3308      	adds	r3, #8
    return_value = (ALIGN_TYPE) _txe_queue_create(
 800fed2:	681b      	ldr	r3, [r3, #0]
        (UINT) extra_parameters[3]
 800fed4:	683a      	ldr	r2, [r7, #0]
 800fed6:	320c      	adds	r2, #12
    return_value = (ALIGN_TYPE) _txe_queue_create(
 800fed8:	6812      	ldr	r2, [r2, #0]
 800feda:	9201      	str	r2, [sp, #4]
 800fedc:	9300      	str	r3, [sp, #0]
 800fede:	462b      	mov	r3, r5
 800fee0:	4622      	mov	r2, r4
 800fee2:	f7fc fcdd 	bl	800c8a0 <_txe_queue_create>
 800fee6:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 800fee8:	697b      	ldr	r3, [r7, #20]
}
 800feea:	4618      	mov	r0, r3
 800feec:	3718      	adds	r7, #24
 800feee:	46bd      	mov	sp, r7
 800fef0:	bdb0      	pop	{r4, r5, r7, pc}
 800fef2:	bf00      	nop
 800fef4:	2400f6e8 	.word	0x2400f6e8
 800fef8:	2400f6b4 	.word	0x2400f6b4

0800fefc <_txm_module_manager_tx_queue_delete_dispatch>:

/* UINT _txe_queue_delete(
    TX_QUEUE *queue_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_delete_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b084      	sub	sp, #16
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	68db      	ldr	r3, [r3, #12]
 800ff0a:	f003 0302 	and.w	r3, r3, #2
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d01e      	beq.n	800ff50 <_txm_module_manager_tx_queue_delete_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 800ff12:	2244      	movs	r2, #68	; 0x44
 800ff14:	6839      	ldr	r1, [r7, #0]
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f003 f920 	bl	801315c <_txm_module_manager_inside_data_check>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d111      	bne.n	800ff46 <_txm_module_manager_tx_queue_delete_dispatch+0x4a>
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800ff28:	d812      	bhi.n	800ff50 <_txm_module_manager_tx_queue_delete_dispatch+0x54>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	699b      	ldr	r3, [r3, #24]
 800ff2e:	461a      	mov	r2, r3
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d30c      	bcc.n	800ff50 <_txm_module_manager_tx_queue_delete_dispatch+0x54>
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	69db      	ldr	r3, [r3, #28]
 800ff40:	3301      	adds	r3, #1
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d804      	bhi.n	800ff50 <_txm_module_manager_tx_queue_delete_dispatch+0x54>
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d001      	beq.n	800ff50 <_txm_module_manager_tx_queue_delete_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 800ff4c:	23f4      	movs	r3, #244	; 0xf4
 800ff4e:	e00d      	b.n	800ff6c <_txm_module_manager_tx_queue_delete_dispatch+0x70>
    }

    return_value = (ALIGN_TYPE) _txe_queue_delete(
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	4618      	mov	r0, r3
 800ff54:	f7fc fd50 	bl	800c9f8 <_txe_queue_delete>
 800ff58:	60f8      	str	r0, [r7, #12]
        (TX_QUEUE *) param_0
    );

    /* Deallocate object memory.  */
    if (return_value == TX_SUCCESS)
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d104      	bne.n	800ff6a <_txm_module_manager_tx_queue_delete_dispatch+0x6e>
    {
        return_value = _txm_module_manager_object_deallocate((VOID *) param_0);
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	4618      	mov	r0, r3
 800ff64:	f003 f9b0 	bl	80132c8 <_txm_module_manager_object_deallocate>
 800ff68:	60f8      	str	r0, [r7, #12]
    }
    return(return_value);
 800ff6a:	68fb      	ldr	r3, [r7, #12]
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3710      	adds	r7, #16
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}

0800ff74 <_txm_module_manager_tx_queue_flush_dispatch>:

/* UINT _txe_queue_flush(
    TX_QUEUE *queue_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_flush_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b084      	sub	sp, #16
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	68db      	ldr	r3, [r3, #12]
 800ff82:	f003 0302 	and.w	r3, r3, #2
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d01e      	beq.n	800ffc8 <_txm_module_manager_tx_queue_flush_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 800ff8a:	2244      	movs	r2, #68	; 0x44
 800ff8c:	6839      	ldr	r1, [r7, #0]
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f003 f8e4 	bl	801315c <_txm_module_manager_inside_data_check>
 800ff94:	4603      	mov	r3, r0
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d111      	bne.n	800ffbe <_txm_module_manager_tx_queue_flush_dispatch+0x4a>
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	f113 0f45 	cmn.w	r3, #69	; 0x45
 800ffa0:	d812      	bhi.n	800ffc8 <_txm_module_manager_tx_queue_flush_dispatch+0x54>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	699b      	ldr	r3, [r3, #24]
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	4293      	cmp	r3, r2
 800ffac:	d30c      	bcc.n	800ffc8 <_txm_module_manager_tx_queue_flush_dispatch+0x54>
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	69db      	ldr	r3, [r3, #28]
 800ffb8:	3301      	adds	r3, #1
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d804      	bhi.n	800ffc8 <_txm_module_manager_tx_queue_flush_dispatch+0x54>
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d001      	beq.n	800ffc8 <_txm_module_manager_tx_queue_flush_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 800ffc4:	23f4      	movs	r3, #244	; 0xf4
 800ffc6:	e005      	b.n	800ffd4 <_txm_module_manager_tx_queue_flush_dispatch+0x60>
    }

    return_value = (ALIGN_TYPE) _txe_queue_flush(
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7fc fd52 	bl	800ca74 <_txe_queue_flush>
 800ffd0:	60f8      	str	r0, [r7, #12]
        (TX_QUEUE *) param_0
    );
    return(return_value);
 800ffd2:	68fb      	ldr	r3, [r7, #12]
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3710      	adds	r7, #16
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <_txm_module_manager_tx_queue_front_send_dispatch>:
    TX_QUEUE *queue_ptr, -> param_0
    VOID *source_ptr, -> param_1
    ULONG wait_option -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_front_send_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b086      	sub	sp, #24
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	607a      	str	r2, [r7, #4]
 800ffe8:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;
TX_QUEUE *queue_ptr;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	68db      	ldr	r3, [r3, #12]
 800ffee:	f003 0302 	and.w	r3, r3, #2
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d045      	beq.n	8010082 <_txm_module_manager_tx_queue_front_send_dispatch+0xa6>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 800fff6:	2244      	movs	r2, #68	; 0x44
 800fff8:	68b9      	ldr	r1, [r7, #8]
 800fffa:	68f8      	ldr	r0, [r7, #12]
 800fffc:	f003 f8ae 	bl	801315c <_txm_module_manager_inside_data_check>
 8010000:	4603      	mov	r3, r0
 8010002:	2b00      	cmp	r3, #0
 8010004:	d111      	bne.n	801002a <_txm_module_manager_tx_queue_front_send_dispatch+0x4e>
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	f113 0f45 	cmn.w	r3, #69	; 0x45
 801000c:	d812      	bhi.n	8010034 <_txm_module_manager_tx_queue_front_send_dispatch+0x58>
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	699b      	ldr	r3, [r3, #24]
 8010012:	461a      	mov	r2, r3
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	4293      	cmp	r3, r2
 8010018:	d30c      	bcc.n	8010034 <_txm_module_manager_tx_queue_front_send_dispatch+0x58>
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	69db      	ldr	r3, [r3, #28]
 8010024:	3301      	adds	r3, #1
 8010026:	429a      	cmp	r2, r3
 8010028:	d804      	bhi.n	8010034 <_txm_module_manager_tx_queue_front_send_dispatch+0x58>
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d001      	beq.n	8010034 <_txm_module_manager_tx_queue_front_send_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 8010030:	23f4      	movs	r3, #244	; 0xf4
 8010032:	e02e      	b.n	8010092 <_txm_module_manager_tx_queue_front_send_dispatch+0xb6>

        /* We need to get the size of the message from the queue.  */
        queue_ptr =  (TX_QUEUE *) param_0; 
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	617b      	str	r3, [r7, #20]
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_READ(module_instance, param_1, queue_ptr -> tx_queue_message_size))
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	689b      	ldr	r3, [r3, #8]
 801003c:	461a      	mov	r2, r3
 801003e:	6879      	ldr	r1, [r7, #4]
 8010040:	68f8      	ldr	r0, [r7, #12]
 8010042:	f003 f88b 	bl	801315c <_txm_module_manager_inside_data_check>
 8010046:	4603      	mov	r3, r0
 8010048:	2b00      	cmp	r3, #0
 801004a:	d11a      	bne.n	8010082 <_txm_module_manager_tx_queue_front_send_dispatch+0xa6>
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	689a      	ldr	r2, [r3, #8]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	4413      	add	r3, r2
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	429a      	cmp	r2, r3
 8010058:	d20e      	bcs.n	8010078 <_txm_module_manager_tx_queue_front_send_dispatch+0x9c>
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	699b      	ldr	r3, [r3, #24]
 801005e:	461a      	mov	r2, r3
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	4293      	cmp	r3, r2
 8010064:	d308      	bcc.n	8010078 <_txm_module_manager_tx_queue_front_send_dispatch+0x9c>
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	689a      	ldr	r2, [r3, #8]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	441a      	add	r2, r3
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	69db      	ldr	r3, [r3, #28]
 8010072:	3301      	adds	r3, #1
 8010074:	429a      	cmp	r2, r3
 8010076:	d904      	bls.n	8010082 <_txm_module_manager_tx_queue_front_send_dispatch+0xa6>
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d001      	beq.n	8010082 <_txm_module_manager_tx_queue_front_send_dispatch+0xa6>
            return(TXM_MODULE_INVALID_MEMORY);
 801007e:	23f4      	movs	r3, #244	; 0xf4
 8010080:	e007      	b.n	8010092 <_txm_module_manager_tx_queue_front_send_dispatch+0xb6>
    }

    return_value = (ALIGN_TYPE) _txe_queue_front_send(
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	6879      	ldr	r1, [r7, #4]
 8010086:	683a      	ldr	r2, [r7, #0]
 8010088:	4618      	mov	r0, r3
 801008a:	f7fc fd11 	bl	800cab0 <_txe_queue_front_send>
 801008e:	6138      	str	r0, [r7, #16]
        (TX_QUEUE *) param_0,
        (VOID *) param_1,
        (ULONG) param_2
    );
    return(return_value);
 8010090:	693b      	ldr	r3, [r7, #16]
}
 8010092:	4618      	mov	r0, r3
 8010094:	3718      	adds	r7, #24
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}

0801009a <_txm_module_manager_tx_queue_info_get_dispatch>:
    TX_THREAD **first_suspended, -> extra_parameters[2]
    ULONG *suspended_count, -> extra_parameters[3]
    TX_QUEUE **next_queue -> extra_parameters[4]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 801009a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801009c:	b08b      	sub	sp, #44	; 0x2c
 801009e:	af04      	add	r7, sp, #16
 80100a0:	60f8      	str	r0, [r7, #12]
 80100a2:	60b9      	str	r1, [r7, #8]
 80100a4:	607a      	str	r2, [r7, #4]
 80100a6:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	68db      	ldr	r3, [r3, #12]
 80100ac:	f003 0302 	and.w	r3, r3, #2
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	f000 808f 	beq.w	80101d4 <_txm_module_manager_tx_queue_info_get_dispatch+0x13a>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 80100b6:	2244      	movs	r2, #68	; 0x44
 80100b8:	68b9      	ldr	r1, [r7, #8]
 80100ba:	68f8      	ldr	r0, [r7, #12]
 80100bc:	f003 f84e 	bl	801315c <_txm_module_manager_inside_data_check>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d111      	bne.n	80100ea <_txm_module_manager_tx_queue_info_get_dispatch+0x50>
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	f113 0f45 	cmn.w	r3, #69	; 0x45
 80100cc:	d812      	bhi.n	80100f4 <_txm_module_manager_tx_queue_info_get_dispatch+0x5a>
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	699b      	ldr	r3, [r3, #24]
 80100d2:	461a      	mov	r2, r3
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	4293      	cmp	r3, r2
 80100d8:	d30c      	bcc.n	80100f4 <_txm_module_manager_tx_queue_info_get_dispatch+0x5a>
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	69db      	ldr	r3, [r3, #28]
 80100e4:	3301      	adds	r3, #1
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d804      	bhi.n	80100f4 <_txm_module_manager_tx_queue_info_get_dispatch+0x5a>
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d001      	beq.n	80100f4 <_txm_module_manager_tx_queue_info_get_dispatch+0x5a>
            return(TXM_MODULE_INVALID_MEMORY);
 80100f0:	23f4      	movs	r3, #244	; 0xf4
 80100f2:	e08c      	b.n	801020e <_txm_module_manager_tx_queue_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(CHAR *)))
 80100f4:	2204      	movs	r2, #4
 80100f6:	6879      	ldr	r1, [r7, #4]
 80100f8:	68f8      	ldr	r0, [r7, #12]
 80100fa:	f003 f82f 	bl	801315c <_txm_module_manager_inside_data_check>
 80100fe:	4603      	mov	r3, r0
 8010100:	2b00      	cmp	r3, #0
 8010102:	d104      	bne.n	801010e <_txm_module_manager_tx_queue_info_get_dispatch+0x74>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d001      	beq.n	801010e <_txm_module_manager_tx_queue_info_get_dispatch+0x74>
            return(TXM_MODULE_INVALID_MEMORY);
 801010a:	23f4      	movs	r3, #244	; 0xf4
 801010c:	e07f      	b.n	801020e <_txm_module_manager_tx_queue_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[5])))
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	2214      	movs	r2, #20
 8010112:	4619      	mov	r1, r3
 8010114:	68f8      	ldr	r0, [r7, #12]
 8010116:	f003 f821 	bl	801315c <_txm_module_manager_inside_data_check>
 801011a:	4603      	mov	r3, r0
 801011c:	2b00      	cmp	r3, #0
 801011e:	d101      	bne.n	8010124 <_txm_module_manager_tx_queue_info_get_dispatch+0x8a>
            return(TXM_MODULE_INVALID_MEMORY);
 8010120:	23f4      	movs	r3, #244	; 0xf4
 8010122:	e074      	b.n	801020e <_txm_module_manager_tx_queue_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	2204      	movs	r2, #4
 801012a:	4619      	mov	r1, r3
 801012c:	68f8      	ldr	r0, [r7, #12]
 801012e:	f003 f815 	bl	801315c <_txm_module_manager_inside_data_check>
 8010132:	4603      	mov	r3, r0
 8010134:	2b00      	cmp	r3, #0
 8010136:	d105      	bne.n	8010144 <_txm_module_manager_tx_queue_info_get_dispatch+0xaa>
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d001      	beq.n	8010144 <_txm_module_manager_tx_queue_info_get_dispatch+0xaa>
            return(TXM_MODULE_INVALID_MEMORY);
 8010140:	23f4      	movs	r3, #244	; 0xf4
 8010142:	e064      	b.n	801020e <_txm_module_manager_tx_queue_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	3304      	adds	r3, #4
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	2204      	movs	r2, #4
 801014c:	4619      	mov	r1, r3
 801014e:	68f8      	ldr	r0, [r7, #12]
 8010150:	f003 f804 	bl	801315c <_txm_module_manager_inside_data_check>
 8010154:	4603      	mov	r3, r0
 8010156:	2b00      	cmp	r3, #0
 8010158:	d106      	bne.n	8010168 <_txm_module_manager_tx_queue_info_get_dispatch+0xce>
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	3304      	adds	r3, #4
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d001      	beq.n	8010168 <_txm_module_manager_tx_queue_info_get_dispatch+0xce>
            return(TXM_MODULE_INVALID_MEMORY);
 8010164:	23f4      	movs	r3, #244	; 0xf4
 8010166:	e052      	b.n	801020e <_txm_module_manager_tx_queue_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(TX_THREAD *)))
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	3308      	adds	r3, #8
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	2204      	movs	r2, #4
 8010170:	4619      	mov	r1, r3
 8010172:	68f8      	ldr	r0, [r7, #12]
 8010174:	f002 fff2 	bl	801315c <_txm_module_manager_inside_data_check>
 8010178:	4603      	mov	r3, r0
 801017a:	2b00      	cmp	r3, #0
 801017c:	d106      	bne.n	801018c <_txm_module_manager_tx_queue_info_get_dispatch+0xf2>
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	3308      	adds	r3, #8
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d001      	beq.n	801018c <_txm_module_manager_tx_queue_info_get_dispatch+0xf2>
            return(TXM_MODULE_INVALID_MEMORY);
 8010188:	23f4      	movs	r3, #244	; 0xf4
 801018a:	e040      	b.n	801020e <_txm_module_manager_tx_queue_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	330c      	adds	r3, #12
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	2204      	movs	r2, #4
 8010194:	4619      	mov	r1, r3
 8010196:	68f8      	ldr	r0, [r7, #12]
 8010198:	f002 ffe0 	bl	801315c <_txm_module_manager_inside_data_check>
 801019c:	4603      	mov	r3, r0
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d106      	bne.n	80101b0 <_txm_module_manager_tx_queue_info_get_dispatch+0x116>
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	330c      	adds	r3, #12
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d001      	beq.n	80101b0 <_txm_module_manager_tx_queue_info_get_dispatch+0x116>
            return(TXM_MODULE_INVALID_MEMORY);
 80101ac:	23f4      	movs	r3, #244	; 0xf4
 80101ae:	e02e      	b.n	801020e <_txm_module_manager_tx_queue_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(TX_QUEUE *)))
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	3310      	adds	r3, #16
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	2204      	movs	r2, #4
 80101b8:	4619      	mov	r1, r3
 80101ba:	68f8      	ldr	r0, [r7, #12]
 80101bc:	f002 ffce 	bl	801315c <_txm_module_manager_inside_data_check>
 80101c0:	4603      	mov	r3, r0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d106      	bne.n	80101d4 <_txm_module_manager_tx_queue_info_get_dispatch+0x13a>
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	3310      	adds	r3, #16
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d001      	beq.n	80101d4 <_txm_module_manager_tx_queue_info_get_dispatch+0x13a>
            return(TXM_MODULE_INVALID_MEMORY);
 80101d0:	23f4      	movs	r3, #244	; 0xf4
 80101d2:	e01c      	b.n	801020e <_txm_module_manager_tx_queue_info_get_dispatch+0x174>
    }

    return_value = (ALIGN_TYPE) _txe_queue_info_get(
 80101d4:	68b8      	ldr	r0, [r7, #8]
 80101d6:	6879      	ldr	r1, [r7, #4]
        (TX_QUEUE *) param_0,
        (CHAR **) param_1,
        (ULONG *) extra_parameters[0],
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_queue_info_get(
 80101dc:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[1],
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	3304      	adds	r3, #4
 80101e2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_queue_info_get(
 80101e4:	461e      	mov	r6, r3
        (TX_THREAD **) extra_parameters[2],
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	3308      	adds	r3, #8
 80101ea:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_queue_info_get(
 80101ec:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	330c      	adds	r3, #12
 80101f2:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_queue_info_get(
 80101f4:	461c      	mov	r4, r3
        (TX_QUEUE **) extra_parameters[4]
 80101f6:	683b      	ldr	r3, [r7, #0]
 80101f8:	3310      	adds	r3, #16
 80101fa:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_queue_info_get(
 80101fc:	9302      	str	r3, [sp, #8]
 80101fe:	9401      	str	r4, [sp, #4]
 8010200:	9200      	str	r2, [sp, #0]
 8010202:	4633      	mov	r3, r6
 8010204:	462a      	mov	r2, r5
 8010206:	f7fc fc9d 	bl	800cb44 <_txe_queue_info_get>
 801020a:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 801020c:	697b      	ldr	r3, [r7, #20]
}
 801020e:	4618      	mov	r0, r3
 8010210:	371c      	adds	r7, #28
 8010212:	46bd      	mov	sp, r7
 8010214:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010216 <_txm_module_manager_tx_queue_performance_info_get_dispatch>:
    ULONG *full_suspensions, -> extra_parameters[2]
    ULONG *full_errors, -> extra_parameters[3]
    ULONG *timeouts -> extra_parameters[4]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_performance_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8010216:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010218:	b08b      	sub	sp, #44	; 0x2c
 801021a:	af04      	add	r7, sp, #16
 801021c:	60f8      	str	r0, [r7, #12]
 801021e:	60b9      	str	r1, [r7, #8]
 8010220:	607a      	str	r2, [r7, #4]
 8010222:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	68db      	ldr	r3, [r3, #12]
 8010228:	f003 0302 	and.w	r3, r3, #2
 801022c:	2b00      	cmp	r3, #0
 801022e:	f000 808f 	beq.w	8010350 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x13a>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 8010232:	2244      	movs	r2, #68	; 0x44
 8010234:	68b9      	ldr	r1, [r7, #8]
 8010236:	68f8      	ldr	r0, [r7, #12]
 8010238:	f002 ff90 	bl	801315c <_txm_module_manager_inside_data_check>
 801023c:	4603      	mov	r3, r0
 801023e:	2b00      	cmp	r3, #0
 8010240:	d111      	bne.n	8010266 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x50>
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	f113 0f45 	cmn.w	r3, #69	; 0x45
 8010248:	d812      	bhi.n	8010270 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x5a>
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	699b      	ldr	r3, [r3, #24]
 801024e:	461a      	mov	r2, r3
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	4293      	cmp	r3, r2
 8010254:	d30c      	bcc.n	8010270 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x5a>
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	69db      	ldr	r3, [r3, #28]
 8010260:	3301      	adds	r3, #1
 8010262:	429a      	cmp	r2, r3
 8010264:	d804      	bhi.n	8010270 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x5a>
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d001      	beq.n	8010270 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x5a>
            return(TXM_MODULE_INVALID_MEMORY);
 801026c:	23f4      	movs	r3, #244	; 0xf4
 801026e:	e08c      	b.n	801038a <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 8010270:	2204      	movs	r2, #4
 8010272:	6879      	ldr	r1, [r7, #4]
 8010274:	68f8      	ldr	r0, [r7, #12]
 8010276:	f002 ff71 	bl	801315c <_txm_module_manager_inside_data_check>
 801027a:	4603      	mov	r3, r0
 801027c:	2b00      	cmp	r3, #0
 801027e:	d104      	bne.n	801028a <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x74>
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d001      	beq.n	801028a <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x74>
            return(TXM_MODULE_INVALID_MEMORY);
 8010286:	23f4      	movs	r3, #244	; 0xf4
 8010288:	e07f      	b.n	801038a <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[5])))
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	2214      	movs	r2, #20
 801028e:	4619      	mov	r1, r3
 8010290:	68f8      	ldr	r0, [r7, #12]
 8010292:	f002 ff63 	bl	801315c <_txm_module_manager_inside_data_check>
 8010296:	4603      	mov	r3, r0
 8010298:	2b00      	cmp	r3, #0
 801029a:	d101      	bne.n	80102a0 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x8a>
            return(TXM_MODULE_INVALID_MEMORY);
 801029c:	23f4      	movs	r3, #244	; 0xf4
 801029e:	e074      	b.n	801038a <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	2204      	movs	r2, #4
 80102a6:	4619      	mov	r1, r3
 80102a8:	68f8      	ldr	r0, [r7, #12]
 80102aa:	f002 ff57 	bl	801315c <_txm_module_manager_inside_data_check>
 80102ae:	4603      	mov	r3, r0
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d105      	bne.n	80102c0 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0xaa>
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d001      	beq.n	80102c0 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0xaa>
            return(TXM_MODULE_INVALID_MEMORY);
 80102bc:	23f4      	movs	r3, #244	; 0xf4
 80102be:	e064      	b.n	801038a <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	3304      	adds	r3, #4
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2204      	movs	r2, #4
 80102c8:	4619      	mov	r1, r3
 80102ca:	68f8      	ldr	r0, [r7, #12]
 80102cc:	f002 ff46 	bl	801315c <_txm_module_manager_inside_data_check>
 80102d0:	4603      	mov	r3, r0
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d106      	bne.n	80102e4 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0xce>
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	3304      	adds	r3, #4
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d001      	beq.n	80102e4 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0xce>
            return(TXM_MODULE_INVALID_MEMORY);
 80102e0:	23f4      	movs	r3, #244	; 0xf4
 80102e2:	e052      	b.n	801038a <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	3308      	adds	r3, #8
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	2204      	movs	r2, #4
 80102ec:	4619      	mov	r1, r3
 80102ee:	68f8      	ldr	r0, [r7, #12]
 80102f0:	f002 ff34 	bl	801315c <_txm_module_manager_inside_data_check>
 80102f4:	4603      	mov	r3, r0
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d106      	bne.n	8010308 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0xf2>
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	3308      	adds	r3, #8
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d001      	beq.n	8010308 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0xf2>
            return(TXM_MODULE_INVALID_MEMORY);
 8010304:	23f4      	movs	r3, #244	; 0xf4
 8010306:	e040      	b.n	801038a <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	330c      	adds	r3, #12
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2204      	movs	r2, #4
 8010310:	4619      	mov	r1, r3
 8010312:	68f8      	ldr	r0, [r7, #12]
 8010314:	f002 ff22 	bl	801315c <_txm_module_manager_inside_data_check>
 8010318:	4603      	mov	r3, r0
 801031a:	2b00      	cmp	r3, #0
 801031c:	d106      	bne.n	801032c <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x116>
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	330c      	adds	r3, #12
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d001      	beq.n	801032c <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x116>
            return(TXM_MODULE_INVALID_MEMORY);
 8010328:	23f4      	movs	r3, #244	; 0xf4
 801032a:	e02e      	b.n	801038a <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x174>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(ULONG)))
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	3310      	adds	r3, #16
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	2204      	movs	r2, #4
 8010334:	4619      	mov	r1, r3
 8010336:	68f8      	ldr	r0, [r7, #12]
 8010338:	f002 ff10 	bl	801315c <_txm_module_manager_inside_data_check>
 801033c:	4603      	mov	r3, r0
 801033e:	2b00      	cmp	r3, #0
 8010340:	d106      	bne.n	8010350 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x13a>
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	3310      	adds	r3, #16
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d001      	beq.n	8010350 <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x13a>
            return(TXM_MODULE_INVALID_MEMORY);
 801034c:	23f4      	movs	r3, #244	; 0xf4
 801034e:	e01c      	b.n	801038a <_txm_module_manager_tx_queue_performance_info_get_dispatch+0x174>
    }

    return_value = (ALIGN_TYPE) _tx_queue_performance_info_get(
 8010350:	68b8      	ldr	r0, [r7, #8]
 8010352:	6879      	ldr	r1, [r7, #4]
        (TX_QUEUE *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_info_get(
 8010358:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[1],
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	3304      	adds	r3, #4
 801035e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_info_get(
 8010360:	461e      	mov	r6, r3
        (ULONG *) extra_parameters[2],
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	3308      	adds	r3, #8
 8010366:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_info_get(
 8010368:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	330c      	adds	r3, #12
 801036e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_info_get(
 8010370:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[4]
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	3310      	adds	r3, #16
 8010376:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_info_get(
 8010378:	9302      	str	r3, [sp, #8]
 801037a:	9401      	str	r4, [sp, #4]
 801037c:	9200      	str	r2, [sp, #0]
 801037e:	4633      	mov	r3, r6
 8010380:	462a      	mov	r2, r5
 8010382:	f004 fca1 	bl	8014cc8 <_tx_queue_performance_info_get>
 8010386:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 8010388:	697b      	ldr	r3, [r7, #20]
}
 801038a:	4618      	mov	r0, r3
 801038c:	371c      	adds	r7, #28
 801038e:	46bd      	mov	sp, r7
 8010390:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010392 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch>:
    ULONG *full_suspensions, -> extra_parameters[1]
    ULONG *full_errors, -> extra_parameters[2]
    ULONG *timeouts -> extra_parameters[3]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_performance_system_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8010392:	b5b0      	push	{r4, r5, r7, lr}
 8010394:	b088      	sub	sp, #32
 8010396:	af02      	add	r7, sp, #8
 8010398:	60f8      	str	r0, [r7, #12]
 801039a:	60b9      	str	r1, [r7, #8]
 801039c:	607a      	str	r2, [r7, #4]
 801039e:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	68db      	ldr	r3, [r3, #12]
 80103a4:	f003 0302 	and.w	r3, r3, #2
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d06a      	beq.n	8010482 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0xf0>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(ULONG)))
 80103ac:	2204      	movs	r2, #4
 80103ae:	68b9      	ldr	r1, [r7, #8]
 80103b0:	68f8      	ldr	r0, [r7, #12]
 80103b2:	f002 fed3 	bl	801315c <_txm_module_manager_inside_data_check>
 80103b6:	4603      	mov	r3, r0
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d104      	bne.n	80103c6 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x34>
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d001      	beq.n	80103c6 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x34>
            return(TXM_MODULE_INVALID_MEMORY);
 80103c2:	23f4      	movs	r3, #244	; 0xf4
 80103c4:	e075      	b.n	80104b2 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x120>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 80103c6:	2204      	movs	r2, #4
 80103c8:	6879      	ldr	r1, [r7, #4]
 80103ca:	68f8      	ldr	r0, [r7, #12]
 80103cc:	f002 fec6 	bl	801315c <_txm_module_manager_inside_data_check>
 80103d0:	4603      	mov	r3, r0
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d104      	bne.n	80103e0 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x4e>
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d001      	beq.n	80103e0 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x4e>
            return(TXM_MODULE_INVALID_MEMORY);
 80103dc:	23f4      	movs	r3, #244	; 0xf4
 80103de:	e068      	b.n	80104b2 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x120>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[4])))
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	2210      	movs	r2, #16
 80103e4:	4619      	mov	r1, r3
 80103e6:	68f8      	ldr	r0, [r7, #12]
 80103e8:	f002 feb8 	bl	801315c <_txm_module_manager_inside_data_check>
 80103ec:	4603      	mov	r3, r0
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d101      	bne.n	80103f6 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x64>
            return(TXM_MODULE_INVALID_MEMORY);
 80103f2:	23f4      	movs	r3, #244	; 0xf4
 80103f4:	e05d      	b.n	80104b2 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x120>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	2204      	movs	r2, #4
 80103fc:	4619      	mov	r1, r3
 80103fe:	68f8      	ldr	r0, [r7, #12]
 8010400:	f002 feac 	bl	801315c <_txm_module_manager_inside_data_check>
 8010404:	4603      	mov	r3, r0
 8010406:	2b00      	cmp	r3, #0
 8010408:	d105      	bne.n	8010416 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x84>
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d001      	beq.n	8010416 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x84>
            return(TXM_MODULE_INVALID_MEMORY);
 8010412:	23f4      	movs	r3, #244	; 0xf4
 8010414:	e04d      	b.n	80104b2 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x120>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	3304      	adds	r3, #4
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	2204      	movs	r2, #4
 801041e:	4619      	mov	r1, r3
 8010420:	68f8      	ldr	r0, [r7, #12]
 8010422:	f002 fe9b 	bl	801315c <_txm_module_manager_inside_data_check>
 8010426:	4603      	mov	r3, r0
 8010428:	2b00      	cmp	r3, #0
 801042a:	d106      	bne.n	801043a <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0xa8>
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	3304      	adds	r3, #4
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d001      	beq.n	801043a <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0xa8>
            return(TXM_MODULE_INVALID_MEMORY);
 8010436:	23f4      	movs	r3, #244	; 0xf4
 8010438:	e03b      	b.n	80104b2 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x120>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	3308      	adds	r3, #8
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	2204      	movs	r2, #4
 8010442:	4619      	mov	r1, r3
 8010444:	68f8      	ldr	r0, [r7, #12]
 8010446:	f002 fe89 	bl	801315c <_txm_module_manager_inside_data_check>
 801044a:	4603      	mov	r3, r0
 801044c:	2b00      	cmp	r3, #0
 801044e:	d106      	bne.n	801045e <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0xcc>
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	3308      	adds	r3, #8
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d001      	beq.n	801045e <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0xcc>
            return(TXM_MODULE_INVALID_MEMORY);
 801045a:	23f4      	movs	r3, #244	; 0xf4
 801045c:	e029      	b.n	80104b2 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x120>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	330c      	adds	r3, #12
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	2204      	movs	r2, #4
 8010466:	4619      	mov	r1, r3
 8010468:	68f8      	ldr	r0, [r7, #12]
 801046a:	f002 fe77 	bl	801315c <_txm_module_manager_inside_data_check>
 801046e:	4603      	mov	r3, r0
 8010470:	2b00      	cmp	r3, #0
 8010472:	d106      	bne.n	8010482 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0xf0>
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	330c      	adds	r3, #12
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d001      	beq.n	8010482 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0xf0>
            return(TXM_MODULE_INVALID_MEMORY);
 801047e:	23f4      	movs	r3, #244	; 0xf4
 8010480:	e017      	b.n	80104b2 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch+0x120>
    }

    return_value = (ALIGN_TYPE) _tx_queue_performance_system_info_get(
 8010482:	68b8      	ldr	r0, [r7, #8]
 8010484:	6879      	ldr	r1, [r7, #4]
        (ULONG *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_system_info_get(
 801048a:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[1],
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	3304      	adds	r3, #4
 8010490:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_system_info_get(
 8010492:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[2],
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	3308      	adds	r3, #8
 8010498:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_system_info_get(
 801049a:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3]
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	330c      	adds	r3, #12
 80104a0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_queue_performance_system_info_get(
 80104a2:	9301      	str	r3, [sp, #4]
 80104a4:	9200      	str	r2, [sp, #0]
 80104a6:	462b      	mov	r3, r5
 80104a8:	4622      	mov	r2, r4
 80104aa:	f004 fc47 	bl	8014d3c <_tx_queue_performance_system_info_get>
 80104ae:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 80104b0:	697b      	ldr	r3, [r7, #20]
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3718      	adds	r7, #24
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bdb0      	pop	{r4, r5, r7, pc}

080104ba <_txm_module_manager_tx_queue_prioritize_dispatch>:

/* UINT _txe_queue_prioritize(
    TX_QUEUE *queue_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_prioritize_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 80104ba:	b580      	push	{r7, lr}
 80104bc:	b084      	sub	sp, #16
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
 80104c2:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	68db      	ldr	r3, [r3, #12]
 80104c8:	f003 0302 	and.w	r3, r3, #2
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d01e      	beq.n	801050e <_txm_module_manager_tx_queue_prioritize_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 80104d0:	2244      	movs	r2, #68	; 0x44
 80104d2:	6839      	ldr	r1, [r7, #0]
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f002 fe41 	bl	801315c <_txm_module_manager_inside_data_check>
 80104da:	4603      	mov	r3, r0
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d111      	bne.n	8010504 <_txm_module_manager_tx_queue_prioritize_dispatch+0x4a>
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	f113 0f45 	cmn.w	r3, #69	; 0x45
 80104e6:	d812      	bhi.n	801050e <_txm_module_manager_tx_queue_prioritize_dispatch+0x54>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	699b      	ldr	r3, [r3, #24]
 80104ec:	461a      	mov	r2, r3
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	4293      	cmp	r3, r2
 80104f2:	d30c      	bcc.n	801050e <_txm_module_manager_tx_queue_prioritize_dispatch+0x54>
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	69db      	ldr	r3, [r3, #28]
 80104fe:	3301      	adds	r3, #1
 8010500:	429a      	cmp	r2, r3
 8010502:	d804      	bhi.n	801050e <_txm_module_manager_tx_queue_prioritize_dispatch+0x54>
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d001      	beq.n	801050e <_txm_module_manager_tx_queue_prioritize_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 801050a:	23f4      	movs	r3, #244	; 0xf4
 801050c:	e005      	b.n	801051a <_txm_module_manager_tx_queue_prioritize_dispatch+0x60>
    }

    return_value = (ALIGN_TYPE) _txe_queue_prioritize(
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	4618      	mov	r0, r3
 8010512:	f7fc fb41 	bl	800cb98 <_txe_queue_prioritize>
 8010516:	60f8      	str	r0, [r7, #12]
        (TX_QUEUE *) param_0
    );
    return(return_value);
 8010518:	68fb      	ldr	r3, [r7, #12]
}
 801051a:	4618      	mov	r0, r3
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}

08010522 <_txm_module_manager_tx_queue_receive_dispatch>:
    TX_QUEUE *queue_ptr, -> param_0
    VOID *destination_ptr, -> param_1
    ULONG wait_option -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_receive_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 8010522:	b580      	push	{r7, lr}
 8010524:	b086      	sub	sp, #24
 8010526:	af00      	add	r7, sp, #0
 8010528:	60f8      	str	r0, [r7, #12]
 801052a:	60b9      	str	r1, [r7, #8]
 801052c:	607a      	str	r2, [r7, #4]
 801052e:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;
TX_QUEUE *queue_ptr;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	68db      	ldr	r3, [r3, #12]
 8010534:	f003 0302 	and.w	r3, r3, #2
 8010538:	2b00      	cmp	r3, #0
 801053a:	d030      	beq.n	801059e <_txm_module_manager_tx_queue_receive_dispatch+0x7c>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 801053c:	2244      	movs	r2, #68	; 0x44
 801053e:	68b9      	ldr	r1, [r7, #8]
 8010540:	68f8      	ldr	r0, [r7, #12]
 8010542:	f002 fe0b 	bl	801315c <_txm_module_manager_inside_data_check>
 8010546:	4603      	mov	r3, r0
 8010548:	2b00      	cmp	r3, #0
 801054a:	d111      	bne.n	8010570 <_txm_module_manager_tx_queue_receive_dispatch+0x4e>
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	f113 0f45 	cmn.w	r3, #69	; 0x45
 8010552:	d812      	bhi.n	801057a <_txm_module_manager_tx_queue_receive_dispatch+0x58>
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	699b      	ldr	r3, [r3, #24]
 8010558:	461a      	mov	r2, r3
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	4293      	cmp	r3, r2
 801055e:	d30c      	bcc.n	801057a <_txm_module_manager_tx_queue_receive_dispatch+0x58>
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	69db      	ldr	r3, [r3, #28]
 801056a:	3301      	adds	r3, #1
 801056c:	429a      	cmp	r2, r3
 801056e:	d804      	bhi.n	801057a <_txm_module_manager_tx_queue_receive_dispatch+0x58>
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d001      	beq.n	801057a <_txm_module_manager_tx_queue_receive_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 8010576:	23f4      	movs	r3, #244	; 0xf4
 8010578:	e019      	b.n	80105ae <_txm_module_manager_tx_queue_receive_dispatch+0x8c>

        /* We need to get the max size of the buffer from the queue.  */
        queue_ptr =  (TX_QUEUE *) param_0; 
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	617b      	str	r3, [r7, #20]
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)*queue_ptr -> tx_queue_message_size))
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	689b      	ldr	r3, [r3, #8]
 8010582:	009b      	lsls	r3, r3, #2
 8010584:	461a      	mov	r2, r3
 8010586:	6879      	ldr	r1, [r7, #4]
 8010588:	68f8      	ldr	r0, [r7, #12]
 801058a:	f002 fde7 	bl	801315c <_txm_module_manager_inside_data_check>
 801058e:	4603      	mov	r3, r0
 8010590:	2b00      	cmp	r3, #0
 8010592:	d104      	bne.n	801059e <_txm_module_manager_tx_queue_receive_dispatch+0x7c>
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d001      	beq.n	801059e <_txm_module_manager_tx_queue_receive_dispatch+0x7c>
            return(TXM_MODULE_INVALID_MEMORY);
 801059a:	23f4      	movs	r3, #244	; 0xf4
 801059c:	e007      	b.n	80105ae <_txm_module_manager_tx_queue_receive_dispatch+0x8c>
    }

    return_value = (ALIGN_TYPE) _txe_queue_receive(
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	6879      	ldr	r1, [r7, #4]
 80105a2:	683a      	ldr	r2, [r7, #0]
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7fc fb15 	bl	800cbd4 <_txe_queue_receive>
 80105aa:	6138      	str	r0, [r7, #16]
        (TX_QUEUE *) param_0,
        (VOID *) param_1,
        (ULONG) param_2
    );
    return(return_value);
 80105ac:	693b      	ldr	r3, [r7, #16]
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3718      	adds	r7, #24
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}

080105b6 <_txm_module_manager_tx_queue_send_dispatch>:
    TX_QUEUE *queue_ptr, -> param_0
    VOID *source_ptr, -> param_1
    ULONG wait_option -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_send_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 80105b6:	b580      	push	{r7, lr}
 80105b8:	b086      	sub	sp, #24
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	60f8      	str	r0, [r7, #12]
 80105be:	60b9      	str	r1, [r7, #8]
 80105c0:	607a      	str	r2, [r7, #4]
 80105c2:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;
TX_QUEUE *queue_ptr;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	68db      	ldr	r3, [r3, #12]
 80105c8:	f003 0302 	and.w	r3, r3, #2
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d048      	beq.n	8010662 <_txm_module_manager_tx_queue_send_dispatch+0xac>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 80105d0:	2244      	movs	r2, #68	; 0x44
 80105d2:	68b9      	ldr	r1, [r7, #8]
 80105d4:	68f8      	ldr	r0, [r7, #12]
 80105d6:	f002 fdc1 	bl	801315c <_txm_module_manager_inside_data_check>
 80105da:	4603      	mov	r3, r0
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d111      	bne.n	8010604 <_txm_module_manager_tx_queue_send_dispatch+0x4e>
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	f113 0f45 	cmn.w	r3, #69	; 0x45
 80105e6:	d812      	bhi.n	801060e <_txm_module_manager_tx_queue_send_dispatch+0x58>
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	699b      	ldr	r3, [r3, #24]
 80105ec:	461a      	mov	r2, r3
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d30c      	bcc.n	801060e <_txm_module_manager_tx_queue_send_dispatch+0x58>
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	69db      	ldr	r3, [r3, #28]
 80105fe:	3301      	adds	r3, #1
 8010600:	429a      	cmp	r2, r3
 8010602:	d804      	bhi.n	801060e <_txm_module_manager_tx_queue_send_dispatch+0x58>
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d001      	beq.n	801060e <_txm_module_manager_tx_queue_send_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 801060a:	23f4      	movs	r3, #244	; 0xf4
 801060c:	e031      	b.n	8010672 <_txm_module_manager_tx_queue_send_dispatch+0xbc>

        /* We need to get the size of the message from the queue.  */
        queue_ptr =  (TX_QUEUE *) param_0; 
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	617b      	str	r3, [r7, #20]
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_READ(module_instance, param_1, sizeof(ULONG)*queue_ptr -> tx_queue_message_size))
 8010612:	697b      	ldr	r3, [r7, #20]
 8010614:	689b      	ldr	r3, [r3, #8]
 8010616:	009b      	lsls	r3, r3, #2
 8010618:	461a      	mov	r2, r3
 801061a:	6879      	ldr	r1, [r7, #4]
 801061c:	68f8      	ldr	r0, [r7, #12]
 801061e:	f002 fd9d 	bl	801315c <_txm_module_manager_inside_data_check>
 8010622:	4603      	mov	r3, r0
 8010624:	2b00      	cmp	r3, #0
 8010626:	d11c      	bne.n	8010662 <_txm_module_manager_tx_queue_send_dispatch+0xac>
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	689b      	ldr	r3, [r3, #8]
 801062c:	009a      	lsls	r2, r3, #2
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	4413      	add	r3, r2
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	429a      	cmp	r2, r3
 8010636:	d20f      	bcs.n	8010658 <_txm_module_manager_tx_queue_send_dispatch+0xa2>
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	699b      	ldr	r3, [r3, #24]
 801063c:	461a      	mov	r2, r3
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	4293      	cmp	r3, r2
 8010642:	d309      	bcc.n	8010658 <_txm_module_manager_tx_queue_send_dispatch+0xa2>
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	689b      	ldr	r3, [r3, #8]
 8010648:	009a      	lsls	r2, r3, #2
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	441a      	add	r2, r3
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	69db      	ldr	r3, [r3, #28]
 8010652:	3301      	adds	r3, #1
 8010654:	429a      	cmp	r2, r3
 8010656:	d904      	bls.n	8010662 <_txm_module_manager_tx_queue_send_dispatch+0xac>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d001      	beq.n	8010662 <_txm_module_manager_tx_queue_send_dispatch+0xac>
            return(TXM_MODULE_INVALID_MEMORY);
 801065e:	23f4      	movs	r3, #244	; 0xf4
 8010660:	e007      	b.n	8010672 <_txm_module_manager_tx_queue_send_dispatch+0xbc>
    }

    return_value = (ALIGN_TYPE) _txe_queue_send(
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	6879      	ldr	r1, [r7, #4]
 8010666:	683a      	ldr	r2, [r7, #0]
 8010668:	4618      	mov	r0, r3
 801066a:	f7fc fafd 	bl	800cc68 <_txe_queue_send>
 801066e:	6138      	str	r0, [r7, #16]
        (TX_QUEUE *) param_0,
        (VOID *) param_1,
        (ULONG) param_2
    );
    return(return_value);
 8010670:	693b      	ldr	r3, [r7, #16]
}
 8010672:	4618      	mov	r0, r3
 8010674:	3718      	adds	r7, #24
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}
	...

0801067c <_txm_module_manager_tx_queue_send_notify_dispatch>:
/* UINT _txe_queue_send_notify(
    TX_QUEUE *queue_ptr, -> param_0
    VOID (*queue_send_notify)(TX_QUEUE *notify_queue_ptr) -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_tx_queue_send_notify_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b088      	sub	sp, #32
 8010680:	af00      	add	r7, sp, #0
 8010682:	60f8      	str	r0, [r7, #12]
 8010684:	60b9      	str	r1, [r7, #8]
 8010686:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;
TX_QUEUE *queue_ptr = (TX_QUEUE *) param_0;
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	61bb      	str	r3, [r7, #24]
VOID (*queue_send_notify)(TX_QUEUE *);

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	f003 0302 	and.w	r3, r3, #2
 8010694:	2b00      	cmp	r3, #0
 8010696:	d028      	beq.n	80106ea <_txm_module_manager_tx_queue_send_notify_dispatch+0x6e>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_QUEUE)))
 8010698:	2244      	movs	r2, #68	; 0x44
 801069a:	68b9      	ldr	r1, [r7, #8]
 801069c:	68f8      	ldr	r0, [r7, #12]
 801069e:	f002 fd5d 	bl	801315c <_txm_module_manager_inside_data_check>
 80106a2:	4603      	mov	r3, r0
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d111      	bne.n	80106cc <_txm_module_manager_tx_queue_send_notify_dispatch+0x50>
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	f113 0f45 	cmn.w	r3, #69	; 0x45
 80106ae:	d812      	bhi.n	80106d6 <_txm_module_manager_tx_queue_send_notify_dispatch+0x5a>
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	699b      	ldr	r3, [r3, #24]
 80106b4:	461a      	mov	r2, r3
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	4293      	cmp	r3, r2
 80106ba:	d30c      	bcc.n	80106d6 <_txm_module_manager_tx_queue_send_notify_dispatch+0x5a>
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	69db      	ldr	r3, [r3, #28]
 80106c6:	3301      	adds	r3, #1
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d804      	bhi.n	80106d6 <_txm_module_manager_tx_queue_send_notify_dispatch+0x5a>
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d001      	beq.n	80106d6 <_txm_module_manager_tx_queue_send_notify_dispatch+0x5a>
            return(TXM_MODULE_INVALID_MEMORY);
 80106d2:	23f4      	movs	r3, #244	; 0xf4
 80106d4:	e01e      	b.n	8010714 <_txm_module_manager_tx_queue_send_notify_dispatch+0x98>

        /* Since we need to write to the object, ensure it's valid.  */
        if ((queue_ptr == TX_NULL) || (queue_ptr -> tx_queue_id != TX_QUEUE_ID))
 80106d6:	69bb      	ldr	r3, [r7, #24]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d004      	beq.n	80106e6 <_txm_module_manager_tx_queue_send_notify_dispatch+0x6a>
 80106dc:	69bb      	ldr	r3, [r7, #24]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4a0e      	ldr	r2, [pc, #56]	; (801071c <_txm_module_manager_tx_queue_send_notify_dispatch+0xa0>)
 80106e2:	4293      	cmp	r3, r2
 80106e4:	d001      	beq.n	80106ea <_txm_module_manager_tx_queue_send_notify_dispatch+0x6e>
            return(TX_QUEUE_ERROR);
 80106e6:	2309      	movs	r3, #9
 80106e8:	e014      	b.n	8010714 <_txm_module_manager_tx_queue_send_notify_dispatch+0x98>
    }

    /* Is it a disable request?  */
    if ((void *) param_1 == TX_NULL)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d102      	bne.n	80106f6 <_txm_module_manager_tx_queue_send_notify_dispatch+0x7a>
    {

        /* Clear the callback.  */
        queue_send_notify = (VOID (*)(TX_QUEUE *)) TX_NULL;
 80106f0:	2300      	movs	r3, #0
 80106f2:	61fb      	str	r3, [r7, #28]
 80106f4:	e007      	b.n	8010706 <_txm_module_manager_tx_queue_send_notify_dispatch+0x8a>
    }
    else
    {

        /* Setup trampoline values.  */
        queue_ptr -> tx_queue_module_instance = (VOID *) module_instance;
 80106f6:	69bb      	ldr	r3, [r7, #24]
 80106f8:	68fa      	ldr	r2, [r7, #12]
 80106fa:	63da      	str	r2, [r3, #60]	; 0x3c
        queue_ptr -> tx_queue_send_module_notify = (VOID (*)(TX_QUEUE *)) param_1;
 80106fc:	687a      	ldr	r2, [r7, #4]
 80106fe:	69bb      	ldr	r3, [r7, #24]
 8010700:	641a      	str	r2, [r3, #64]	; 0x40
        queue_send_notify = _txm_module_manager_queue_notify_trampoline;
 8010702:	4b07      	ldr	r3, [pc, #28]	; (8010720 <_txm_module_manager_tx_queue_send_notify_dispatch+0xa4>)
 8010704:	61fb      	str	r3, [r7, #28]
    }

    return_value = (ALIGN_TYPE) _txe_queue_send_notify(
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	69f9      	ldr	r1, [r7, #28]
 801070a:	4618      	mov	r0, r3
 801070c:	f7fc faf6 	bl	800ccfc <_txe_queue_send_notify>
 8010710:	6178      	str	r0, [r7, #20]
        (TX_QUEUE *) param_0,
        (VOID (*)(TX_QUEUE *notify_queue_ptr)) queue_send_notify
    );
    return(return_value);
 8010712:	697b      	ldr	r3, [r7, #20]
}
 8010714:	4618      	mov	r0, r3
 8010716:	3720      	adds	r7, #32
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}
 801071c:	51554555 	.word	0x51554555
 8010720:	080137c5 	.word	0x080137c5

08010724 <_txm_module_manager_tx_semaphore_ceiling_put_dispatch>:
/* UINT _txe_semaphore_ceiling_put(
    TX_SEMAPHORE *semaphore_ptr, -> param_0
    ULONG ceiling -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_ceiling_put_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b086      	sub	sp, #24
 8010728:	af00      	add	r7, sp, #0
 801072a:	60f8      	str	r0, [r7, #12]
 801072c:	60b9      	str	r1, [r7, #8]
 801072e:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	f003 0302 	and.w	r3, r3, #2
 8010738:	2b00      	cmp	r3, #0
 801073a:	d01e      	beq.n	801077a <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x56>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 801073c:	2228      	movs	r2, #40	; 0x28
 801073e:	68b9      	ldr	r1, [r7, #8]
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	f002 fd0b 	bl	801315c <_txm_module_manager_inside_data_check>
 8010746:	4603      	mov	r3, r0
 8010748:	2b00      	cmp	r3, #0
 801074a:	d111      	bne.n	8010770 <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x4c>
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	f113 0f29 	cmn.w	r3, #41	; 0x29
 8010752:	d812      	bhi.n	801077a <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x56>
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	699b      	ldr	r3, [r3, #24]
 8010758:	461a      	mov	r2, r3
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	4293      	cmp	r3, r2
 801075e:	d30c      	bcc.n	801077a <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x56>
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	69db      	ldr	r3, [r3, #28]
 801076a:	3301      	adds	r3, #1
 801076c:	429a      	cmp	r2, r3
 801076e:	d804      	bhi.n	801077a <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x56>
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d001      	beq.n	801077a <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x56>
            return(TXM_MODULE_INVALID_MEMORY);
 8010776:	23f4      	movs	r3, #244	; 0xf4
 8010778:	e006      	b.n	8010788 <_txm_module_manager_tx_semaphore_ceiling_put_dispatch+0x64>
    }

    return_value = (ALIGN_TYPE) _txe_semaphore_ceiling_put(
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	6879      	ldr	r1, [r7, #4]
 801077e:	4618      	mov	r0, r3
 8010780:	f7fc fadc 	bl	800cd3c <_txe_semaphore_ceiling_put>
 8010784:	6178      	str	r0, [r7, #20]
        (TX_SEMAPHORE *) param_0,
        (ULONG) param_1
    );
    return(return_value);
 8010786:	697b      	ldr	r3, [r7, #20]
}
 8010788:	4618      	mov	r0, r3
 801078a:	3718      	adds	r7, #24
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <_txm_module_manager_tx_semaphore_create_dispatch>:
    CHAR *name_ptr, -> param_1
    ULONG initial_count, -> extra_parameters[0]
    UINT semaphore_control_block_size -> extra_parameters[1]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b086      	sub	sp, #24
 8010794:	af00      	add	r7, sp, #0
 8010796:	60f8      	str	r0, [r7, #12]
 8010798:	60b9      	str	r1, [r7, #8]
 801079a:	607a      	str	r2, [r7, #4]
 801079c:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	68db      	ldr	r3, [r3, #12]
 80107a2:	f003 0302 	and.w	r3, r3, #2
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d04b      	beq.n	8010842 <_txm_module_manager_tx_semaphore_create_dispatch+0xb2>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 80107aa:	4b2d      	ldr	r3, [pc, #180]	; (8010860 <_txm_module_manager_tx_semaphore_create_dispatch+0xd0>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d119      	bne.n	80107e6 <_txm_module_manager_tx_semaphore_create_dispatch+0x56>
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	f113 0f29 	cmn.w	r3, #41	; 0x29
 80107b8:	d815      	bhi.n	80107e6 <_txm_module_manager_tx_semaphore_create_dispatch+0x56>
 80107ba:	4b2a      	ldr	r3, [pc, #168]	; (8010864 <_txm_module_manager_tx_semaphore_create_dispatch+0xd4>)
 80107bc:	699b      	ldr	r3, [r3, #24]
 80107be:	3310      	adds	r3, #16
 80107c0:	68ba      	ldr	r2, [r7, #8]
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d30f      	bcc.n	80107e6 <_txm_module_manager_tx_semaphore_create_dispatch+0x56>
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	3328      	adds	r3, #40	; 0x28
 80107ca:	4a26      	ldr	r2, [pc, #152]	; (8010864 <_txm_module_manager_tx_semaphore_create_dispatch+0xd4>)
 80107cc:	6991      	ldr	r1, [r2, #24]
 80107ce:	4a25      	ldr	r2, [pc, #148]	; (8010864 <_txm_module_manager_tx_semaphore_create_dispatch+0xd4>)
 80107d0:	69d2      	ldr	r2, [r2, #28]
 80107d2:	440a      	add	r2, r1
 80107d4:	4293      	cmp	r3, r2
 80107d6:	d806      	bhi.n	80107e6 <_txm_module_manager_tx_semaphore_create_dispatch+0x56>
 80107d8:	2128      	movs	r1, #40	; 0x28
 80107da:	68b8      	ldr	r0, [r7, #8]
 80107dc:	f004 f858 	bl	8014890 <_txm_module_manager_object_size_check>
 80107e0:	4603      	mov	r3, r0
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d004      	beq.n	80107f0 <_txm_module_manager_tx_semaphore_create_dispatch+0x60>
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d001      	beq.n	80107f0 <_txm_module_manager_tx_semaphore_create_dispatch+0x60>
            return(TXM_MODULE_INVALID_MEMORY);
 80107ec:	23f4      	movs	r3, #244	; 0xf4
 80107ee:	e033      	b.n	8010858 <_txm_module_manager_tx_semaphore_create_dispatch+0xc8>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 80107f0:	2201      	movs	r2, #1
 80107f2:	6879      	ldr	r1, [r7, #4]
 80107f4:	68f8      	ldr	r0, [r7, #12]
 80107f6:	f002 fcb1 	bl	801315c <_txm_module_manager_inside_data_check>
 80107fa:	4603      	mov	r3, r0
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d115      	bne.n	801082c <_txm_module_manager_tx_semaphore_create_dispatch+0x9c>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010806:	d00c      	beq.n	8010822 <_txm_module_manager_tx_semaphore_create_dispatch+0x92>
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	699b      	ldr	r3, [r3, #24]
 801080c:	461a      	mov	r2, r3
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	4293      	cmp	r3, r2
 8010812:	d306      	bcc.n	8010822 <_txm_module_manager_tx_semaphore_create_dispatch+0x92>
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	1c5a      	adds	r2, r3, #1
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	69db      	ldr	r3, [r3, #28]
 801081c:	3301      	adds	r3, #1
 801081e:	429a      	cmp	r2, r3
 8010820:	d904      	bls.n	801082c <_txm_module_manager_tx_semaphore_create_dispatch+0x9c>
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d001      	beq.n	801082c <_txm_module_manager_tx_semaphore_create_dispatch+0x9c>
            return(TXM_MODULE_INVALID_MEMORY);
 8010828:	23f4      	movs	r3, #244	; 0xf4
 801082a:	e015      	b.n	8010858 <_txm_module_manager_tx_semaphore_create_dispatch+0xc8>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[2])))
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	2208      	movs	r2, #8
 8010830:	4619      	mov	r1, r3
 8010832:	68f8      	ldr	r0, [r7, #12]
 8010834:	f002 fc92 	bl	801315c <_txm_module_manager_inside_data_check>
 8010838:	4603      	mov	r3, r0
 801083a:	2b00      	cmp	r3, #0
 801083c:	d101      	bne.n	8010842 <_txm_module_manager_tx_semaphore_create_dispatch+0xb2>
            return(TXM_MODULE_INVALID_MEMORY);
 801083e:	23f4      	movs	r3, #244	; 0xf4
 8010840:	e00a      	b.n	8010858 <_txm_module_manager_tx_semaphore_create_dispatch+0xc8>
    }

    return_value = (ALIGN_TYPE) _txe_semaphore_create(
 8010842:	68b8      	ldr	r0, [r7, #8]
 8010844:	6879      	ldr	r1, [r7, #4]
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	681a      	ldr	r2, [r3, #0]
        (TX_SEMAPHORE *) param_0,
        (CHAR *) param_1,
        (ULONG) extra_parameters[0],
        (UINT) extra_parameters[1]
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _txe_semaphore_create(
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f7fc fa9a 	bl	800cd88 <_txe_semaphore_create>
 8010854:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 8010856:	697b      	ldr	r3, [r7, #20]
}
 8010858:	4618      	mov	r0, r3
 801085a:	3718      	adds	r7, #24
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}
 8010860:	2400f6e8 	.word	0x2400f6e8
 8010864:	2400f6b4 	.word	0x2400f6b4

08010868 <_txm_module_manager_tx_semaphore_delete_dispatch>:

/* UINT _txe_semaphore_delete(
    TX_SEMAPHORE *semaphore_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_delete_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b084      	sub	sp, #16
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	68db      	ldr	r3, [r3, #12]
 8010876:	f003 0302 	and.w	r3, r3, #2
 801087a:	2b00      	cmp	r3, #0
 801087c:	d01e      	beq.n	80108bc <_txm_module_manager_tx_semaphore_delete_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 801087e:	2228      	movs	r2, #40	; 0x28
 8010880:	6839      	ldr	r1, [r7, #0]
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f002 fc6a 	bl	801315c <_txm_module_manager_inside_data_check>
 8010888:	4603      	mov	r3, r0
 801088a:	2b00      	cmp	r3, #0
 801088c:	d111      	bne.n	80108b2 <_txm_module_manager_tx_semaphore_delete_dispatch+0x4a>
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	f113 0f29 	cmn.w	r3, #41	; 0x29
 8010894:	d812      	bhi.n	80108bc <_txm_module_manager_tx_semaphore_delete_dispatch+0x54>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	699b      	ldr	r3, [r3, #24]
 801089a:	461a      	mov	r2, r3
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	4293      	cmp	r3, r2
 80108a0:	d30c      	bcc.n	80108bc <_txm_module_manager_tx_semaphore_delete_dispatch+0x54>
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	69db      	ldr	r3, [r3, #28]
 80108ac:	3301      	adds	r3, #1
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d804      	bhi.n	80108bc <_txm_module_manager_tx_semaphore_delete_dispatch+0x54>
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d001      	beq.n	80108bc <_txm_module_manager_tx_semaphore_delete_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 80108b8:	23f4      	movs	r3, #244	; 0xf4
 80108ba:	e00d      	b.n	80108d8 <_txm_module_manager_tx_semaphore_delete_dispatch+0x70>
    }

    return_value = (ALIGN_TYPE) _txe_semaphore_delete(
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	4618      	mov	r0, r3
 80108c0:	f7fc faf4 	bl	800ceac <_txe_semaphore_delete>
 80108c4:	60f8      	str	r0, [r7, #12]
        (TX_SEMAPHORE *) param_0
    );

    /* Deallocate object memory.  */
    if (return_value == TX_SUCCESS)
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d104      	bne.n	80108d6 <_txm_module_manager_tx_semaphore_delete_dispatch+0x6e>
    {
        return_value = _txm_module_manager_object_deallocate((VOID *) param_0);
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	4618      	mov	r0, r3
 80108d0:	f002 fcfa 	bl	80132c8 <_txm_module_manager_object_deallocate>
 80108d4:	60f8      	str	r0, [r7, #12]
    }
    return(return_value);
 80108d6:	68fb      	ldr	r3, [r7, #12]
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3710      	adds	r7, #16
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}

080108e0 <_txm_module_manager_tx_semaphore_get_dispatch>:
/* UINT _txe_semaphore_get(
    TX_SEMAPHORE *semaphore_ptr, -> param_0
    ULONG wait_option -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b086      	sub	sp, #24
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	60f8      	str	r0, [r7, #12]
 80108e8:	60b9      	str	r1, [r7, #8]
 80108ea:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	68db      	ldr	r3, [r3, #12]
 80108f0:	f003 0302 	and.w	r3, r3, #2
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d01e      	beq.n	8010936 <_txm_module_manager_tx_semaphore_get_dispatch+0x56>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 80108f8:	2228      	movs	r2, #40	; 0x28
 80108fa:	68b9      	ldr	r1, [r7, #8]
 80108fc:	68f8      	ldr	r0, [r7, #12]
 80108fe:	f002 fc2d 	bl	801315c <_txm_module_manager_inside_data_check>
 8010902:	4603      	mov	r3, r0
 8010904:	2b00      	cmp	r3, #0
 8010906:	d111      	bne.n	801092c <_txm_module_manager_tx_semaphore_get_dispatch+0x4c>
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	f113 0f29 	cmn.w	r3, #41	; 0x29
 801090e:	d812      	bhi.n	8010936 <_txm_module_manager_tx_semaphore_get_dispatch+0x56>
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	699b      	ldr	r3, [r3, #24]
 8010914:	461a      	mov	r2, r3
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	4293      	cmp	r3, r2
 801091a:	d30c      	bcc.n	8010936 <_txm_module_manager_tx_semaphore_get_dispatch+0x56>
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	69db      	ldr	r3, [r3, #28]
 8010926:	3301      	adds	r3, #1
 8010928:	429a      	cmp	r2, r3
 801092a:	d804      	bhi.n	8010936 <_txm_module_manager_tx_semaphore_get_dispatch+0x56>
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d001      	beq.n	8010936 <_txm_module_manager_tx_semaphore_get_dispatch+0x56>
            return(TXM_MODULE_INVALID_MEMORY);
 8010932:	23f4      	movs	r3, #244	; 0xf4
 8010934:	e006      	b.n	8010944 <_txm_module_manager_tx_semaphore_get_dispatch+0x64>
    }

    return_value = (ALIGN_TYPE) _txe_semaphore_get(
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	6879      	ldr	r1, [r7, #4]
 801093a:	4618      	mov	r0, r3
 801093c:	f7fc faf4 	bl	800cf28 <_txe_semaphore_get>
 8010940:	6178      	str	r0, [r7, #20]
        (TX_SEMAPHORE *) param_0,
        (ULONG) param_1
    );
    return(return_value);
 8010942:	697b      	ldr	r3, [r7, #20]
}
 8010944:	4618      	mov	r0, r3
 8010946:	3718      	adds	r7, #24
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <_txm_module_manager_tx_semaphore_info_get_dispatch>:
    TX_THREAD **first_suspended, -> extra_parameters[1]
    ULONG *suspended_count, -> extra_parameters[2]
    TX_SEMAPHORE **next_semaphore -> extra_parameters[3]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 801094c:	b5b0      	push	{r4, r5, r7, lr}
 801094e:	b088      	sub	sp, #32
 8010950:	af02      	add	r7, sp, #8
 8010952:	60f8      	str	r0, [r7, #12]
 8010954:	60b9      	str	r1, [r7, #8]
 8010956:	607a      	str	r2, [r7, #4]
 8010958:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	68db      	ldr	r3, [r3, #12]
 801095e:	f003 0302 	and.w	r3, r3, #2
 8010962:	2b00      	cmp	r3, #0
 8010964:	d07c      	beq.n	8010a60 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x114>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 8010966:	2228      	movs	r2, #40	; 0x28
 8010968:	68b9      	ldr	r1, [r7, #8]
 801096a:	68f8      	ldr	r0, [r7, #12]
 801096c:	f002 fbf6 	bl	801315c <_txm_module_manager_inside_data_check>
 8010970:	4603      	mov	r3, r0
 8010972:	2b00      	cmp	r3, #0
 8010974:	d111      	bne.n	801099a <_txm_module_manager_tx_semaphore_info_get_dispatch+0x4e>
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	f113 0f29 	cmn.w	r3, #41	; 0x29
 801097c:	d812      	bhi.n	80109a4 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x58>
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	699b      	ldr	r3, [r3, #24]
 8010982:	461a      	mov	r2, r3
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	4293      	cmp	r3, r2
 8010988:	d30c      	bcc.n	80109a4 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x58>
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	69db      	ldr	r3, [r3, #28]
 8010994:	3301      	adds	r3, #1
 8010996:	429a      	cmp	r2, r3
 8010998:	d804      	bhi.n	80109a4 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x58>
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d001      	beq.n	80109a4 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 80109a0:	23f4      	movs	r3, #244	; 0xf4
 80109a2:	e075      	b.n	8010a90 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(CHAR *)))
 80109a4:	2204      	movs	r2, #4
 80109a6:	6879      	ldr	r1, [r7, #4]
 80109a8:	68f8      	ldr	r0, [r7, #12]
 80109aa:	f002 fbd7 	bl	801315c <_txm_module_manager_inside_data_check>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d104      	bne.n	80109be <_txm_module_manager_tx_semaphore_info_get_dispatch+0x72>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d001      	beq.n	80109be <_txm_module_manager_tx_semaphore_info_get_dispatch+0x72>
            return(TXM_MODULE_INVALID_MEMORY);
 80109ba:	23f4      	movs	r3, #244	; 0xf4
 80109bc:	e068      	b.n	8010a90 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[4])))
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	2210      	movs	r2, #16
 80109c2:	4619      	mov	r1, r3
 80109c4:	68f8      	ldr	r0, [r7, #12]
 80109c6:	f002 fbc9 	bl	801315c <_txm_module_manager_inside_data_check>
 80109ca:	4603      	mov	r3, r0
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d101      	bne.n	80109d4 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x88>
            return(TXM_MODULE_INVALID_MEMORY);
 80109d0:	23f4      	movs	r3, #244	; 0xf4
 80109d2:	e05d      	b.n	8010a90 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 80109d4:	683b      	ldr	r3, [r7, #0]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2204      	movs	r2, #4
 80109da:	4619      	mov	r1, r3
 80109dc:	68f8      	ldr	r0, [r7, #12]
 80109de:	f002 fbbd 	bl	801315c <_txm_module_manager_inside_data_check>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d105      	bne.n	80109f4 <_txm_module_manager_tx_semaphore_info_get_dispatch+0xa8>
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d001      	beq.n	80109f4 <_txm_module_manager_tx_semaphore_info_get_dispatch+0xa8>
            return(TXM_MODULE_INVALID_MEMORY);
 80109f0:	23f4      	movs	r3, #244	; 0xf4
 80109f2:	e04d      	b.n	8010a90 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(TX_THREAD *)))
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	3304      	adds	r3, #4
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	2204      	movs	r2, #4
 80109fc:	4619      	mov	r1, r3
 80109fe:	68f8      	ldr	r0, [r7, #12]
 8010a00:	f002 fbac 	bl	801315c <_txm_module_manager_inside_data_check>
 8010a04:	4603      	mov	r3, r0
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d106      	bne.n	8010a18 <_txm_module_manager_tx_semaphore_info_get_dispatch+0xcc>
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	3304      	adds	r3, #4
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d001      	beq.n	8010a18 <_txm_module_manager_tx_semaphore_info_get_dispatch+0xcc>
            return(TXM_MODULE_INVALID_MEMORY);
 8010a14:	23f4      	movs	r3, #244	; 0xf4
 8010a16:	e03b      	b.n	8010a90 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	3308      	adds	r3, #8
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	2204      	movs	r2, #4
 8010a20:	4619      	mov	r1, r3
 8010a22:	68f8      	ldr	r0, [r7, #12]
 8010a24:	f002 fb9a 	bl	801315c <_txm_module_manager_inside_data_check>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d106      	bne.n	8010a3c <_txm_module_manager_tx_semaphore_info_get_dispatch+0xf0>
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	3308      	adds	r3, #8
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d001      	beq.n	8010a3c <_txm_module_manager_tx_semaphore_info_get_dispatch+0xf0>
            return(TXM_MODULE_INVALID_MEMORY);
 8010a38:	23f4      	movs	r3, #244	; 0xf4
 8010a3a:	e029      	b.n	8010a90 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(TX_SEMAPHORE *)))
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	330c      	adds	r3, #12
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	2204      	movs	r2, #4
 8010a44:	4619      	mov	r1, r3
 8010a46:	68f8      	ldr	r0, [r7, #12]
 8010a48:	f002 fb88 	bl	801315c <_txm_module_manager_inside_data_check>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d106      	bne.n	8010a60 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x114>
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	330c      	adds	r3, #12
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d001      	beq.n	8010a60 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x114>
            return(TXM_MODULE_INVALID_MEMORY);
 8010a5c:	23f4      	movs	r3, #244	; 0xf4
 8010a5e:	e017      	b.n	8010a90 <_txm_module_manager_tx_semaphore_info_get_dispatch+0x144>
    }

    return_value = (ALIGN_TYPE) _txe_semaphore_info_get(
 8010a60:	68b8      	ldr	r0, [r7, #8]
 8010a62:	6879      	ldr	r1, [r7, #4]
        (TX_SEMAPHORE *) param_0,
        (CHAR **) param_1,
        (ULONG *) extra_parameters[0],
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_semaphore_info_get(
 8010a68:	461c      	mov	r4, r3
        (TX_THREAD **) extra_parameters[1],
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	3304      	adds	r3, #4
 8010a6e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_semaphore_info_get(
 8010a70:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[2],
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	3308      	adds	r3, #8
 8010a76:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_semaphore_info_get(
 8010a78:	461a      	mov	r2, r3
        (TX_SEMAPHORE **) extra_parameters[3]
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	330c      	adds	r3, #12
 8010a7e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_semaphore_info_get(
 8010a80:	9301      	str	r3, [sp, #4]
 8010a82:	9200      	str	r2, [sp, #0]
 8010a84:	462b      	mov	r3, r5
 8010a86:	4622      	mov	r2, r4
 8010a88:	f7fc fa90 	bl	800cfac <_txe_semaphore_info_get>
 8010a8c:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 8010a8e:	697b      	ldr	r3, [r7, #20]
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3718      	adds	r7, #24
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bdb0      	pop	{r4, r5, r7, pc}

08010a98 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch>:
    ULONG *gets, -> extra_parameters[0]
    ULONG *suspensions, -> extra_parameters[1]
    ULONG *timeouts -> extra_parameters[2]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_performance_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8010a98:	b590      	push	{r4, r7, lr}
 8010a9a:	b089      	sub	sp, #36	; 0x24
 8010a9c:	af02      	add	r7, sp, #8
 8010a9e:	60f8      	str	r0, [r7, #12]
 8010aa0:	60b9      	str	r1, [r7, #8]
 8010aa2:	607a      	str	r2, [r7, #4]
 8010aa4:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	68db      	ldr	r3, [r3, #12]
 8010aaa:	f003 0302 	and.w	r3, r3, #2
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d06a      	beq.n	8010b88 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0xf0>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 8010ab2:	2228      	movs	r2, #40	; 0x28
 8010ab4:	68b9      	ldr	r1, [r7, #8]
 8010ab6:	68f8      	ldr	r0, [r7, #12]
 8010ab8:	f002 fb50 	bl	801315c <_txm_module_manager_inside_data_check>
 8010abc:	4603      	mov	r3, r0
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d111      	bne.n	8010ae6 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x4e>
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	f113 0f29 	cmn.w	r3, #41	; 0x29
 8010ac8:	d812      	bhi.n	8010af0 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x58>
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	699b      	ldr	r3, [r3, #24]
 8010ace:	461a      	mov	r2, r3
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	4293      	cmp	r3, r2
 8010ad4:	d30c      	bcc.n	8010af0 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x58>
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	69db      	ldr	r3, [r3, #28]
 8010ae0:	3301      	adds	r3, #1
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d804      	bhi.n	8010af0 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x58>
 8010ae6:	68bb      	ldr	r3, [r7, #8]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d001      	beq.n	8010af0 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 8010aec:	23f4      	movs	r3, #244	; 0xf4
 8010aee:	e05d      	b.n	8010bac <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x114>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 8010af0:	2204      	movs	r2, #4
 8010af2:	6879      	ldr	r1, [r7, #4]
 8010af4:	68f8      	ldr	r0, [r7, #12]
 8010af6:	f002 fb31 	bl	801315c <_txm_module_manager_inside_data_check>
 8010afa:	4603      	mov	r3, r0
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d104      	bne.n	8010b0a <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x72>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d001      	beq.n	8010b0a <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x72>
            return(TXM_MODULE_INVALID_MEMORY);
 8010b06:	23f4      	movs	r3, #244	; 0xf4
 8010b08:	e050      	b.n	8010bac <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x114>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[3])))
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	220c      	movs	r2, #12
 8010b0e:	4619      	mov	r1, r3
 8010b10:	68f8      	ldr	r0, [r7, #12]
 8010b12:	f002 fb23 	bl	801315c <_txm_module_manager_inside_data_check>
 8010b16:	4603      	mov	r3, r0
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d101      	bne.n	8010b20 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x88>
            return(TXM_MODULE_INVALID_MEMORY);
 8010b1c:	23f4      	movs	r3, #244	; 0xf4
 8010b1e:	e045      	b.n	8010bac <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x114>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	2204      	movs	r2, #4
 8010b26:	4619      	mov	r1, r3
 8010b28:	68f8      	ldr	r0, [r7, #12]
 8010b2a:	f002 fb17 	bl	801315c <_txm_module_manager_inside_data_check>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d105      	bne.n	8010b40 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0xa8>
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d001      	beq.n	8010b40 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0xa8>
            return(TXM_MODULE_INVALID_MEMORY);
 8010b3c:	23f4      	movs	r3, #244	; 0xf4
 8010b3e:	e035      	b.n	8010bac <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x114>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	3304      	adds	r3, #4
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	2204      	movs	r2, #4
 8010b48:	4619      	mov	r1, r3
 8010b4a:	68f8      	ldr	r0, [r7, #12]
 8010b4c:	f002 fb06 	bl	801315c <_txm_module_manager_inside_data_check>
 8010b50:	4603      	mov	r3, r0
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d106      	bne.n	8010b64 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0xcc>
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	3304      	adds	r3, #4
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d001      	beq.n	8010b64 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0xcc>
            return(TXM_MODULE_INVALID_MEMORY);
 8010b60:	23f4      	movs	r3, #244	; 0xf4
 8010b62:	e023      	b.n	8010bac <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x114>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	3308      	adds	r3, #8
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	2204      	movs	r2, #4
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	68f8      	ldr	r0, [r7, #12]
 8010b70:	f002 faf4 	bl	801315c <_txm_module_manager_inside_data_check>
 8010b74:	4603      	mov	r3, r0
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d106      	bne.n	8010b88 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0xf0>
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	3308      	adds	r3, #8
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d001      	beq.n	8010b88 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0xf0>
            return(TXM_MODULE_INVALID_MEMORY);
 8010b84:	23f4      	movs	r3, #244	; 0xf4
 8010b86:	e011      	b.n	8010bac <_txm_module_manager_tx_semaphore_performance_info_get_dispatch+0x114>
    }

    return_value = (ALIGN_TYPE) _tx_semaphore_performance_info_get(
 8010b88:	68b8      	ldr	r0, [r7, #8]
 8010b8a:	6879      	ldr	r1, [r7, #4]
        (TX_SEMAPHORE *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_semaphore_performance_info_get(
 8010b90:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[1],
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	3304      	adds	r3, #4
 8010b96:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_semaphore_performance_info_get(
 8010b98:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[2]
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	3308      	adds	r3, #8
 8010b9e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_semaphore_performance_info_get(
 8010ba0:	9300      	str	r3, [sp, #0]
 8010ba2:	4623      	mov	r3, r4
 8010ba4:	f004 f8fe 	bl	8014da4 <_tx_semaphore_performance_info_get>
 8010ba8:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 8010baa:	697b      	ldr	r3, [r7, #20]
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	371c      	adds	r7, #28
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd90      	pop	{r4, r7, pc}

08010bb4 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch>:
    ULONG *gets, -> param_1
    ULONG *suspensions, -> extra_parameters[0]
    ULONG *timeouts -> extra_parameters[1]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_performance_system_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b086      	sub	sp, #24
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	60f8      	str	r0, [r7, #12]
 8010bbc:	60b9      	str	r1, [r7, #8]
 8010bbe:	607a      	str	r2, [r7, #4]
 8010bc0:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	68db      	ldr	r3, [r3, #12]
 8010bc6:	f003 0302 	and.w	r3, r3, #2
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d046      	beq.n	8010c5c <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0xa8>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(ULONG)))
 8010bce:	2204      	movs	r2, #4
 8010bd0:	68b9      	ldr	r1, [r7, #8]
 8010bd2:	68f8      	ldr	r0, [r7, #12]
 8010bd4:	f002 fac2 	bl	801315c <_txm_module_manager_inside_data_check>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d104      	bne.n	8010be8 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x34>
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d001      	beq.n	8010be8 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x34>
            return(TXM_MODULE_INVALID_MEMORY);
 8010be4:	23f4      	movs	r3, #244	; 0xf4
 8010be6:	e045      	b.n	8010c74 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0xc0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 8010be8:	2204      	movs	r2, #4
 8010bea:	6879      	ldr	r1, [r7, #4]
 8010bec:	68f8      	ldr	r0, [r7, #12]
 8010bee:	f002 fab5 	bl	801315c <_txm_module_manager_inside_data_check>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d104      	bne.n	8010c02 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x4e>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d001      	beq.n	8010c02 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x4e>
            return(TXM_MODULE_INVALID_MEMORY);
 8010bfe:	23f4      	movs	r3, #244	; 0xf4
 8010c00:	e038      	b.n	8010c74 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0xc0>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[2])))
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	2208      	movs	r2, #8
 8010c06:	4619      	mov	r1, r3
 8010c08:	68f8      	ldr	r0, [r7, #12]
 8010c0a:	f002 faa7 	bl	801315c <_txm_module_manager_inside_data_check>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d101      	bne.n	8010c18 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x64>
            return(TXM_MODULE_INVALID_MEMORY);
 8010c14:	23f4      	movs	r3, #244	; 0xf4
 8010c16:	e02d      	b.n	8010c74 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0xc0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	2204      	movs	r2, #4
 8010c1e:	4619      	mov	r1, r3
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f002 fa9b 	bl	801315c <_txm_module_manager_inside_data_check>
 8010c26:	4603      	mov	r3, r0
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d105      	bne.n	8010c38 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x84>
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d001      	beq.n	8010c38 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0x84>
            return(TXM_MODULE_INVALID_MEMORY);
 8010c34:	23f4      	movs	r3, #244	; 0xf4
 8010c36:	e01d      	b.n	8010c74 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0xc0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	3304      	adds	r3, #4
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	2204      	movs	r2, #4
 8010c40:	4619      	mov	r1, r3
 8010c42:	68f8      	ldr	r0, [r7, #12]
 8010c44:	f002 fa8a 	bl	801315c <_txm_module_manager_inside_data_check>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d106      	bne.n	8010c5c <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0xa8>
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	3304      	adds	r3, #4
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d001      	beq.n	8010c5c <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0xa8>
            return(TXM_MODULE_INVALID_MEMORY);
 8010c58:	23f4      	movs	r3, #244	; 0xf4
 8010c5a:	e00b      	b.n	8010c74 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch+0xc0>
    }

    return_value = (ALIGN_TYPE) _tx_semaphore_performance_system_info_get(
 8010c5c:	68b8      	ldr	r0, [r7, #8]
 8010c5e:	6879      	ldr	r1, [r7, #4]
        (ULONG *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_semaphore_performance_system_info_get(
 8010c64:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[1]
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	3304      	adds	r3, #4
 8010c6a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_semaphore_performance_system_info_get(
 8010c6c:	f004 f8c8 	bl	8014e00 <_tx_semaphore_performance_system_info_get>
 8010c70:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 8010c72:	697b      	ldr	r3, [r7, #20]
}
 8010c74:	4618      	mov	r0, r3
 8010c76:	3718      	adds	r7, #24
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}

08010c7c <_txm_module_manager_tx_semaphore_prioritize_dispatch>:

/* UINT _txe_semaphore_prioritize(
    TX_SEMAPHORE *semaphore_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_prioritize_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b084      	sub	sp, #16
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
 8010c84:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	68db      	ldr	r3, [r3, #12]
 8010c8a:	f003 0302 	and.w	r3, r3, #2
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d01e      	beq.n	8010cd0 <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 8010c92:	2228      	movs	r2, #40	; 0x28
 8010c94:	6839      	ldr	r1, [r7, #0]
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f002 fa60 	bl	801315c <_txm_module_manager_inside_data_check>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d111      	bne.n	8010cc6 <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x4a>
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	f113 0f29 	cmn.w	r3, #41	; 0x29
 8010ca8:	d812      	bhi.n	8010cd0 <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x54>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	699b      	ldr	r3, [r3, #24]
 8010cae:	461a      	mov	r2, r3
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	d30c      	bcc.n	8010cd0 <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x54>
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	69db      	ldr	r3, [r3, #28]
 8010cc0:	3301      	adds	r3, #1
 8010cc2:	429a      	cmp	r2, r3
 8010cc4:	d804      	bhi.n	8010cd0 <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x54>
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d001      	beq.n	8010cd0 <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 8010ccc:	23f4      	movs	r3, #244	; 0xf4
 8010cce:	e005      	b.n	8010cdc <_txm_module_manager_tx_semaphore_prioritize_dispatch+0x60>
    }

    return_value = (ALIGN_TYPE) _txe_semaphore_prioritize(
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fc f992 	bl	800cffc <_txe_semaphore_prioritize>
 8010cd8:	60f8      	str	r0, [r7, #12]
        (TX_SEMAPHORE *) param_0
    );
    return(return_value);
 8010cda:	68fb      	ldr	r3, [r7, #12]
}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3710      	adds	r7, #16
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <_txm_module_manager_tx_semaphore_put_dispatch>:

/* UINT _txe_semaphore_put(
    TX_SEMAPHORE *semaphore_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_put_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b084      	sub	sp, #16
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	68db      	ldr	r3, [r3, #12]
 8010cf2:	f003 0302 	and.w	r3, r3, #2
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d01e      	beq.n	8010d38 <_txm_module_manager_tx_semaphore_put_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 8010cfa:	2228      	movs	r2, #40	; 0x28
 8010cfc:	6839      	ldr	r1, [r7, #0]
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f002 fa2c 	bl	801315c <_txm_module_manager_inside_data_check>
 8010d04:	4603      	mov	r3, r0
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d111      	bne.n	8010d2e <_txm_module_manager_tx_semaphore_put_dispatch+0x4a>
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	f113 0f29 	cmn.w	r3, #41	; 0x29
 8010d10:	d812      	bhi.n	8010d38 <_txm_module_manager_tx_semaphore_put_dispatch+0x54>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	699b      	ldr	r3, [r3, #24]
 8010d16:	461a      	mov	r2, r3
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	d30c      	bcc.n	8010d38 <_txm_module_manager_tx_semaphore_put_dispatch+0x54>
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	69db      	ldr	r3, [r3, #28]
 8010d28:	3301      	adds	r3, #1
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d804      	bhi.n	8010d38 <_txm_module_manager_tx_semaphore_put_dispatch+0x54>
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d001      	beq.n	8010d38 <_txm_module_manager_tx_semaphore_put_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 8010d34:	23f4      	movs	r3, #244	; 0xf4
 8010d36:	e005      	b.n	8010d44 <_txm_module_manager_tx_semaphore_put_dispatch+0x60>
    }

    return_value = (ALIGN_TYPE) _txe_semaphore_put(
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7fc f97c 	bl	800d038 <_txe_semaphore_put>
 8010d40:	60f8      	str	r0, [r7, #12]
        (TX_SEMAPHORE *) param_0
    );
    return(return_value);
 8010d42:	68fb      	ldr	r3, [r7, #12]
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3710      	adds	r7, #16
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}

08010d4c <_txm_module_manager_tx_semaphore_put_notify_dispatch>:
/* UINT _txe_semaphore_put_notify(
    TX_SEMAPHORE *semaphore_ptr, -> param_0
    VOID (*semaphore_put_notify)(TX_SEMAPHORE *notify_semaphore_ptr) -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_tx_semaphore_put_notify_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b088      	sub	sp, #32
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	60f8      	str	r0, [r7, #12]
 8010d54:	60b9      	str	r1, [r7, #8]
 8010d56:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;
TX_SEMAPHORE *semaphore_ptr = (TX_SEMAPHORE *) param_0;
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	61bb      	str	r3, [r7, #24]
VOID (*semaphore_put_notify)(TX_SEMAPHORE *);

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	f003 0302 	and.w	r3, r3, #2
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d028      	beq.n	8010dba <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x6e>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_SEMAPHORE)))
 8010d68:	2228      	movs	r2, #40	; 0x28
 8010d6a:	68b9      	ldr	r1, [r7, #8]
 8010d6c:	68f8      	ldr	r0, [r7, #12]
 8010d6e:	f002 f9f5 	bl	801315c <_txm_module_manager_inside_data_check>
 8010d72:	4603      	mov	r3, r0
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d111      	bne.n	8010d9c <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x50>
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	f113 0f29 	cmn.w	r3, #41	; 0x29
 8010d7e:	d812      	bhi.n	8010da6 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x5a>
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	699b      	ldr	r3, [r3, #24]
 8010d84:	461a      	mov	r2, r3
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	4293      	cmp	r3, r2
 8010d8a:	d30c      	bcc.n	8010da6 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x5a>
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	69db      	ldr	r3, [r3, #28]
 8010d96:	3301      	adds	r3, #1
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	d804      	bhi.n	8010da6 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x5a>
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d001      	beq.n	8010da6 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x5a>
            return(TXM_MODULE_INVALID_MEMORY);
 8010da2:	23f4      	movs	r3, #244	; 0xf4
 8010da4:	e01e      	b.n	8010de4 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x98>

        /* Since we need to write to the object, ensure it's valid.  */
        if ((semaphore_ptr == TX_NULL) || (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID))
 8010da6:	69bb      	ldr	r3, [r7, #24]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d004      	beq.n	8010db6 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x6a>
 8010dac:	69bb      	ldr	r3, [r7, #24]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	4a0e      	ldr	r2, [pc, #56]	; (8010dec <_txm_module_manager_tx_semaphore_put_notify_dispatch+0xa0>)
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d001      	beq.n	8010dba <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x6e>
            return(TX_SEMAPHORE_ERROR);
 8010db6:	230c      	movs	r3, #12
 8010db8:	e014      	b.n	8010de4 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x98>
    }

    /* Is it a disable request?  */
    if ((void *) param_1 == TX_NULL)
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d102      	bne.n	8010dc6 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x7a>
    {

        /* Clear the callback.  */
        semaphore_put_notify = (VOID (*)(TX_SEMAPHORE *)) TX_NULL;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	61fb      	str	r3, [r7, #28]
 8010dc4:	e007      	b.n	8010dd6 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0x8a>
    }
    else
    {

        /* Setup trampoline values.  */
        semaphore_ptr -> tx_semaphore_module_instance = (VOID *) module_instance;
 8010dc6:	69bb      	ldr	r3, [r7, #24]
 8010dc8:	68fa      	ldr	r2, [r7, #12]
 8010dca:	621a      	str	r2, [r3, #32]
        semaphore_ptr -> tx_semaphore_put_module_notify = (VOID (*)(TX_SEMAPHORE *)) param_1;
 8010dcc:	687a      	ldr	r2, [r7, #4]
 8010dce:	69bb      	ldr	r3, [r7, #24]
 8010dd0:	625a      	str	r2, [r3, #36]	; 0x24
        semaphore_put_notify = _txm_module_manager_semaphore_notify_trampoline;
 8010dd2:	4b07      	ldr	r3, [pc, #28]	; (8010df0 <_txm_module_manager_tx_semaphore_put_notify_dispatch+0xa4>)
 8010dd4:	61fb      	str	r3, [r7, #28]
    }

    return_value = (ALIGN_TYPE) _txe_semaphore_put_notify(
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	69f9      	ldr	r1, [r7, #28]
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7fc f94a 	bl	800d074 <_txe_semaphore_put_notify>
 8010de0:	6178      	str	r0, [r7, #20]
        (TX_SEMAPHORE *) param_0,
        (VOID (*)(TX_SEMAPHORE *notify_semaphore_ptr)) semaphore_put_notify
    );
    return(return_value);
 8010de2:	697b      	ldr	r3, [r7, #20]
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3720      	adds	r7, #32
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	53454d41 	.word	0x53454d41
 8010df0:	08013875 	.word	0x08013875

08010df4 <_txm_module_manager_tx_thread_create_dispatch>:
    ULONG time_slice, -> extra_parameters[6]
    UINT auto_start, -> extra_parameters[7]
    UINT thread_control_block_size -> extra_parameters[8]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8010df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010df6:	b097      	sub	sp, #92	; 0x5c
 8010df8:	af0a      	add	r7, sp, #40	; 0x28
 8010dfa:	6278      	str	r0, [r7, #36]	; 0x24
 8010dfc:	6239      	str	r1, [r7, #32]
 8010dfe:	61fa      	str	r2, [r7, #28]
 8010e00:	61bb      	str	r3, [r7, #24]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e04:	68db      	ldr	r3, [r3, #12]
 8010e06:	f003 0302 	and.w	r3, r3, #2
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d073      	beq.n	8010ef6 <_txm_module_manager_tx_thread_create_dispatch+0x102>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_THREAD)))
 8010e0e:	4b58      	ldr	r3, [pc, #352]	; (8010f70 <_txm_module_manager_tx_thread_create_dispatch+0x17c>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	2b01      	cmp	r3, #1
 8010e14:	d119      	bne.n	8010e4a <_txm_module_manager_tx_thread_create_dispatch+0x56>
 8010e16:	6a3b      	ldr	r3, [r7, #32]
 8010e18:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010e1c:	d815      	bhi.n	8010e4a <_txm_module_manager_tx_thread_create_dispatch+0x56>
 8010e1e:	4b55      	ldr	r3, [pc, #340]	; (8010f74 <_txm_module_manager_tx_thread_create_dispatch+0x180>)
 8010e20:	699b      	ldr	r3, [r3, #24]
 8010e22:	3310      	adds	r3, #16
 8010e24:	6a3a      	ldr	r2, [r7, #32]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d30f      	bcc.n	8010e4a <_txm_module_manager_tx_thread_create_dispatch+0x56>
 8010e2a:	6a3b      	ldr	r3, [r7, #32]
 8010e2c:	33e8      	adds	r3, #232	; 0xe8
 8010e2e:	4a51      	ldr	r2, [pc, #324]	; (8010f74 <_txm_module_manager_tx_thread_create_dispatch+0x180>)
 8010e30:	6991      	ldr	r1, [r2, #24]
 8010e32:	4a50      	ldr	r2, [pc, #320]	; (8010f74 <_txm_module_manager_tx_thread_create_dispatch+0x180>)
 8010e34:	69d2      	ldr	r2, [r2, #28]
 8010e36:	440a      	add	r2, r1
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	d806      	bhi.n	8010e4a <_txm_module_manager_tx_thread_create_dispatch+0x56>
 8010e3c:	21e8      	movs	r1, #232	; 0xe8
 8010e3e:	6a38      	ldr	r0, [r7, #32]
 8010e40:	f003 fd26 	bl	8014890 <_txm_module_manager_object_size_check>
 8010e44:	4603      	mov	r3, r0
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d004      	beq.n	8010e54 <_txm_module_manager_tx_thread_create_dispatch+0x60>
 8010e4a:	6a3b      	ldr	r3, [r7, #32]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d001      	beq.n	8010e54 <_txm_module_manager_tx_thread_create_dispatch+0x60>
            return(TXM_MODULE_INVALID_MEMORY);
 8010e50:	23f4      	movs	r3, #244	; 0xf4
 8010e52:	e088      	b.n	8010f66 <_txm_module_manager_tx_thread_create_dispatch+0x172>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 8010e54:	2201      	movs	r2, #1
 8010e56:	69f9      	ldr	r1, [r7, #28]
 8010e58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e5a:	f002 f97f 	bl	801315c <_txm_module_manager_inside_data_check>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d115      	bne.n	8010e90 <_txm_module_manager_tx_thread_create_dispatch+0x9c>
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e6a:	d00c      	beq.n	8010e86 <_txm_module_manager_tx_thread_create_dispatch+0x92>
 8010e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6e:	699b      	ldr	r3, [r3, #24]
 8010e70:	461a      	mov	r2, r3
 8010e72:	69fb      	ldr	r3, [r7, #28]
 8010e74:	4293      	cmp	r3, r2
 8010e76:	d306      	bcc.n	8010e86 <_txm_module_manager_tx_thread_create_dispatch+0x92>
 8010e78:	69fb      	ldr	r3, [r7, #28]
 8010e7a:	1c5a      	adds	r2, r3, #1
 8010e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7e:	69db      	ldr	r3, [r3, #28]
 8010e80:	3301      	adds	r3, #1
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d904      	bls.n	8010e90 <_txm_module_manager_tx_thread_create_dispatch+0x9c>
 8010e86:	69fb      	ldr	r3, [r7, #28]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d001      	beq.n	8010e90 <_txm_module_manager_tx_thread_create_dispatch+0x9c>
            return(TXM_MODULE_INVALID_MEMORY);
 8010e8c:	23f4      	movs	r3, #244	; 0xf4
 8010e8e:	e06a      	b.n	8010f66 <_txm_module_manager_tx_thread_create_dispatch+0x172>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[9])))
 8010e90:	69bb      	ldr	r3, [r7, #24]
 8010e92:	2224      	movs	r2, #36	; 0x24
 8010e94:	4619      	mov	r1, r3
 8010e96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e98:	f002 f960 	bl	801315c <_txm_module_manager_inside_data_check>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d101      	bne.n	8010ea6 <_txm_module_manager_tx_thread_create_dispatch+0xb2>
            return(TXM_MODULE_INVALID_MEMORY);
 8010ea2:	23f4      	movs	r3, #244	; 0xf4
 8010ea4:	e05f      	b.n	8010f66 <_txm_module_manager_tx_thread_create_dispatch+0x172>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], extra_parameters[3]))
 8010ea6:	69bb      	ldr	r3, [r7, #24]
 8010ea8:	3308      	adds	r3, #8
 8010eaa:	6819      	ldr	r1, [r3, #0]
 8010eac:	69bb      	ldr	r3, [r7, #24]
 8010eae:	330c      	adds	r3, #12
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	461a      	mov	r2, r3
 8010eb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010eb6:	f002 f951 	bl	801315c <_txm_module_manager_inside_data_check>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d106      	bne.n	8010ece <_txm_module_manager_tx_thread_create_dispatch+0xda>
 8010ec0:	69bb      	ldr	r3, [r7, #24]
 8010ec2:	3308      	adds	r3, #8
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d001      	beq.n	8010ece <_txm_module_manager_tx_thread_create_dispatch+0xda>
            return(TXM_MODULE_INVALID_MEMORY);
 8010eca:	23f4      	movs	r3, #244	; 0xf4
 8010ecc:	e04b      	b.n	8010f66 <_txm_module_manager_tx_thread_create_dispatch+0x172>

        if (extra_parameters[4] < module_instance -> txm_module_instance_maximum_priority)
 8010ece:	69bb      	ldr	r3, [r7, #24]
 8010ed0:	3310      	adds	r3, #16
 8010ed2:	681a      	ldr	r2, [r3, #0]
 8010ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed6:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d201      	bcs.n	8010ee2 <_txm_module_manager_tx_thread_create_dispatch+0xee>
            return(TX_PRIORITY_ERROR);
 8010ede:	230f      	movs	r3, #15
 8010ee0:	e041      	b.n	8010f66 <_txm_module_manager_tx_thread_create_dispatch+0x172>

        if (extra_parameters[5] < module_instance -> txm_module_instance_maximum_priority)
 8010ee2:	69bb      	ldr	r3, [r7, #24]
 8010ee4:	3314      	adds	r3, #20
 8010ee6:	681a      	ldr	r2, [r3, #0]
 8010ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eea:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d201      	bcs.n	8010ef6 <_txm_module_manager_tx_thread_create_dispatch+0x102>
            return(TX_THRESH_ERROR);
 8010ef2:	2318      	movs	r3, #24
 8010ef4:	e037      	b.n	8010f66 <_txm_module_manager_tx_thread_create_dispatch+0x172>
    }

    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 8010ef6:	6a3b      	ldr	r3, [r7, #32]
 8010ef8:	617b      	str	r3, [r7, #20]
 8010efa:	69fa      	ldr	r2, [r7, #28]
 8010efc:	613a      	str	r2, [r7, #16]
        (TX_THREAD *) param_0,
        (CHAR *) param_1,
        module_instance -> txm_module_instance_shell_entry_function,
 8010efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f00:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8010f02:	60fc      	str	r4, [r7, #12]
        (VOID (*)(ULONG entry_input)) extra_parameters[0],
 8010f04:	69bb      	ldr	r3, [r7, #24]
 8010f06:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 8010f08:	469c      	mov	ip, r3
        (ULONG) extra_parameters[1],
 8010f0a:	69bb      	ldr	r3, [r7, #24]
 8010f0c:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 8010f0e:	681b      	ldr	r3, [r3, #0]
        (VOID *) extra_parameters[2],
 8010f10:	69ba      	ldr	r2, [r7, #24]
 8010f12:	3208      	adds	r2, #8
 8010f14:	6812      	ldr	r2, [r2, #0]
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 8010f16:	60ba      	str	r2, [r7, #8]
        (ULONG) extra_parameters[3],
 8010f18:	69ba      	ldr	r2, [r7, #24]
 8010f1a:	320c      	adds	r2, #12
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 8010f1c:	6812      	ldr	r2, [r2, #0]
        (UINT) extra_parameters[4],
 8010f1e:	69b9      	ldr	r1, [r7, #24]
 8010f20:	3110      	adds	r1, #16
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 8010f22:	6809      	ldr	r1, [r1, #0]
        (UINT) extra_parameters[5],
 8010f24:	69b8      	ldr	r0, [r7, #24]
 8010f26:	3014      	adds	r0, #20
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 8010f28:	6800      	ldr	r0, [r0, #0]
        (ULONG) extra_parameters[6],
 8010f2a:	69bc      	ldr	r4, [r7, #24]
 8010f2c:	3418      	adds	r4, #24
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 8010f2e:	6824      	ldr	r4, [r4, #0]
        (UINT) extra_parameters[7],
 8010f30:	69bd      	ldr	r5, [r7, #24]
 8010f32:	351c      	adds	r5, #28
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 8010f34:	682d      	ldr	r5, [r5, #0]
 8010f36:	607d      	str	r5, [r7, #4]
        (UINT) extra_parameters[8],
 8010f38:	69be      	ldr	r6, [r7, #24]
 8010f3a:	3620      	adds	r6, #32
    return_value = (ALIGN_TYPE) _txm_module_manager_thread_create(
 8010f3c:	6836      	ldr	r6, [r6, #0]
 8010f3e:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8010f40:	9508      	str	r5, [sp, #32]
 8010f42:	9607      	str	r6, [sp, #28]
 8010f44:	687d      	ldr	r5, [r7, #4]
 8010f46:	9506      	str	r5, [sp, #24]
 8010f48:	9405      	str	r4, [sp, #20]
 8010f4a:	9004      	str	r0, [sp, #16]
 8010f4c:	9103      	str	r1, [sp, #12]
 8010f4e:	9202      	str	r2, [sp, #8]
 8010f50:	68bd      	ldr	r5, [r7, #8]
 8010f52:	9501      	str	r5, [sp, #4]
 8010f54:	9300      	str	r3, [sp, #0]
 8010f56:	4663      	mov	r3, ip
 8010f58:	68fa      	ldr	r2, [r7, #12]
 8010f5a:	6939      	ldr	r1, [r7, #16]
 8010f5c:	6978      	ldr	r0, [r7, #20]
 8010f5e:	f003 f835 	bl	8013fcc <_txm_module_manager_thread_create>
 8010f62:	62f8      	str	r0, [r7, #44]	; 0x2c
        module_instance
    );
    return(return_value);
 8010f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3734      	adds	r7, #52	; 0x34
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f6e:	bf00      	nop
 8010f70:	2400f6e8 	.word	0x2400f6e8
 8010f74:	2400f6b4 	.word	0x2400f6b4

08010f78 <_txm_module_manager_tx_thread_delete_dispatch>:

/* UINT _txe_thread_delete(
    TX_THREAD *thread_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_delete_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b084      	sub	sp, #16
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	68db      	ldr	r3, [r3, #12]
 8010f86:	f003 0302 	and.w	r3, r3, #2
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d01e      	beq.n	8010fcc <_txm_module_manager_tx_thread_delete_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 8010f8e:	22e8      	movs	r2, #232	; 0xe8
 8010f90:	6839      	ldr	r1, [r7, #0]
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f002 f8e2 	bl	801315c <_txm_module_manager_inside_data_check>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d111      	bne.n	8010fc2 <_txm_module_manager_tx_thread_delete_dispatch+0x4a>
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8010fa4:	d812      	bhi.n	8010fcc <_txm_module_manager_tx_thread_delete_dispatch+0x54>
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	699b      	ldr	r3, [r3, #24]
 8010faa:	461a      	mov	r2, r3
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	4293      	cmp	r3, r2
 8010fb0:	d30c      	bcc.n	8010fcc <_txm_module_manager_tx_thread_delete_dispatch+0x54>
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	69db      	ldr	r3, [r3, #28]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d804      	bhi.n	8010fcc <_txm_module_manager_tx_thread_delete_dispatch+0x54>
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d001      	beq.n	8010fcc <_txm_module_manager_tx_thread_delete_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 8010fc8:	23f4      	movs	r3, #244	; 0xf4
 8010fca:	e00d      	b.n	8010fe8 <_txm_module_manager_tx_thread_delete_dispatch+0x70>
    }

    return_value = (ALIGN_TYPE) _txe_thread_delete(
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f7fc f95e 	bl	800d290 <_txe_thread_delete>
 8010fd4:	60f8      	str	r0, [r7, #12]
        (TX_THREAD *) param_0
    );

    /* Deallocate object memory.  */
    if (return_value == TX_SUCCESS)
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d104      	bne.n	8010fe6 <_txm_module_manager_tx_thread_delete_dispatch+0x6e>
    {
        return_value = _txm_module_manager_object_deallocate((VOID *) param_0);
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f002 f972 	bl	80132c8 <_txm_module_manager_object_deallocate>
 8010fe4:	60f8      	str	r0, [r7, #12]
    }
    return(return_value);
 8010fe6:	68fb      	ldr	r3, [r7, #12]
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3710      	adds	r7, #16
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}

08010ff0 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch>:
/* UINT _txe_thread_entry_exit_notify(
    TX_THREAD *thread_ptr, -> param_0
    VOID (*thread_entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type) -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_entry_exit_notify_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b088      	sub	sp, #32
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	60f8      	str	r0, [r7, #12]
 8010ff8:	60b9      	str	r1, [r7, #8]
 8010ffa:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;
TX_THREAD *thread_ptr = (TX_THREAD *) param_0;
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	61bb      	str	r3, [r7, #24]
TXM_MODULE_THREAD_ENTRY_INFO *thread_entry_info_ptr;
VOID (*thread_entry_exit_notify)(TX_THREAD *, UINT);

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	68db      	ldr	r3, [r3, #12]
 8011004:	f003 0302 	and.w	r3, r3, #2
 8011008:	2b00      	cmp	r3, #0
 801100a:	d030      	beq.n	801106e <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x7e>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 801100c:	22e8      	movs	r2, #232	; 0xe8
 801100e:	68b9      	ldr	r1, [r7, #8]
 8011010:	68f8      	ldr	r0, [r7, #12]
 8011012:	f002 f8a3 	bl	801315c <_txm_module_manager_inside_data_check>
 8011016:	4603      	mov	r3, r0
 8011018:	2b00      	cmp	r3, #0
 801101a:	d111      	bne.n	8011040 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x50>
 801101c:	68bb      	ldr	r3, [r7, #8]
 801101e:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8011022:	d812      	bhi.n	801104a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x5a>
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	699b      	ldr	r3, [r3, #24]
 8011028:	461a      	mov	r2, r3
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	4293      	cmp	r3, r2
 801102e:	d30c      	bcc.n	801104a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x5a>
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	69db      	ldr	r3, [r3, #28]
 801103a:	3301      	adds	r3, #1
 801103c:	429a      	cmp	r2, r3
 801103e:	d804      	bhi.n	801104a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x5a>
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d001      	beq.n	801104a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x5a>
            return(TXM_MODULE_INVALID_MEMORY);
 8011046:	23f4      	movs	r3, #244	; 0xf4
 8011048:	e027      	b.n	801109a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xaa>

        /* Since we need to write to the object, ensure it's valid.  */
        if ((thread_ptr == TX_NULL) || (thread_ptr -> tx_thread_id != TX_THREAD_ID))
 801104a:	69bb      	ldr	r3, [r7, #24]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d004      	beq.n	801105a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x6a>
 8011050:	69bb      	ldr	r3, [r7, #24]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	4a13      	ldr	r2, [pc, #76]	; (80110a4 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xb4>)
 8011056:	4293      	cmp	r3, r2
 8011058:	d001      	beq.n	801105e <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x6e>
            return(TX_THREAD_ERROR);
 801105a:	230e      	movs	r3, #14
 801105c:	e01d      	b.n	801109a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xaa>

        /* Ensure this thread is from the module trying to set the callback.  */
        if (thread_ptr -> tx_thread_module_instance_ptr != module_instance)
 801105e:	69bb      	ldr	r3, [r7, #24]
 8011060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011064:	68fa      	ldr	r2, [r7, #12]
 8011066:	429a      	cmp	r2, r3
 8011068:	d001      	beq.n	801106e <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x7e>
            return(TXM_MODULE_INVALID);
 801106a:	23f2      	movs	r3, #242	; 0xf2
 801106c:	e015      	b.n	801109a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xaa>
    }

    /* Is it a disable request?  */
    if ((void *) param_1 == TX_NULL)
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d102      	bne.n	801107a <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x8a>
    {

        /* Clear the callback.  */
        thread_entry_exit_notify = (VOID (*)(TX_THREAD *, UINT)) TX_NULL;
 8011074:	2300      	movs	r3, #0
 8011076:	61fb      	str	r3, [r7, #28]
 8011078:	e008      	b.n	801108c <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0x9c>
    }
    else
    {

        /* Setup trampoline values.  */
        thread_entry_info_ptr = (TXM_MODULE_THREAD_ENTRY_INFO *) thread_ptr -> tx_thread_module_entry_info_ptr;
 801107a:	69bb      	ldr	r3, [r7, #24]
 801107c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011080:	617b      	str	r3, [r7, #20]
        thread_entry_info_ptr -> txm_module_thread_entry_info_exit_notify = (VOID (*)(TX_THREAD *, UINT)) param_1;
 8011082:	687a      	ldr	r2, [r7, #4]
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	619a      	str	r2, [r3, #24]
        thread_entry_exit_notify = _txm_module_manager_thread_notify_trampoline;
 8011088:	4b07      	ldr	r3, [pc, #28]	; (80110a8 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch+0xb8>)
 801108a:	61fb      	str	r3, [r7, #28]
    }

    return_value = (ALIGN_TYPE) _txe_thread_entry_exit_notify(
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	69f9      	ldr	r1, [r7, #28]
 8011090:	4618      	mov	r0, r3
 8011092:	f7fc f929 	bl	800d2e8 <_txe_thread_entry_exit_notify>
 8011096:	6138      	str	r0, [r7, #16]
        (TX_THREAD *) param_0,
        (VOID (*)(TX_THREAD *notify_thread_ptr, UINT type)) thread_entry_exit_notify
    );
    return(return_value);
 8011098:	693b      	ldr	r3, [r7, #16]
}
 801109a:	4618      	mov	r0, r3
 801109c:	3720      	adds	r7, #32
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}
 80110a2:	bf00      	nop
 80110a4:	54485244 	.word	0x54485244
 80110a8:	08014465 	.word	0x08014465

080110ac <_txm_module_manager_tx_thread_identify_dispatch>:

/* TX_THREAD *_tx_thread_identify(); */
static ALIGN_TYPE _txm_module_manager_tx_thread_identify_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b086      	sub	sp, #24
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	60f8      	str	r0, [r7, #12]
 80110b4:	60b9      	str	r1, [r7, #8]
 80110b6:	607a      	str	r2, [r7, #4]
 80110b8:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    return_value = (ALIGN_TYPE) _tx_thread_identify();
 80110ba:	f7f8 ffa5 	bl	800a008 <_tx_thread_identify>
 80110be:	4603      	mov	r3, r0
 80110c0:	617b      	str	r3, [r7, #20]
    return(return_value);
 80110c2:	697b      	ldr	r3, [r7, #20]
}
 80110c4:	4618      	mov	r0, r3
 80110c6:	3718      	adds	r7, #24
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}

080110cc <_txm_module_manager_tx_thread_info_get_dispatch>:
    ULONG *time_slice, -> extra_parameters[4]
    TX_THREAD **next_thread, -> extra_parameters[5]
    TX_THREAD **next_suspended_thread -> extra_parameters[6]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 80110cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110ce:	b08d      	sub	sp, #52	; 0x34
 80110d0:	af06      	add	r7, sp, #24
 80110d2:	60f8      	str	r0, [r7, #12]
 80110d4:	60b9      	str	r1, [r7, #8]
 80110d6:	607a      	str	r2, [r7, #4]
 80110d8:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	68db      	ldr	r3, [r3, #12]
 80110de:	f003 0302 	and.w	r3, r3, #2
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	f000 80b3 	beq.w	801124e <_txm_module_manager_tx_thread_info_get_dispatch+0x182>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 80110e8:	22e8      	movs	r2, #232	; 0xe8
 80110ea:	68b9      	ldr	r1, [r7, #8]
 80110ec:	68f8      	ldr	r0, [r7, #12]
 80110ee:	f002 f835 	bl	801315c <_txm_module_manager_inside_data_check>
 80110f2:	4603      	mov	r3, r0
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d111      	bne.n	801111c <_txm_module_manager_tx_thread_info_get_dispatch+0x50>
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 80110fe:	d812      	bhi.n	8011126 <_txm_module_manager_tx_thread_info_get_dispatch+0x5a>
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	699b      	ldr	r3, [r3, #24]
 8011104:	461a      	mov	r2, r3
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	4293      	cmp	r3, r2
 801110a:	d30c      	bcc.n	8011126 <_txm_module_manager_tx_thread_info_get_dispatch+0x5a>
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	69db      	ldr	r3, [r3, #28]
 8011116:	3301      	adds	r3, #1
 8011118:	429a      	cmp	r2, r3
 801111a:	d804      	bhi.n	8011126 <_txm_module_manager_tx_thread_info_get_dispatch+0x5a>
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d001      	beq.n	8011126 <_txm_module_manager_tx_thread_info_get_dispatch+0x5a>
            return(TXM_MODULE_INVALID_MEMORY);
 8011122:	23f4      	movs	r3, #244	; 0xf4
 8011124:	e0ba      	b.n	801129c <_txm_module_manager_tx_thread_info_get_dispatch+0x1d0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(CHAR *)))
 8011126:	2204      	movs	r2, #4
 8011128:	6879      	ldr	r1, [r7, #4]
 801112a:	68f8      	ldr	r0, [r7, #12]
 801112c:	f002 f816 	bl	801315c <_txm_module_manager_inside_data_check>
 8011130:	4603      	mov	r3, r0
 8011132:	2b00      	cmp	r3, #0
 8011134:	d104      	bne.n	8011140 <_txm_module_manager_tx_thread_info_get_dispatch+0x74>
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d001      	beq.n	8011140 <_txm_module_manager_tx_thread_info_get_dispatch+0x74>
            return(TXM_MODULE_INVALID_MEMORY);
 801113c:	23f4      	movs	r3, #244	; 0xf4
 801113e:	e0ad      	b.n	801129c <_txm_module_manager_tx_thread_info_get_dispatch+0x1d0>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[7])))
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	221c      	movs	r2, #28
 8011144:	4619      	mov	r1, r3
 8011146:	68f8      	ldr	r0, [r7, #12]
 8011148:	f002 f808 	bl	801315c <_txm_module_manager_inside_data_check>
 801114c:	4603      	mov	r3, r0
 801114e:	2b00      	cmp	r3, #0
 8011150:	d101      	bne.n	8011156 <_txm_module_manager_tx_thread_info_get_dispatch+0x8a>
            return(TXM_MODULE_INVALID_MEMORY);
 8011152:	23f4      	movs	r3, #244	; 0xf4
 8011154:	e0a2      	b.n	801129c <_txm_module_manager_tx_thread_info_get_dispatch+0x1d0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(UINT)))
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	2204      	movs	r2, #4
 801115c:	4619      	mov	r1, r3
 801115e:	68f8      	ldr	r0, [r7, #12]
 8011160:	f001 fffc 	bl	801315c <_txm_module_manager_inside_data_check>
 8011164:	4603      	mov	r3, r0
 8011166:	2b00      	cmp	r3, #0
 8011168:	d105      	bne.n	8011176 <_txm_module_manager_tx_thread_info_get_dispatch+0xaa>
 801116a:	683b      	ldr	r3, [r7, #0]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d001      	beq.n	8011176 <_txm_module_manager_tx_thread_info_get_dispatch+0xaa>
            return(TXM_MODULE_INVALID_MEMORY);
 8011172:	23f4      	movs	r3, #244	; 0xf4
 8011174:	e092      	b.n	801129c <_txm_module_manager_tx_thread_info_get_dispatch+0x1d0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	3304      	adds	r3, #4
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	2204      	movs	r2, #4
 801117e:	4619      	mov	r1, r3
 8011180:	68f8      	ldr	r0, [r7, #12]
 8011182:	f001 ffeb 	bl	801315c <_txm_module_manager_inside_data_check>
 8011186:	4603      	mov	r3, r0
 8011188:	2b00      	cmp	r3, #0
 801118a:	d106      	bne.n	801119a <_txm_module_manager_tx_thread_info_get_dispatch+0xce>
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	3304      	adds	r3, #4
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d001      	beq.n	801119a <_txm_module_manager_tx_thread_info_get_dispatch+0xce>
            return(TXM_MODULE_INVALID_MEMORY);
 8011196:	23f4      	movs	r3, #244	; 0xf4
 8011198:	e080      	b.n	801129c <_txm_module_manager_tx_thread_info_get_dispatch+0x1d0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(UINT)))
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	3308      	adds	r3, #8
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	2204      	movs	r2, #4
 80111a2:	4619      	mov	r1, r3
 80111a4:	68f8      	ldr	r0, [r7, #12]
 80111a6:	f001 ffd9 	bl	801315c <_txm_module_manager_inside_data_check>
 80111aa:	4603      	mov	r3, r0
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d106      	bne.n	80111be <_txm_module_manager_tx_thread_info_get_dispatch+0xf2>
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	3308      	adds	r3, #8
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d001      	beq.n	80111be <_txm_module_manager_tx_thread_info_get_dispatch+0xf2>
            return(TXM_MODULE_INVALID_MEMORY);
 80111ba:	23f4      	movs	r3, #244	; 0xf4
 80111bc:	e06e      	b.n	801129c <_txm_module_manager_tx_thread_info_get_dispatch+0x1d0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(UINT)))
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	330c      	adds	r3, #12
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	2204      	movs	r2, #4
 80111c6:	4619      	mov	r1, r3
 80111c8:	68f8      	ldr	r0, [r7, #12]
 80111ca:	f001 ffc7 	bl	801315c <_txm_module_manager_inside_data_check>
 80111ce:	4603      	mov	r3, r0
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d106      	bne.n	80111e2 <_txm_module_manager_tx_thread_info_get_dispatch+0x116>
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	330c      	adds	r3, #12
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d001      	beq.n	80111e2 <_txm_module_manager_tx_thread_info_get_dispatch+0x116>
            return(TXM_MODULE_INVALID_MEMORY);
 80111de:	23f4      	movs	r3, #244	; 0xf4
 80111e0:	e05c      	b.n	801129c <_txm_module_manager_tx_thread_info_get_dispatch+0x1d0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(ULONG)))
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	3310      	adds	r3, #16
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	2204      	movs	r2, #4
 80111ea:	4619      	mov	r1, r3
 80111ec:	68f8      	ldr	r0, [r7, #12]
 80111ee:	f001 ffb5 	bl	801315c <_txm_module_manager_inside_data_check>
 80111f2:	4603      	mov	r3, r0
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d106      	bne.n	8011206 <_txm_module_manager_tx_thread_info_get_dispatch+0x13a>
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	3310      	adds	r3, #16
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d001      	beq.n	8011206 <_txm_module_manager_tx_thread_info_get_dispatch+0x13a>
            return(TXM_MODULE_INVALID_MEMORY);
 8011202:	23f4      	movs	r3, #244	; 0xf4
 8011204:	e04a      	b.n	801129c <_txm_module_manager_tx_thread_info_get_dispatch+0x1d0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[5], sizeof(TX_THREAD *)))
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	3314      	adds	r3, #20
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	2204      	movs	r2, #4
 801120e:	4619      	mov	r1, r3
 8011210:	68f8      	ldr	r0, [r7, #12]
 8011212:	f001 ffa3 	bl	801315c <_txm_module_manager_inside_data_check>
 8011216:	4603      	mov	r3, r0
 8011218:	2b00      	cmp	r3, #0
 801121a:	d106      	bne.n	801122a <_txm_module_manager_tx_thread_info_get_dispatch+0x15e>
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	3314      	adds	r3, #20
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d001      	beq.n	801122a <_txm_module_manager_tx_thread_info_get_dispatch+0x15e>
            return(TXM_MODULE_INVALID_MEMORY);
 8011226:	23f4      	movs	r3, #244	; 0xf4
 8011228:	e038      	b.n	801129c <_txm_module_manager_tx_thread_info_get_dispatch+0x1d0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[6], sizeof(TX_THREAD *)))
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	3318      	adds	r3, #24
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	2204      	movs	r2, #4
 8011232:	4619      	mov	r1, r3
 8011234:	68f8      	ldr	r0, [r7, #12]
 8011236:	f001 ff91 	bl	801315c <_txm_module_manager_inside_data_check>
 801123a:	4603      	mov	r3, r0
 801123c:	2b00      	cmp	r3, #0
 801123e:	d106      	bne.n	801124e <_txm_module_manager_tx_thread_info_get_dispatch+0x182>
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	3318      	adds	r3, #24
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d001      	beq.n	801124e <_txm_module_manager_tx_thread_info_get_dispatch+0x182>
            return(TXM_MODULE_INVALID_MEMORY);
 801124a:	23f4      	movs	r3, #244	; 0xf4
 801124c:	e026      	b.n	801129c <_txm_module_manager_tx_thread_info_get_dispatch+0x1d0>
    }

    return_value = (ALIGN_TYPE) _txe_thread_info_get(
 801124e:	68b8      	ldr	r0, [r7, #8]
 8011250:	6879      	ldr	r1, [r7, #4]
        (TX_THREAD *) param_0,
        (CHAR **) param_1,
        (UINT *) extra_parameters[0],
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_thread_info_get(
 8011256:	469c      	mov	ip, r3
        (ULONG *) extra_parameters[1],
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	3304      	adds	r3, #4
 801125c:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_thread_info_get(
 801125e:	469e      	mov	lr, r3
        (UINT *) extra_parameters[2],
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	3308      	adds	r3, #8
 8011264:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_thread_info_get(
 8011266:	461a      	mov	r2, r3
        (UINT *) extra_parameters[3],
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	330c      	adds	r3, #12
 801126c:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_thread_info_get(
 801126e:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[4],
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	3310      	adds	r3, #16
 8011274:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_thread_info_get(
 8011276:	461d      	mov	r5, r3
        (TX_THREAD **) extra_parameters[5],
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	3314      	adds	r3, #20
 801127c:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_thread_info_get(
 801127e:	461e      	mov	r6, r3
        (TX_THREAD **) extra_parameters[6]
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	3318      	adds	r3, #24
 8011284:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_thread_info_get(
 8011286:	9304      	str	r3, [sp, #16]
 8011288:	9603      	str	r6, [sp, #12]
 801128a:	9502      	str	r5, [sp, #8]
 801128c:	9401      	str	r4, [sp, #4]
 801128e:	9200      	str	r2, [sp, #0]
 8011290:	4673      	mov	r3, lr
 8011292:	4662      	mov	r2, ip
 8011294:	f7fc f848 	bl	800d328 <_txe_thread_info_get>
 8011298:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 801129a:	697b      	ldr	r3, [r7, #20]
}
 801129c:	4618      	mov	r0, r3
 801129e:	371c      	adds	r7, #28
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080112a4 <_txm_module_manager_tx_thread_interrupt_control_dispatch>:

/* UINT _tx_thread_interrupt_control(
    UINT new_posture -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_interrupt_control_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
 80112ac:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_USER_MODE)
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	68db      	ldr	r3, [r3, #12]
 80112b2:	f003 0301 	and.w	r3, r3, #1
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d001      	beq.n	80112be <_txm_module_manager_tx_thread_interrupt_control_dispatch+0x1a>
        return(TXM_MODULE_INVALID_PROPERTIES);
 80112ba:	23f3      	movs	r3, #243	; 0xf3
 80112bc:	e004      	b.n	80112c8 <_txm_module_manager_tx_thread_interrupt_control_dispatch+0x24>

    return_value = (ALIGN_TYPE) _tx_thread_interrupt_control(
 80112be:	6838      	ldr	r0, [r7, #0]
 80112c0:	f7ef f84e 	bl	8000360 <_tx_thread_interrupt_control>
 80112c4:	60f8      	str	r0, [r7, #12]
        (UINT) param_0
    );
    return(return_value);
 80112c6:	68fb      	ldr	r3, [r7, #12]
}
 80112c8:	4618      	mov	r0, r3
 80112ca:	3710      	adds	r7, #16
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}

080112d0 <_txm_module_manager_tx_thread_performance_info_get_dispatch>:
    ULONG *timeouts, -> extra_parameters[6]
    ULONG *wait_aborts, -> extra_parameters[7]
    TX_THREAD **last_preempted_by -> extra_parameters[8]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_performance_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 80112d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112d2:	b091      	sub	sp, #68	; 0x44
 80112d4:	af08      	add	r7, sp, #32
 80112d6:	6178      	str	r0, [r7, #20]
 80112d8:	6139      	str	r1, [r7, #16]
 80112da:	60fa      	str	r2, [r7, #12]
 80112dc:	60bb      	str	r3, [r7, #8]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	68db      	ldr	r3, [r3, #12]
 80112e2:	f003 0302 	and.w	r3, r3, #2
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	f000 80d7 	beq.w	801149a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x1ca>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 80112ec:	22e8      	movs	r2, #232	; 0xe8
 80112ee:	6939      	ldr	r1, [r7, #16]
 80112f0:	6978      	ldr	r0, [r7, #20]
 80112f2:	f001 ff33 	bl	801315c <_txm_module_manager_inside_data_check>
 80112f6:	4603      	mov	r3, r0
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d111      	bne.n	8011320 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x50>
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8011302:	d812      	bhi.n	801132a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x5a>
 8011304:	697b      	ldr	r3, [r7, #20]
 8011306:	699b      	ldr	r3, [r3, #24]
 8011308:	461a      	mov	r2, r3
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	4293      	cmp	r3, r2
 801130e:	d30c      	bcc.n	801132a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x5a>
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	69db      	ldr	r3, [r3, #28]
 801131a:	3301      	adds	r3, #1
 801131c:	429a      	cmp	r2, r3
 801131e:	d804      	bhi.n	801132a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x5a>
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d001      	beq.n	801132a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x5a>
            return(TXM_MODULE_INVALID_MEMORY);
 8011326:	23f4      	movs	r3, #244	; 0xf4
 8011328:	e0ea      	b.n	8011500 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x230>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 801132a:	2204      	movs	r2, #4
 801132c:	68f9      	ldr	r1, [r7, #12]
 801132e:	6978      	ldr	r0, [r7, #20]
 8011330:	f001 ff14 	bl	801315c <_txm_module_manager_inside_data_check>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d104      	bne.n	8011344 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x74>
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d001      	beq.n	8011344 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x74>
            return(TXM_MODULE_INVALID_MEMORY);
 8011340:	23f4      	movs	r3, #244	; 0xf4
 8011342:	e0dd      	b.n	8011500 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x230>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[9])))
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	2224      	movs	r2, #36	; 0x24
 8011348:	4619      	mov	r1, r3
 801134a:	6978      	ldr	r0, [r7, #20]
 801134c:	f001 ff06 	bl	801315c <_txm_module_manager_inside_data_check>
 8011350:	4603      	mov	r3, r0
 8011352:	2b00      	cmp	r3, #0
 8011354:	d101      	bne.n	801135a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x8a>
            return(TXM_MODULE_INVALID_MEMORY);
 8011356:	23f4      	movs	r3, #244	; 0xf4
 8011358:	e0d2      	b.n	8011500 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x230>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	2204      	movs	r2, #4
 8011360:	4619      	mov	r1, r3
 8011362:	6978      	ldr	r0, [r7, #20]
 8011364:	f001 fefa 	bl	801315c <_txm_module_manager_inside_data_check>
 8011368:	4603      	mov	r3, r0
 801136a:	2b00      	cmp	r3, #0
 801136c:	d105      	bne.n	801137a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0xaa>
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d001      	beq.n	801137a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0xaa>
            return(TXM_MODULE_INVALID_MEMORY);
 8011376:	23f4      	movs	r3, #244	; 0xf4
 8011378:	e0c2      	b.n	8011500 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x230>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	3304      	adds	r3, #4
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	2204      	movs	r2, #4
 8011382:	4619      	mov	r1, r3
 8011384:	6978      	ldr	r0, [r7, #20]
 8011386:	f001 fee9 	bl	801315c <_txm_module_manager_inside_data_check>
 801138a:	4603      	mov	r3, r0
 801138c:	2b00      	cmp	r3, #0
 801138e:	d106      	bne.n	801139e <_txm_module_manager_tx_thread_performance_info_get_dispatch+0xce>
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	3304      	adds	r3, #4
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d001      	beq.n	801139e <_txm_module_manager_tx_thread_performance_info_get_dispatch+0xce>
            return(TXM_MODULE_INVALID_MEMORY);
 801139a:	23f4      	movs	r3, #244	; 0xf4
 801139c:	e0b0      	b.n	8011500 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x230>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	3308      	adds	r3, #8
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	2204      	movs	r2, #4
 80113a6:	4619      	mov	r1, r3
 80113a8:	6978      	ldr	r0, [r7, #20]
 80113aa:	f001 fed7 	bl	801315c <_txm_module_manager_inside_data_check>
 80113ae:	4603      	mov	r3, r0
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d106      	bne.n	80113c2 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0xf2>
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	3308      	adds	r3, #8
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d001      	beq.n	80113c2 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0xf2>
            return(TXM_MODULE_INVALID_MEMORY);
 80113be:	23f4      	movs	r3, #244	; 0xf4
 80113c0:	e09e      	b.n	8011500 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x230>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 80113c2:	68bb      	ldr	r3, [r7, #8]
 80113c4:	330c      	adds	r3, #12
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	2204      	movs	r2, #4
 80113ca:	4619      	mov	r1, r3
 80113cc:	6978      	ldr	r0, [r7, #20]
 80113ce:	f001 fec5 	bl	801315c <_txm_module_manager_inside_data_check>
 80113d2:	4603      	mov	r3, r0
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d106      	bne.n	80113e6 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x116>
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	330c      	adds	r3, #12
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d001      	beq.n	80113e6 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x116>
            return(TXM_MODULE_INVALID_MEMORY);
 80113e2:	23f4      	movs	r3, #244	; 0xf4
 80113e4:	e08c      	b.n	8011500 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x230>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(ULONG)))
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	3310      	adds	r3, #16
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	2204      	movs	r2, #4
 80113ee:	4619      	mov	r1, r3
 80113f0:	6978      	ldr	r0, [r7, #20]
 80113f2:	f001 feb3 	bl	801315c <_txm_module_manager_inside_data_check>
 80113f6:	4603      	mov	r3, r0
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d106      	bne.n	801140a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x13a>
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	3310      	adds	r3, #16
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d001      	beq.n	801140a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x13a>
            return(TXM_MODULE_INVALID_MEMORY);
 8011406:	23f4      	movs	r3, #244	; 0xf4
 8011408:	e07a      	b.n	8011500 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x230>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[5], sizeof(ULONG)))
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	3314      	adds	r3, #20
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	2204      	movs	r2, #4
 8011412:	4619      	mov	r1, r3
 8011414:	6978      	ldr	r0, [r7, #20]
 8011416:	f001 fea1 	bl	801315c <_txm_module_manager_inside_data_check>
 801141a:	4603      	mov	r3, r0
 801141c:	2b00      	cmp	r3, #0
 801141e:	d106      	bne.n	801142e <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x15e>
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	3314      	adds	r3, #20
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d001      	beq.n	801142e <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x15e>
            return(TXM_MODULE_INVALID_MEMORY);
 801142a:	23f4      	movs	r3, #244	; 0xf4
 801142c:	e068      	b.n	8011500 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x230>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[6], sizeof(ULONG)))
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	3318      	adds	r3, #24
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	2204      	movs	r2, #4
 8011436:	4619      	mov	r1, r3
 8011438:	6978      	ldr	r0, [r7, #20]
 801143a:	f001 fe8f 	bl	801315c <_txm_module_manager_inside_data_check>
 801143e:	4603      	mov	r3, r0
 8011440:	2b00      	cmp	r3, #0
 8011442:	d106      	bne.n	8011452 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x182>
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	3318      	adds	r3, #24
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d001      	beq.n	8011452 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x182>
            return(TXM_MODULE_INVALID_MEMORY);
 801144e:	23f4      	movs	r3, #244	; 0xf4
 8011450:	e056      	b.n	8011500 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x230>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[7], sizeof(ULONG)))
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	331c      	adds	r3, #28
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	2204      	movs	r2, #4
 801145a:	4619      	mov	r1, r3
 801145c:	6978      	ldr	r0, [r7, #20]
 801145e:	f001 fe7d 	bl	801315c <_txm_module_manager_inside_data_check>
 8011462:	4603      	mov	r3, r0
 8011464:	2b00      	cmp	r3, #0
 8011466:	d106      	bne.n	8011476 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x1a6>
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	331c      	adds	r3, #28
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d001      	beq.n	8011476 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x1a6>
            return(TXM_MODULE_INVALID_MEMORY);
 8011472:	23f4      	movs	r3, #244	; 0xf4
 8011474:	e044      	b.n	8011500 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x230>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[8], sizeof(TX_THREAD *)))
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	3320      	adds	r3, #32
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	2204      	movs	r2, #4
 801147e:	4619      	mov	r1, r3
 8011480:	6978      	ldr	r0, [r7, #20]
 8011482:	f001 fe6b 	bl	801315c <_txm_module_manager_inside_data_check>
 8011486:	4603      	mov	r3, r0
 8011488:	2b00      	cmp	r3, #0
 801148a:	d106      	bne.n	801149a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x1ca>
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	3320      	adds	r3, #32
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d001      	beq.n	801149a <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x1ca>
            return(TXM_MODULE_INVALID_MEMORY);
 8011496:	23f4      	movs	r3, #244	; 0xf4
 8011498:	e032      	b.n	8011500 <_txm_module_manager_tx_thread_performance_info_get_dispatch+0x230>
    }

    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 801149a:	6938      	ldr	r0, [r7, #16]
 801149c:	68f9      	ldr	r1, [r7, #12]
        (TX_THREAD *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 80114a2:	469c      	mov	ip, r3
        (ULONG *) extra_parameters[1],
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	3304      	adds	r3, #4
 80114a8:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 80114aa:	469e      	mov	lr, r3
        (ULONG *) extra_parameters[2],
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	3308      	adds	r3, #8
 80114b0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 80114b2:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	330c      	adds	r3, #12
 80114b8:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 80114ba:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[4],
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	3310      	adds	r3, #16
 80114c0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 80114c2:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[5],
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	3314      	adds	r3, #20
 80114c8:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 80114ca:	461e      	mov	r6, r3
        (ULONG *) extra_parameters[6],
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	3318      	adds	r3, #24
 80114d0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 80114d2:	607b      	str	r3, [r7, #4]
        (ULONG *) extra_parameters[7],
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	331c      	adds	r3, #28
 80114d8:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 80114da:	603b      	str	r3, [r7, #0]
        (TX_THREAD **) extra_parameters[8]
 80114dc:	68bb      	ldr	r3, [r7, #8]
 80114de:	3320      	adds	r3, #32
 80114e0:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_info_get(
 80114e2:	9306      	str	r3, [sp, #24]
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	9305      	str	r3, [sp, #20]
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	9304      	str	r3, [sp, #16]
 80114ec:	9603      	str	r6, [sp, #12]
 80114ee:	9502      	str	r5, [sp, #8]
 80114f0:	9401      	str	r4, [sp, #4]
 80114f2:	9200      	str	r2, [sp, #0]
 80114f4:	4673      	mov	r3, lr
 80114f6:	4662      	mov	r2, ip
 80114f8:	f003 fcaa 	bl	8014e50 <_tx_thread_performance_info_get>
 80114fc:	61f8      	str	r0, [r7, #28]
    );
    return(return_value);
 80114fe:	69fb      	ldr	r3, [r7, #28]
}
 8011500:	4618      	mov	r0, r3
 8011502:	3724      	adds	r7, #36	; 0x24
 8011504:	46bd      	mov	sp, r7
 8011506:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011508 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch>:
    ULONG *wait_aborts, -> extra_parameters[6]
    ULONG *non_idle_returns, -> extra_parameters[7]
    ULONG *idle_returns -> extra_parameters[8]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_performance_system_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8011508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801150a:	b091      	sub	sp, #68	; 0x44
 801150c:	af08      	add	r7, sp, #32
 801150e:	6178      	str	r0, [r7, #20]
 8011510:	6139      	str	r1, [r7, #16]
 8011512:	60fa      	str	r2, [r7, #12]
 8011514:	60bb      	str	r3, [r7, #8]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	68db      	ldr	r3, [r3, #12]
 801151a:	f003 0302 	and.w	r3, r3, #2
 801151e:	2b00      	cmp	r3, #0
 8011520:	f000 80c5 	beq.w	80116ae <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x1a6>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(ULONG)))
 8011524:	2204      	movs	r2, #4
 8011526:	6939      	ldr	r1, [r7, #16]
 8011528:	6978      	ldr	r0, [r7, #20]
 801152a:	f001 fe17 	bl	801315c <_txm_module_manager_inside_data_check>
 801152e:	4603      	mov	r3, r0
 8011530:	2b00      	cmp	r3, #0
 8011532:	d104      	bne.n	801153e <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x36>
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d001      	beq.n	801153e <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x36>
            return(TXM_MODULE_INVALID_MEMORY);
 801153a:	23f4      	movs	r3, #244	; 0xf4
 801153c:	e0ea      	b.n	8011714 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x20c>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 801153e:	2204      	movs	r2, #4
 8011540:	68f9      	ldr	r1, [r7, #12]
 8011542:	6978      	ldr	r0, [r7, #20]
 8011544:	f001 fe0a 	bl	801315c <_txm_module_manager_inside_data_check>
 8011548:	4603      	mov	r3, r0
 801154a:	2b00      	cmp	r3, #0
 801154c:	d104      	bne.n	8011558 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x50>
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d001      	beq.n	8011558 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x50>
            return(TXM_MODULE_INVALID_MEMORY);
 8011554:	23f4      	movs	r3, #244	; 0xf4
 8011556:	e0dd      	b.n	8011714 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x20c>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[9])))
 8011558:	68bb      	ldr	r3, [r7, #8]
 801155a:	2224      	movs	r2, #36	; 0x24
 801155c:	4619      	mov	r1, r3
 801155e:	6978      	ldr	r0, [r7, #20]
 8011560:	f001 fdfc 	bl	801315c <_txm_module_manager_inside_data_check>
 8011564:	4603      	mov	r3, r0
 8011566:	2b00      	cmp	r3, #0
 8011568:	d101      	bne.n	801156e <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x66>
            return(TXM_MODULE_INVALID_MEMORY);
 801156a:	23f4      	movs	r3, #244	; 0xf4
 801156c:	e0d2      	b.n	8011714 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x20c>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	2204      	movs	r2, #4
 8011574:	4619      	mov	r1, r3
 8011576:	6978      	ldr	r0, [r7, #20]
 8011578:	f001 fdf0 	bl	801315c <_txm_module_manager_inside_data_check>
 801157c:	4603      	mov	r3, r0
 801157e:	2b00      	cmp	r3, #0
 8011580:	d105      	bne.n	801158e <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x86>
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d001      	beq.n	801158e <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x86>
            return(TXM_MODULE_INVALID_MEMORY);
 801158a:	23f4      	movs	r3, #244	; 0xf4
 801158c:	e0c2      	b.n	8011714 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x20c>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	3304      	adds	r3, #4
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	2204      	movs	r2, #4
 8011596:	4619      	mov	r1, r3
 8011598:	6978      	ldr	r0, [r7, #20]
 801159a:	f001 fddf 	bl	801315c <_txm_module_manager_inside_data_check>
 801159e:	4603      	mov	r3, r0
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d106      	bne.n	80115b2 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0xaa>
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	3304      	adds	r3, #4
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d001      	beq.n	80115b2 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0xaa>
            return(TXM_MODULE_INVALID_MEMORY);
 80115ae:	23f4      	movs	r3, #244	; 0xf4
 80115b0:	e0b0      	b.n	8011714 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x20c>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	3308      	adds	r3, #8
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	2204      	movs	r2, #4
 80115ba:	4619      	mov	r1, r3
 80115bc:	6978      	ldr	r0, [r7, #20]
 80115be:	f001 fdcd 	bl	801315c <_txm_module_manager_inside_data_check>
 80115c2:	4603      	mov	r3, r0
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d106      	bne.n	80115d6 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0xce>
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	3308      	adds	r3, #8
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d001      	beq.n	80115d6 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0xce>
            return(TXM_MODULE_INVALID_MEMORY);
 80115d2:	23f4      	movs	r3, #244	; 0xf4
 80115d4:	e09e      	b.n	8011714 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x20c>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	330c      	adds	r3, #12
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	2204      	movs	r2, #4
 80115de:	4619      	mov	r1, r3
 80115e0:	6978      	ldr	r0, [r7, #20]
 80115e2:	f001 fdbb 	bl	801315c <_txm_module_manager_inside_data_check>
 80115e6:	4603      	mov	r3, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d106      	bne.n	80115fa <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0xf2>
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	330c      	adds	r3, #12
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d001      	beq.n	80115fa <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0xf2>
            return(TXM_MODULE_INVALID_MEMORY);
 80115f6:	23f4      	movs	r3, #244	; 0xf4
 80115f8:	e08c      	b.n	8011714 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x20c>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[4], sizeof(ULONG)))
 80115fa:	68bb      	ldr	r3, [r7, #8]
 80115fc:	3310      	adds	r3, #16
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	2204      	movs	r2, #4
 8011602:	4619      	mov	r1, r3
 8011604:	6978      	ldr	r0, [r7, #20]
 8011606:	f001 fda9 	bl	801315c <_txm_module_manager_inside_data_check>
 801160a:	4603      	mov	r3, r0
 801160c:	2b00      	cmp	r3, #0
 801160e:	d106      	bne.n	801161e <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x116>
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	3310      	adds	r3, #16
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d001      	beq.n	801161e <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x116>
            return(TXM_MODULE_INVALID_MEMORY);
 801161a:	23f4      	movs	r3, #244	; 0xf4
 801161c:	e07a      	b.n	8011714 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x20c>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[5], sizeof(ULONG)))
 801161e:	68bb      	ldr	r3, [r7, #8]
 8011620:	3314      	adds	r3, #20
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	2204      	movs	r2, #4
 8011626:	4619      	mov	r1, r3
 8011628:	6978      	ldr	r0, [r7, #20]
 801162a:	f001 fd97 	bl	801315c <_txm_module_manager_inside_data_check>
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	d106      	bne.n	8011642 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x13a>
 8011634:	68bb      	ldr	r3, [r7, #8]
 8011636:	3314      	adds	r3, #20
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d001      	beq.n	8011642 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x13a>
            return(TXM_MODULE_INVALID_MEMORY);
 801163e:	23f4      	movs	r3, #244	; 0xf4
 8011640:	e068      	b.n	8011714 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x20c>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[6], sizeof(ULONG)))
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	3318      	adds	r3, #24
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	2204      	movs	r2, #4
 801164a:	4619      	mov	r1, r3
 801164c:	6978      	ldr	r0, [r7, #20]
 801164e:	f001 fd85 	bl	801315c <_txm_module_manager_inside_data_check>
 8011652:	4603      	mov	r3, r0
 8011654:	2b00      	cmp	r3, #0
 8011656:	d106      	bne.n	8011666 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x15e>
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	3318      	adds	r3, #24
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d001      	beq.n	8011666 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x15e>
            return(TXM_MODULE_INVALID_MEMORY);
 8011662:	23f4      	movs	r3, #244	; 0xf4
 8011664:	e056      	b.n	8011714 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x20c>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[7], sizeof(ULONG)))
 8011666:	68bb      	ldr	r3, [r7, #8]
 8011668:	331c      	adds	r3, #28
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	2204      	movs	r2, #4
 801166e:	4619      	mov	r1, r3
 8011670:	6978      	ldr	r0, [r7, #20]
 8011672:	f001 fd73 	bl	801315c <_txm_module_manager_inside_data_check>
 8011676:	4603      	mov	r3, r0
 8011678:	2b00      	cmp	r3, #0
 801167a:	d106      	bne.n	801168a <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x182>
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	331c      	adds	r3, #28
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d001      	beq.n	801168a <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x182>
            return(TXM_MODULE_INVALID_MEMORY);
 8011686:	23f4      	movs	r3, #244	; 0xf4
 8011688:	e044      	b.n	8011714 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x20c>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[8], sizeof(ULONG)))
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	3320      	adds	r3, #32
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	2204      	movs	r2, #4
 8011692:	4619      	mov	r1, r3
 8011694:	6978      	ldr	r0, [r7, #20]
 8011696:	f001 fd61 	bl	801315c <_txm_module_manager_inside_data_check>
 801169a:	4603      	mov	r3, r0
 801169c:	2b00      	cmp	r3, #0
 801169e:	d106      	bne.n	80116ae <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x1a6>
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	3320      	adds	r3, #32
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d001      	beq.n	80116ae <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x1a6>
            return(TXM_MODULE_INVALID_MEMORY);
 80116aa:	23f4      	movs	r3, #244	; 0xf4
 80116ac:	e032      	b.n	8011714 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch+0x20c>
    }

    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 80116ae:	6938      	ldr	r0, [r7, #16]
 80116b0:	68f9      	ldr	r1, [r7, #12]
        (ULONG *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 80116b6:	469c      	mov	ip, r3
        (ULONG *) extra_parameters[1],
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	3304      	adds	r3, #4
 80116bc:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 80116be:	469e      	mov	lr, r3
        (ULONG *) extra_parameters[2],
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	3308      	adds	r3, #8
 80116c4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 80116c6:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3],
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	330c      	adds	r3, #12
 80116cc:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 80116ce:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[4],
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	3310      	adds	r3, #16
 80116d4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 80116d6:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[5],
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	3314      	adds	r3, #20
 80116dc:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 80116de:	461e      	mov	r6, r3
        (ULONG *) extra_parameters[6],
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	3318      	adds	r3, #24
 80116e4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 80116e6:	607b      	str	r3, [r7, #4]
        (ULONG *) extra_parameters[7],
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	331c      	adds	r3, #28
 80116ec:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 80116ee:	603b      	str	r3, [r7, #0]
        (ULONG *) extra_parameters[8]
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	3320      	adds	r3, #32
 80116f4:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_thread_performance_system_info_get(
 80116f6:	9306      	str	r3, [sp, #24]
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	9305      	str	r3, [sp, #20]
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	9304      	str	r3, [sp, #16]
 8011700:	9603      	str	r6, [sp, #12]
 8011702:	9502      	str	r5, [sp, #8]
 8011704:	9401      	str	r4, [sp, #4]
 8011706:	9200      	str	r2, [sp, #0]
 8011708:	4673      	mov	r3, lr
 801170a:	4662      	mov	r2, ip
 801170c:	f003 fbf2 	bl	8014ef4 <_tx_thread_performance_system_info_get>
 8011710:	61f8      	str	r0, [r7, #28]
    );
    return(return_value);
 8011712:	69fb      	ldr	r3, [r7, #28]
}
 8011714:	4618      	mov	r0, r3
 8011716:	3724      	adds	r7, #36	; 0x24
 8011718:	46bd      	mov	sp, r7
 801171a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801171c <_txm_module_manager_tx_thread_preemption_change_dispatch>:
    TX_THREAD *thread_ptr, -> param_0
    UINT new_threshold, -> param_1
    UINT *old_threshold -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_preemption_change_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b086      	sub	sp, #24
 8011720:	af00      	add	r7, sp, #0
 8011722:	60f8      	str	r0, [r7, #12]
 8011724:	60b9      	str	r1, [r7, #8]
 8011726:	607a      	str	r2, [r7, #4]
 8011728:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	68db      	ldr	r3, [r3, #12]
 801172e:	f003 0302 	and.w	r3, r3, #2
 8011732:	2b00      	cmp	r3, #0
 8011734:	d02b      	beq.n	801178e <_txm_module_manager_tx_thread_preemption_change_dispatch+0x72>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 8011736:	22e8      	movs	r2, #232	; 0xe8
 8011738:	68b9      	ldr	r1, [r7, #8]
 801173a:	68f8      	ldr	r0, [r7, #12]
 801173c:	f001 fd0e 	bl	801315c <_txm_module_manager_inside_data_check>
 8011740:	4603      	mov	r3, r0
 8011742:	2b00      	cmp	r3, #0
 8011744:	d111      	bne.n	801176a <_txm_module_manager_tx_thread_preemption_change_dispatch+0x4e>
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 801174c:	d812      	bhi.n	8011774 <_txm_module_manager_tx_thread_preemption_change_dispatch+0x58>
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	699b      	ldr	r3, [r3, #24]
 8011752:	461a      	mov	r2, r3
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	4293      	cmp	r3, r2
 8011758:	d30c      	bcc.n	8011774 <_txm_module_manager_tx_thread_preemption_change_dispatch+0x58>
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	69db      	ldr	r3, [r3, #28]
 8011764:	3301      	adds	r3, #1
 8011766:	429a      	cmp	r2, r3
 8011768:	d804      	bhi.n	8011774 <_txm_module_manager_tx_thread_preemption_change_dispatch+0x58>
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d001      	beq.n	8011774 <_txm_module_manager_tx_thread_preemption_change_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 8011770:	23f4      	movs	r3, #244	; 0xf4
 8011772:	e014      	b.n	801179e <_txm_module_manager_tx_thread_preemption_change_dispatch+0x82>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_2, sizeof(UINT)))
 8011774:	2204      	movs	r2, #4
 8011776:	6839      	ldr	r1, [r7, #0]
 8011778:	68f8      	ldr	r0, [r7, #12]
 801177a:	f001 fcef 	bl	801315c <_txm_module_manager_inside_data_check>
 801177e:	4603      	mov	r3, r0
 8011780:	2b00      	cmp	r3, #0
 8011782:	d104      	bne.n	801178e <_txm_module_manager_tx_thread_preemption_change_dispatch+0x72>
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d001      	beq.n	801178e <_txm_module_manager_tx_thread_preemption_change_dispatch+0x72>
            return(TXM_MODULE_INVALID_MEMORY);
 801178a:	23f4      	movs	r3, #244	; 0xf4
 801178c:	e007      	b.n	801179e <_txm_module_manager_tx_thread_preemption_change_dispatch+0x82>
    }

    return_value = (ALIGN_TYPE) _txe_thread_preemption_change(
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	683a      	ldr	r2, [r7, #0]
 8011792:	6879      	ldr	r1, [r7, #4]
 8011794:	4618      	mov	r0, r3
 8011796:	f7fb fdf5 	bl	800d384 <_txe_thread_preemption_change>
 801179a:	6178      	str	r0, [r7, #20]
        (TX_THREAD *) param_0,
        (UINT) param_1,
        (UINT *) param_2
    );
    return(return_value);
 801179c:	697b      	ldr	r3, [r7, #20]
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3718      	adds	r7, #24
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}

080117a6 <_txm_module_manager_tx_thread_priority_change_dispatch>:
    TX_THREAD *thread_ptr, -> param_0
    UINT new_priority, -> param_1
    UINT *old_priority -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_priority_change_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 80117a6:	b580      	push	{r7, lr}
 80117a8:	b086      	sub	sp, #24
 80117aa:	af00      	add	r7, sp, #0
 80117ac:	60f8      	str	r0, [r7, #12]
 80117ae:	60b9      	str	r1, [r7, #8]
 80117b0:	607a      	str	r2, [r7, #4]
 80117b2:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	68db      	ldr	r3, [r3, #12]
 80117b8:	f003 0302 	and.w	r3, r3, #2
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d02b      	beq.n	8011818 <_txm_module_manager_tx_thread_priority_change_dispatch+0x72>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 80117c0:	22e8      	movs	r2, #232	; 0xe8
 80117c2:	68b9      	ldr	r1, [r7, #8]
 80117c4:	68f8      	ldr	r0, [r7, #12]
 80117c6:	f001 fcc9 	bl	801315c <_txm_module_manager_inside_data_check>
 80117ca:	4603      	mov	r3, r0
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d111      	bne.n	80117f4 <_txm_module_manager_tx_thread_priority_change_dispatch+0x4e>
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 80117d6:	d812      	bhi.n	80117fe <_txm_module_manager_tx_thread_priority_change_dispatch+0x58>
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	699b      	ldr	r3, [r3, #24]
 80117dc:	461a      	mov	r2, r3
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	4293      	cmp	r3, r2
 80117e2:	d30c      	bcc.n	80117fe <_txm_module_manager_tx_thread_priority_change_dispatch+0x58>
 80117e4:	68bb      	ldr	r3, [r7, #8]
 80117e6:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	69db      	ldr	r3, [r3, #28]
 80117ee:	3301      	adds	r3, #1
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d804      	bhi.n	80117fe <_txm_module_manager_tx_thread_priority_change_dispatch+0x58>
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d001      	beq.n	80117fe <_txm_module_manager_tx_thread_priority_change_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 80117fa:	23f4      	movs	r3, #244	; 0xf4
 80117fc:	e014      	b.n	8011828 <_txm_module_manager_tx_thread_priority_change_dispatch+0x82>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_2, sizeof(UINT)))
 80117fe:	2204      	movs	r2, #4
 8011800:	6839      	ldr	r1, [r7, #0]
 8011802:	68f8      	ldr	r0, [r7, #12]
 8011804:	f001 fcaa 	bl	801315c <_txm_module_manager_inside_data_check>
 8011808:	4603      	mov	r3, r0
 801180a:	2b00      	cmp	r3, #0
 801180c:	d104      	bne.n	8011818 <_txm_module_manager_tx_thread_priority_change_dispatch+0x72>
 801180e:	683b      	ldr	r3, [r7, #0]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d001      	beq.n	8011818 <_txm_module_manager_tx_thread_priority_change_dispatch+0x72>
            return(TXM_MODULE_INVALID_MEMORY);
 8011814:	23f4      	movs	r3, #244	; 0xf4
 8011816:	e007      	b.n	8011828 <_txm_module_manager_tx_thread_priority_change_dispatch+0x82>
    }

    return_value = (ALIGN_TYPE) _txe_thread_priority_change(
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	683a      	ldr	r2, [r7, #0]
 801181c:	6879      	ldr	r1, [r7, #4]
 801181e:	4618      	mov	r0, r3
 8011820:	f7fb fdee 	bl	800d400 <_txe_thread_priority_change>
 8011824:	6178      	str	r0, [r7, #20]
        (TX_THREAD *) param_0,
        (UINT) param_1,
        (UINT *) param_2
    );
    return(return_value);
 8011826:	697b      	ldr	r3, [r7, #20]
}
 8011828:	4618      	mov	r0, r3
 801182a:	3718      	adds	r7, #24
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}

08011830 <_txm_module_manager_tx_thread_relinquish_dispatch>:

/* VOID _txe_thread_relinquish(); */
static ALIGN_TYPE _txm_module_manager_tx_thread_relinquish_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b084      	sub	sp, #16
 8011834:	af00      	add	r7, sp, #0
 8011836:	60f8      	str	r0, [r7, #12]
 8011838:	60b9      	str	r1, [r7, #8]
 801183a:	607a      	str	r2, [r7, #4]
 801183c:	603b      	str	r3, [r7, #0]

    _txe_thread_relinquish();
 801183e:	f7fb fe1b 	bl	800d478 <_txe_thread_relinquish>
    return(TX_SUCCESS);
 8011842:	2300      	movs	r3, #0
}
 8011844:	4618      	mov	r0, r3
 8011846:	3710      	adds	r7, #16
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}

0801184c <_txm_module_manager_tx_thread_reset_dispatch>:

/* UINT _txe_thread_reset(
    TX_THREAD *thread_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_reset_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b084      	sub	sp, #16
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	68db      	ldr	r3, [r3, #12]
 801185a:	f003 0302 	and.w	r3, r3, #2
 801185e:	2b00      	cmp	r3, #0
 8011860:	d01e      	beq.n	80118a0 <_txm_module_manager_tx_thread_reset_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 8011862:	22e8      	movs	r2, #232	; 0xe8
 8011864:	6839      	ldr	r1, [r7, #0]
 8011866:	6878      	ldr	r0, [r7, #4]
 8011868:	f001 fc78 	bl	801315c <_txm_module_manager_inside_data_check>
 801186c:	4603      	mov	r3, r0
 801186e:	2b00      	cmp	r3, #0
 8011870:	d111      	bne.n	8011896 <_txm_module_manager_tx_thread_reset_dispatch+0x4a>
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8011878:	d812      	bhi.n	80118a0 <_txm_module_manager_tx_thread_reset_dispatch+0x54>
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	699b      	ldr	r3, [r3, #24]
 801187e:	461a      	mov	r2, r3
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	4293      	cmp	r3, r2
 8011884:	d30c      	bcc.n	80118a0 <_txm_module_manager_tx_thread_reset_dispatch+0x54>
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	69db      	ldr	r3, [r3, #28]
 8011890:	3301      	adds	r3, #1
 8011892:	429a      	cmp	r2, r3
 8011894:	d804      	bhi.n	80118a0 <_txm_module_manager_tx_thread_reset_dispatch+0x54>
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d001      	beq.n	80118a0 <_txm_module_manager_tx_thread_reset_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 801189c:	23f4      	movs	r3, #244	; 0xf4
 801189e:	e005      	b.n	80118ac <_txm_module_manager_tx_thread_reset_dispatch+0x60>
    }

    return_value = (ALIGN_TYPE) _txm_module_manager_thread_reset(
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	4618      	mov	r0, r3
 80118a4:	f002 fe52 	bl	801454c <_txm_module_manager_thread_reset>
 80118a8:	60f8      	str	r0, [r7, #12]
        (TX_THREAD *) param_0
    );
    return(return_value);
 80118aa:	68fb      	ldr	r3, [r7, #12]
}
 80118ac:	4618      	mov	r0, r3
 80118ae:	3710      	adds	r7, #16
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <_txm_module_manager_tx_thread_resume_dispatch>:

/* UINT _txe_thread_resume(
    TX_THREAD *thread_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_resume_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b084      	sub	sp, #16
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	68db      	ldr	r3, [r3, #12]
 80118c2:	f003 0302 	and.w	r3, r3, #2
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d01e      	beq.n	8011908 <_txm_module_manager_tx_thread_resume_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 80118ca:	22e8      	movs	r2, #232	; 0xe8
 80118cc:	6839      	ldr	r1, [r7, #0]
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f001 fc44 	bl	801315c <_txm_module_manager_inside_data_check>
 80118d4:	4603      	mov	r3, r0
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d111      	bne.n	80118fe <_txm_module_manager_tx_thread_resume_dispatch+0x4a>
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 80118e0:	d812      	bhi.n	8011908 <_txm_module_manager_tx_thread_resume_dispatch+0x54>
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	699b      	ldr	r3, [r3, #24]
 80118e6:	461a      	mov	r2, r3
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	4293      	cmp	r3, r2
 80118ec:	d30c      	bcc.n	8011908 <_txm_module_manager_tx_thread_resume_dispatch+0x54>
 80118ee:	683b      	ldr	r3, [r7, #0]
 80118f0:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	69db      	ldr	r3, [r3, #28]
 80118f8:	3301      	adds	r3, #1
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d804      	bhi.n	8011908 <_txm_module_manager_tx_thread_resume_dispatch+0x54>
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d001      	beq.n	8011908 <_txm_module_manager_tx_thread_resume_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 8011904:	23f4      	movs	r3, #244	; 0xf4
 8011906:	e005      	b.n	8011914 <_txm_module_manager_tx_thread_resume_dispatch+0x60>
    }

    return_value = (ALIGN_TYPE) _txe_thread_resume(
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	4618      	mov	r0, r3
 801190c:	f7fb fdd0 	bl	800d4b0 <_txe_thread_resume>
 8011910:	60f8      	str	r0, [r7, #12]
        (TX_THREAD *) param_0
    );
    return(return_value);
 8011912:	68fb      	ldr	r3, [r7, #12]
}
 8011914:	4618      	mov	r0, r3
 8011916:	3710      	adds	r7, #16
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}

0801191c <_txm_module_manager_tx_thread_sleep_dispatch>:

/* UINT _tx_thread_sleep(
    ULONG timer_ticks -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_sleep_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b084      	sub	sp, #16
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    return_value = (ALIGN_TYPE) _tx_thread_sleep(
 8011926:	6838      	ldr	r0, [r7, #0]
 8011928:	f7f8 fe8e 	bl	800a648 <_tx_thread_sleep>
 801192c:	60f8      	str	r0, [r7, #12]
        (ULONG) param_0
    );
    return(return_value);
 801192e:	68fb      	ldr	r3, [r7, #12]
}
 8011930:	4618      	mov	r0, r3
 8011932:	3710      	adds	r7, #16
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <_txm_module_manager_tx_thread_stack_error_notify_dispatch>:

/* UINT _tx_thread_stack_error_notify(
    VOID (*stack_error_handler)(TX_THREAD *thread_ptr) -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_stack_error_notify_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b084      	sub	sp, #16
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_USER_MODE)
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	68db      	ldr	r3, [r3, #12]
 8011946:	f003 0301 	and.w	r3, r3, #1
 801194a:	2b00      	cmp	r3, #0
 801194c:	d001      	beq.n	8011952 <_txm_module_manager_tx_thread_stack_error_notify_dispatch+0x1a>
        return(TXM_MODULE_INVALID_PROPERTIES);
 801194e:	23f3      	movs	r3, #243	; 0xf3
 8011950:	e005      	b.n	801195e <_txm_module_manager_tx_thread_stack_error_notify_dispatch+0x26>

    return_value = (ALIGN_TYPE) _tx_thread_stack_error_notify(
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	4618      	mov	r0, r3
 8011956:	f7f8 fef5 	bl	800a744 <_tx_thread_stack_error_notify>
 801195a:	60f8      	str	r0, [r7, #12]
        (VOID (*)(TX_THREAD *thread_ptr)) param_0
    );
    return(return_value);
 801195c:	68fb      	ldr	r3, [r7, #12]
}
 801195e:	4618      	mov	r0, r3
 8011960:	3710      	adds	r7, #16
 8011962:	46bd      	mov	sp, r7
 8011964:	bd80      	pop	{r7, pc}

08011966 <_txm_module_manager_tx_thread_suspend_dispatch>:

/* UINT _txe_thread_suspend(
    TX_THREAD *thread_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_suspend_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8011966:	b580      	push	{r7, lr}
 8011968:	b084      	sub	sp, #16
 801196a:	af00      	add	r7, sp, #0
 801196c:	6078      	str	r0, [r7, #4]
 801196e:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	68db      	ldr	r3, [r3, #12]
 8011974:	f003 0302 	and.w	r3, r3, #2
 8011978:	2b00      	cmp	r3, #0
 801197a:	d01e      	beq.n	80119ba <_txm_module_manager_tx_thread_suspend_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 801197c:	22e8      	movs	r2, #232	; 0xe8
 801197e:	6839      	ldr	r1, [r7, #0]
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f001 fbeb 	bl	801315c <_txm_module_manager_inside_data_check>
 8011986:	4603      	mov	r3, r0
 8011988:	2b00      	cmp	r3, #0
 801198a:	d111      	bne.n	80119b0 <_txm_module_manager_tx_thread_suspend_dispatch+0x4a>
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8011992:	d812      	bhi.n	80119ba <_txm_module_manager_tx_thread_suspend_dispatch+0x54>
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	699b      	ldr	r3, [r3, #24]
 8011998:	461a      	mov	r2, r3
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	4293      	cmp	r3, r2
 801199e:	d30c      	bcc.n	80119ba <_txm_module_manager_tx_thread_suspend_dispatch+0x54>
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	69db      	ldr	r3, [r3, #28]
 80119aa:	3301      	adds	r3, #1
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d804      	bhi.n	80119ba <_txm_module_manager_tx_thread_suspend_dispatch+0x54>
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d001      	beq.n	80119ba <_txm_module_manager_tx_thread_suspend_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 80119b6:	23f4      	movs	r3, #244	; 0xf4
 80119b8:	e005      	b.n	80119c6 <_txm_module_manager_tx_thread_suspend_dispatch+0x60>
    }

    return_value = (ALIGN_TYPE) _txe_thread_suspend(
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	4618      	mov	r0, r3
 80119be:	f7fb fd95 	bl	800d4ec <_txe_thread_suspend>
 80119c2:	60f8      	str	r0, [r7, #12]
        (TX_THREAD *) param_0
    );
    return(return_value);
 80119c4:	68fb      	ldr	r3, [r7, #12]
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	3710      	adds	r7, #16
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}
	...

080119d0 <_txm_module_manager_tx_thread_system_suspend_dispatch>:

/* VOID _tx_thread_system_suspend(
    TX_THREAD *thread_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_system_suspend_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b086      	sub	sp, #24
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	6039      	str	r1, [r7, #0]

TX_INTERRUPT_SAVE_AREA

TX_THREAD *thread_ptr;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	f003 0302 	and.w	r3, r3, #2
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d025      	beq.n	8011a32 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x62>
    {
        /* Ensure the thread is suspending itself.  */
        if (((TX_THREAD *) param_0) != _tx_thread_current_ptr)
 80119e6:	683a      	ldr	r2, [r7, #0]
 80119e8:	4b24      	ldr	r3, [pc, #144]	; (8011a7c <_txm_module_manager_tx_thread_system_suspend_dispatch+0xac>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d001      	beq.n	80119f4 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x24>
        {
            return(TXM_MODULE_INVALID_MEMORY);
 80119f0:	23f4      	movs	r3, #244	; 0xf4
 80119f2:	e03f      	b.n	8011a74 <_txm_module_manager_tx_thread_system_suspend_dispatch+0xa4>
        }
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 80119f4:	22e8      	movs	r2, #232	; 0xe8
 80119f6:	6839      	ldr	r1, [r7, #0]
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f001 fbaf 	bl	801315c <_txm_module_manager_inside_data_check>
 80119fe:	4603      	mov	r3, r0
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d111      	bne.n	8011a28 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x58>
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8011a0a:	d812      	bhi.n	8011a32 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x62>
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	699b      	ldr	r3, [r3, #24]
 8011a10:	461a      	mov	r2, r3
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	4293      	cmp	r3, r2
 8011a16:	d30c      	bcc.n	8011a32 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x62>
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	69db      	ldr	r3, [r3, #28]
 8011a22:	3301      	adds	r3, #1
 8011a24:	429a      	cmp	r2, r3
 8011a26:	d804      	bhi.n	8011a32 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x62>
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d001      	beq.n	8011a32 <_txm_module_manager_tx_thread_system_suspend_dispatch+0x62>
            return(TXM_MODULE_INVALID_MEMORY);
 8011a2e:	23f4      	movs	r3, #244	; 0xf4
 8011a30:	e020      	b.n	8011a74 <_txm_module_manager_tx_thread_system_suspend_dispatch+0xa4>
    }

    /* Get the thread pointer.  */
    thread_ptr = (TX_THREAD *) param_0;
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011a36:	f3ef 8310 	mrs	r3, PRIMASK
 8011a3a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011a3c:	b672      	cpsid	i
    return(primask_value);
 8011a3e:	68bb      	ldr	r3, [r7, #8]

    /* Disable interrupts temporarily.  */
    TX_DISABLE
 8011a40:	613b      	str	r3, [r7, #16]

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	2201      	movs	r2, #1
 8011a46:	631a      	str	r2, [r3, #48]	; 0x30

    /* Thread state change.  */
    TX_THREAD_STATE_CHANGE(thread_ptr, TX_COMPLETED)

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011a48:	697b      	ldr	r3, [r7, #20]
 8011a4a:	2201      	movs	r2, #1
 8011a4c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  0;
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	2200      	movs	r2, #0
 8011a52:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011a54:	4b0a      	ldr	r3, [pc, #40]	; (8011a80 <_txm_module_manager_tx_thread_system_suspend_dispatch+0xb0>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	3301      	adds	r3, #1
 8011a5a:	4a09      	ldr	r2, [pc, #36]	; (8011a80 <_txm_module_manager_tx_thread_system_suspend_dispatch+0xb0>)
 8011a5c:	6013      	str	r3, [r2, #0]
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	f383 8810 	msr	PRIMASK, r3
}
 8011a68:	bf00      	nop
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr);

    _tx_thread_system_suspend(
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f7f9 f837 	bl	800aae0 <_tx_thread_system_suspend>
        (TX_THREAD *) param_0
    );
    return(TX_SUCCESS);
 8011a72:	2300      	movs	r3, #0
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3718      	adds	r7, #24
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	2400f034 	.word	0x2400f034
 8011a80:	2400f0d0 	.word	0x2400f0d0

08011a84 <_txm_module_manager_tx_thread_terminate_dispatch>:

/* UINT _txe_thread_terminate(
    TX_THREAD *thread_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_terminate_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b084      	sub	sp, #16
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
 8011a8c:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	68db      	ldr	r3, [r3, #12]
 8011a92:	f003 0302 	and.w	r3, r3, #2
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d01e      	beq.n	8011ad8 <_txm_module_manager_tx_thread_terminate_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 8011a9a:	22e8      	movs	r2, #232	; 0xe8
 8011a9c:	6839      	ldr	r1, [r7, #0]
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f001 fb5c 	bl	801315c <_txm_module_manager_inside_data_check>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d111      	bne.n	8011ace <_txm_module_manager_tx_thread_terminate_dispatch+0x4a>
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8011ab0:	d812      	bhi.n	8011ad8 <_txm_module_manager_tx_thread_terminate_dispatch+0x54>
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	699b      	ldr	r3, [r3, #24]
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	4293      	cmp	r3, r2
 8011abc:	d30c      	bcc.n	8011ad8 <_txm_module_manager_tx_thread_terminate_dispatch+0x54>
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	69db      	ldr	r3, [r3, #28]
 8011ac8:	3301      	adds	r3, #1
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d804      	bhi.n	8011ad8 <_txm_module_manager_tx_thread_terminate_dispatch+0x54>
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d001      	beq.n	8011ad8 <_txm_module_manager_tx_thread_terminate_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 8011ad4:	23f4      	movs	r3, #244	; 0xf4
 8011ad6:	e005      	b.n	8011ae4 <_txm_module_manager_tx_thread_terminate_dispatch+0x60>
    }

    return_value = (ALIGN_TYPE) _txe_thread_terminate(
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7fb fd24 	bl	800d528 <_txe_thread_terminate>
 8011ae0:	60f8      	str	r0, [r7, #12]
        (TX_THREAD *) param_0
    );
    return(return_value);
 8011ae2:	68fb      	ldr	r3, [r7, #12]
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3710      	adds	r7, #16
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <_txm_module_manager_tx_thread_time_slice_change_dispatch>:
    TX_THREAD *thread_ptr, -> param_0
    ULONG new_time_slice, -> param_1
    ULONG *old_time_slice -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_time_slice_change_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b086      	sub	sp, #24
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	60f8      	str	r0, [r7, #12]
 8011af4:	60b9      	str	r1, [r7, #8]
 8011af6:	607a      	str	r2, [r7, #4]
 8011af8:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	68db      	ldr	r3, [r3, #12]
 8011afe:	f003 0302 	and.w	r3, r3, #2
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d02b      	beq.n	8011b5e <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x72>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 8011b06:	22e8      	movs	r2, #232	; 0xe8
 8011b08:	68b9      	ldr	r1, [r7, #8]
 8011b0a:	68f8      	ldr	r0, [r7, #12]
 8011b0c:	f001 fb26 	bl	801315c <_txm_module_manager_inside_data_check>
 8011b10:	4603      	mov	r3, r0
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d111      	bne.n	8011b3a <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x4e>
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8011b1c:	d812      	bhi.n	8011b44 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x58>
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	699b      	ldr	r3, [r3, #24]
 8011b22:	461a      	mov	r2, r3
 8011b24:	68bb      	ldr	r3, [r7, #8]
 8011b26:	4293      	cmp	r3, r2
 8011b28:	d30c      	bcc.n	8011b44 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x58>
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	69db      	ldr	r3, [r3, #28]
 8011b34:	3301      	adds	r3, #1
 8011b36:	429a      	cmp	r2, r3
 8011b38:	d804      	bhi.n	8011b44 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x58>
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d001      	beq.n	8011b44 <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 8011b40:	23f4      	movs	r3, #244	; 0xf4
 8011b42:	e014      	b.n	8011b6e <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x82>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_2, sizeof(ULONG)))
 8011b44:	2204      	movs	r2, #4
 8011b46:	6839      	ldr	r1, [r7, #0]
 8011b48:	68f8      	ldr	r0, [r7, #12]
 8011b4a:	f001 fb07 	bl	801315c <_txm_module_manager_inside_data_check>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d104      	bne.n	8011b5e <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x72>
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d001      	beq.n	8011b5e <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x72>
            return(TXM_MODULE_INVALID_MEMORY);
 8011b5a:	23f4      	movs	r3, #244	; 0xf4
 8011b5c:	e007      	b.n	8011b6e <_txm_module_manager_tx_thread_time_slice_change_dispatch+0x82>
    }

    return_value = (ALIGN_TYPE) _txe_thread_time_slice_change(
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	683a      	ldr	r2, [r7, #0]
 8011b62:	6879      	ldr	r1, [r7, #4]
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7fb fd0b 	bl	800d580 <_txe_thread_time_slice_change>
 8011b6a:	6178      	str	r0, [r7, #20]
        (TX_THREAD *) param_0,
        (ULONG) param_1,
        (ULONG *) param_2
    );
    return(return_value);
 8011b6c:	697b      	ldr	r3, [r7, #20]
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3718      	adds	r7, #24
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}

08011b76 <_txm_module_manager_tx_thread_wait_abort_dispatch>:

/* UINT _txe_thread_wait_abort(
    TX_THREAD *thread_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_thread_wait_abort_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8011b76:	b580      	push	{r7, lr}
 8011b78:	b084      	sub	sp, #16
 8011b7a:	af00      	add	r7, sp, #0
 8011b7c:	6078      	str	r0, [r7, #4]
 8011b7e:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	68db      	ldr	r3, [r3, #12]
 8011b84:	f003 0302 	and.w	r3, r3, #2
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d01e      	beq.n	8011bca <_txm_module_manager_tx_thread_wait_abort_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_THREAD)))
 8011b8c:	22e8      	movs	r2, #232	; 0xe8
 8011b8e:	6839      	ldr	r1, [r7, #0]
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f001 fae3 	bl	801315c <_txm_module_manager_inside_data_check>
 8011b96:	4603      	mov	r3, r0
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d111      	bne.n	8011bc0 <_txm_module_manager_tx_thread_wait_abort_dispatch+0x4a>
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	f113 0fe9 	cmn.w	r3, #233	; 0xe9
 8011ba2:	d812      	bhi.n	8011bca <_txm_module_manager_tx_thread_wait_abort_dispatch+0x54>
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	699b      	ldr	r3, [r3, #24]
 8011ba8:	461a      	mov	r2, r3
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	4293      	cmp	r3, r2
 8011bae:	d30c      	bcc.n	8011bca <_txm_module_manager_tx_thread_wait_abort_dispatch+0x54>
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	69db      	ldr	r3, [r3, #28]
 8011bba:	3301      	adds	r3, #1
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	d804      	bhi.n	8011bca <_txm_module_manager_tx_thread_wait_abort_dispatch+0x54>
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d001      	beq.n	8011bca <_txm_module_manager_tx_thread_wait_abort_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 8011bc6:	23f4      	movs	r3, #244	; 0xf4
 8011bc8:	e005      	b.n	8011bd6 <_txm_module_manager_tx_thread_wait_abort_dispatch+0x60>
    }

    return_value = (ALIGN_TYPE) _txe_thread_wait_abort(
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7fb fd0d 	bl	800d5ec <_txe_thread_wait_abort>
 8011bd2:	60f8      	str	r0, [r7, #12]
        (TX_THREAD *) param_0
    );
    return(return_value);
 8011bd4:	68fb      	ldr	r3, [r7, #12]
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3710      	adds	r7, #16
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}

08011bde <_txm_module_manager_tx_time_get_dispatch>:

/* ULONG _tx_time_get(); */
static ALIGN_TYPE _txm_module_manager_tx_time_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8011bde:	b580      	push	{r7, lr}
 8011be0:	b086      	sub	sp, #24
 8011be2:	af00      	add	r7, sp, #0
 8011be4:	60f8      	str	r0, [r7, #12]
 8011be6:	60b9      	str	r1, [r7, #8]
 8011be8:	607a      	str	r2, [r7, #4]
 8011bea:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    return_value = (ALIGN_TYPE) _tx_time_get();
 8011bec:	f7f9 faf2 	bl	800b1d4 <_tx_time_get>
 8011bf0:	6178      	str	r0, [r7, #20]
    return(return_value);
 8011bf2:	697b      	ldr	r3, [r7, #20]
}
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	3718      	adds	r7, #24
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd80      	pop	{r7, pc}

08011bfc <_txm_module_manager_tx_time_set_dispatch>:

/* VOID _tx_time_set(
    ULONG new_time -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_time_set_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b082      	sub	sp, #8
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]

    _tx_time_set(
 8011c06:	6838      	ldr	r0, [r7, #0]
 8011c08:	f7f9 fb00 	bl	800b20c <_tx_time_set>
        (ULONG) param_0
    );
    return(TX_SUCCESS);
 8011c0c:	2300      	movs	r3, #0
}
 8011c0e:	4618      	mov	r0, r3
 8011c10:	3708      	adds	r7, #8
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}

08011c16 <_txm_module_manager_tx_timer_activate_dispatch>:

/* UINT _txe_timer_activate(
    TX_TIMER *timer_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_timer_activate_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8011c16:	b580      	push	{r7, lr}
 8011c18:	b084      	sub	sp, #16
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	6078      	str	r0, [r7, #4]
 8011c1e:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	68db      	ldr	r3, [r3, #12]
 8011c24:	f003 0302 	and.w	r3, r3, #2
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d01e      	beq.n	8011c6a <_txm_module_manager_tx_timer_activate_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_TIMER)))
 8011c2c:	2234      	movs	r2, #52	; 0x34
 8011c2e:	6839      	ldr	r1, [r7, #0]
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f001 fa93 	bl	801315c <_txm_module_manager_inside_data_check>
 8011c36:	4603      	mov	r3, r0
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d111      	bne.n	8011c60 <_txm_module_manager_tx_timer_activate_dispatch+0x4a>
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8011c42:	d812      	bhi.n	8011c6a <_txm_module_manager_tx_timer_activate_dispatch+0x54>
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	699b      	ldr	r3, [r3, #24]
 8011c48:	461a      	mov	r2, r3
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	4293      	cmp	r3, r2
 8011c4e:	d30c      	bcc.n	8011c6a <_txm_module_manager_tx_timer_activate_dispatch+0x54>
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	69db      	ldr	r3, [r3, #28]
 8011c5a:	3301      	adds	r3, #1
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	d804      	bhi.n	8011c6a <_txm_module_manager_tx_timer_activate_dispatch+0x54>
 8011c60:	683b      	ldr	r3, [r7, #0]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d001      	beq.n	8011c6a <_txm_module_manager_tx_timer_activate_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 8011c66:	23f4      	movs	r3, #244	; 0xf4
 8011c68:	e005      	b.n	8011c76 <_txm_module_manager_tx_timer_activate_dispatch+0x60>
    }

    return_value = (ALIGN_TYPE) _txe_timer_activate(
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f7fb fcdb 	bl	800d628 <_txe_timer_activate>
 8011c72:	60f8      	str	r0, [r7, #12]
        (TX_TIMER *) param_0
    );
    return(return_value);
 8011c74:	68fb      	ldr	r3, [r7, #12]
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	3710      	adds	r7, #16
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}

08011c7e <_txm_module_manager_tx_timer_change_dispatch>:
    TX_TIMER *timer_ptr, -> param_0
    ULONG initial_ticks, -> param_1
    ULONG reschedule_ticks -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_timer_change_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 8011c7e:	b580      	push	{r7, lr}
 8011c80:	b086      	sub	sp, #24
 8011c82:	af00      	add	r7, sp, #0
 8011c84:	60f8      	str	r0, [r7, #12]
 8011c86:	60b9      	str	r1, [r7, #8]
 8011c88:	607a      	str	r2, [r7, #4]
 8011c8a:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	68db      	ldr	r3, [r3, #12]
 8011c90:	f003 0302 	and.w	r3, r3, #2
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d01e      	beq.n	8011cd6 <_txm_module_manager_tx_timer_change_dispatch+0x58>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_TIMER)))
 8011c98:	2234      	movs	r2, #52	; 0x34
 8011c9a:	68b9      	ldr	r1, [r7, #8]
 8011c9c:	68f8      	ldr	r0, [r7, #12]
 8011c9e:	f001 fa5d 	bl	801315c <_txm_module_manager_inside_data_check>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d111      	bne.n	8011ccc <_txm_module_manager_tx_timer_change_dispatch+0x4e>
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8011cae:	d812      	bhi.n	8011cd6 <_txm_module_manager_tx_timer_change_dispatch+0x58>
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	699b      	ldr	r3, [r3, #24]
 8011cb4:	461a      	mov	r2, r3
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d30c      	bcc.n	8011cd6 <_txm_module_manager_tx_timer_change_dispatch+0x58>
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	69db      	ldr	r3, [r3, #28]
 8011cc6:	3301      	adds	r3, #1
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d804      	bhi.n	8011cd6 <_txm_module_manager_tx_timer_change_dispatch+0x58>
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d001      	beq.n	8011cd6 <_txm_module_manager_tx_timer_change_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 8011cd2:	23f4      	movs	r3, #244	; 0xf4
 8011cd4:	e007      	b.n	8011ce6 <_txm_module_manager_tx_timer_change_dispatch+0x68>
    }

    return_value = (ALIGN_TYPE) _txe_timer_change(
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	683a      	ldr	r2, [r7, #0]
 8011cda:	6879      	ldr	r1, [r7, #4]
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7fb fcc1 	bl	800d664 <_txe_timer_change>
 8011ce2:	6178      	str	r0, [r7, #20]
        (TX_TIMER *) param_0,
        (ULONG) param_1,
        (ULONG) param_2
    );
    return(return_value);
 8011ce4:	697b      	ldr	r3, [r7, #20]
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3718      	adds	r7, #24
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}
	...

08011cf0 <_txm_module_manager_tx_timer_create_dispatch>:
    ULONG reschedule_ticks, -> extra_parameters[3]
    UINT auto_activate, -> extra_parameters[4]
    UINT timer_control_block_size -> extra_parameters[5]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_timer_create_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8011cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cf2:	b08d      	sub	sp, #52	; 0x34
 8011cf4:	af04      	add	r7, sp, #16
 8011cf6:	60f8      	str	r0, [r7, #12]
 8011cf8:	60b9      	str	r1, [r7, #8]
 8011cfa:	607a      	str	r2, [r7, #4]
 8011cfc:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;
TX_TIMER *timer_ptr;
VOID (*expiration_function)(ULONG);

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	f003 0302 	and.w	r3, r3, #2
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d04b      	beq.n	8011da2 <_txm_module_manager_tx_timer_create_dispatch+0xb2>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_CREATION(module_instance, param_0, sizeof(TX_TIMER)))
 8011d0a:	4b43      	ldr	r3, [pc, #268]	; (8011e18 <_txm_module_manager_tx_timer_create_dispatch+0x128>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2b01      	cmp	r3, #1
 8011d10:	d119      	bne.n	8011d46 <_txm_module_manager_tx_timer_create_dispatch+0x56>
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8011d18:	d815      	bhi.n	8011d46 <_txm_module_manager_tx_timer_create_dispatch+0x56>
 8011d1a:	4b40      	ldr	r3, [pc, #256]	; (8011e1c <_txm_module_manager_tx_timer_create_dispatch+0x12c>)
 8011d1c:	699b      	ldr	r3, [r3, #24]
 8011d1e:	3310      	adds	r3, #16
 8011d20:	68ba      	ldr	r2, [r7, #8]
 8011d22:	429a      	cmp	r2, r3
 8011d24:	d30f      	bcc.n	8011d46 <_txm_module_manager_tx_timer_create_dispatch+0x56>
 8011d26:	68bb      	ldr	r3, [r7, #8]
 8011d28:	3334      	adds	r3, #52	; 0x34
 8011d2a:	4a3c      	ldr	r2, [pc, #240]	; (8011e1c <_txm_module_manager_tx_timer_create_dispatch+0x12c>)
 8011d2c:	6991      	ldr	r1, [r2, #24]
 8011d2e:	4a3b      	ldr	r2, [pc, #236]	; (8011e1c <_txm_module_manager_tx_timer_create_dispatch+0x12c>)
 8011d30:	69d2      	ldr	r2, [r2, #28]
 8011d32:	440a      	add	r2, r1
 8011d34:	4293      	cmp	r3, r2
 8011d36:	d806      	bhi.n	8011d46 <_txm_module_manager_tx_timer_create_dispatch+0x56>
 8011d38:	2134      	movs	r1, #52	; 0x34
 8011d3a:	68b8      	ldr	r0, [r7, #8]
 8011d3c:	f002 fda8 	bl	8014890 <_txm_module_manager_object_size_check>
 8011d40:	4603      	mov	r3, r0
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d004      	beq.n	8011d50 <_txm_module_manager_tx_timer_create_dispatch+0x60>
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d001      	beq.n	8011d50 <_txm_module_manager_tx_timer_create_dispatch+0x60>
            return(TXM_MODULE_INVALID_MEMORY);
 8011d4c:	23f4      	movs	r3, #244	; 0xf4
 8011d4e:	e05f      	b.n	8011e10 <_txm_module_manager_tx_timer_create_dispatch+0x120>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 8011d50:	2201      	movs	r2, #1
 8011d52:	6879      	ldr	r1, [r7, #4]
 8011d54:	68f8      	ldr	r0, [r7, #12]
 8011d56:	f001 fa01 	bl	801315c <_txm_module_manager_inside_data_check>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d115      	bne.n	8011d8c <_txm_module_manager_tx_timer_create_dispatch+0x9c>
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d66:	d00c      	beq.n	8011d82 <_txm_module_manager_tx_timer_create_dispatch+0x92>
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	699b      	ldr	r3, [r3, #24]
 8011d6c:	461a      	mov	r2, r3
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	4293      	cmp	r3, r2
 8011d72:	d306      	bcc.n	8011d82 <_txm_module_manager_tx_timer_create_dispatch+0x92>
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	1c5a      	adds	r2, r3, #1
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	69db      	ldr	r3, [r3, #28]
 8011d7c:	3301      	adds	r3, #1
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	d904      	bls.n	8011d8c <_txm_module_manager_tx_timer_create_dispatch+0x9c>
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d001      	beq.n	8011d8c <_txm_module_manager_tx_timer_create_dispatch+0x9c>
            return(TXM_MODULE_INVALID_MEMORY);
 8011d88:	23f4      	movs	r3, #244	; 0xf4
 8011d8a:	e041      	b.n	8011e10 <_txm_module_manager_tx_timer_create_dispatch+0x120>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[6])))
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	2218      	movs	r2, #24
 8011d90:	4619      	mov	r1, r3
 8011d92:	68f8      	ldr	r0, [r7, #12]
 8011d94:	f001 f9e2 	bl	801315c <_txm_module_manager_inside_data_check>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d101      	bne.n	8011da2 <_txm_module_manager_tx_timer_create_dispatch+0xb2>
            return(TXM_MODULE_INVALID_MEMORY);
 8011d9e:	23f4      	movs	r3, #244	; 0xf4
 8011da0:	e036      	b.n	8011e10 <_txm_module_manager_tx_timer_create_dispatch+0x120>
    }

    /* Is it a disable request?  */
    if ((void *) extra_parameters[0] == TX_NULL)
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d102      	bne.n	8011db0 <_txm_module_manager_tx_timer_create_dispatch+0xc0>
    {

        /* Clear the callback.  */
        expiration_function = (VOID (*)(ULONG)) TX_NULL;
 8011daa:	2300      	movs	r3, #0
 8011dac:	61fb      	str	r3, [r7, #28]
 8011dae:	e001      	b.n	8011db4 <_txm_module_manager_tx_timer_create_dispatch+0xc4>
    }
    else
    {

        /* Set trampoline callback.  */
        expiration_function = _txm_module_manager_timer_notify_trampoline;
 8011db0:	4b1b      	ldr	r3, [pc, #108]	; (8011e20 <_txm_module_manager_tx_timer_create_dispatch+0x130>)
 8011db2:	61fb      	str	r3, [r7, #28]
    }

    return_value = (ALIGN_TYPE) _txe_timer_create(
 8011db4:	68bc      	ldr	r4, [r7, #8]
 8011db6:	687d      	ldr	r5, [r7, #4]
        (TX_TIMER *) param_0,
        (CHAR *) param_1,
        (VOID (*)(ULONG)) expiration_function,
        (ULONG) extra_parameters[1],
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _txe_timer_create(
 8011dbc:	681e      	ldr	r6, [r3, #0]
        (ULONG) extra_parameters[2],
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	3308      	adds	r3, #8
    return_value = (ALIGN_TYPE) _txe_timer_create(
 8011dc2:	681b      	ldr	r3, [r3, #0]
        (ULONG) extra_parameters[3],
 8011dc4:	683a      	ldr	r2, [r7, #0]
 8011dc6:	320c      	adds	r2, #12
    return_value = (ALIGN_TYPE) _txe_timer_create(
 8011dc8:	6812      	ldr	r2, [r2, #0]
        (UINT) extra_parameters[4],
 8011dca:	6839      	ldr	r1, [r7, #0]
 8011dcc:	3110      	adds	r1, #16
    return_value = (ALIGN_TYPE) _txe_timer_create(
 8011dce:	6809      	ldr	r1, [r1, #0]
        (UINT) extra_parameters[5]
 8011dd0:	6838      	ldr	r0, [r7, #0]
 8011dd2:	3014      	adds	r0, #20
    return_value = (ALIGN_TYPE) _txe_timer_create(
 8011dd4:	6800      	ldr	r0, [r0, #0]
 8011dd6:	9003      	str	r0, [sp, #12]
 8011dd8:	9102      	str	r1, [sp, #8]
 8011dda:	9201      	str	r2, [sp, #4]
 8011ddc:	9300      	str	r3, [sp, #0]
 8011dde:	4633      	mov	r3, r6
 8011de0:	69fa      	ldr	r2, [r7, #28]
 8011de2:	4629      	mov	r1, r5
 8011de4:	4620      	mov	r0, r4
 8011de6:	f7fb fc73 	bl	800d6d0 <_txe_timer_create>
 8011dea:	61b8      	str	r0, [r7, #24]
    );

    if (return_value == TX_SUCCESS)
 8011dec:	69bb      	ldr	r3, [r7, #24]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d10d      	bne.n	8011e0e <_txm_module_manager_tx_timer_create_dispatch+0x11e>
    {

        /* Get the object pointer.  */
        timer_ptr = (TX_TIMER *) param_0;
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	617b      	str	r3, [r7, #20]

        /* Setup trampoline values.  */
        if ((void *) extra_parameters[0] != TX_NULL)
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d007      	beq.n	8011e0e <_txm_module_manager_tx_timer_create_dispatch+0x11e>
        {

            timer_ptr -> tx_timer_module_instance = (VOID *) module_instance;
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	68fa      	ldr	r2, [r7, #12]
 8011e02:	62da      	str	r2, [r3, #44]	; 0x2c
            timer_ptr -> tx_timer_module_expiration_function = (VOID (*)(ULONG)) extra_parameters[0];
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	461a      	mov	r2, r3
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
    return(return_value);
 8011e0e:	69bb      	ldr	r3, [r7, #24]
}
 8011e10:	4618      	mov	r0, r3
 8011e12:	3724      	adds	r7, #36	; 0x24
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e18:	2400f6e8 	.word	0x2400f6e8
 8011e1c:	2400f6b4 	.word	0x2400f6b4
 8011e20:	08014619 	.word	0x08014619

08011e24 <_txm_module_manager_tx_timer_deactivate_dispatch>:

/* UINT _txe_timer_deactivate(
    TX_TIMER *timer_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_timer_deactivate_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b084      	sub	sp, #16
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
 8011e2c:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	68db      	ldr	r3, [r3, #12]
 8011e32:	f003 0302 	and.w	r3, r3, #2
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d01e      	beq.n	8011e78 <_txm_module_manager_tx_timer_deactivate_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_TIMER)))
 8011e3a:	2234      	movs	r2, #52	; 0x34
 8011e3c:	6839      	ldr	r1, [r7, #0]
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f001 f98c 	bl	801315c <_txm_module_manager_inside_data_check>
 8011e44:	4603      	mov	r3, r0
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d111      	bne.n	8011e6e <_txm_module_manager_tx_timer_deactivate_dispatch+0x4a>
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8011e50:	d812      	bhi.n	8011e78 <_txm_module_manager_tx_timer_deactivate_dispatch+0x54>
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	699b      	ldr	r3, [r3, #24]
 8011e56:	461a      	mov	r2, r3
 8011e58:	683b      	ldr	r3, [r7, #0]
 8011e5a:	4293      	cmp	r3, r2
 8011e5c:	d30c      	bcc.n	8011e78 <_txm_module_manager_tx_timer_deactivate_dispatch+0x54>
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	69db      	ldr	r3, [r3, #28]
 8011e68:	3301      	adds	r3, #1
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d804      	bhi.n	8011e78 <_txm_module_manager_tx_timer_deactivate_dispatch+0x54>
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d001      	beq.n	8011e78 <_txm_module_manager_tx_timer_deactivate_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 8011e74:	23f4      	movs	r3, #244	; 0xf4
 8011e76:	e005      	b.n	8011e84 <_txm_module_manager_tx_timer_deactivate_dispatch+0x60>
    }

    return_value = (ALIGN_TYPE) _txe_timer_deactivate(
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7fb fcd0 	bl	800d820 <_txe_timer_deactivate>
 8011e80:	60f8      	str	r0, [r7, #12]
        (TX_TIMER *) param_0
    );
    return(return_value);
 8011e82:	68fb      	ldr	r3, [r7, #12]
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3710      	adds	r7, #16
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}

08011e8c <_txm_module_manager_tx_timer_delete_dispatch>:

/* UINT _txe_timer_delete(
    TX_TIMER *timer_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_timer_delete_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b084      	sub	sp, #16
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	68db      	ldr	r3, [r3, #12]
 8011e9a:	f003 0302 	and.w	r3, r3, #2
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d01e      	beq.n	8011ee0 <_txm_module_manager_tx_timer_delete_dispatch+0x54>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_TIMER)))
 8011ea2:	2234      	movs	r2, #52	; 0x34
 8011ea4:	6839      	ldr	r1, [r7, #0]
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	f001 f958 	bl	801315c <_txm_module_manager_inside_data_check>
 8011eac:	4603      	mov	r3, r0
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d111      	bne.n	8011ed6 <_txm_module_manager_tx_timer_delete_dispatch+0x4a>
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8011eb8:	d812      	bhi.n	8011ee0 <_txm_module_manager_tx_timer_delete_dispatch+0x54>
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	699b      	ldr	r3, [r3, #24]
 8011ebe:	461a      	mov	r2, r3
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	4293      	cmp	r3, r2
 8011ec4:	d30c      	bcc.n	8011ee0 <_txm_module_manager_tx_timer_delete_dispatch+0x54>
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	69db      	ldr	r3, [r3, #28]
 8011ed0:	3301      	adds	r3, #1
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	d804      	bhi.n	8011ee0 <_txm_module_manager_tx_timer_delete_dispatch+0x54>
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d001      	beq.n	8011ee0 <_txm_module_manager_tx_timer_delete_dispatch+0x54>
            return(TXM_MODULE_INVALID_MEMORY);
 8011edc:	23f4      	movs	r3, #244	; 0xf4
 8011ede:	e00d      	b.n	8011efc <_txm_module_manager_tx_timer_delete_dispatch+0x70>
    }

    return_value = (ALIGN_TYPE) _txe_timer_delete(
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7fb fcba 	bl	800d85c <_txe_timer_delete>
 8011ee8:	60f8      	str	r0, [r7, #12]
        (TX_TIMER *) param_0
    );

    /* Deallocate object memory.  */
    if (return_value == TX_SUCCESS)
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d104      	bne.n	8011efa <_txm_module_manager_tx_timer_delete_dispatch+0x6e>
    {
        return_value = _txm_module_manager_object_deallocate((VOID *) param_0);
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f001 f9e8 	bl	80132c8 <_txm_module_manager_object_deallocate>
 8011ef8:	60f8      	str	r0, [r7, #12]
    }
    return(return_value);
 8011efa:	68fb      	ldr	r3, [r7, #12]
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3710      	adds	r7, #16
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}

08011f04 <_txm_module_manager_tx_timer_info_get_dispatch>:
    ULONG *remaining_ticks, -> extra_parameters[1]
    ULONG *reschedule_ticks, -> extra_parameters[2]
    TX_TIMER **next_timer -> extra_parameters[3]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_timer_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8011f04:	b5b0      	push	{r4, r5, r7, lr}
 8011f06:	b088      	sub	sp, #32
 8011f08:	af02      	add	r7, sp, #8
 8011f0a:	60f8      	str	r0, [r7, #12]
 8011f0c:	60b9      	str	r1, [r7, #8]
 8011f0e:	607a      	str	r2, [r7, #4]
 8011f10:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	68db      	ldr	r3, [r3, #12]
 8011f16:	f003 0302 	and.w	r3, r3, #2
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d07c      	beq.n	8012018 <_txm_module_manager_tx_timer_info_get_dispatch+0x114>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_TIMER)))
 8011f1e:	2234      	movs	r2, #52	; 0x34
 8011f20:	68b9      	ldr	r1, [r7, #8]
 8011f22:	68f8      	ldr	r0, [r7, #12]
 8011f24:	f001 f91a 	bl	801315c <_txm_module_manager_inside_data_check>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d111      	bne.n	8011f52 <_txm_module_manager_tx_timer_info_get_dispatch+0x4e>
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8011f34:	d812      	bhi.n	8011f5c <_txm_module_manager_tx_timer_info_get_dispatch+0x58>
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	699b      	ldr	r3, [r3, #24]
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	4293      	cmp	r3, r2
 8011f40:	d30c      	bcc.n	8011f5c <_txm_module_manager_tx_timer_info_get_dispatch+0x58>
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	69db      	ldr	r3, [r3, #28]
 8011f4c:	3301      	adds	r3, #1
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	d804      	bhi.n	8011f5c <_txm_module_manager_tx_timer_info_get_dispatch+0x58>
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d001      	beq.n	8011f5c <_txm_module_manager_tx_timer_info_get_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 8011f58:	23f4      	movs	r3, #244	; 0xf4
 8011f5a:	e075      	b.n	8012048 <_txm_module_manager_tx_timer_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(CHAR *)))
 8011f5c:	2204      	movs	r2, #4
 8011f5e:	6879      	ldr	r1, [r7, #4]
 8011f60:	68f8      	ldr	r0, [r7, #12]
 8011f62:	f001 f8fb 	bl	801315c <_txm_module_manager_inside_data_check>
 8011f66:	4603      	mov	r3, r0
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d104      	bne.n	8011f76 <_txm_module_manager_tx_timer_info_get_dispatch+0x72>
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d001      	beq.n	8011f76 <_txm_module_manager_tx_timer_info_get_dispatch+0x72>
            return(TXM_MODULE_INVALID_MEMORY);
 8011f72:	23f4      	movs	r3, #244	; 0xf4
 8011f74:	e068      	b.n	8012048 <_txm_module_manager_tx_timer_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[4])))
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	2210      	movs	r2, #16
 8011f7a:	4619      	mov	r1, r3
 8011f7c:	68f8      	ldr	r0, [r7, #12]
 8011f7e:	f001 f8ed 	bl	801315c <_txm_module_manager_inside_data_check>
 8011f82:	4603      	mov	r3, r0
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d101      	bne.n	8011f8c <_txm_module_manager_tx_timer_info_get_dispatch+0x88>
            return(TXM_MODULE_INVALID_MEMORY);
 8011f88:	23f4      	movs	r3, #244	; 0xf4
 8011f8a:	e05d      	b.n	8012048 <_txm_module_manager_tx_timer_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(UINT)))
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	2204      	movs	r2, #4
 8011f92:	4619      	mov	r1, r3
 8011f94:	68f8      	ldr	r0, [r7, #12]
 8011f96:	f001 f8e1 	bl	801315c <_txm_module_manager_inside_data_check>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d105      	bne.n	8011fac <_txm_module_manager_tx_timer_info_get_dispatch+0xa8>
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d001      	beq.n	8011fac <_txm_module_manager_tx_timer_info_get_dispatch+0xa8>
            return(TXM_MODULE_INVALID_MEMORY);
 8011fa8:	23f4      	movs	r3, #244	; 0xf4
 8011faa:	e04d      	b.n	8012048 <_txm_module_manager_tx_timer_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	3304      	adds	r3, #4
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	2204      	movs	r2, #4
 8011fb4:	4619      	mov	r1, r3
 8011fb6:	68f8      	ldr	r0, [r7, #12]
 8011fb8:	f001 f8d0 	bl	801315c <_txm_module_manager_inside_data_check>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d106      	bne.n	8011fd0 <_txm_module_manager_tx_timer_info_get_dispatch+0xcc>
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	3304      	adds	r3, #4
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d001      	beq.n	8011fd0 <_txm_module_manager_tx_timer_info_get_dispatch+0xcc>
            return(TXM_MODULE_INVALID_MEMORY);
 8011fcc:	23f4      	movs	r3, #244	; 0xf4
 8011fce:	e03b      	b.n	8012048 <_txm_module_manager_tx_timer_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	3308      	adds	r3, #8
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	2204      	movs	r2, #4
 8011fd8:	4619      	mov	r1, r3
 8011fda:	68f8      	ldr	r0, [r7, #12]
 8011fdc:	f001 f8be 	bl	801315c <_txm_module_manager_inside_data_check>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d106      	bne.n	8011ff4 <_txm_module_manager_tx_timer_info_get_dispatch+0xf0>
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	3308      	adds	r3, #8
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d001      	beq.n	8011ff4 <_txm_module_manager_tx_timer_info_get_dispatch+0xf0>
            return(TXM_MODULE_INVALID_MEMORY);
 8011ff0:	23f4      	movs	r3, #244	; 0xf4
 8011ff2:	e029      	b.n	8012048 <_txm_module_manager_tx_timer_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(TX_TIMER *)))
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	330c      	adds	r3, #12
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	2204      	movs	r2, #4
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	68f8      	ldr	r0, [r7, #12]
 8012000:	f001 f8ac 	bl	801315c <_txm_module_manager_inside_data_check>
 8012004:	4603      	mov	r3, r0
 8012006:	2b00      	cmp	r3, #0
 8012008:	d106      	bne.n	8012018 <_txm_module_manager_tx_timer_info_get_dispatch+0x114>
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	330c      	adds	r3, #12
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d001      	beq.n	8012018 <_txm_module_manager_tx_timer_info_get_dispatch+0x114>
            return(TXM_MODULE_INVALID_MEMORY);
 8012014:	23f4      	movs	r3, #244	; 0xf4
 8012016:	e017      	b.n	8012048 <_txm_module_manager_tx_timer_info_get_dispatch+0x144>
    }

    return_value = (ALIGN_TYPE) _txe_timer_info_get(
 8012018:	68b8      	ldr	r0, [r7, #8]
 801201a:	6879      	ldr	r1, [r7, #4]
        (TX_TIMER *) param_0,
        (CHAR **) param_1,
        (UINT *) extra_parameters[0],
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_timer_info_get(
 8012020:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[1],
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	3304      	adds	r3, #4
 8012026:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_timer_info_get(
 8012028:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[2],
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	3308      	adds	r3, #8
 801202e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_timer_info_get(
 8012030:	461a      	mov	r2, r3
        (TX_TIMER **) extra_parameters[3]
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	330c      	adds	r3, #12
 8012036:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txe_timer_info_get(
 8012038:	9301      	str	r3, [sp, #4]
 801203a:	9200      	str	r2, [sp, #0]
 801203c:	462b      	mov	r3, r5
 801203e:	4622      	mov	r2, r4
 8012040:	f7fb fc4a 	bl	800d8d8 <_txe_timer_info_get>
 8012044:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 8012046:	697b      	ldr	r3, [r7, #20]
}
 8012048:	4618      	mov	r0, r3
 801204a:	3718      	adds	r7, #24
 801204c:	46bd      	mov	sp, r7
 801204e:	bdb0      	pop	{r4, r5, r7, pc}

08012050 <_txm_module_manager_tx_timer_performance_info_get_dispatch>:
    ULONG *deactivates, -> extra_parameters[1]
    ULONG *expirations, -> extra_parameters[2]
    ULONG *expiration_adjusts -> extra_parameters[3]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_timer_performance_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8012050:	b5b0      	push	{r4, r5, r7, lr}
 8012052:	b088      	sub	sp, #32
 8012054:	af02      	add	r7, sp, #8
 8012056:	60f8      	str	r0, [r7, #12]
 8012058:	60b9      	str	r1, [r7, #8]
 801205a:	607a      	str	r2, [r7, #4]
 801205c:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	68db      	ldr	r3, [r3, #12]
 8012062:	f003 0302 	and.w	r3, r3, #2
 8012066:	2b00      	cmp	r3, #0
 8012068:	d07c      	beq.n	8012164 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x114>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_OBJECT_FOR_USE(module_instance, param_0, sizeof(TX_TIMER)))
 801206a:	2234      	movs	r2, #52	; 0x34
 801206c:	68b9      	ldr	r1, [r7, #8]
 801206e:	68f8      	ldr	r0, [r7, #12]
 8012070:	f001 f874 	bl	801315c <_txm_module_manager_inside_data_check>
 8012074:	4603      	mov	r3, r0
 8012076:	2b00      	cmp	r3, #0
 8012078:	d111      	bne.n	801209e <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x4e>
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	f113 0f35 	cmn.w	r3, #53	; 0x35
 8012080:	d812      	bhi.n	80120a8 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x58>
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	699b      	ldr	r3, [r3, #24]
 8012086:	461a      	mov	r2, r3
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	4293      	cmp	r3, r2
 801208c:	d30c      	bcc.n	80120a8 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x58>
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	69db      	ldr	r3, [r3, #28]
 8012098:	3301      	adds	r3, #1
 801209a:	429a      	cmp	r2, r3
 801209c:	d804      	bhi.n	80120a8 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x58>
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d001      	beq.n	80120a8 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x58>
            return(TXM_MODULE_INVALID_MEMORY);
 80120a4:	23f4      	movs	r3, #244	; 0xf4
 80120a6:	e075      	b.n	8012194 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 80120a8:	2204      	movs	r2, #4
 80120aa:	6879      	ldr	r1, [r7, #4]
 80120ac:	68f8      	ldr	r0, [r7, #12]
 80120ae:	f001 f855 	bl	801315c <_txm_module_manager_inside_data_check>
 80120b2:	4603      	mov	r3, r0
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d104      	bne.n	80120c2 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x72>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d001      	beq.n	80120c2 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x72>
            return(TXM_MODULE_INVALID_MEMORY);
 80120be:	23f4      	movs	r3, #244	; 0xf4
 80120c0:	e068      	b.n	8012194 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[4])))
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	2210      	movs	r2, #16
 80120c6:	4619      	mov	r1, r3
 80120c8:	68f8      	ldr	r0, [r7, #12]
 80120ca:	f001 f847 	bl	801315c <_txm_module_manager_inside_data_check>
 80120ce:	4603      	mov	r3, r0
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d101      	bne.n	80120d8 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x88>
            return(TXM_MODULE_INVALID_MEMORY);
 80120d4:	23f4      	movs	r3, #244	; 0xf4
 80120d6:	e05d      	b.n	8012194 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	2204      	movs	r2, #4
 80120de:	4619      	mov	r1, r3
 80120e0:	68f8      	ldr	r0, [r7, #12]
 80120e2:	f001 f83b 	bl	801315c <_txm_module_manager_inside_data_check>
 80120e6:	4603      	mov	r3, r0
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d105      	bne.n	80120f8 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0xa8>
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d001      	beq.n	80120f8 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0xa8>
            return(TXM_MODULE_INVALID_MEMORY);
 80120f4:	23f4      	movs	r3, #244	; 0xf4
 80120f6:	e04d      	b.n	8012194 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	3304      	adds	r3, #4
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	2204      	movs	r2, #4
 8012100:	4619      	mov	r1, r3
 8012102:	68f8      	ldr	r0, [r7, #12]
 8012104:	f001 f82a 	bl	801315c <_txm_module_manager_inside_data_check>
 8012108:	4603      	mov	r3, r0
 801210a:	2b00      	cmp	r3, #0
 801210c:	d106      	bne.n	801211c <_txm_module_manager_tx_timer_performance_info_get_dispatch+0xcc>
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	3304      	adds	r3, #4
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d001      	beq.n	801211c <_txm_module_manager_tx_timer_performance_info_get_dispatch+0xcc>
            return(TXM_MODULE_INVALID_MEMORY);
 8012118:	23f4      	movs	r3, #244	; 0xf4
 801211a:	e03b      	b.n	8012194 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	3308      	adds	r3, #8
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	2204      	movs	r2, #4
 8012124:	4619      	mov	r1, r3
 8012126:	68f8      	ldr	r0, [r7, #12]
 8012128:	f001 f818 	bl	801315c <_txm_module_manager_inside_data_check>
 801212c:	4603      	mov	r3, r0
 801212e:	2b00      	cmp	r3, #0
 8012130:	d106      	bne.n	8012140 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0xf0>
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	3308      	adds	r3, #8
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d001      	beq.n	8012140 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0xf0>
            return(TXM_MODULE_INVALID_MEMORY);
 801213c:	23f4      	movs	r3, #244	; 0xf4
 801213e:	e029      	b.n	8012194 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x144>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[3], sizeof(ULONG)))
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	330c      	adds	r3, #12
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	2204      	movs	r2, #4
 8012148:	4619      	mov	r1, r3
 801214a:	68f8      	ldr	r0, [r7, #12]
 801214c:	f001 f806 	bl	801315c <_txm_module_manager_inside_data_check>
 8012150:	4603      	mov	r3, r0
 8012152:	2b00      	cmp	r3, #0
 8012154:	d106      	bne.n	8012164 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x114>
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	330c      	adds	r3, #12
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d001      	beq.n	8012164 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x114>
            return(TXM_MODULE_INVALID_MEMORY);
 8012160:	23f4      	movs	r3, #244	; 0xf4
 8012162:	e017      	b.n	8012194 <_txm_module_manager_tx_timer_performance_info_get_dispatch+0x144>
    }

    return_value = (ALIGN_TYPE) _tx_timer_performance_info_get(
 8012164:	68b8      	ldr	r0, [r7, #8]
 8012166:	6879      	ldr	r1, [r7, #4]
        (TX_TIMER *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_timer_performance_info_get(
 801216c:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[1],
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	3304      	adds	r3, #4
 8012172:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_timer_performance_info_get(
 8012174:	461d      	mov	r5, r3
        (ULONG *) extra_parameters[2],
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	3308      	adds	r3, #8
 801217a:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_timer_performance_info_get(
 801217c:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[3]
 801217e:	683b      	ldr	r3, [r7, #0]
 8012180:	330c      	adds	r3, #12
 8012182:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_timer_performance_info_get(
 8012184:	9301      	str	r3, [sp, #4]
 8012186:	9200      	str	r2, [sp, #0]
 8012188:	462b      	mov	r3, r5
 801218a:	4622      	mov	r2, r4
 801218c:	f002 ff04 	bl	8014f98 <_tx_timer_performance_info_get>
 8012190:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 8012192:	697b      	ldr	r3, [r7, #20]
}
 8012194:	4618      	mov	r0, r3
 8012196:	3718      	adds	r7, #24
 8012198:	46bd      	mov	sp, r7
 801219a:	bdb0      	pop	{r4, r5, r7, pc}

0801219c <_txm_module_manager_tx_timer_performance_system_info_get_dispatch>:
    ULONG *deactivates, -> extra_parameters[0]
    ULONG *expirations, -> extra_parameters[1]
    ULONG *expiration_adjusts -> extra_parameters[2]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_timer_performance_system_info_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 801219c:	b590      	push	{r4, r7, lr}
 801219e:	b089      	sub	sp, #36	; 0x24
 80121a0:	af02      	add	r7, sp, #8
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
 80121a8:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	68db      	ldr	r3, [r3, #12]
 80121ae:	f003 0302 	and.w	r3, r3, #2
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d058      	beq.n	8012268 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0xcc>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(ULONG)))
 80121b6:	2204      	movs	r2, #4
 80121b8:	68b9      	ldr	r1, [r7, #8]
 80121ba:	68f8      	ldr	r0, [r7, #12]
 80121bc:	f000 ffce 	bl	801315c <_txm_module_manager_inside_data_check>
 80121c0:	4603      	mov	r3, r0
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d104      	bne.n	80121d0 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x34>
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d001      	beq.n	80121d0 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x34>
            return(TXM_MODULE_INVALID_MEMORY);
 80121cc:	23f4      	movs	r3, #244	; 0xf4
 80121ce:	e05d      	b.n	801228c <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0xf0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_1, sizeof(ULONG)))
 80121d0:	2204      	movs	r2, #4
 80121d2:	6879      	ldr	r1, [r7, #4]
 80121d4:	68f8      	ldr	r0, [r7, #12]
 80121d6:	f000 ffc1 	bl	801315c <_txm_module_manager_inside_data_check>
 80121da:	4603      	mov	r3, r0
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d104      	bne.n	80121ea <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x4e>
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d001      	beq.n	80121ea <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x4e>
            return(TXM_MODULE_INVALID_MEMORY);
 80121e6:	23f4      	movs	r3, #244	; 0xf4
 80121e8:	e050      	b.n	801228c <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0xf0>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[3])))
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	220c      	movs	r2, #12
 80121ee:	4619      	mov	r1, r3
 80121f0:	68f8      	ldr	r0, [r7, #12]
 80121f2:	f000 ffb3 	bl	801315c <_txm_module_manager_inside_data_check>
 80121f6:	4603      	mov	r3, r0
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d101      	bne.n	8012200 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x64>
            return(TXM_MODULE_INVALID_MEMORY);
 80121fc:	23f4      	movs	r3, #244	; 0xf4
 80121fe:	e045      	b.n	801228c <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0xf0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[0], sizeof(ULONG)))
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	2204      	movs	r2, #4
 8012206:	4619      	mov	r1, r3
 8012208:	68f8      	ldr	r0, [r7, #12]
 801220a:	f000 ffa7 	bl	801315c <_txm_module_manager_inside_data_check>
 801220e:	4603      	mov	r3, r0
 8012210:	2b00      	cmp	r3, #0
 8012212:	d105      	bne.n	8012220 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x84>
 8012214:	683b      	ldr	r3, [r7, #0]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d001      	beq.n	8012220 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0x84>
            return(TXM_MODULE_INVALID_MEMORY);
 801221c:	23f4      	movs	r3, #244	; 0xf4
 801221e:	e035      	b.n	801228c <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0xf0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(ULONG)))
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	3304      	adds	r3, #4
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	2204      	movs	r2, #4
 8012228:	4619      	mov	r1, r3
 801222a:	68f8      	ldr	r0, [r7, #12]
 801222c:	f000 ff96 	bl	801315c <_txm_module_manager_inside_data_check>
 8012230:	4603      	mov	r3, r0
 8012232:	2b00      	cmp	r3, #0
 8012234:	d106      	bne.n	8012244 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0xa8>
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	3304      	adds	r3, #4
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d001      	beq.n	8012244 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0xa8>
            return(TXM_MODULE_INVALID_MEMORY);
 8012240:	23f4      	movs	r3, #244	; 0xf4
 8012242:	e023      	b.n	801228c <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0xf0>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[2], sizeof(ULONG)))
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	3308      	adds	r3, #8
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	2204      	movs	r2, #4
 801224c:	4619      	mov	r1, r3
 801224e:	68f8      	ldr	r0, [r7, #12]
 8012250:	f000 ff84 	bl	801315c <_txm_module_manager_inside_data_check>
 8012254:	4603      	mov	r3, r0
 8012256:	2b00      	cmp	r3, #0
 8012258:	d106      	bne.n	8012268 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0xcc>
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	3308      	adds	r3, #8
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d001      	beq.n	8012268 <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0xcc>
            return(TXM_MODULE_INVALID_MEMORY);
 8012264:	23f4      	movs	r3, #244	; 0xf4
 8012266:	e011      	b.n	801228c <_txm_module_manager_tx_timer_performance_system_info_get_dispatch+0xf0>
    }

    return_value = (ALIGN_TYPE) _tx_timer_performance_system_info_get(
 8012268:	68b8      	ldr	r0, [r7, #8]
 801226a:	6879      	ldr	r1, [r7, #4]
        (ULONG *) param_0,
        (ULONG *) param_1,
        (ULONG *) extra_parameters[0],
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_timer_performance_system_info_get(
 8012270:	461a      	mov	r2, r3
        (ULONG *) extra_parameters[1],
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	3304      	adds	r3, #4
 8012276:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_timer_performance_system_info_get(
 8012278:	461c      	mov	r4, r3
        (ULONG *) extra_parameters[2]
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	3308      	adds	r3, #8
 801227e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _tx_timer_performance_system_info_get(
 8012280:	9300      	str	r3, [sp, #0]
 8012282:	4623      	mov	r3, r4
 8012284:	f002 febc 	bl	8015000 <_tx_timer_performance_system_info_get>
 8012288:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 801228a:	697b      	ldr	r3, [r7, #20]
}
 801228c:	4618      	mov	r0, r3
 801228e:	371c      	adds	r7, #28
 8012290:	46bd      	mov	sp, r7
 8012292:	bd90      	pop	{r4, r7, pc}

08012294 <_txm_module_manager_tx_trace_buffer_full_notify_dispatch>:

/* UINT _tx_trace_buffer_full_notify(
    VOID (*full_buffer_callback)(VOID *buffer) -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_trace_buffer_full_notify_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b084      	sub	sp, #16
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
 801229c:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    return_value = (ALIGN_TYPE) _tx_trace_buffer_full_notify(
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	4618      	mov	r0, r3
 80122a2:	f002 fedb 	bl	801505c <_tx_trace_buffer_full_notify>
 80122a6:	60f8      	str	r0, [r7, #12]
        (VOID (*)(VOID *buffer)) param_0
    );
    return(return_value);
 80122a8:	68fb      	ldr	r3, [r7, #12]
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3710      	adds	r7, #16
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}

080122b2 <_txm_module_manager_tx_trace_disable_dispatch>:

/* UINT _tx_trace_disable(); */
static ALIGN_TYPE _txm_module_manager_tx_trace_disable_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 80122b2:	b580      	push	{r7, lr}
 80122b4:	b086      	sub	sp, #24
 80122b6:	af00      	add	r7, sp, #0
 80122b8:	60f8      	str	r0, [r7, #12]
 80122ba:	60b9      	str	r1, [r7, #8]
 80122bc:	607a      	str	r2, [r7, #4]
 80122be:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_USER_MODE)
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	68db      	ldr	r3, [r3, #12]
 80122c4:	f003 0301 	and.w	r3, r3, #1
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d001      	beq.n	80122d0 <_txm_module_manager_tx_trace_disable_dispatch+0x1e>
        return(TXM_MODULE_INVALID_PROPERTIES);
 80122cc:	23f3      	movs	r3, #243	; 0xf3
 80122ce:	e003      	b.n	80122d8 <_txm_module_manager_tx_trace_disable_dispatch+0x26>

    return_value = (ALIGN_TYPE) _tx_trace_disable();
 80122d0:	f002 fed7 	bl	8015082 <_tx_trace_disable>
 80122d4:	6178      	str	r0, [r7, #20]
    return(return_value);
 80122d6:	697b      	ldr	r3, [r7, #20]
}
 80122d8:	4618      	mov	r0, r3
 80122da:	3718      	adds	r7, #24
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd80      	pop	{r7, pc}

080122e0 <_txm_module_manager_tx_trace_enable_dispatch>:
    VOID *trace_buffer_start, -> param_0
    ULONG trace_buffer_size, -> param_1
    ULONG registry_entries -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_tx_trace_enable_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b086      	sub	sp, #24
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	60f8      	str	r0, [r7, #12]
 80122e8:	60b9      	str	r1, [r7, #8]
 80122ea:	607a      	str	r2, [r7, #4]
 80122ec:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_USER_MODE)
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	68db      	ldr	r3, [r3, #12]
 80122f2:	f003 0301 	and.w	r3, r3, #1
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d001      	beq.n	80122fe <_txm_module_manager_tx_trace_enable_dispatch+0x1e>
        return(TXM_MODULE_INVALID_PROPERTIES);
 80122fa:	23f3      	movs	r3, #243	; 0xf3
 80122fc:	e007      	b.n	801230e <_txm_module_manager_tx_trace_enable_dispatch+0x2e>

    return_value = (ALIGN_TYPE) _tx_trace_enable(
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	683a      	ldr	r2, [r7, #0]
 8012302:	6879      	ldr	r1, [r7, #4]
 8012304:	4618      	mov	r0, r3
 8012306:	f002 fec4 	bl	8015092 <_tx_trace_enable>
 801230a:	6178      	str	r0, [r7, #20]
        (VOID *) param_0,
        (ULONG) param_1,
        (ULONG) param_2
    );
    return(return_value);
 801230c:	697b      	ldr	r3, [r7, #20]
}
 801230e:	4618      	mov	r0, r3
 8012310:	3718      	adds	r7, #24
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}

08012316 <_txm_module_manager_tx_trace_event_filter_dispatch>:

/* UINT _tx_trace_event_filter(
    ULONG event_filter_bits -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_trace_event_filter_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8012316:	b580      	push	{r7, lr}
 8012318:	b084      	sub	sp, #16
 801231a:	af00      	add	r7, sp, #0
 801231c:	6078      	str	r0, [r7, #4]
 801231e:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    return_value = (ALIGN_TYPE) _tx_trace_event_filter(
 8012320:	6838      	ldr	r0, [r7, #0]
 8012322:	f002 fed7 	bl	80150d4 <_tx_trace_event_filter>
 8012326:	60f8      	str	r0, [r7, #12]
        (ULONG) param_0
    );
    return(return_value);
 8012328:	68fb      	ldr	r3, [r7, #12]
}
 801232a:	4618      	mov	r0, r3
 801232c:	3710      	adds	r7, #16
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}

08012332 <_txm_module_manager_tx_trace_event_unfilter_dispatch>:

/* UINT _tx_trace_event_unfilter(
    ULONG event_unfilter_bits -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_trace_event_unfilter_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8012332:	b580      	push	{r7, lr}
 8012334:	b084      	sub	sp, #16
 8012336:	af00      	add	r7, sp, #0
 8012338:	6078      	str	r0, [r7, #4]
 801233a:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    return_value = (ALIGN_TYPE) _tx_trace_event_unfilter(
 801233c:	6838      	ldr	r0, [r7, #0]
 801233e:	f002 fedc 	bl	80150fa <_tx_trace_event_unfilter>
 8012342:	60f8      	str	r0, [r7, #12]
        (ULONG) param_0
    );
    return(return_value);
 8012344:	68fb      	ldr	r3, [r7, #12]
}
 8012346:	4618      	mov	r0, r3
 8012348:	3710      	adds	r7, #16
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}

0801234e <_txm_module_manager_tx_trace_interrupt_control_dispatch>:

/* UINT _tx_trace_interrupt_control(
    UINT new_posture -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_trace_interrupt_control_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 801234e:	b580      	push	{r7, lr}
 8012350:	b084      	sub	sp, #16
 8012352:	af00      	add	r7, sp, #0
 8012354:	6078      	str	r0, [r7, #4]
 8012356:	6039      	str	r1, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_USER_MODE)
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	68db      	ldr	r3, [r3, #12]
 801235c:	f003 0301 	and.w	r3, r3, #1
 8012360:	2b00      	cmp	r3, #0
 8012362:	d001      	beq.n	8012368 <_txm_module_manager_tx_trace_interrupt_control_dispatch+0x1a>
        return(TXM_MODULE_INVALID_PROPERTIES);
 8012364:	23f3      	movs	r3, #243	; 0xf3
 8012366:	e004      	b.n	8012372 <_txm_module_manager_tx_trace_interrupt_control_dispatch+0x24>

    return_value = (ALIGN_TYPE) _tx_trace_interrupt_control(
 8012368:	6838      	ldr	r0, [r7, #0]
 801236a:	f002 fed9 	bl	8015120 <_tx_trace_interrupt_control>
 801236e:	60f8      	str	r0, [r7, #12]
        (UINT) param_0
    );
    return(return_value);
 8012370:	68fb      	ldr	r3, [r7, #12]
}
 8012372:	4618      	mov	r0, r3
 8012374:	3710      	adds	r7, #16
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}

0801237a <_txm_module_manager_tx_trace_isr_enter_insert_dispatch>:

/* VOID _tx_trace_isr_enter_insert(
    ULONG isr_id -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_trace_isr_enter_insert_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 801237a:	b580      	push	{r7, lr}
 801237c:	b082      	sub	sp, #8
 801237e:	af00      	add	r7, sp, #0
 8012380:	6078      	str	r0, [r7, #4]
 8012382:	6039      	str	r1, [r7, #0]

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_USER_MODE)
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	68db      	ldr	r3, [r3, #12]
 8012388:	f003 0301 	and.w	r3, r3, #1
 801238c:	2b00      	cmp	r3, #0
 801238e:	d001      	beq.n	8012394 <_txm_module_manager_tx_trace_isr_enter_insert_dispatch+0x1a>
        return(TXM_MODULE_INVALID_PROPERTIES);
 8012390:	23f3      	movs	r3, #243	; 0xf3
 8012392:	e003      	b.n	801239c <_txm_module_manager_tx_trace_isr_enter_insert_dispatch+0x22>

    _tx_trace_isr_enter_insert(
 8012394:	6838      	ldr	r0, [r7, #0]
 8012396:	f002 fed0 	bl	801513a <_tx_trace_isr_enter_insert>
        (ULONG) param_0
    );
    return(TX_SUCCESS);
 801239a:	2300      	movs	r3, #0
}
 801239c:	4618      	mov	r0, r3
 801239e:	3708      	adds	r7, #8
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <_txm_module_manager_tx_trace_isr_exit_insert_dispatch>:

/* VOID _tx_trace_isr_exit_insert(
    ULONG isr_id -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_tx_trace_isr_exit_insert_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	6039      	str	r1, [r7, #0]

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_USER_MODE)
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	68db      	ldr	r3, [r3, #12]
 80123b2:	f003 0301 	and.w	r3, r3, #1
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d001      	beq.n	80123be <_txm_module_manager_tx_trace_isr_exit_insert_dispatch+0x1a>
        return(TXM_MODULE_INVALID_PROPERTIES);
 80123ba:	23f3      	movs	r3, #243	; 0xf3
 80123bc:	e003      	b.n	80123c6 <_txm_module_manager_tx_trace_isr_exit_insert_dispatch+0x22>

    _tx_trace_isr_exit_insert(
 80123be:	6838      	ldr	r0, [r7, #0]
 80123c0:	f002 fed4 	bl	801516c <_tx_trace_isr_exit_insert>
        (ULONG) param_0
    );
    return(TX_SUCCESS);
 80123c4:	2300      	movs	r3, #0
}
 80123c6:	4618      	mov	r0, r3
 80123c8:	3708      	adds	r7, #8
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}

080123ce <_txm_module_manager_tx_trace_user_event_insert_dispatch>:
    ULONG info_field_2, -> extra_parameters[0]
    ULONG info_field_3, -> extra_parameters[1]
    ULONG info_field_4 -> extra_parameters[2]
   ); */
static ALIGN_TYPE _txm_module_manager_tx_trace_user_event_insert_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 80123ce:	b580      	push	{r7, lr}
 80123d0:	b088      	sub	sp, #32
 80123d2:	af02      	add	r7, sp, #8
 80123d4:	60f8      	str	r0, [r7, #12]
 80123d6:	60b9      	str	r1, [r7, #8]
 80123d8:	607a      	str	r2, [r7, #4]
 80123da:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	68db      	ldr	r3, [r3, #12]
 80123e0:	f003 0302 	and.w	r3, r3, #2
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d00a      	beq.n	80123fe <_txm_module_manager_tx_trace_user_event_insert_dispatch+0x30>
    {
        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[3])))
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	220c      	movs	r2, #12
 80123ec:	4619      	mov	r1, r3
 80123ee:	68f8      	ldr	r0, [r7, #12]
 80123f0:	f000 feb4 	bl	801315c <_txm_module_manager_inside_data_check>
 80123f4:	4603      	mov	r3, r0
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d101      	bne.n	80123fe <_txm_module_manager_tx_trace_user_event_insert_dispatch+0x30>
            return(TXM_MODULE_INVALID_MEMORY);
 80123fa:	23f4      	movs	r3, #244	; 0xf4
 80123fc:	e00f      	b.n	801241e <_txm_module_manager_tx_trace_user_event_insert_dispatch+0x50>
    }
    
    return_value = (ALIGN_TYPE) _tx_trace_user_event_insert(
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	681a      	ldr	r2, [r3, #0]
        (ULONG) param_0,
        (ULONG) param_1,
        (ULONG) extra_parameters[0],
        (ULONG) extra_parameters[1],
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	3304      	adds	r3, #4
    return_value = (ALIGN_TYPE) _tx_trace_user_event_insert(
 8012406:	6819      	ldr	r1, [r3, #0]
        (ULONG) extra_parameters[2]
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	3308      	adds	r3, #8
    return_value = (ALIGN_TYPE) _tx_trace_user_event_insert(
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	9300      	str	r3, [sp, #0]
 8012410:	460b      	mov	r3, r1
 8012412:	6879      	ldr	r1, [r7, #4]
 8012414:	68b8      	ldr	r0, [r7, #8]
 8012416:	f002 fec2 	bl	801519e <_tx_trace_user_event_insert>
 801241a:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 801241c:	697b      	ldr	r3, [r7, #20]
}
 801241e:	4618      	mov	r0, r3
 8012420:	3718      	adds	r7, #24
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}

08012426 <_txm_module_manager_txm_module_object_allocate_dispatch>:
/* UINT _txm_module_object_allocate(
    VOID **object_ptr, -> param_0
    ULONG object_size -> param_1
   ); */
static ALIGN_TYPE _txm_module_manager_txm_module_object_allocate_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1)
{
 8012426:	b580      	push	{r7, lr}
 8012428:	b086      	sub	sp, #24
 801242a:	af00      	add	r7, sp, #0
 801242c:	60f8      	str	r0, [r7, #12]
 801242e:	60b9      	str	r1, [r7, #8]
 8012430:	607a      	str	r2, [r7, #4]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	68db      	ldr	r3, [r3, #12]
 8012436:	f003 0302 	and.w	r3, r3, #2
 801243a:	2b00      	cmp	r3, #0
 801243c:	d00c      	beq.n	8012458 <_txm_module_manager_txm_module_object_allocate_dispatch+0x32>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_0, sizeof(VOID *)))
 801243e:	2204      	movs	r2, #4
 8012440:	68b9      	ldr	r1, [r7, #8]
 8012442:	68f8      	ldr	r0, [r7, #12]
 8012444:	f000 fe8a 	bl	801315c <_txm_module_manager_inside_data_check>
 8012448:	4603      	mov	r3, r0
 801244a:	2b00      	cmp	r3, #0
 801244c:	d104      	bne.n	8012458 <_txm_module_manager_txm_module_object_allocate_dispatch+0x32>
 801244e:	68bb      	ldr	r3, [r7, #8]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d001      	beq.n	8012458 <_txm_module_manager_txm_module_object_allocate_dispatch+0x32>
            return(TXM_MODULE_INVALID_MEMORY);
 8012454:	23f4      	movs	r3, #244	; 0xf4
 8012456:	e007      	b.n	8012468 <_txm_module_manager_txm_module_object_allocate_dispatch+0x42>
    }

    return_value = (ALIGN_TYPE) _txm_module_manager_object_allocate(
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	68fa      	ldr	r2, [r7, #12]
 801245c:	6879      	ldr	r1, [r7, #4]
 801245e:	4618      	mov	r0, r3
 8012460:	f000 feca 	bl	80131f8 <_txm_module_manager_object_allocate>
 8012464:	6178      	str	r0, [r7, #20]
        (VOID **) param_0,
        (ULONG) param_1,
        module_instance
    );
    return(return_value);
 8012466:	697b      	ldr	r3, [r7, #20]
}
 8012468:	4618      	mov	r0, r3
 801246a:	3718      	adds	r7, #24
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}

08012470 <_txm_module_manager_txm_module_object_deallocate_dispatch>:

/* UINT _txm_module_object_deallocate(
    VOID *object_ptr -> param_0
   ); */
static ALIGN_TYPE _txm_module_manager_txm_module_object_deallocate_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b086      	sub	sp, #24
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
 8012478:	6039      	str	r1, [r7, #0]
ALIGN_TYPE return_value;
TXM_MODULE_ALLOCATED_OBJECT *object_ptr;
ALIGN_TYPE object_end;
ALIGN_TYPE object_pool_end;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	68db      	ldr	r3, [r3, #12]
 801247e:	f003 0302 	and.w	r3, r3, #2
 8012482:	2b00      	cmp	r3, #0
 8012484:	d024      	beq.n	80124d0 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x60>
    {
        /* Is the object pool created?  */
        if (_txm_module_manager_object_pool_created == TX_TRUE)
 8012486:	4b17      	ldr	r3, [pc, #92]	; (80124e4 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x74>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	2b01      	cmp	r3, #1
 801248c:	d120      	bne.n	80124d0 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x60>
        {

            /* Get the module allocated object.  */
            object_ptr =  ((TXM_MODULE_ALLOCATED_OBJECT *) param_0) - 1;
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	3b10      	subs	r3, #16
 8012492:	617b      	str	r3, [r7, #20]

            /* Get the end address of the object pool.  */
            object_pool_end = (ALIGN_TYPE) (_txm_module_manager_object_pool.tx_byte_pool_start + _txm_module_manager_object_pool.tx_byte_pool_size);
 8012494:	4b14      	ldr	r3, [pc, #80]	; (80124e8 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x78>)
 8012496:	699a      	ldr	r2, [r3, #24]
 8012498:	4b13      	ldr	r3, [pc, #76]	; (80124e8 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x78>)
 801249a:	69db      	ldr	r3, [r3, #28]
 801249c:	4413      	add	r3, r2
 801249e:	613b      	str	r3, [r7, #16]

            /* Check that the pointer is in the object pool.  */
            if ((ALIGN_TYPE) object_ptr < (ALIGN_TYPE) _txm_module_manager_object_pool.tx_byte_pool_start ||
 80124a0:	4b11      	ldr	r3, [pc, #68]	; (80124e8 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x78>)
 80124a2:	699b      	ldr	r3, [r3, #24]
 80124a4:	461a      	mov	r2, r3
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	429a      	cmp	r2, r3
 80124aa:	d803      	bhi.n	80124b4 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x44>
                (ALIGN_TYPE) object_ptr >= (ALIGN_TYPE) object_pool_end)
 80124ac:	697b      	ldr	r3, [r7, #20]
            if ((ALIGN_TYPE) object_ptr < (ALIGN_TYPE) _txm_module_manager_object_pool.tx_byte_pool_start ||
 80124ae:	693a      	ldr	r2, [r7, #16]
 80124b0:	429a      	cmp	r2, r3
 80124b2:	d801      	bhi.n	80124b8 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x48>
            {
                /* Pointer is outside of the object pool.  */
                return(TXM_MODULE_INVALID_MEMORY);
 80124b4:	23f4      	movs	r3, #244	; 0xf4
 80124b6:	e011      	b.n	80124dc <_txm_module_manager_txm_module_object_deallocate_dispatch+0x6c>
            }

            /* Get the end addresses of the object.  */
            object_end = ((ALIGN_TYPE) object_ptr) + sizeof(TXM_MODULE_ALLOCATED_OBJECT) + object_ptr -> txm_module_object_size;
 80124b8:	697b      	ldr	r3, [r7, #20]
 80124ba:	68da      	ldr	r2, [r3, #12]
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	4413      	add	r3, r2
 80124c0:	3310      	adds	r3, #16
 80124c2:	60fb      	str	r3, [r7, #12]

            /* Check that the object is in the object pool.  */
            if (object_end >= object_pool_end)
 80124c4:	68fa      	ldr	r2, [r7, #12]
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	429a      	cmp	r2, r3
 80124ca:	d301      	bcc.n	80124d0 <_txm_module_manager_txm_module_object_deallocate_dispatch+0x60>
            {
                /* Object is outside of the object pool.  */
                return(TXM_MODULE_INVALID_MEMORY);
 80124cc:	23f4      	movs	r3, #244	; 0xf4
 80124ce:	e005      	b.n	80124dc <_txm_module_manager_txm_module_object_deallocate_dispatch+0x6c>
            }
        }
    }

    return_value = (ALIGN_TYPE) _txm_module_manager_object_deallocate(
 80124d0:	683b      	ldr	r3, [r7, #0]
 80124d2:	4618      	mov	r0, r3
 80124d4:	f000 fef8 	bl	80132c8 <_txm_module_manager_object_deallocate>
 80124d8:	60b8      	str	r0, [r7, #8]
        (VOID *) param_0
    );
    return(return_value);
 80124da:	68bb      	ldr	r3, [r7, #8]
}
 80124dc:	4618      	mov	r0, r3
 80124de:	3718      	adds	r7, #24
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}
 80124e4:	2400f6e8 	.word	0x2400f6e8
 80124e8:	2400f6b4 	.word	0x2400f6b4

080124ec <_txm_module_manager_txm_module_object_pointer_get_dispatch>:
    UINT object_type, -> param_0
    CHAR *name, -> param_1
    VOID **object_ptr -> param_2
   ); */
static ALIGN_TYPE _txm_module_manager_txm_module_object_pointer_get_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b086      	sub	sp, #24
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	60f8      	str	r0, [r7, #12]
 80124f4:	60b9      	str	r1, [r7, #8]
 80124f6:	607a      	str	r2, [r7, #4]
 80124f8:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	68db      	ldr	r3, [r3, #12]
 80124fe:	f003 0302 	and.w	r3, r3, #2
 8012502:	2b00      	cmp	r3, #0
 8012504:	d02a      	beq.n	801255c <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x70>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 8012506:	2201      	movs	r2, #1
 8012508:	6879      	ldr	r1, [r7, #4]
 801250a:	68f8      	ldr	r0, [r7, #12]
 801250c:	f000 fe26 	bl	801315c <_txm_module_manager_inside_data_check>
 8012510:	4603      	mov	r3, r0
 8012512:	2b00      	cmp	r3, #0
 8012514:	d115      	bne.n	8012542 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x56>
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801251c:	d00c      	beq.n	8012538 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x4c>
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	699b      	ldr	r3, [r3, #24]
 8012522:	461a      	mov	r2, r3
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	4293      	cmp	r3, r2
 8012528:	d306      	bcc.n	8012538 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x4c>
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	1c5a      	adds	r2, r3, #1
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	69db      	ldr	r3, [r3, #28]
 8012532:	3301      	adds	r3, #1
 8012534:	429a      	cmp	r2, r3
 8012536:	d904      	bls.n	8012542 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x56>
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d001      	beq.n	8012542 <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x56>
            return(TXM_MODULE_INVALID_MEMORY);
 801253e:	23f4      	movs	r3, #244	; 0xf4
 8012540:	e014      	b.n	801256c <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x80>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, param_2, sizeof(VOID *)))
 8012542:	2204      	movs	r2, #4
 8012544:	6839      	ldr	r1, [r7, #0]
 8012546:	68f8      	ldr	r0, [r7, #12]
 8012548:	f000 fe08 	bl	801315c <_txm_module_manager_inside_data_check>
 801254c:	4603      	mov	r3, r0
 801254e:	2b00      	cmp	r3, #0
 8012550:	d104      	bne.n	801255c <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x70>
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d001      	beq.n	801255c <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x70>
            return(TXM_MODULE_INVALID_MEMORY);
 8012558:	23f4      	movs	r3, #244	; 0xf4
 801255a:	e007      	b.n	801256c <_txm_module_manager_txm_module_object_pointer_get_dispatch+0x80>
    }

    return_value = (ALIGN_TYPE) _txm_module_manager_object_pointer_get(
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	683a      	ldr	r2, [r7, #0]
 8012560:	4619      	mov	r1, r3
 8012562:	68b8      	ldr	r0, [r7, #8]
 8012564:	f000 ff16 	bl	8013394 <_txm_module_manager_object_pointer_get>
 8012568:	6178      	str	r0, [r7, #20]
        (UINT) param_0,
        (CHAR *) param_1,
        (VOID **) param_2
    );
    return(return_value);
 801256a:	697b      	ldr	r3, [r7, #20]
}
 801256c:	4618      	mov	r0, r3
 801256e:	3718      	adds	r7, #24
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}

08012574 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch>:
    CHAR *name, -> param_1
    UINT name_length, -> extra_parameters[0]
    VOID **object_ptr -> extra_parameters[1]
   ); */
static ALIGN_TYPE _txm_module_manager_txm_module_object_pointer_get_extended_dispatch(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE *extra_parameters)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b086      	sub	sp, #24
 8012578:	af00      	add	r7, sp, #0
 801257a:	60f8      	str	r0, [r7, #12]
 801257c:	60b9      	str	r1, [r7, #8]
 801257e:	607a      	str	r2, [r7, #4]
 8012580:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value;

    if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	68db      	ldr	r3, [r3, #12]
 8012586:	f003 0302 	and.w	r3, r3, #2
 801258a:	2b00      	cmp	r3, #0
 801258c:	d03a      	beq.n	8012604 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x90>
    {
        if (!TXM_MODULE_MANAGER_PARAM_CHECK_DEREFERENCE_STRING(module_instance, param_1))
 801258e:	2201      	movs	r2, #1
 8012590:	6879      	ldr	r1, [r7, #4]
 8012592:	68f8      	ldr	r0, [r7, #12]
 8012594:	f000 fde2 	bl	801315c <_txm_module_manager_inside_data_check>
 8012598:	4603      	mov	r3, r0
 801259a:	2b00      	cmp	r3, #0
 801259c:	d115      	bne.n	80125ca <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x56>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125a4:	d00c      	beq.n	80125c0 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x4c>
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	699b      	ldr	r3, [r3, #24]
 80125aa:	461a      	mov	r2, r3
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	4293      	cmp	r3, r2
 80125b0:	d306      	bcc.n	80125c0 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x4c>
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	1c5a      	adds	r2, r3, #1
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	69db      	ldr	r3, [r3, #28]
 80125ba:	3301      	adds	r3, #1
 80125bc:	429a      	cmp	r2, r3
 80125be:	d904      	bls.n	80125ca <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x56>
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d001      	beq.n	80125ca <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x56>
            return(TXM_MODULE_INVALID_MEMORY);
 80125c6:	23f4      	movs	r3, #244	; 0xf4
 80125c8:	e027      	b.n	801261a <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0xa6>

        if (!TXM_MODULE_MANAGER_ENSURE_INSIDE_MODULE_DATA(module_instance, (ALIGN_TYPE)extra_parameters, sizeof(ALIGN_TYPE[2])))
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	2208      	movs	r2, #8
 80125ce:	4619      	mov	r1, r3
 80125d0:	68f8      	ldr	r0, [r7, #12]
 80125d2:	f000 fdc3 	bl	801315c <_txm_module_manager_inside_data_check>
 80125d6:	4603      	mov	r3, r0
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d101      	bne.n	80125e0 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x6c>
            return(TXM_MODULE_INVALID_MEMORY);
 80125dc:	23f4      	movs	r3, #244	; 0xf4
 80125de:	e01c      	b.n	801261a <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0xa6>

        if (!TXM_MODULE_MANAGER_PARAM_CHECK_BUFFER_WRITE(module_instance, extra_parameters[1], sizeof(VOID *)))
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	3304      	adds	r3, #4
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	2204      	movs	r2, #4
 80125e8:	4619      	mov	r1, r3
 80125ea:	68f8      	ldr	r0, [r7, #12]
 80125ec:	f000 fdb6 	bl	801315c <_txm_module_manager_inside_data_check>
 80125f0:	4603      	mov	r3, r0
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d106      	bne.n	8012604 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x90>
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	3304      	adds	r3, #4
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d001      	beq.n	8012604 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0x90>
            return(TXM_MODULE_INVALID_MEMORY);
 8012600:	23f4      	movs	r3, #244	; 0xf4
 8012602:	e00a      	b.n	801261a <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch+0xa6>
    }

    return_value = (ALIGN_TYPE) _txm_module_manager_object_pointer_get_extended(
 8012604:	6879      	ldr	r1, [r7, #4]
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	681a      	ldr	r2, [r3, #0]
        (UINT) param_0,
        (CHAR *) param_1,
        (UINT) extra_parameters[0],
        (VOID **) extra_parameters[1]
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	3304      	adds	r3, #4
 801260e:	681b      	ldr	r3, [r3, #0]
    return_value = (ALIGN_TYPE) _txm_module_manager_object_pointer_get_extended(
 8012610:	68b8      	ldr	r0, [r7, #8]
 8012612:	f000 fed3 	bl	80133bc <_txm_module_manager_object_pointer_get_extended>
 8012616:	6178      	str	r0, [r7, #20]
    );
    return(return_value);
 8012618:	697b      	ldr	r3, [r7, #20]
}
 801261a:	4618      	mov	r0, r3
 801261c:	3718      	adds	r7, #24
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}
	...

08012624 <_txm_module_manager_kernel_dispatch>:
/*                                            remove unneeded functions,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
ALIGN_TYPE _txm_module_manager_kernel_dispatch(ULONG kernel_request, ALIGN_TYPE param_0, ALIGN_TYPE param_1, ALIGN_TYPE param_2)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b086      	sub	sp, #24
 8012628:	af00      	add	r7, sp, #0
 801262a:	60f8      	str	r0, [r7, #12]
 801262c:	60b9      	str	r1, [r7, #8]
 801262e:	607a      	str	r2, [r7, #4]
 8012630:	603b      	str	r3, [r7, #0]

ALIGN_TYPE return_value = TX_NOT_AVAILABLE;
 8012632:	231d      	movs	r3, #29
 8012634:	617b      	str	r3, [r7, #20]
TXM_MODULE_INSTANCE *module_instance;


    /* Get the module instance.  */
    module_instance = _tx_thread_current_ptr -> tx_thread_module_instance_ptr;
 8012636:	4bba      	ldr	r3, [pc, #744]	; (8012920 <_txm_module_manager_kernel_dispatch+0x2fc>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801263e:	613b      	str	r3, [r7, #16]

    /* Sanity-check for a valid module instance.  */
    if (module_instance == TX_NULL)
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d101      	bne.n	801264a <_txm_module_manager_kernel_dispatch+0x26>
    {
        /* Just return!  */
        return(TXM_MODULE_INVALID);
 8012646:	23f2      	movs	r3, #242	; 0xf2
 8012648:	e387      	b.n	8012d5a <_txm_module_manager_kernel_dispatch+0x736>
    }

    switch (kernel_request)
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	3b01      	subs	r3, #1
 801264e:	2b5f      	cmp	r3, #95	; 0x5f
 8012650:	f200 8374 	bhi.w	8012d3c <_txm_module_manager_kernel_dispatch+0x718>
 8012654:	a201      	add	r2, pc, #4	; (adr r2, 801265c <_txm_module_manager_kernel_dispatch+0x38>)
 8012656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801265a:	bf00      	nop
 801265c:	080127dd 	.word	0x080127dd
 8012660:	080127ed 	.word	0x080127ed
 8012664:	080127fd 	.word	0x080127fd
 8012668:	08012809 	.word	0x08012809
 801266c:	08012819 	.word	0x08012819
 8012670:	08012829 	.word	0x08012829
 8012674:	08012839 	.word	0x08012839
 8012678:	08012845 	.word	0x08012845
 801267c:	08012851 	.word	0x08012851
 8012680:	08012861 	.word	0x08012861
 8012684:	08012871 	.word	0x08012871
 8012688:	0801287d 	.word	0x0801287d
 801268c:	0801288d 	.word	0x0801288d
 8012690:	0801289d 	.word	0x0801289d
 8012694:	080128ad 	.word	0x080128ad
 8012698:	080128b9 	.word	0x080128b9
 801269c:	080128c5 	.word	0x080128c5
 80126a0:	080128d5 	.word	0x080128d5
 80126a4:	080128e1 	.word	0x080128e1
 80126a8:	080128f1 	.word	0x080128f1
 80126ac:	08012901 	.word	0x08012901
 80126b0:	08012911 	.word	0x08012911
 80126b4:	08012925 	.word	0x08012925
 80126b8:	08012935 	.word	0x08012935
 80126bc:	08012b2f 	.word	0x08012b2f
 80126c0:	08012943 	.word	0x08012943
 80126c4:	08012953 	.word	0x08012953
 80126c8:	0801295f 	.word	0x0801295f
 80126cc:	0801296d 	.word	0x0801296d
 80126d0:	0801297d 	.word	0x0801297d
 80126d4:	0801298d 	.word	0x0801298d
 80126d8:	0801299d 	.word	0x0801299d
 80126dc:	080129a9 	.word	0x080129a9
 80126e0:	080129b5 	.word	0x080129b5
 80126e4:	080129c5 	.word	0x080129c5
 80126e8:	080129d1 	.word	0x080129d1
 80126ec:	080129dd 	.word	0x080129dd
 80126f0:	080129ed 	.word	0x080129ed
 80126f4:	080129fd 	.word	0x080129fd
 80126f8:	08012a0d 	.word	0x08012a0d
 80126fc:	08012a1d 	.word	0x08012a1d
 8012700:	08012a29 	.word	0x08012a29
 8012704:	08012a39 	.word	0x08012a39
 8012708:	08012a49 	.word	0x08012a49
 801270c:	08012a57 	.word	0x08012a57
 8012710:	08012a65 	.word	0x08012a65
 8012714:	08012a75 	.word	0x08012a75
 8012718:	08012a81 	.word	0x08012a81
 801271c:	08012a8f 	.word	0x08012a8f
 8012720:	08012a9f 	.word	0x08012a9f
 8012724:	08012aaf 	.word	0x08012aaf
 8012728:	08012abf 	.word	0x08012abf
 801272c:	08012acb 	.word	0x08012acb
 8012730:	08012ad7 	.word	0x08012ad7
 8012734:	08012ae5 	.word	0x08012ae5
 8012738:	08012af5 	.word	0x08012af5
 801273c:	08012b01 	.word	0x08012b01
 8012740:	08012b0f 	.word	0x08012b0f
 8012744:	08012b1f 	.word	0x08012b1f
 8012748:	08012b3b 	.word	0x08012b3b
 801274c:	08012b4b 	.word	0x08012b4b
 8012750:	08012b5b 	.word	0x08012b5b
 8012754:	08012b6b 	.word	0x08012b6b
 8012758:	08012b7b 	.word	0x08012b7b
 801275c:	08012b8b 	.word	0x08012b8b
 8012760:	08012b97 	.word	0x08012b97
 8012764:	08012ba3 	.word	0x08012ba3
 8012768:	08012baf 	.word	0x08012baf
 801276c:	08012bbb 	.word	0x08012bbb
 8012770:	08012bd3 	.word	0x08012bd3
 8012774:	08012bdf 	.word	0x08012bdf
 8012778:	08012bef 	.word	0x08012bef
 801277c:	08012bfb 	.word	0x08012bfb
 8012780:	08012c0b 	.word	0x08012c0b
 8012784:	08012c17 	.word	0x08012c17
 8012788:	08012c23 	.word	0x08012c23
 801278c:	08012c33 	.word	0x08012c33
 8012790:	08012c43 	.word	0x08012c43
 8012794:	08012c4f 	.word	0x08012c4f
 8012798:	08012c5b 	.word	0x08012c5b
 801279c:	08012c6b 	.word	0x08012c6b
 80127a0:	08012c7b 	.word	0x08012c7b
 80127a4:	08012ca7 	.word	0x08012ca7
 80127a8:	08012cb7 	.word	0x08012cb7
 80127ac:	08012cc3 	.word	0x08012cc3
 80127b0:	08012c97 	.word	0x08012c97
 80127b4:	08012ccf 	.word	0x08012ccf
 80127b8:	08012cdb 	.word	0x08012cdb
 80127bc:	08012ce7 	.word	0x08012ce7
 80127c0:	08012c8b 	.word	0x08012c8b
 80127c4:	08012cf3 	.word	0x08012cf3
 80127c8:	08012bc7 	.word	0x08012bc7
 80127cc:	08012d1d 	.word	0x08012d1d
 80127d0:	08012d2d 	.word	0x08012d2d
 80127d4:	08012d03 	.word	0x08012d03
 80127d8:	08012d11 	.word	0x08012d11
    {
    #ifndef TXM_BLOCK_ALLOCATE_CALL_NOT_USED
    case TXM_BLOCK_ALLOCATE_CALL:
    {
        return_value = _txm_module_manager_tx_block_allocate_dispatch(module_instance, param_0, param_1, param_2);
 80127dc:	683b      	ldr	r3, [r7, #0]
 80127de:	687a      	ldr	r2, [r7, #4]
 80127e0:	68b9      	ldr	r1, [r7, #8]
 80127e2:	6938      	ldr	r0, [r7, #16]
 80127e4:	f7fb fdc0 	bl	800e368 <_txm_module_manager_tx_block_allocate_dispatch>
 80127e8:	6178      	str	r0, [r7, #20]
        break;
 80127ea:	e2b5      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BLOCK_POOL_CREATE_CALL_NOT_USED
    case TXM_BLOCK_POOL_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_block_pool_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	687a      	ldr	r2, [r7, #4]
 80127f0:	68b9      	ldr	r1, [r7, #8]
 80127f2:	6938      	ldr	r0, [r7, #16]
 80127f4:	f7fb fdfe 	bl	800e3f4 <_txm_module_manager_tx_block_pool_create_dispatch>
 80127f8:	6178      	str	r0, [r7, #20]
        break;
 80127fa:	e2ad      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BLOCK_POOL_DELETE_CALL_NOT_USED
    case TXM_BLOCK_POOL_DELETE_CALL:
    {
        return_value = _txm_module_manager_tx_block_pool_delete_dispatch(module_instance, param_0);
 80127fc:	68b9      	ldr	r1, [r7, #8]
 80127fe:	6938      	ldr	r0, [r7, #16]
 8012800:	f7fb fe84 	bl	800e50c <_txm_module_manager_tx_block_pool_delete_dispatch>
 8012804:	6178      	str	r0, [r7, #20]
        break;
 8012806:	e2a7      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BLOCK_POOL_INFO_GET_CALL_NOT_USED
    case TXM_BLOCK_POOL_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_block_pool_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	687a      	ldr	r2, [r7, #4]
 801280c:	68b9      	ldr	r1, [r7, #8]
 801280e:	6938      	ldr	r0, [r7, #16]
 8012810:	f7fb feb8 	bl	800e584 <_txm_module_manager_tx_block_pool_info_get_dispatch>
 8012814:	6178      	str	r0, [r7, #20]
        break;
 8012816:	e29f      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BLOCK_POOL_PERFORMANCE_INFO_GET_CALL_NOT_USED
    case TXM_BLOCK_POOL_PERFORMANCE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_block_pool_performance_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	687a      	ldr	r2, [r7, #4]
 801281c:	68b9      	ldr	r1, [r7, #8]
 801281e:	6938      	ldr	r0, [r7, #16]
 8012820:	f7fb ff6e 	bl	800e700 <_txm_module_manager_tx_block_pool_performance_info_get_dispatch>
 8012824:	6178      	str	r0, [r7, #20]
        break;
 8012826:	e297      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BLOCK_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL_NOT_USED
    case TXM_BLOCK_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_block_pool_performance_system_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	687a      	ldr	r2, [r7, #4]
 801282c:	68b9      	ldr	r1, [r7, #8]
 801282e:	6938      	ldr	r0, [r7, #16]
 8012830:	f7fb fff4 	bl	800e81c <_txm_module_manager_tx_block_pool_performance_system_info_get_dispatch>
 8012834:	6178      	str	r0, [r7, #20]
        break;
 8012836:	e28f      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BLOCK_POOL_PRIORITIZE_CALL_NOT_USED
    case TXM_BLOCK_POOL_PRIORITIZE_CALL:
    {
        return_value = _txm_module_manager_tx_block_pool_prioritize_dispatch(module_instance, param_0);
 8012838:	68b9      	ldr	r1, [r7, #8]
 801283a:	6938      	ldr	r0, [r7, #16]
 801283c:	f7fc f852 	bl	800e8e4 <_txm_module_manager_tx_block_pool_prioritize_dispatch>
 8012840:	6178      	str	r0, [r7, #20]
        break;
 8012842:	e289      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BLOCK_RELEASE_CALL_NOT_USED
    case TXM_BLOCK_RELEASE_CALL:
    {
        return_value = _txm_module_manager_tx_block_release_dispatch(module_instance, param_0);
 8012844:	68b9      	ldr	r1, [r7, #8]
 8012846:	6938      	ldr	r0, [r7, #16]
 8012848:	f7fc f880 	bl	800e94c <_txm_module_manager_tx_block_release_dispatch>
 801284c:	6178      	str	r0, [r7, #20]
        break;
 801284e:	e283      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BYTE_ALLOCATE_CALL_NOT_USED
    case TXM_BYTE_ALLOCATE_CALL:
    {
        return_value = _txm_module_manager_tx_byte_allocate_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	687a      	ldr	r2, [r7, #4]
 8012854:	68b9      	ldr	r1, [r7, #8]
 8012856:	6938      	ldr	r0, [r7, #16]
 8012858:	f7fc f8a1 	bl	800e99e <_txm_module_manager_tx_byte_allocate_dispatch>
 801285c:	6178      	str	r0, [r7, #20]
        break;
 801285e:	e27b      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BYTE_POOL_CREATE_CALL_NOT_USED
    case TXM_BYTE_POOL_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_byte_pool_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	687a      	ldr	r2, [r7, #4]
 8012864:	68b9      	ldr	r1, [r7, #8]
 8012866:	6938      	ldr	r0, [r7, #16]
 8012868:	f7fc f8ec 	bl	800ea44 <_txm_module_manager_tx_byte_pool_create_dispatch>
 801286c:	6178      	str	r0, [r7, #20]
        break;
 801286e:	e273      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BYTE_POOL_DELETE_CALL_NOT_USED
    case TXM_BYTE_POOL_DELETE_CALL:
    {
        return_value = _txm_module_manager_tx_byte_pool_delete_dispatch(module_instance, param_0);
 8012870:	68b9      	ldr	r1, [r7, #8]
 8012872:	6938      	ldr	r0, [r7, #16]
 8012874:	f7fc f96c 	bl	800eb50 <_txm_module_manager_tx_byte_pool_delete_dispatch>
 8012878:	6178      	str	r0, [r7, #20]
        break;
 801287a:	e26d      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BYTE_POOL_INFO_GET_CALL_NOT_USED
    case TXM_BYTE_POOL_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_byte_pool_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	687a      	ldr	r2, [r7, #4]
 8012880:	68b9      	ldr	r1, [r7, #8]
 8012882:	6938      	ldr	r0, [r7, #16]
 8012884:	f7fc f9a0 	bl	800ebc8 <_txm_module_manager_tx_byte_pool_info_get_dispatch>
 8012888:	6178      	str	r0, [r7, #20]
        break;
 801288a:	e265      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BYTE_POOL_PERFORMANCE_INFO_GET_CALL_NOT_USED
    case TXM_BYTE_POOL_PERFORMANCE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_byte_pool_performance_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	687a      	ldr	r2, [r7, #4]
 8012890:	68b9      	ldr	r1, [r7, #8]
 8012892:	6938      	ldr	r0, [r7, #16]
 8012894:	f7fc fa56 	bl	800ed44 <_txm_module_manager_tx_byte_pool_performance_info_get_dispatch>
 8012898:	6178      	str	r0, [r7, #20]
        break;
 801289a:	e25d      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BYTE_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL_NOT_USED
    case TXM_BYTE_POOL_PERFORMANCE_SYSTEM_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	68b9      	ldr	r1, [r7, #8]
 80128a2:	6938      	ldr	r0, [r7, #16]
 80128a4:	f7fc fb23 	bl	800eeee <_txm_module_manager_tx_byte_pool_performance_system_info_get_dispatch>
 80128a8:	6178      	str	r0, [r7, #20]
        break;
 80128aa:	e255      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BYTE_POOL_PRIORITIZE_CALL_NOT_USED
    case TXM_BYTE_POOL_PRIORITIZE_CALL:
    {
        return_value = _txm_module_manager_tx_byte_pool_prioritize_dispatch(module_instance, param_0);
 80128ac:	68b9      	ldr	r1, [r7, #8]
 80128ae:	6938      	ldr	r0, [r7, #16]
 80128b0:	f7fc fbc8 	bl	800f044 <_txm_module_manager_tx_byte_pool_prioritize_dispatch>
 80128b4:	6178      	str	r0, [r7, #20]
        break;
 80128b6:	e24f      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_BYTE_RELEASE_CALL_NOT_USED
    case TXM_BYTE_RELEASE_CALL:
    {
        return_value = _txm_module_manager_tx_byte_release_dispatch(module_instance, param_0);
 80128b8:	68b9      	ldr	r1, [r7, #8]
 80128ba:	6938      	ldr	r0, [r7, #16]
 80128bc:	f7fc fbf6 	bl	800f0ac <_txm_module_manager_tx_byte_release_dispatch>
 80128c0:	6178      	str	r0, [r7, #20]
        break;
 80128c2:	e249      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_EVENT_FLAGS_CREATE_CALL_NOT_USED
    case TXM_EVENT_FLAGS_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_event_flags_create_dispatch(module_instance, param_0, param_1, param_2);
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	687a      	ldr	r2, [r7, #4]
 80128c8:	68b9      	ldr	r1, [r7, #8]
 80128ca:	6938      	ldr	r0, [r7, #16]
 80128cc:	f7fc fc18 	bl	800f100 <_txm_module_manager_tx_event_flags_create_dispatch>
 80128d0:	6178      	str	r0, [r7, #20]
        break;
 80128d2:	e241      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_EVENT_FLAGS_DELETE_CALL_NOT_USED
    case TXM_EVENT_FLAGS_DELETE_CALL:
    {
        return_value = _txm_module_manager_tx_event_flags_delete_dispatch(module_instance, param_0);
 80128d4:	68b9      	ldr	r1, [r7, #8]
 80128d6:	6938      	ldr	r0, [r7, #16]
 80128d8:	f7fc fc70 	bl	800f1bc <_txm_module_manager_tx_event_flags_delete_dispatch>
 80128dc:	6178      	str	r0, [r7, #20]
        break;
 80128de:	e23b      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_EVENT_FLAGS_GET_CALL_NOT_USED
    case TXM_EVENT_FLAGS_GET_CALL:
    {
        return_value = _txm_module_manager_tx_event_flags_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80128e0:	683b      	ldr	r3, [r7, #0]
 80128e2:	687a      	ldr	r2, [r7, #4]
 80128e4:	68b9      	ldr	r1, [r7, #8]
 80128e6:	6938      	ldr	r0, [r7, #16]
 80128e8:	f7fc fca4 	bl	800f234 <_txm_module_manager_tx_event_flags_get_dispatch>
 80128ec:	6178      	str	r0, [r7, #20]
        break;
 80128ee:	e233      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_EVENT_FLAGS_INFO_GET_CALL_NOT_USED
    case TXM_EVENT_FLAGS_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_event_flags_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	687a      	ldr	r2, [r7, #4]
 80128f4:	68b9      	ldr	r1, [r7, #8]
 80128f6:	6938      	ldr	r0, [r7, #16]
 80128f8:	f7fc fcfa 	bl	800f2f0 <_txm_module_manager_tx_event_flags_info_get_dispatch>
 80128fc:	6178      	str	r0, [r7, #20]
        break;
 80128fe:	e22b      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_EVENT_FLAGS_PERFORMANCE_INFO_GET_CALL_NOT_USED
    case TXM_EVENT_FLAGS_PERFORMANCE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_event_flags_performance_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	687a      	ldr	r2, [r7, #4]
 8012904:	68b9      	ldr	r1, [r7, #8]
 8012906:	6938      	ldr	r0, [r7, #16]
 8012908:	f7fc fd98 	bl	800f43c <_txm_module_manager_tx_event_flags_performance_info_get_dispatch>
 801290c:	6178      	str	r0, [r7, #20]
        break;
 801290e:	e223      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_EVENT_FLAGS_PERFORMANCE_SYSTEM_INFO_GET_CALL_NOT_USED
    case TXM_EVENT_FLAGS_PERFORMANCE_SYSTEM_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_event_flags_performance_system_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	687a      	ldr	r2, [r7, #4]
 8012914:	68b9      	ldr	r1, [r7, #8]
 8012916:	6938      	ldr	r0, [r7, #16]
 8012918:	f7fc fe1e 	bl	800f558 <_txm_module_manager_tx_event_flags_performance_system_info_get_dispatch>
 801291c:	6178      	str	r0, [r7, #20]
        break;
 801291e:	e21b      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
 8012920:	2400f034 	.word	0x2400f034
    #endif

    #ifndef TXM_EVENT_FLAGS_SET_CALL_NOT_USED
    case TXM_EVENT_FLAGS_SET_CALL:
    {
        return_value = _txm_module_manager_tx_event_flags_set_dispatch(module_instance, param_0, param_1, param_2);
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	687a      	ldr	r2, [r7, #4]
 8012928:	68b9      	ldr	r1, [r7, #8]
 801292a:	6938      	ldr	r0, [r7, #16]
 801292c:	f7fc fe78 	bl	800f620 <_txm_module_manager_tx_event_flags_set_dispatch>
 8012930:	6178      	str	r0, [r7, #20]
        break;
 8012932:	e211      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_EVENT_FLAGS_SET_NOTIFY_CALL_NOT_USED
    case TXM_EVENT_FLAGS_SET_NOTIFY_CALL:
    {
        return_value = _txm_module_manager_tx_event_flags_set_notify_dispatch(module_instance, param_0, param_1);
 8012934:	687a      	ldr	r2, [r7, #4]
 8012936:	68b9      	ldr	r1, [r7, #8]
 8012938:	6938      	ldr	r0, [r7, #16]
 801293a:	f7fc fea9 	bl	800f690 <_txm_module_manager_tx_event_flags_set_notify_dispatch>
 801293e:	6178      	str	r0, [r7, #20]
        break;
 8012940:	e20a      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MUTEX_CREATE_CALL_NOT_USED
    case TXM_MUTEX_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_mutex_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012942:	683b      	ldr	r3, [r7, #0]
 8012944:	687a      	ldr	r2, [r7, #4]
 8012946:	68b9      	ldr	r1, [r7, #8]
 8012948:	6938      	ldr	r0, [r7, #16]
 801294a:	f7fc fef5 	bl	800f738 <_txm_module_manager_tx_mutex_create_dispatch>
 801294e:	6178      	str	r0, [r7, #20]
        break;
 8012950:	e202      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MUTEX_DELETE_CALL_NOT_USED
    case TXM_MUTEX_DELETE_CALL:
    {
        return_value = _txm_module_manager_tx_mutex_delete_dispatch(module_instance, param_0);
 8012952:	68b9      	ldr	r1, [r7, #8]
 8012954:	6938      	ldr	r0, [r7, #16]
 8012956:	f7fc ff5b 	bl	800f810 <_txm_module_manager_tx_mutex_delete_dispatch>
 801295a:	6178      	str	r0, [r7, #20]
        break;
 801295c:	e1fc      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MUTEX_GET_CALL_NOT_USED
    case TXM_MUTEX_GET_CALL:
    {
        return_value = _txm_module_manager_tx_mutex_get_dispatch(module_instance, param_0, param_1);
 801295e:	687a      	ldr	r2, [r7, #4]
 8012960:	68b9      	ldr	r1, [r7, #8]
 8012962:	6938      	ldr	r0, [r7, #16]
 8012964:	f7fc ff90 	bl	800f888 <_txm_module_manager_tx_mutex_get_dispatch>
 8012968:	6178      	str	r0, [r7, #20]
        break;
 801296a:	e1f5      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MUTEX_INFO_GET_CALL_NOT_USED
    case TXM_MUTEX_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_mutex_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	687a      	ldr	r2, [r7, #4]
 8012970:	68b9      	ldr	r1, [r7, #8]
 8012972:	6938      	ldr	r0, [r7, #16]
 8012974:	f7fc ffbe 	bl	800f8f4 <_txm_module_manager_tx_mutex_info_get_dispatch>
 8012978:	6178      	str	r0, [r7, #20]
        break;
 801297a:	e1ed      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MUTEX_PERFORMANCE_INFO_GET_CALL_NOT_USED
    case TXM_MUTEX_PERFORMANCE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_mutex_performance_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	68b9      	ldr	r1, [r7, #8]
 8012982:	6938      	ldr	r0, [r7, #16]
 8012984:	f7fd f874 	bl	800fa70 <_txm_module_manager_tx_mutex_performance_info_get_dispatch>
 8012988:	6178      	str	r0, [r7, #20]
        break;
 801298a:	e1e5      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MUTEX_PERFORMANCE_SYSTEM_INFO_GET_CALL_NOT_USED
    case TXM_MUTEX_PERFORMANCE_SYSTEM_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_mutex_performance_system_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	687a      	ldr	r2, [r7, #4]
 8012990:	68b9      	ldr	r1, [r7, #8]
 8012992:	6938      	ldr	r0, [r7, #16]
 8012994:	f7fd f92a 	bl	800fbec <_txm_module_manager_tx_mutex_performance_system_info_get_dispatch>
 8012998:	6178      	str	r0, [r7, #20]
        break;
 801299a:	e1dd      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MUTEX_PRIORITIZE_CALL_NOT_USED
    case TXM_MUTEX_PRIORITIZE_CALL:
    {
        return_value = _txm_module_manager_tx_mutex_prioritize_dispatch(module_instance, param_0);
 801299c:	68b9      	ldr	r1, [r7, #8]
 801299e:	6938      	ldr	r0, [r7, #16]
 80129a0:	f7fd f9b8 	bl	800fd14 <_txm_module_manager_tx_mutex_prioritize_dispatch>
 80129a4:	6178      	str	r0, [r7, #20]
        break;
 80129a6:	e1d7      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MUTEX_PUT_CALL_NOT_USED
    case TXM_MUTEX_PUT_CALL:
    {
        return_value = _txm_module_manager_tx_mutex_put_dispatch(module_instance, param_0);
 80129a8:	68b9      	ldr	r1, [r7, #8]
 80129aa:	6938      	ldr	r0, [r7, #16]
 80129ac:	f7fd f9e6 	bl	800fd7c <_txm_module_manager_tx_mutex_put_dispatch>
 80129b0:	6178      	str	r0, [r7, #20]
        break;
 80129b2:	e1d1      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_CREATE_CALL_NOT_USED
    case TXM_QUEUE_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_queue_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	687a      	ldr	r2, [r7, #4]
 80129b8:	68b9      	ldr	r1, [r7, #8]
 80129ba:	6938      	ldr	r0, [r7, #16]
 80129bc:	f7fd fa12 	bl	800fde4 <_txm_module_manager_tx_queue_create_dispatch>
 80129c0:	6178      	str	r0, [r7, #20]
        break;
 80129c2:	e1c9      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_DELETE_CALL_NOT_USED
    case TXM_QUEUE_DELETE_CALL:
    {
        return_value = _txm_module_manager_tx_queue_delete_dispatch(module_instance, param_0);
 80129c4:	68b9      	ldr	r1, [r7, #8]
 80129c6:	6938      	ldr	r0, [r7, #16]
 80129c8:	f7fd fa98 	bl	800fefc <_txm_module_manager_tx_queue_delete_dispatch>
 80129cc:	6178      	str	r0, [r7, #20]
        break;
 80129ce:	e1c3      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_FLUSH_CALL_NOT_USED
    case TXM_QUEUE_FLUSH_CALL:
    {
        return_value = _txm_module_manager_tx_queue_flush_dispatch(module_instance, param_0);
 80129d0:	68b9      	ldr	r1, [r7, #8]
 80129d2:	6938      	ldr	r0, [r7, #16]
 80129d4:	f7fd face 	bl	800ff74 <_txm_module_manager_tx_queue_flush_dispatch>
 80129d8:	6178      	str	r0, [r7, #20]
        break;
 80129da:	e1bd      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_FRONT_SEND_CALL_NOT_USED
    case TXM_QUEUE_FRONT_SEND_CALL:
    {
        return_value = _txm_module_manager_tx_queue_front_send_dispatch(module_instance, param_0, param_1, param_2);
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	687a      	ldr	r2, [r7, #4]
 80129e0:	68b9      	ldr	r1, [r7, #8]
 80129e2:	6938      	ldr	r0, [r7, #16]
 80129e4:	f7fd fafa 	bl	800ffdc <_txm_module_manager_tx_queue_front_send_dispatch>
 80129e8:	6178      	str	r0, [r7, #20]
        break;
 80129ea:	e1b5      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_INFO_GET_CALL_NOT_USED
    case TXM_QUEUE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_queue_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80129ec:	683b      	ldr	r3, [r7, #0]
 80129ee:	687a      	ldr	r2, [r7, #4]
 80129f0:	68b9      	ldr	r1, [r7, #8]
 80129f2:	6938      	ldr	r0, [r7, #16]
 80129f4:	f7fd fb51 	bl	801009a <_txm_module_manager_tx_queue_info_get_dispatch>
 80129f8:	6178      	str	r0, [r7, #20]
        break;
 80129fa:	e1ad      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_PERFORMANCE_INFO_GET_CALL_NOT_USED
    case TXM_QUEUE_PERFORMANCE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_queue_performance_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 80129fc:	683b      	ldr	r3, [r7, #0]
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	68b9      	ldr	r1, [r7, #8]
 8012a02:	6938      	ldr	r0, [r7, #16]
 8012a04:	f7fd fc07 	bl	8010216 <_txm_module_manager_tx_queue_performance_info_get_dispatch>
 8012a08:	6178      	str	r0, [r7, #20]
        break;
 8012a0a:	e1a5      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_PERFORMANCE_SYSTEM_INFO_GET_CALL_NOT_USED
    case TXM_QUEUE_PERFORMANCE_SYSTEM_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_queue_performance_system_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012a0c:	683b      	ldr	r3, [r7, #0]
 8012a0e:	687a      	ldr	r2, [r7, #4]
 8012a10:	68b9      	ldr	r1, [r7, #8]
 8012a12:	6938      	ldr	r0, [r7, #16]
 8012a14:	f7fd fcbd 	bl	8010392 <_txm_module_manager_tx_queue_performance_system_info_get_dispatch>
 8012a18:	6178      	str	r0, [r7, #20]
        break;
 8012a1a:	e19d      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_PRIORITIZE_CALL_NOT_USED
    case TXM_QUEUE_PRIORITIZE_CALL:
    {
        return_value = _txm_module_manager_tx_queue_prioritize_dispatch(module_instance, param_0);
 8012a1c:	68b9      	ldr	r1, [r7, #8]
 8012a1e:	6938      	ldr	r0, [r7, #16]
 8012a20:	f7fd fd4b 	bl	80104ba <_txm_module_manager_tx_queue_prioritize_dispatch>
 8012a24:	6178      	str	r0, [r7, #20]
        break;
 8012a26:	e197      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_RECEIVE_CALL_NOT_USED
    case TXM_QUEUE_RECEIVE_CALL:
    {
        return_value = _txm_module_manager_tx_queue_receive_dispatch(module_instance, param_0, param_1, param_2);
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	687a      	ldr	r2, [r7, #4]
 8012a2c:	68b9      	ldr	r1, [r7, #8]
 8012a2e:	6938      	ldr	r0, [r7, #16]
 8012a30:	f7fd fd77 	bl	8010522 <_txm_module_manager_tx_queue_receive_dispatch>
 8012a34:	6178      	str	r0, [r7, #20]
        break;
 8012a36:	e18f      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_SEND_CALL_NOT_USED
    case TXM_QUEUE_SEND_CALL:
    {
        return_value = _txm_module_manager_tx_queue_send_dispatch(module_instance, param_0, param_1, param_2);
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	687a      	ldr	r2, [r7, #4]
 8012a3c:	68b9      	ldr	r1, [r7, #8]
 8012a3e:	6938      	ldr	r0, [r7, #16]
 8012a40:	f7fd fdb9 	bl	80105b6 <_txm_module_manager_tx_queue_send_dispatch>
 8012a44:	6178      	str	r0, [r7, #20]
        break;
 8012a46:	e187      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_QUEUE_SEND_NOTIFY_CALL_NOT_USED
    case TXM_QUEUE_SEND_NOTIFY_CALL:
    {
        return_value = _txm_module_manager_tx_queue_send_notify_dispatch(module_instance, param_0, param_1);
 8012a48:	687a      	ldr	r2, [r7, #4]
 8012a4a:	68b9      	ldr	r1, [r7, #8]
 8012a4c:	6938      	ldr	r0, [r7, #16]
 8012a4e:	f7fd fe15 	bl	801067c <_txm_module_manager_tx_queue_send_notify_dispatch>
 8012a52:	6178      	str	r0, [r7, #20]
        break;
 8012a54:	e180      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_CEILING_PUT_CALL_NOT_USED
    case TXM_SEMAPHORE_CEILING_PUT_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_ceiling_put_dispatch(module_instance, param_0, param_1);
 8012a56:	687a      	ldr	r2, [r7, #4]
 8012a58:	68b9      	ldr	r1, [r7, #8]
 8012a5a:	6938      	ldr	r0, [r7, #16]
 8012a5c:	f7fd fe62 	bl	8010724 <_txm_module_manager_tx_semaphore_ceiling_put_dispatch>
 8012a60:	6178      	str	r0, [r7, #20]
        break;
 8012a62:	e179      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_CREATE_CALL_NOT_USED
    case TXM_SEMAPHORE_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	687a      	ldr	r2, [r7, #4]
 8012a68:	68b9      	ldr	r1, [r7, #8]
 8012a6a:	6938      	ldr	r0, [r7, #16]
 8012a6c:	f7fd fe90 	bl	8010790 <_txm_module_manager_tx_semaphore_create_dispatch>
 8012a70:	6178      	str	r0, [r7, #20]
        break;
 8012a72:	e171      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_DELETE_CALL_NOT_USED
    case TXM_SEMAPHORE_DELETE_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_delete_dispatch(module_instance, param_0);
 8012a74:	68b9      	ldr	r1, [r7, #8]
 8012a76:	6938      	ldr	r0, [r7, #16]
 8012a78:	f7fd fef6 	bl	8010868 <_txm_module_manager_tx_semaphore_delete_dispatch>
 8012a7c:	6178      	str	r0, [r7, #20]
        break;
 8012a7e:	e16b      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_GET_CALL_NOT_USED
    case TXM_SEMAPHORE_GET_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_get_dispatch(module_instance, param_0, param_1);
 8012a80:	687a      	ldr	r2, [r7, #4]
 8012a82:	68b9      	ldr	r1, [r7, #8]
 8012a84:	6938      	ldr	r0, [r7, #16]
 8012a86:	f7fd ff2b 	bl	80108e0 <_txm_module_manager_tx_semaphore_get_dispatch>
 8012a8a:	6178      	str	r0, [r7, #20]
        break;
 8012a8c:	e164      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_INFO_GET_CALL_NOT_USED
    case TXM_SEMAPHORE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	68b9      	ldr	r1, [r7, #8]
 8012a94:	6938      	ldr	r0, [r7, #16]
 8012a96:	f7fd ff59 	bl	801094c <_txm_module_manager_tx_semaphore_info_get_dispatch>
 8012a9a:	6178      	str	r0, [r7, #20]
        break;
 8012a9c:	e15c      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_PERFORMANCE_INFO_GET_CALL_NOT_USED
    case TXM_SEMAPHORE_PERFORMANCE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_performance_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	687a      	ldr	r2, [r7, #4]
 8012aa2:	68b9      	ldr	r1, [r7, #8]
 8012aa4:	6938      	ldr	r0, [r7, #16]
 8012aa6:	f7fd fff7 	bl	8010a98 <_txm_module_manager_tx_semaphore_performance_info_get_dispatch>
 8012aaa:	6178      	str	r0, [r7, #20]
        break;
 8012aac:	e154      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_PERFORMANCE_SYSTEM_INFO_GET_CALL_NOT_USED
    case TXM_SEMAPHORE_PERFORMANCE_SYSTEM_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_performance_system_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	687a      	ldr	r2, [r7, #4]
 8012ab2:	68b9      	ldr	r1, [r7, #8]
 8012ab4:	6938      	ldr	r0, [r7, #16]
 8012ab6:	f7fe f87d 	bl	8010bb4 <_txm_module_manager_tx_semaphore_performance_system_info_get_dispatch>
 8012aba:	6178      	str	r0, [r7, #20]
        break;
 8012abc:	e14c      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_PRIORITIZE_CALL_NOT_USED
    case TXM_SEMAPHORE_PRIORITIZE_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_prioritize_dispatch(module_instance, param_0);
 8012abe:	68b9      	ldr	r1, [r7, #8]
 8012ac0:	6938      	ldr	r0, [r7, #16]
 8012ac2:	f7fe f8db 	bl	8010c7c <_txm_module_manager_tx_semaphore_prioritize_dispatch>
 8012ac6:	6178      	str	r0, [r7, #20]
        break;
 8012ac8:	e146      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_PUT_CALL_NOT_USED
    case TXM_SEMAPHORE_PUT_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_put_dispatch(module_instance, param_0);
 8012aca:	68b9      	ldr	r1, [r7, #8]
 8012acc:	6938      	ldr	r0, [r7, #16]
 8012ace:	f7fe f909 	bl	8010ce4 <_txm_module_manager_tx_semaphore_put_dispatch>
 8012ad2:	6178      	str	r0, [r7, #20]
        break;
 8012ad4:	e140      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_SEMAPHORE_PUT_NOTIFY_CALL_NOT_USED
    case TXM_SEMAPHORE_PUT_NOTIFY_CALL:
    {
        return_value = _txm_module_manager_tx_semaphore_put_notify_dispatch(module_instance, param_0, param_1);
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	68b9      	ldr	r1, [r7, #8]
 8012ada:	6938      	ldr	r0, [r7, #16]
 8012adc:	f7fe f936 	bl	8010d4c <_txm_module_manager_tx_semaphore_put_notify_dispatch>
 8012ae0:	6178      	str	r0, [r7, #20]
        break;
 8012ae2:	e139      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_CREATE_CALL_NOT_USED
    case TXM_THREAD_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_thread_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	687a      	ldr	r2, [r7, #4]
 8012ae8:	68b9      	ldr	r1, [r7, #8]
 8012aea:	6938      	ldr	r0, [r7, #16]
 8012aec:	f7fe f982 	bl	8010df4 <_txm_module_manager_tx_thread_create_dispatch>
 8012af0:	6178      	str	r0, [r7, #20]
        break;
 8012af2:	e131      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_DELETE_CALL_NOT_USED
    case TXM_THREAD_DELETE_CALL:
    {
        return_value = _txm_module_manager_tx_thread_delete_dispatch(module_instance, param_0);
 8012af4:	68b9      	ldr	r1, [r7, #8]
 8012af6:	6938      	ldr	r0, [r7, #16]
 8012af8:	f7fe fa3e 	bl	8010f78 <_txm_module_manager_tx_thread_delete_dispatch>
 8012afc:	6178      	str	r0, [r7, #20]
        break;
 8012afe:	e12b      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_ENTRY_EXIT_NOTIFY_CALL_NOT_USED
    case TXM_THREAD_ENTRY_EXIT_NOTIFY_CALL:
    {
        return_value = _txm_module_manager_tx_thread_entry_exit_notify_dispatch(module_instance, param_0, param_1);
 8012b00:	687a      	ldr	r2, [r7, #4]
 8012b02:	68b9      	ldr	r1, [r7, #8]
 8012b04:	6938      	ldr	r0, [r7, #16]
 8012b06:	f7fe fa73 	bl	8010ff0 <_txm_module_manager_tx_thread_entry_exit_notify_dispatch>
 8012b0a:	6178      	str	r0, [r7, #20]
        break;
 8012b0c:	e124      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_IDENTIFY_CALL_NOT_USED
    case TXM_THREAD_IDENTIFY_CALL:
    {
        return_value = _txm_module_manager_tx_thread_identify_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	687a      	ldr	r2, [r7, #4]
 8012b12:	68b9      	ldr	r1, [r7, #8]
 8012b14:	6938      	ldr	r0, [r7, #16]
 8012b16:	f7fe fac9 	bl	80110ac <_txm_module_manager_tx_thread_identify_dispatch>
 8012b1a:	6178      	str	r0, [r7, #20]
        break;
 8012b1c:	e11c      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_INFO_GET_CALL_NOT_USED
    case TXM_THREAD_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_thread_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012b1e:	683b      	ldr	r3, [r7, #0]
 8012b20:	687a      	ldr	r2, [r7, #4]
 8012b22:	68b9      	ldr	r1, [r7, #8]
 8012b24:	6938      	ldr	r0, [r7, #16]
 8012b26:	f7fe fad1 	bl	80110cc <_txm_module_manager_tx_thread_info_get_dispatch>
 8012b2a:	6178      	str	r0, [r7, #20]
        break;
 8012b2c:	e114      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_INTERRUPT_CONTROL_CALL_NOT_USED
    case TXM_THREAD_INTERRUPT_CONTROL_CALL:
    {
        return_value = _txm_module_manager_tx_thread_interrupt_control_dispatch(module_instance, param_0);
 8012b2e:	68b9      	ldr	r1, [r7, #8]
 8012b30:	6938      	ldr	r0, [r7, #16]
 8012b32:	f7fe fbb7 	bl	80112a4 <_txm_module_manager_tx_thread_interrupt_control_dispatch>
 8012b36:	6178      	str	r0, [r7, #20]
        break;
 8012b38:	e10e      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_PERFORMANCE_INFO_GET_CALL_NOT_USED
    case TXM_THREAD_PERFORMANCE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_thread_performance_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012b3a:	683b      	ldr	r3, [r7, #0]
 8012b3c:	687a      	ldr	r2, [r7, #4]
 8012b3e:	68b9      	ldr	r1, [r7, #8]
 8012b40:	6938      	ldr	r0, [r7, #16]
 8012b42:	f7fe fbc5 	bl	80112d0 <_txm_module_manager_tx_thread_performance_info_get_dispatch>
 8012b46:	6178      	str	r0, [r7, #20]
        break;
 8012b48:	e106      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_PERFORMANCE_SYSTEM_INFO_GET_CALL_NOT_USED
    case TXM_THREAD_PERFORMANCE_SYSTEM_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_thread_performance_system_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012b4a:	683b      	ldr	r3, [r7, #0]
 8012b4c:	687a      	ldr	r2, [r7, #4]
 8012b4e:	68b9      	ldr	r1, [r7, #8]
 8012b50:	6938      	ldr	r0, [r7, #16]
 8012b52:	f7fe fcd9 	bl	8011508 <_txm_module_manager_tx_thread_performance_system_info_get_dispatch>
 8012b56:	6178      	str	r0, [r7, #20]
        break;
 8012b58:	e0fe      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_PREEMPTION_CHANGE_CALL_NOT_USED
    case TXM_THREAD_PREEMPTION_CHANGE_CALL:
    {
        return_value = _txm_module_manager_tx_thread_preemption_change_dispatch(module_instance, param_0, param_1, param_2);
 8012b5a:	683b      	ldr	r3, [r7, #0]
 8012b5c:	687a      	ldr	r2, [r7, #4]
 8012b5e:	68b9      	ldr	r1, [r7, #8]
 8012b60:	6938      	ldr	r0, [r7, #16]
 8012b62:	f7fe fddb 	bl	801171c <_txm_module_manager_tx_thread_preemption_change_dispatch>
 8012b66:	6178      	str	r0, [r7, #20]
        break;
 8012b68:	e0f6      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_PRIORITY_CHANGE_CALL_NOT_USED
    case TXM_THREAD_PRIORITY_CHANGE_CALL:
    {
        return_value = _txm_module_manager_tx_thread_priority_change_dispatch(module_instance, param_0, param_1, param_2);
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	68b9      	ldr	r1, [r7, #8]
 8012b70:	6938      	ldr	r0, [r7, #16]
 8012b72:	f7fe fe18 	bl	80117a6 <_txm_module_manager_tx_thread_priority_change_dispatch>
 8012b76:	6178      	str	r0, [r7, #20]
        break;
 8012b78:	e0ee      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_RELINQUISH_CALL_NOT_USED
    case TXM_THREAD_RELINQUISH_CALL:
    {
        return_value = _txm_module_manager_tx_thread_relinquish_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	687a      	ldr	r2, [r7, #4]
 8012b7e:	68b9      	ldr	r1, [r7, #8]
 8012b80:	6938      	ldr	r0, [r7, #16]
 8012b82:	f7fe fe55 	bl	8011830 <_txm_module_manager_tx_thread_relinquish_dispatch>
 8012b86:	6178      	str	r0, [r7, #20]
        break;
 8012b88:	e0e6      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_RESET_CALL_NOT_USED
    case TXM_THREAD_RESET_CALL:
    {
        return_value = _txm_module_manager_tx_thread_reset_dispatch(module_instance, param_0);
 8012b8a:	68b9      	ldr	r1, [r7, #8]
 8012b8c:	6938      	ldr	r0, [r7, #16]
 8012b8e:	f7fe fe5d 	bl	801184c <_txm_module_manager_tx_thread_reset_dispatch>
 8012b92:	6178      	str	r0, [r7, #20]
        break;
 8012b94:	e0e0      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_RESUME_CALL_NOT_USED
    case TXM_THREAD_RESUME_CALL:
    {
        return_value = _txm_module_manager_tx_thread_resume_dispatch(module_instance, param_0);
 8012b96:	68b9      	ldr	r1, [r7, #8]
 8012b98:	6938      	ldr	r0, [r7, #16]
 8012b9a:	f7fe fe8b 	bl	80118b4 <_txm_module_manager_tx_thread_resume_dispatch>
 8012b9e:	6178      	str	r0, [r7, #20]
        break;
 8012ba0:	e0da      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_SLEEP_CALL_NOT_USED
    case TXM_THREAD_SLEEP_CALL:
    {
        return_value = _txm_module_manager_tx_thread_sleep_dispatch(module_instance, param_0);
 8012ba2:	68b9      	ldr	r1, [r7, #8]
 8012ba4:	6938      	ldr	r0, [r7, #16]
 8012ba6:	f7fe feb9 	bl	801191c <_txm_module_manager_tx_thread_sleep_dispatch>
 8012baa:	6178      	str	r0, [r7, #20]
        break;
 8012bac:	e0d4      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_STACK_ERROR_NOTIFY_CALL_NOT_USED
    case TXM_THREAD_STACK_ERROR_NOTIFY_CALL:
    {
        return_value = _txm_module_manager_tx_thread_stack_error_notify_dispatch(module_instance, param_0);
 8012bae:	68b9      	ldr	r1, [r7, #8]
 8012bb0:	6938      	ldr	r0, [r7, #16]
 8012bb2:	f7fe fec1 	bl	8011938 <_txm_module_manager_tx_thread_stack_error_notify_dispatch>
 8012bb6:	6178      	str	r0, [r7, #20]
        break;
 8012bb8:	e0ce      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_SUSPEND_CALL_NOT_USED
    case TXM_THREAD_SUSPEND_CALL:
    {
        return_value = _txm_module_manager_tx_thread_suspend_dispatch(module_instance, param_0);
 8012bba:	68b9      	ldr	r1, [r7, #8]
 8012bbc:	6938      	ldr	r0, [r7, #16]
 8012bbe:	f7fe fed2 	bl	8011966 <_txm_module_manager_tx_thread_suspend_dispatch>
 8012bc2:	6178      	str	r0, [r7, #20]
        break;
 8012bc4:	e0c8      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_SYSTEM_SUSPEND_CALL_NOT_USED
    case TXM_THREAD_SYSTEM_SUSPEND_CALL:
    {
        return_value = _txm_module_manager_tx_thread_system_suspend_dispatch(module_instance, param_0);
 8012bc6:	68b9      	ldr	r1, [r7, #8]
 8012bc8:	6938      	ldr	r0, [r7, #16]
 8012bca:	f7fe ff01 	bl	80119d0 <_txm_module_manager_tx_thread_system_suspend_dispatch>
 8012bce:	6178      	str	r0, [r7, #20]
        break;
 8012bd0:	e0c2      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_TERMINATE_CALL_NOT_USED
    case TXM_THREAD_TERMINATE_CALL:
    {
        return_value = _txm_module_manager_tx_thread_terminate_dispatch(module_instance, param_0);
 8012bd2:	68b9      	ldr	r1, [r7, #8]
 8012bd4:	6938      	ldr	r0, [r7, #16]
 8012bd6:	f7fe ff55 	bl	8011a84 <_txm_module_manager_tx_thread_terminate_dispatch>
 8012bda:	6178      	str	r0, [r7, #20]
        break;
 8012bdc:	e0bc      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_TIME_SLICE_CHANGE_CALL_NOT_USED
    case TXM_THREAD_TIME_SLICE_CHANGE_CALL:
    {
        return_value = _txm_module_manager_tx_thread_time_slice_change_dispatch(module_instance, param_0, param_1, param_2);
 8012bde:	683b      	ldr	r3, [r7, #0]
 8012be0:	687a      	ldr	r2, [r7, #4]
 8012be2:	68b9      	ldr	r1, [r7, #8]
 8012be4:	6938      	ldr	r0, [r7, #16]
 8012be6:	f7fe ff81 	bl	8011aec <_txm_module_manager_tx_thread_time_slice_change_dispatch>
 8012bea:	6178      	str	r0, [r7, #20]
        break;
 8012bec:	e0b4      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_THREAD_WAIT_ABORT_CALL_NOT_USED
    case TXM_THREAD_WAIT_ABORT_CALL:
    {
        return_value = _txm_module_manager_tx_thread_wait_abort_dispatch(module_instance, param_0);
 8012bee:	68b9      	ldr	r1, [r7, #8]
 8012bf0:	6938      	ldr	r0, [r7, #16]
 8012bf2:	f7fe ffc0 	bl	8011b76 <_txm_module_manager_tx_thread_wait_abort_dispatch>
 8012bf6:	6178      	str	r0, [r7, #20]
        break;
 8012bf8:	e0ae      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIME_GET_CALL_NOT_USED
    case TXM_TIME_GET_CALL:
    {
        return_value = _txm_module_manager_tx_time_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	687a      	ldr	r2, [r7, #4]
 8012bfe:	68b9      	ldr	r1, [r7, #8]
 8012c00:	6938      	ldr	r0, [r7, #16]
 8012c02:	f7fe ffec 	bl	8011bde <_txm_module_manager_tx_time_get_dispatch>
 8012c06:	6178      	str	r0, [r7, #20]
        break;
 8012c08:	e0a6      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIME_SET_CALL_NOT_USED
    case TXM_TIME_SET_CALL:
    {
        return_value = _txm_module_manager_tx_time_set_dispatch(module_instance, param_0);
 8012c0a:	68b9      	ldr	r1, [r7, #8]
 8012c0c:	6938      	ldr	r0, [r7, #16]
 8012c0e:	f7fe fff5 	bl	8011bfc <_txm_module_manager_tx_time_set_dispatch>
 8012c12:	6178      	str	r0, [r7, #20]
        break;
 8012c14:	e0a0      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIMER_ACTIVATE_CALL_NOT_USED
    case TXM_TIMER_ACTIVATE_CALL:
    {
        return_value = _txm_module_manager_tx_timer_activate_dispatch(module_instance, param_0);
 8012c16:	68b9      	ldr	r1, [r7, #8]
 8012c18:	6938      	ldr	r0, [r7, #16]
 8012c1a:	f7fe fffc 	bl	8011c16 <_txm_module_manager_tx_timer_activate_dispatch>
 8012c1e:	6178      	str	r0, [r7, #20]
        break;
 8012c20:	e09a      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIMER_CHANGE_CALL_NOT_USED
    case TXM_TIMER_CHANGE_CALL:
    {
        return_value = _txm_module_manager_tx_timer_change_dispatch(module_instance, param_0, param_1, param_2);
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	687a      	ldr	r2, [r7, #4]
 8012c26:	68b9      	ldr	r1, [r7, #8]
 8012c28:	6938      	ldr	r0, [r7, #16]
 8012c2a:	f7ff f828 	bl	8011c7e <_txm_module_manager_tx_timer_change_dispatch>
 8012c2e:	6178      	str	r0, [r7, #20]
        break;
 8012c30:	e092      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIMER_CREATE_CALL_NOT_USED
    case TXM_TIMER_CREATE_CALL:
    {
        return_value = _txm_module_manager_tx_timer_create_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	687a      	ldr	r2, [r7, #4]
 8012c36:	68b9      	ldr	r1, [r7, #8]
 8012c38:	6938      	ldr	r0, [r7, #16]
 8012c3a:	f7ff f859 	bl	8011cf0 <_txm_module_manager_tx_timer_create_dispatch>
 8012c3e:	6178      	str	r0, [r7, #20]
        break;
 8012c40:	e08a      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIMER_DEACTIVATE_CALL_NOT_USED
    case TXM_TIMER_DEACTIVATE_CALL:
    {
        return_value = _txm_module_manager_tx_timer_deactivate_dispatch(module_instance, param_0);
 8012c42:	68b9      	ldr	r1, [r7, #8]
 8012c44:	6938      	ldr	r0, [r7, #16]
 8012c46:	f7ff f8ed 	bl	8011e24 <_txm_module_manager_tx_timer_deactivate_dispatch>
 8012c4a:	6178      	str	r0, [r7, #20]
        break;
 8012c4c:	e084      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIMER_DELETE_CALL_NOT_USED
    case TXM_TIMER_DELETE_CALL:
    {
        return_value = _txm_module_manager_tx_timer_delete_dispatch(module_instance, param_0);
 8012c4e:	68b9      	ldr	r1, [r7, #8]
 8012c50:	6938      	ldr	r0, [r7, #16]
 8012c52:	f7ff f91b 	bl	8011e8c <_txm_module_manager_tx_timer_delete_dispatch>
 8012c56:	6178      	str	r0, [r7, #20]
        break;
 8012c58:	e07e      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIMER_INFO_GET_CALL_NOT_USED
    case TXM_TIMER_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_timer_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	687a      	ldr	r2, [r7, #4]
 8012c5e:	68b9      	ldr	r1, [r7, #8]
 8012c60:	6938      	ldr	r0, [r7, #16]
 8012c62:	f7ff f94f 	bl	8011f04 <_txm_module_manager_tx_timer_info_get_dispatch>
 8012c66:	6178      	str	r0, [r7, #20]
        break;
 8012c68:	e076      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIMER_PERFORMANCE_INFO_GET_CALL_NOT_USED
    case TXM_TIMER_PERFORMANCE_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_timer_performance_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	687a      	ldr	r2, [r7, #4]
 8012c6e:	68b9      	ldr	r1, [r7, #8]
 8012c70:	6938      	ldr	r0, [r7, #16]
 8012c72:	f7ff f9ed 	bl	8012050 <_txm_module_manager_tx_timer_performance_info_get_dispatch>
 8012c76:	6178      	str	r0, [r7, #20]
        break;
 8012c78:	e06e      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TIMER_PERFORMANCE_SYSTEM_INFO_GET_CALL_NOT_USED
    case TXM_TIMER_PERFORMANCE_SYSTEM_INFO_GET_CALL:
    {
        return_value = _txm_module_manager_tx_timer_performance_system_info_get_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	687a      	ldr	r2, [r7, #4]
 8012c7e:	68b9      	ldr	r1, [r7, #8]
 8012c80:	6938      	ldr	r0, [r7, #16]
 8012c82:	f7ff fa8b 	bl	801219c <_txm_module_manager_tx_timer_performance_system_info_get_dispatch>
 8012c86:	6178      	str	r0, [r7, #20]
        break;
 8012c88:	e066      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_BUFFER_FULL_NOTIFY_CALL_NOT_USED
    case TXM_TRACE_BUFFER_FULL_NOTIFY_CALL:
    {
        return_value = _txm_module_manager_tx_trace_buffer_full_notify_dispatch(module_instance, param_0);
 8012c8a:	68b9      	ldr	r1, [r7, #8]
 8012c8c:	6938      	ldr	r0, [r7, #16]
 8012c8e:	f7ff fb01 	bl	8012294 <_txm_module_manager_tx_trace_buffer_full_notify_dispatch>
 8012c92:	6178      	str	r0, [r7, #20]
        break;
 8012c94:	e060      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_DISABLE_CALL_NOT_USED
    case TXM_TRACE_DISABLE_CALL:
    {
        return_value = _txm_module_manager_tx_trace_disable_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	687a      	ldr	r2, [r7, #4]
 8012c9a:	68b9      	ldr	r1, [r7, #8]
 8012c9c:	6938      	ldr	r0, [r7, #16]
 8012c9e:	f7ff fb08 	bl	80122b2 <_txm_module_manager_tx_trace_disable_dispatch>
 8012ca2:	6178      	str	r0, [r7, #20]
        break;
 8012ca4:	e058      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_ENABLE_CALL_NOT_USED
    case TXM_TRACE_ENABLE_CALL:
    {
        return_value = _txm_module_manager_tx_trace_enable_dispatch(module_instance, param_0, param_1, param_2);
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	687a      	ldr	r2, [r7, #4]
 8012caa:	68b9      	ldr	r1, [r7, #8]
 8012cac:	6938      	ldr	r0, [r7, #16]
 8012cae:	f7ff fb17 	bl	80122e0 <_txm_module_manager_tx_trace_enable_dispatch>
 8012cb2:	6178      	str	r0, [r7, #20]
        break;
 8012cb4:	e050      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_EVENT_FILTER_CALL_NOT_USED
    case TXM_TRACE_EVENT_FILTER_CALL:
    {
        return_value = _txm_module_manager_tx_trace_event_filter_dispatch(module_instance, param_0);
 8012cb6:	68b9      	ldr	r1, [r7, #8]
 8012cb8:	6938      	ldr	r0, [r7, #16]
 8012cba:	f7ff fb2c 	bl	8012316 <_txm_module_manager_tx_trace_event_filter_dispatch>
 8012cbe:	6178      	str	r0, [r7, #20]
        break;
 8012cc0:	e04a      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_EVENT_UNFILTER_CALL_NOT_USED
    case TXM_TRACE_EVENT_UNFILTER_CALL:
    {
        return_value = _txm_module_manager_tx_trace_event_unfilter_dispatch(module_instance, param_0);
 8012cc2:	68b9      	ldr	r1, [r7, #8]
 8012cc4:	6938      	ldr	r0, [r7, #16]
 8012cc6:	f7ff fb34 	bl	8012332 <_txm_module_manager_tx_trace_event_unfilter_dispatch>
 8012cca:	6178      	str	r0, [r7, #20]
        break;
 8012ccc:	e044      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_INTERRUPT_CONTROL_CALL_NOT_USED
    case TXM_TRACE_INTERRUPT_CONTROL_CALL:
    {
        return_value = _txm_module_manager_tx_trace_interrupt_control_dispatch(module_instance, param_0);
 8012cce:	68b9      	ldr	r1, [r7, #8]
 8012cd0:	6938      	ldr	r0, [r7, #16]
 8012cd2:	f7ff fb3c 	bl	801234e <_txm_module_manager_tx_trace_interrupt_control_dispatch>
 8012cd6:	6178      	str	r0, [r7, #20]
        break;
 8012cd8:	e03e      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_ISR_ENTER_INSERT_CALL_NOT_USED
    case TXM_TRACE_ISR_ENTER_INSERT_CALL:
    {
        return_value = _txm_module_manager_tx_trace_isr_enter_insert_dispatch(module_instance, param_0);
 8012cda:	68b9      	ldr	r1, [r7, #8]
 8012cdc:	6938      	ldr	r0, [r7, #16]
 8012cde:	f7ff fb4c 	bl	801237a <_txm_module_manager_tx_trace_isr_enter_insert_dispatch>
 8012ce2:	6178      	str	r0, [r7, #20]
        break;
 8012ce4:	e038      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_ISR_EXIT_INSERT_CALL_NOT_USED
    case TXM_TRACE_ISR_EXIT_INSERT_CALL:
    {
        return_value = _txm_module_manager_tx_trace_isr_exit_insert_dispatch(module_instance, param_0);
 8012ce6:	68b9      	ldr	r1, [r7, #8]
 8012ce8:	6938      	ldr	r0, [r7, #16]
 8012cea:	f7ff fb5b 	bl	80123a4 <_txm_module_manager_tx_trace_isr_exit_insert_dispatch>
 8012cee:	6178      	str	r0, [r7, #20]
        break;
 8012cf0:	e032      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_TRACE_USER_EVENT_INSERT_CALL_NOT_USED
    case TXM_TRACE_USER_EVENT_INSERT_CALL:
    {
        return_value = _txm_module_manager_tx_trace_user_event_insert_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012cf2:	683b      	ldr	r3, [r7, #0]
 8012cf4:	687a      	ldr	r2, [r7, #4]
 8012cf6:	68b9      	ldr	r1, [r7, #8]
 8012cf8:	6938      	ldr	r0, [r7, #16]
 8012cfa:	f7ff fb68 	bl	80123ce <_txm_module_manager_tx_trace_user_event_insert_dispatch>
 8012cfe:	6178      	str	r0, [r7, #20]
        break;
 8012d00:	e02a      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MODULE_OBJECT_ALLOCATE_CALL_NOT_USED
    case TXM_MODULE_OBJECT_ALLOCATE_CALL:
    {
        return_value = _txm_module_manager_txm_module_object_allocate_dispatch(module_instance, param_0, param_1);
 8012d02:	687a      	ldr	r2, [r7, #4]
 8012d04:	68b9      	ldr	r1, [r7, #8]
 8012d06:	6938      	ldr	r0, [r7, #16]
 8012d08:	f7ff fb8d 	bl	8012426 <_txm_module_manager_txm_module_object_allocate_dispatch>
 8012d0c:	6178      	str	r0, [r7, #20]
        break;
 8012d0e:	e023      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MODULE_OBJECT_DEALLOCATE_CALL_NOT_USED
    case TXM_MODULE_OBJECT_DEALLOCATE_CALL:
    {
        return_value = _txm_module_manager_txm_module_object_deallocate_dispatch(module_instance, param_0);
 8012d10:	68b9      	ldr	r1, [r7, #8]
 8012d12:	6938      	ldr	r0, [r7, #16]
 8012d14:	f7ff fbac 	bl	8012470 <_txm_module_manager_txm_module_object_deallocate_dispatch>
 8012d18:	6178      	str	r0, [r7, #20]
        break;
 8012d1a:	e01d      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MODULE_OBJECT_POINTER_GET_CALL_NOT_USED
    case TXM_MODULE_OBJECT_POINTER_GET_CALL:
    {
        return_value = _txm_module_manager_txm_module_object_pointer_get_dispatch(module_instance, param_0, param_1, param_2);
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	687a      	ldr	r2, [r7, #4]
 8012d20:	68b9      	ldr	r1, [r7, #8]
 8012d22:	6938      	ldr	r0, [r7, #16]
 8012d24:	f7ff fbe2 	bl	80124ec <_txm_module_manager_txm_module_object_pointer_get_dispatch>
 8012d28:	6178      	str	r0, [r7, #20]
        break;
 8012d2a:	e015      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
    #endif

    #ifndef TXM_MODULE_OBJECT_POINTER_GET_EXTENDED_CALL_NOT_USED
    case TXM_MODULE_OBJECT_POINTER_GET_EXTENDED_CALL:
    {
        return_value = _txm_module_manager_txm_module_object_pointer_get_extended_dispatch(module_instance, param_0, param_1, (ALIGN_TYPE *) param_2);
 8012d2c:	683b      	ldr	r3, [r7, #0]
 8012d2e:	687a      	ldr	r2, [r7, #4]
 8012d30:	68b9      	ldr	r1, [r7, #8]
 8012d32:	6938      	ldr	r0, [r7, #16]
 8012d34:	f7ff fc1e 	bl	8012574 <_txm_module_manager_txm_module_object_pointer_get_extended_dispatch>
 8012d38:	6178      	str	r0, [r7, #20]
        break;
 8012d3a:	e00d      	b.n	8012d58 <_txm_module_manager_kernel_dispatch+0x734>
            return_value = (ALIGN_TYPE) _txm_module_manager_port_dispatch(module_instance, kernel_request, param_0, param_1, param_2);
        }
#endif
        
        /* Determine if an application request is present.   */
        if (kernel_request >= TXM_APPLICATION_REQUEST_ID_BASE)
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d42:	d308      	bcc.n	8012d56 <_txm_module_manager_kernel_dispatch+0x732>
        {
            /* Yes, call the module manager function that the application defines in order to
               support application-specific requests.  */
            return_value =  (ALIGN_TYPE)  _txm_module_manager_application_request(kernel_request-TXM_APPLICATION_REQUEST_ID_BASE, param_0, param_1, param_2);
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	f5a3 3080 	sub.w	r0, r3, #65536	; 0x10000
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	687a      	ldr	r2, [r7, #4]
 8012d4e:	68b9      	ldr	r1, [r7, #8]
 8012d50:	f7fa fe81 	bl	800da56 <_txm_module_manager_application_request>
 8012d54:	6178      	str	r0, [r7, #20]
            return_value =  _txm_module_manager_usbx_dispatch(module_instance, kernel_request, param_0, param_1, param_2);
        }
#endif

        /* Unhandled kernel request, return an error!  */
        break;
 8012d56:	bf00      	nop
    }
    }

    return(return_value);
 8012d58:	697b      	ldr	r3, [r7, #20]
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	3718      	adds	r7, #24
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}
 8012d62:	bf00      	nop

08012d64 <_txm_module_manager_memory_fault_handler>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_memory_fault_handler(VOID)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b082      	sub	sp, #8
 8012d68:	af00      	add	r7, sp, #0

TXM_MODULE_INSTANCE     *module_instance_ptr;
TX_THREAD               *thread_ptr;

    /* Pickup the current thread.  */
    thread_ptr =  _tx_thread_current_ptr;
 8012d6a:	4b0f      	ldr	r3, [pc, #60]	; (8012da8 <_txm_module_manager_memory_fault_handler+0x44>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	603b      	str	r3, [r7, #0]

    /* Initialize the module instance pointer to NULL.  */
    module_instance_ptr =  TX_NULL;
 8012d70:	2300      	movs	r3, #0
 8012d72:	607b      	str	r3, [r7, #4]
    
    /* Is there a thread?  */
    if (thread_ptr)
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d008      	beq.n	8012d8c <_txm_module_manager_memory_fault_handler+0x28>
    {
        /* Pickup the module instance.  */
        module_instance_ptr =  thread_ptr -> tx_thread_module_instance_ptr;
 8012d7a:	683b      	ldr	r3, [r7, #0]
 8012d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d80:	607b      	str	r3, [r7, #4]

        /* Terminate the current thread.  */
        _tx_thread_terminate(_tx_thread_current_ptr);
 8012d82:	4b09      	ldr	r3, [pc, #36]	; (8012da8 <_txm_module_manager_memory_fault_handler+0x44>)
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7f8 f836 	bl	800adf8 <_tx_thread_terminate>
    }
    
    /* Determine if there is a user memory fault notification callback.  */
    if (_txm_module_manager_fault_notify)
 8012d8c:	4b07      	ldr	r3, [pc, #28]	; (8012dac <_txm_module_manager_memory_fault_handler+0x48>)
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d004      	beq.n	8012d9e <_txm_module_manager_memory_fault_handler+0x3a>
    {
        /* Yes, call the user's notification memory fault callback.  */
        (_txm_module_manager_fault_notify)(thread_ptr, module_instance_ptr);
 8012d94:	4b05      	ldr	r3, [pc, #20]	; (8012dac <_txm_module_manager_memory_fault_handler+0x48>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	6879      	ldr	r1, [r7, #4]
 8012d9a:	6838      	ldr	r0, [r7, #0]
 8012d9c:	4798      	blx	r3
    }
}
 8012d9e:	bf00      	nop
 8012da0:	3708      	adds	r7, #8
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}
 8012da6:	bf00      	nop
 8012da8:	2400f034 	.word	0x2400f034
 8012dac:	2400f734 	.word	0x2400f734

08012db0 <_txm_module_manager_memory_fault_notify>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_memory_fault_notify(VOID (*notify_function)(TX_THREAD *, TXM_MODULE_INSTANCE *))
{
 8012db0:	b480      	push	{r7}
 8012db2:	b083      	sub	sp, #12
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
    /* Setup notification function.  */
    _txm_module_manager_fault_notify =  notify_function;
 8012db8:	4a04      	ldr	r2, [pc, #16]	; (8012dcc <_txm_module_manager_memory_fault_notify+0x1c>)
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	6013      	str	r3, [r2, #0]
    
    /* Return success.  */
    return(TX_SUCCESS);
 8012dbe:	2300      	movs	r3, #0
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	370c      	adds	r7, #12
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dca:	4770      	bx	lr
 8012dcc:	2400f734 	.word	0x2400f734

08012dd0 <_txm_module_manager_region_size_get>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
ULONG  _txm_module_manager_region_size_get(ULONG block_size)
{
 8012dd0:	b480      	push	{r7}
 8012dd2:	b085      	sub	sp, #20
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]

ULONG   return_value;

    /* Process relative to the input block size.  */
    if (block_size == 32)
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2b20      	cmp	r3, #32
 8012ddc:	d102      	bne.n	8012de4 <_txm_module_manager_region_size_get+0x14>
    {
        return_value =  0x04;
 8012dde:	2304      	movs	r3, #4
 8012de0:	60fb      	str	r3, [r7, #12]
 8012de2:	e06f      	b.n	8012ec4 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 64)
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2b40      	cmp	r3, #64	; 0x40
 8012de8:	d102      	bne.n	8012df0 <_txm_module_manager_region_size_get+0x20>
    {
        return_value =  0x05;
 8012dea:	2305      	movs	r3, #5
 8012dec:	60fb      	str	r3, [r7, #12]
 8012dee:	e069      	b.n	8012ec4 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 128)
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2b80      	cmp	r3, #128	; 0x80
 8012df4:	d102      	bne.n	8012dfc <_txm_module_manager_region_size_get+0x2c>
    {
        return_value =  0x06;
 8012df6:	2306      	movs	r3, #6
 8012df8:	60fb      	str	r3, [r7, #12]
 8012dfa:	e063      	b.n	8012ec4 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 256)
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e02:	d102      	bne.n	8012e0a <_txm_module_manager_region_size_get+0x3a>
    {
        return_value =  0x07;
 8012e04:	2307      	movs	r3, #7
 8012e06:	60fb      	str	r3, [r7, #12]
 8012e08:	e05c      	b.n	8012ec4 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 512)
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e10:	d102      	bne.n	8012e18 <_txm_module_manager_region_size_get+0x48>
    {
        return_value =  0x08;
 8012e12:	2308      	movs	r3, #8
 8012e14:	60fb      	str	r3, [r7, #12]
 8012e16:	e055      	b.n	8012ec4 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 1024)
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012e1e:	d102      	bne.n	8012e26 <_txm_module_manager_region_size_get+0x56>
    {
        return_value =  0x09;
 8012e20:	2309      	movs	r3, #9
 8012e22:	60fb      	str	r3, [r7, #12]
 8012e24:	e04e      	b.n	8012ec4 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 2048)
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012e2c:	d102      	bne.n	8012e34 <_txm_module_manager_region_size_get+0x64>
    {
        return_value =  0x0A;
 8012e2e:	230a      	movs	r3, #10
 8012e30:	60fb      	str	r3, [r7, #12]
 8012e32:	e047      	b.n	8012ec4 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 4096)
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012e3a:	d102      	bne.n	8012e42 <_txm_module_manager_region_size_get+0x72>
    {
        return_value =  0x0B;
 8012e3c:	230b      	movs	r3, #11
 8012e3e:	60fb      	str	r3, [r7, #12]
 8012e40:	e040      	b.n	8012ec4 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 8192)
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012e48:	d102      	bne.n	8012e50 <_txm_module_manager_region_size_get+0x80>
    {
        return_value =  0x0C;
 8012e4a:	230c      	movs	r3, #12
 8012e4c:	60fb      	str	r3, [r7, #12]
 8012e4e:	e039      	b.n	8012ec4 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 16384)
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012e56:	d102      	bne.n	8012e5e <_txm_module_manager_region_size_get+0x8e>
    {
        return_value =  0x0D;
 8012e58:	230d      	movs	r3, #13
 8012e5a:	60fb      	str	r3, [r7, #12]
 8012e5c:	e032      	b.n	8012ec4 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 32768)
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012e64:	d102      	bne.n	8012e6c <_txm_module_manager_region_size_get+0x9c>
    {
        return_value =  0x0E;
 8012e66:	230e      	movs	r3, #14
 8012e68:	60fb      	str	r3, [r7, #12]
 8012e6a:	e02b      	b.n	8012ec4 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 65536)
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e72:	d102      	bne.n	8012e7a <_txm_module_manager_region_size_get+0xaa>
    {
        return_value =  0x0F;
 8012e74:	230f      	movs	r3, #15
 8012e76:	60fb      	str	r3, [r7, #12]
 8012e78:	e024      	b.n	8012ec4 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 131072)
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012e80:	d102      	bne.n	8012e88 <_txm_module_manager_region_size_get+0xb8>
    {
        return_value =  0x10;
 8012e82:	2310      	movs	r3, #16
 8012e84:	60fb      	str	r3, [r7, #12]
 8012e86:	e01d      	b.n	8012ec4 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 262144)
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012e8e:	d102      	bne.n	8012e96 <_txm_module_manager_region_size_get+0xc6>
    {
        return_value =  0x11;
 8012e90:	2311      	movs	r3, #17
 8012e92:	60fb      	str	r3, [r7, #12]
 8012e94:	e016      	b.n	8012ec4 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 524288)
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8012e9c:	d102      	bne.n	8012ea4 <_txm_module_manager_region_size_get+0xd4>
    {
        return_value =  0x12;
 8012e9e:	2312      	movs	r3, #18
 8012ea0:	60fb      	str	r3, [r7, #12]
 8012ea2:	e00f      	b.n	8012ec4 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 1048576)
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012eaa:	d102      	bne.n	8012eb2 <_txm_module_manager_region_size_get+0xe2>
    {
        return_value =  0x13;
 8012eac:	2313      	movs	r3, #19
 8012eae:	60fb      	str	r3, [r7, #12]
 8012eb0:	e008      	b.n	8012ec4 <_txm_module_manager_region_size_get+0xf4>
    }
    else if (block_size == 2097152)
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012eb8:	d102      	bne.n	8012ec0 <_txm_module_manager_region_size_get+0xf0>
    {
        return_value =  0x14;
 8012eba:	2314      	movs	r3, #20
 8012ebc:	60fb      	str	r3, [r7, #12]
 8012ebe:	e001      	b.n	8012ec4 <_txm_module_manager_region_size_get+0xf4>
    }
    else
    {
        /* Max 4MB MPU pages for modules.  */
        return_value =  0x15;
 8012ec0:	2315      	movs	r3, #21
 8012ec2:	60fb      	str	r3, [r7, #12]
    }

    return(return_value);
 8012ec4:	68fb      	ldr	r3, [r7, #12]
}
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	3714      	adds	r7, #20
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed0:	4770      	bx	lr

08012ed2 <_txm_module_manager_calculate_srd_bits>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
ULONG  _txm_module_manager_calculate_srd_bits(ULONG block_size, ULONG length)
{
 8012ed2:	b480      	push	{r7}
 8012ed4:	b085      	sub	sp, #20
 8012ed6:	af00      	add	r7, sp, #0
 8012ed8:	6078      	str	r0, [r7, #4]
 8012eda:	6039      	str	r1, [r7, #0]

ULONG   srd_bits = 0;
 8012edc:	2300      	movs	r3, #0
 8012ede:	60fb      	str	r3, [r7, #12]
UINT    srd_bit_index;

    /* length is smaller than block_size, set SRD bits if block_size is 256 or more. */
    if((block_size >= 256) && (length < block_size))
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2bff      	cmp	r3, #255	; 0xff
 8012ee4:	d929      	bls.n	8012f3a <_txm_module_manager_calculate_srd_bits+0x68>
 8012ee6:	683a      	ldr	r2, [r7, #0]
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	429a      	cmp	r2, r3
 8012eec:	d225      	bcs.n	8012f3a <_txm_module_manager_calculate_srd_bits+0x68>
    {
        /* Divide block_size by 8 by shifting right 3. Result is size of subregion.  */
        block_size = block_size >> 3;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	08db      	lsrs	r3, r3, #3
 8012ef2:	607b      	str	r3, [r7, #4]
        
        /* Set SRD index into attribute register. */
        srd_bit_index = 8;
 8012ef4:	2308      	movs	r3, #8
 8012ef6:	60bb      	str	r3, [r7, #8]
        
        /* If subregion overlaps length, move to the next subregion. */
        while(length > block_size)
 8012ef8:	e006      	b.n	8012f08 <_txm_module_manager_calculate_srd_bits+0x36>
        {
            length = length - block_size;
 8012efa:	683a      	ldr	r2, [r7, #0]
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	1ad3      	subs	r3, r2, r3
 8012f00:	603b      	str	r3, [r7, #0]
            srd_bit_index++;
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	3301      	adds	r3, #1
 8012f06:	60bb      	str	r3, [r7, #8]
        while(length > block_size)
 8012f08:	683a      	ldr	r2, [r7, #0]
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	d8f4      	bhi.n	8012efa <_txm_module_manager_calculate_srd_bits+0x28>
        }
        /* Check for a portion of code remaining. */
        if(length)
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d00e      	beq.n	8012f34 <_txm_module_manager_calculate_srd_bits+0x62>
        {
            srd_bit_index++;
 8012f16:	68bb      	ldr	r3, [r7, #8]
 8012f18:	3301      	adds	r3, #1
 8012f1a:	60bb      	str	r3, [r7, #8]
        }
        
        /* Set unused subregion bits. */
        while(srd_bit_index < 16)
 8012f1c:	e00a      	b.n	8012f34 <_txm_module_manager_calculate_srd_bits+0x62>
        {
            srd_bits = srd_bits | (0x1 << srd_bit_index);
 8012f1e:	2201      	movs	r2, #1
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	fa02 f303 	lsl.w	r3, r2, r3
 8012f26:	461a      	mov	r2, r3
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	4313      	orrs	r3, r2
 8012f2c:	60fb      	str	r3, [r7, #12]
            srd_bit_index++;
 8012f2e:	68bb      	ldr	r3, [r7, #8]
 8012f30:	3301      	adds	r3, #1
 8012f32:	60bb      	str	r3, [r7, #8]
        while(srd_bit_index < 16)
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	2b0f      	cmp	r3, #15
 8012f38:	d9f1      	bls.n	8012f1e <_txm_module_manager_calculate_srd_bits+0x4c>
        }
    }
    
    return(srd_bits);
 8012f3a:	68fb      	ldr	r3, [r7, #12]
}
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	3714      	adds	r7, #20
 8012f40:	46bd      	mov	sp, r7
 8012f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f46:	4770      	bx	lr

08012f48 <_txm_module_manager_mm_register_setup>:
/*  06-02-2021      Scott Larson            Added support for 8 MPU,      */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_mm_register_setup(TXM_MODULE_INSTANCE *module_instance)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b08e      	sub	sp, #56	; 0x38
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
ULONG   data_size;
ULONG   start_stop_stack_size;
ULONG   callback_stack_size;
ULONG   block_size;
ULONG   region_size;
ULONG   srd_bits = 0;
 8012f50:	2300      	movs	r3, #0
 8012f52:	623b      	str	r3, [r7, #32]


    /* Setup the first MPU region for kernel mode entry.  */
    /* Set address register to user mode entry function address, which is guaranteed to be at least 32-byte aligned.
       Mask address to proper range, region 0, set Valid bit. */
    module_instance -> txm_module_instance_mpu_registers[TXM_MODULE_MPU_KERNEL_ENTRY_INDEX].txm_module_mpu_region_address = ((ULONG) _txm_module_manager_user_mode_entry & 0xFFFFFFE0) | 0x10;
 8012f54:	4b7e      	ldr	r3, [pc, #504]	; (8013150 <_txm_module_manager_mm_register_setup+0x208>)
 8012f56:	f023 031f 	bic.w	r3, r3, #31
 8012f5a:	f043 0210 	orr.w	r2, r3, #16
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	665a      	str	r2, [r3, #100]	; 0x64
    /* Set the attributes, size (32 bytes) and enable bit.  */
    module_instance -> txm_module_instance_mpu_registers[TXM_MODULE_MPU_KERNEL_ENTRY_INDEX].txm_module_mpu_region_attribute_size = TXM_MODULE_MPU_CODE_ACCESS_CONTROL | (_txm_module_manager_region_size_get(32) << 1) | TXM_ENABLE_REGION;
 8012f62:	2020      	movs	r0, #32
 8012f64:	f7ff ff34 	bl	8012dd0 <_txm_module_manager_region_size_get>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	005a      	lsls	r2, r3, #1
 8012f6c:	4b79      	ldr	r3, [pc, #484]	; (8013154 <_txm_module_manager_mm_register_setup+0x20c>)
 8012f6e:	4313      	orrs	r3, r2
 8012f70:	687a      	ldr	r2, [r7, #4]
 8012f72:	6693      	str	r3, [r2, #104]	; 0x68
    /* End of kernel mode entry setup.  */
    
    /* Setup code protection.  */
    
    /* Initialize the MPU table index.  */
    mpu_table_index = 1;
 8012f74:	2301      	movs	r3, #1
 8012f76:	61fb      	str	r3, [r7, #28]

    /* Pickup code starting address and actual size.  */
    code_address =  (ULONG) module_instance -> txm_module_instance_code_start;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	699b      	ldr	r3, [r3, #24]
 8012f7c:	637b      	str	r3, [r7, #52]	; 0x34
    code_size =     module_instance -> txm_module_instance_preamble_ptr -> txm_module_preamble_code_size;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f84:	633b      	str	r3, [r7, #48]	; 0x30
       2. 1/4 of the largest power of two that is greater than or equal to code size.
       3. Largest power of 2 that fits in the remaining space.
       4. Smallest power of 2 that exceeds the remaining space, minimum 32. */
    
    /* Now loop through to setup MPU protection for the code area.  */
    for (i = 0; i < TXM_MODULE_MPU_CODE_ENTRIES; i++)
 8012f86:	2300      	movs	r3, #0
 8012f88:	61bb      	str	r3, [r7, #24]
 8012f8a:	e04e      	b.n	801302a <_txm_module_manager_mm_register_setup+0xe2>
    {
        /* First two MPU blocks are 1/4 of the largest power of two
           that is greater than or equal to code size.  */
        if (i < 2)
 8012f8c:	69bb      	ldr	r3, [r7, #24]
 8012f8e:	2b01      	cmp	r3, #1
 8012f90:	d806      	bhi.n	8012fa0 <_txm_module_manager_mm_register_setup+0x58>
        {
            block_size = _txm_power_of_two_block_size(code_size) >> 2;
 8012f92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f94:	f7fa fcc8 	bl	800d928 <_txm_power_of_two_block_size>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	089b      	lsrs	r3, r3, #2
 8012f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8012f9e:	e01b      	b.n	8012fd8 <_txm_module_manager_mm_register_setup+0x90>
        }
        
        /* Third MPU block is the largest power of 2 that fits in the remaining space. */
        else if (i == 2)
 8012fa0:	69bb      	ldr	r3, [r7, #24]
 8012fa2:	2b02      	cmp	r3, #2
 8012fa4:	d10b      	bne.n	8012fbe <_txm_module_manager_mm_register_setup+0x76>
        {
            /* Subtract (block_size*2) from code_size to calculate remaining space.  */
            code_size = code_size - (block_size << 1);
 8012fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa8:	005b      	lsls	r3, r3, #1
 8012faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012fac:	1ad3      	subs	r3, r2, r3
 8012fae:	633b      	str	r3, [r7, #48]	; 0x30
            block_size = _txm_power_of_two_block_size(code_size) >> 1;
 8012fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012fb2:	f7fa fcb9 	bl	800d928 <_txm_power_of_two_block_size>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	085b      	lsrs	r3, r3, #1
 8012fba:	627b      	str	r3, [r7, #36]	; 0x24
 8012fbc:	e00c      	b.n	8012fd8 <_txm_module_manager_mm_register_setup+0x90>
        
        /* Last MPU block is the smallest power of 2 that exceeds the remaining space, minimum 32.  */
        else
        {
            /* Calculate remaining space.  */
            code_size =  code_size - block_size;
 8012fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fc2:	1ad3      	subs	r3, r2, r3
 8012fc4:	633b      	str	r3, [r7, #48]	; 0x30
            block_size = _txm_power_of_two_block_size(code_size);
 8012fc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012fc8:	f7fa fcae 	bl	800d928 <_txm_power_of_two_block_size>
 8012fcc:	6278      	str	r0, [r7, #36]	; 0x24
            srd_bits = _txm_module_manager_calculate_srd_bits(block_size, code_size);
 8012fce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012fd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fd2:	f7ff ff7e 	bl	8012ed2 <_txm_module_manager_calculate_srd_bits>
 8012fd6:	6238      	str	r0, [r7, #32]
        }
        
        /* Calculate the region size information.  */
        region_size = (_txm_module_manager_region_size_get(block_size) << 1);
 8012fd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fda:	f7ff fef9 	bl	8012dd0 <_txm_module_manager_region_size_get>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	005b      	lsls	r3, r3, #1
 8012fe2:	60fb      	str	r3, [r7, #12]
        
        /* Build the base address register with address, MPU region, set Valid bit.  */
        module_instance -> txm_module_instance_mpu_registers[mpu_table_index].txm_module_mpu_region_address = (code_address & ~(block_size - 1)) | mpu_table_index | 0x10;
 8012fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fe6:	425a      	negs	r2, r3
 8012fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fea:	401a      	ands	r2, r3
 8012fec:	69fb      	ldr	r3, [r7, #28]
 8012fee:	4313      	orrs	r3, r2
 8012ff0:	f043 0210 	orr.w	r2, r3, #16
 8012ff4:	6879      	ldr	r1, [r7, #4]
 8012ff6:	69fb      	ldr	r3, [r7, #28]
 8012ff8:	330c      	adds	r3, #12
 8012ffa:	00db      	lsls	r3, r3, #3
 8012ffc:	440b      	add	r3, r1
 8012ffe:	605a      	str	r2, [r3, #4]
        /* Build the attribute-size register with permissions, SRD, size, enable.  */
        module_instance -> txm_module_instance_mpu_registers[mpu_table_index].txm_module_mpu_region_attribute_size = TXM_MODULE_MPU_CODE_ACCESS_CONTROL | srd_bits | region_size | TXM_ENABLE_REGION;
 8013000:	6a3a      	ldr	r2, [r7, #32]
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	4313      	orrs	r3, r2
 8013006:	4a53      	ldr	r2, [pc, #332]	; (8013154 <_txm_module_manager_mm_register_setup+0x20c>)
 8013008:	431a      	orrs	r2, r3
 801300a:	6879      	ldr	r1, [r7, #4]
 801300c:	69fb      	ldr	r3, [r7, #28]
 801300e:	330c      	adds	r3, #12
 8013010:	00db      	lsls	r3, r3, #3
 8013012:	440b      	add	r3, r1
 8013014:	609a      	str	r2, [r3, #8]

        /* Adjust the code address.  */
        code_address = code_address + block_size;
 8013016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801301a:	4413      	add	r3, r2
 801301c:	637b      	str	r3, [r7, #52]	; 0x34
        
        /* Increment MPU table index.  */
        mpu_table_index++;
 801301e:	69fb      	ldr	r3, [r7, #28]
 8013020:	3301      	adds	r3, #1
 8013022:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < TXM_MODULE_MPU_CODE_ENTRIES; i++)
 8013024:	69bb      	ldr	r3, [r7, #24]
 8013026:	3301      	adds	r3, #1
 8013028:	61bb      	str	r3, [r7, #24]
 801302a:	69bb      	ldr	r3, [r7, #24]
 801302c:	2b03      	cmp	r3, #3
 801302e:	d9ad      	bls.n	8012f8c <_txm_module_manager_mm_register_setup+0x44>
    /* End of code protection.  */
    
    /* Setup data protection.  */
    
    /* Reset SRD bitfield.  */
    srd_bits = 0;
 8013030:	2300      	movs	r3, #0
 8013032:	623b      	str	r3, [r7, #32]
    
    /* Pickup data starting address and actual size.  */
    data_address =  (ULONG) module_instance -> txm_module_instance_data_start;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013038:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Adjust the size of the module elements to be aligned to the default alignment. We do this
       so that when we partition the allocated memory, we can simply place these regions right beside
       each other without having to align their pointers. Note this only works when they all have
       the same alignment.  */
    
    data_size =             module_instance -> txm_module_instance_preamble_ptr -> txm_module_preamble_data_size;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801303e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013040:	62bb      	str	r3, [r7, #40]	; 0x28
    start_stop_stack_size = module_instance -> txm_module_instance_preamble_ptr -> txm_module_preamble_start_stop_stack_size;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013048:	617b      	str	r3, [r7, #20]
    callback_stack_size =   module_instance -> txm_module_instance_preamble_ptr -> txm_module_preamble_callback_stack_size;
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801304e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013050:	613b      	str	r3, [r7, #16]
    
    data_size =              ((data_size + TXM_MODULE_DATA_ALIGNMENT - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 8013052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013054:	3303      	adds	r3, #3
 8013056:	f023 0303 	bic.w	r3, r3, #3
 801305a:	62bb      	str	r3, [r7, #40]	; 0x28

    start_stop_stack_size =  ((start_stop_stack_size + TXM_MODULE_DATA_ALIGNMENT - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	3303      	adds	r3, #3
 8013060:	f023 0303 	bic.w	r3, r3, #3
 8013064:	617b      	str	r3, [r7, #20]

    callback_stack_size =    ((callback_stack_size + TXM_MODULE_DATA_ALIGNMENT - 1)/TXM_MODULE_DATA_ALIGNMENT) * TXM_MODULE_DATA_ALIGNMENT;
 8013066:	693b      	ldr	r3, [r7, #16]
 8013068:	3303      	adds	r3, #3
 801306a:	f023 0303 	bic.w	r3, r3, #3
 801306e:	613b      	str	r3, [r7, #16]

    /* Update the data size to include thread stacks.  */
    data_size = data_size + start_stop_stack_size + callback_stack_size;
 8013070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	4413      	add	r3, r2
 8013076:	693a      	ldr	r2, [r7, #16]
 8013078:	4413      	add	r3, r2
 801307a:	62bb      	str	r3, [r7, #40]	; 0x28
       2. 1/4 of the largest power of two that is greater than or equal to data size.
       3. Largest power of 2 that fits in the remaining space.
       4. Smallest power of 2 that exceeds the remaining space, minimum 32. */
    
    /* Now loop through to setup MPU protection for the data area.  */
    for (i = 0; i < TXM_MODULE_MPU_DATA_ENTRIES; i++)
 801307c:	2300      	movs	r3, #0
 801307e:	61bb      	str	r3, [r7, #24]
 8013080:	e04e      	b.n	8013120 <_txm_module_manager_mm_register_setup+0x1d8>
    {
        /* First two MPU blocks are 1/4 of the largest power of two
           that is greater than or equal to data size.  */
        if (i < 2)
 8013082:	69bb      	ldr	r3, [r7, #24]
 8013084:	2b01      	cmp	r3, #1
 8013086:	d806      	bhi.n	8013096 <_txm_module_manager_mm_register_setup+0x14e>
        {
            block_size = _txm_power_of_two_block_size(data_size) >> 2;
 8013088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801308a:	f7fa fc4d 	bl	800d928 <_txm_power_of_two_block_size>
 801308e:	4603      	mov	r3, r0
 8013090:	089b      	lsrs	r3, r3, #2
 8013092:	627b      	str	r3, [r7, #36]	; 0x24
 8013094:	e01b      	b.n	80130ce <_txm_module_manager_mm_register_setup+0x186>
        }
        
        /* Third MPU block is the largest power of 2 that fits in the remaining space.  */
        else if (i == 2)
 8013096:	69bb      	ldr	r3, [r7, #24]
 8013098:	2b02      	cmp	r3, #2
 801309a:	d10b      	bne.n	80130b4 <_txm_module_manager_mm_register_setup+0x16c>
        {
            /* Subtract (block_size*2) from data_size to calculate remaining space.  */
            data_size = data_size - (block_size << 1);
 801309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309e:	005b      	lsls	r3, r3, #1
 80130a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80130a2:	1ad3      	subs	r3, r2, r3
 80130a4:	62bb      	str	r3, [r7, #40]	; 0x28
            block_size = _txm_power_of_two_block_size(data_size) >> 1;
 80130a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130a8:	f7fa fc3e 	bl	800d928 <_txm_power_of_two_block_size>
 80130ac:	4603      	mov	r3, r0
 80130ae:	085b      	lsrs	r3, r3, #1
 80130b0:	627b      	str	r3, [r7, #36]	; 0x24
 80130b2:	e00c      	b.n	80130ce <_txm_module_manager_mm_register_setup+0x186>
        
        /* Last MPU block is the smallest power of 2 that exceeds the remaining space, minimum 32.  */
        else
        {
            /* Calculate remaining space.  */
            data_size =  data_size - block_size;
 80130b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80130b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b8:	1ad3      	subs	r3, r2, r3
 80130ba:	62bb      	str	r3, [r7, #40]	; 0x28
            block_size = _txm_power_of_two_block_size(data_size);
 80130bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130be:	f7fa fc33 	bl	800d928 <_txm_power_of_two_block_size>
 80130c2:	6278      	str	r0, [r7, #36]	; 0x24
            srd_bits = _txm_module_manager_calculate_srd_bits(block_size, data_size);
 80130c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80130c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130c8:	f7ff ff03 	bl	8012ed2 <_txm_module_manager_calculate_srd_bits>
 80130cc:	6238      	str	r0, [r7, #32]
        }
        
        /* Calculate the region size information.  */
        region_size = (_txm_module_manager_region_size_get(block_size) << 1);
 80130ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130d0:	f7ff fe7e 	bl	8012dd0 <_txm_module_manager_region_size_get>
 80130d4:	4603      	mov	r3, r0
 80130d6:	005b      	lsls	r3, r3, #1
 80130d8:	60fb      	str	r3, [r7, #12]
        
        /* Build the base address register with address, MPU region, set Valid bit.  */
        module_instance -> txm_module_instance_mpu_registers[mpu_table_index].txm_module_mpu_region_address = (data_address & ~(block_size - 1)) | mpu_table_index | 0x10;
 80130da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130dc:	425a      	negs	r2, r3
 80130de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130e0:	401a      	ands	r2, r3
 80130e2:	69fb      	ldr	r3, [r7, #28]
 80130e4:	4313      	orrs	r3, r2
 80130e6:	f043 0210 	orr.w	r2, r3, #16
 80130ea:	6879      	ldr	r1, [r7, #4]
 80130ec:	69fb      	ldr	r3, [r7, #28]
 80130ee:	330c      	adds	r3, #12
 80130f0:	00db      	lsls	r3, r3, #3
 80130f2:	440b      	add	r3, r1
 80130f4:	605a      	str	r2, [r3, #4]
        /* Build the attribute-size register with permissions, SRD, size, enable.  */
        module_instance -> txm_module_instance_mpu_registers[mpu_table_index].txm_module_mpu_region_attribute_size = TXM_MODULE_MPU_DATA_ACCESS_CONTROL | srd_bits | region_size | TXM_ENABLE_REGION;
 80130f6:	6a3a      	ldr	r2, [r7, #32]
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	4313      	orrs	r3, r2
 80130fc:	4a16      	ldr	r2, [pc, #88]	; (8013158 <_txm_module_manager_mm_register_setup+0x210>)
 80130fe:	431a      	orrs	r2, r3
 8013100:	6879      	ldr	r1, [r7, #4]
 8013102:	69fb      	ldr	r3, [r7, #28]
 8013104:	330c      	adds	r3, #12
 8013106:	00db      	lsls	r3, r3, #3
 8013108:	440b      	add	r3, r1
 801310a:	609a      	str	r2, [r3, #8]

        /* Adjust the data address.  */
        data_address =  data_address + block_size;
 801310c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013110:	4413      	add	r3, r2
 8013112:	62fb      	str	r3, [r7, #44]	; 0x2c
        
        /* Increment MPU table index.  */
        mpu_table_index++;
 8013114:	69fb      	ldr	r3, [r7, #28]
 8013116:	3301      	adds	r3, #1
 8013118:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < TXM_MODULE_MPU_DATA_ENTRIES; i++)
 801311a:	69bb      	ldr	r3, [r7, #24]
 801311c:	3301      	adds	r3, #1
 801311e:	61bb      	str	r3, [r7, #24]
 8013120:	69bb      	ldr	r3, [r7, #24]
 8013122:	2b03      	cmp	r3, #3
 8013124:	d9ad      	bls.n	8013082 <_txm_module_manager_mm_register_setup+0x13a>
    }
    
    /* Setup MPU for the remaining regions.  */
    while (mpu_table_index < TXM_MODULE_MPU_TOTAL_ENTRIES)
 8013126:	e00b      	b.n	8013140 <_txm_module_manager_mm_register_setup+0x1f8>
    {
        /* Build the base address register with address, MPU region, set Valid bit.  */
        module_instance -> txm_module_instance_mpu_registers[mpu_table_index].txm_module_mpu_region_address = mpu_table_index | 0x10;
 8013128:	69fb      	ldr	r3, [r7, #28]
 801312a:	f043 0210 	orr.w	r2, r3, #16
 801312e:	6879      	ldr	r1, [r7, #4]
 8013130:	69fb      	ldr	r3, [r7, #28]
 8013132:	330c      	adds	r3, #12
 8013134:	00db      	lsls	r3, r3, #3
 8013136:	440b      	add	r3, r1
 8013138:	605a      	str	r2, [r3, #4]
        
        /* Increment MPU table index.  */
        mpu_table_index++;
 801313a:	69fb      	ldr	r3, [r7, #28]
 801313c:	3301      	adds	r3, #1
 801313e:	61fb      	str	r3, [r7, #28]
    while (mpu_table_index < TXM_MODULE_MPU_TOTAL_ENTRIES)
 8013140:	69fb      	ldr	r3, [r7, #28]
 8013142:	2b0f      	cmp	r3, #15
 8013144:	d9f0      	bls.n	8013128 <_txm_module_manager_mm_register_setup+0x1e0>
        /* Increment the MPU register index.  */
        mpu_register++;
    }

#endif
}
 8013146:	bf00      	nop
 8013148:	bf00      	nop
 801314a:	3738      	adds	r7, #56	; 0x38
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}
 8013150:	08000661 	.word	0x08000661
 8013154:	06030001 	.word	0x06030001
 8013158:	13030001 	.word	0x13030001

0801315c <_txm_module_manager_inside_data_check>:
/*                                            check for overflow,         */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_manager_inside_data_check(TXM_MODULE_INSTANCE *module_instance, ALIGN_TYPE obj_ptr, UINT obj_size)
{
 801315c:	b480      	push	{r7}
 801315e:	b089      	sub	sp, #36	; 0x24
 8013160:	af00      	add	r7, sp, #0
 8013162:	60f8      	str	r0, [r7, #12]
 8013164:	60b9      	str	r1, [r7, #8]
 8013166:	607a      	str	r2, [r7, #4]
UINT num_shared_memory_mpu_entries;
ALIGN_TYPE shared_memory_address_start;
ALIGN_TYPE shared_memory_address_end;

    /* Check for overflow. */
    if ((obj_ptr) > ((obj_ptr) + (obj_size)))
 8013168:	68ba      	ldr	r2, [r7, #8]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	4413      	add	r3, r2
 801316e:	68ba      	ldr	r2, [r7, #8]
 8013170:	429a      	cmp	r2, r3
 8013172:	d901      	bls.n	8013178 <_txm_module_manager_inside_data_check+0x1c>
    {
        return(TX_FALSE);
 8013174:	2300      	movs	r3, #0
 8013176:	e039      	b.n	80131ec <_txm_module_manager_inside_data_check+0x90>
    }
    
    /* Check if the object is inside the module data.  */
    if ((obj_ptr >= (ALIGN_TYPE) module_instance -> txm_module_instance_data_start) &&
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801317c:	461a      	mov	r2, r3
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	4293      	cmp	r3, r2
 8013182:	d309      	bcc.n	8013198 <_txm_module_manager_inside_data_check+0x3c>
        ((obj_ptr + obj_size) <= ((ALIGN_TYPE) module_instance -> txm_module_instance_data_end + 1)))
 8013184:	68ba      	ldr	r2, [r7, #8]
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	441a      	add	r2, r3
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801318e:	3301      	adds	r3, #1
    if ((obj_ptr >= (ALIGN_TYPE) module_instance -> txm_module_instance_data_start) &&
 8013190:	429a      	cmp	r2, r3
 8013192:	d801      	bhi.n	8013198 <_txm_module_manager_inside_data_check+0x3c>
    {
        return(TX_TRUE);
 8013194:	2301      	movs	r3, #1
 8013196:	e029      	b.n	80131ec <_txm_module_manager_inside_data_check+0x90>
    }

    /* Check if the object is inside the shared memory.  */
    num_shared_memory_mpu_entries = module_instance -> txm_module_instance_shared_memory_count;
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801319e:	61bb      	str	r3, [r7, #24]
    for (shared_memory_index = 0; shared_memory_index < num_shared_memory_mpu_entries; shared_memory_index++)
 80131a0:	2300      	movs	r3, #0
 80131a2:	61fb      	str	r3, [r7, #28]
 80131a4:	e01d      	b.n	80131e2 <_txm_module_manager_inside_data_check+0x86>
    {

        shared_memory_address_start = (ALIGN_TYPE) module_instance -> txm_module_instance_shared_memory_address[shared_memory_index];
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	69fa      	ldr	r2, [r7, #28]
 80131aa:	323a      	adds	r2, #58	; 0x3a
 80131ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131b0:	617b      	str	r3, [r7, #20]
        shared_memory_address_end = shared_memory_address_start + module_instance -> txm_module_instance_shared_memory_length[shared_memory_index];
 80131b2:	68fa      	ldr	r2, [r7, #12]
 80131b4:	69fb      	ldr	r3, [r7, #28]
 80131b6:	333c      	adds	r3, #60	; 0x3c
 80131b8:	009b      	lsls	r3, r3, #2
 80131ba:	4413      	add	r3, r2
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	697a      	ldr	r2, [r7, #20]
 80131c0:	4413      	add	r3, r2
 80131c2:	613b      	str	r3, [r7, #16]

        if ((obj_ptr >= (ALIGN_TYPE) shared_memory_address_start) &&
 80131c4:	68ba      	ldr	r2, [r7, #8]
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	429a      	cmp	r2, r3
 80131ca:	d307      	bcc.n	80131dc <_txm_module_manager_inside_data_check+0x80>
            ((obj_ptr + obj_size) <= (ALIGN_TYPE) shared_memory_address_end))
 80131cc:	68ba      	ldr	r2, [r7, #8]
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	4413      	add	r3, r2
        if ((obj_ptr >= (ALIGN_TYPE) shared_memory_address_start) &&
 80131d2:	693a      	ldr	r2, [r7, #16]
 80131d4:	429a      	cmp	r2, r3
 80131d6:	d301      	bcc.n	80131dc <_txm_module_manager_inside_data_check+0x80>
        {
            return(TX_TRUE);
 80131d8:	2301      	movs	r3, #1
 80131da:	e007      	b.n	80131ec <_txm_module_manager_inside_data_check+0x90>
    for (shared_memory_index = 0; shared_memory_index < num_shared_memory_mpu_entries; shared_memory_index++)
 80131dc:	69fb      	ldr	r3, [r7, #28]
 80131de:	3301      	adds	r3, #1
 80131e0:	61fb      	str	r3, [r7, #28]
 80131e2:	69fa      	ldr	r2, [r7, #28]
 80131e4:	69bb      	ldr	r3, [r7, #24]
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d3dd      	bcc.n	80131a6 <_txm_module_manager_inside_data_check+0x4a>
        }
    }

    return(TX_FALSE);
 80131ea:	2300      	movs	r3, #0
}
 80131ec:	4618      	mov	r0, r3
 80131ee:	3724      	adds	r7, #36	; 0x24
 80131f0:	46bd      	mov	sp, r7
 80131f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f6:	4770      	bx	lr

080131f8 <_txm_module_manager_object_allocate>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT _txm_module_manager_object_allocate(VOID **object_ptr_ptr, ULONG object_size, TXM_MODULE_INSTANCE *module_instance)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b088      	sub	sp, #32
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	60f8      	str	r0, [r7, #12]
 8013200:	60b9      	str	r1, [r7, #8]
 8013202:	607a      	str	r2, [r7, #4]
TXM_MODULE_ALLOCATED_OBJECT *object_ptr;
UINT                        return_value;


    /* Ensure the object pointer pointer is valid. */
    if (object_ptr_ptr == (VOID **) TX_NULL)
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d101      	bne.n	801320e <_txm_module_manager_object_allocate+0x16>
    {

        /* The object pointer pointer is invalid, return an error.  */
        return(TXM_MODULE_INVALID_MEMORY);
 801320a:	23f4      	movs	r3, #244	; 0xf4
 801320c:	e052      	b.n	80132b4 <_txm_module_manager_object_allocate+0xbc>
    }

    /* Initialize the return pointer to NULL.  */
    *((VOID **) object_ptr_ptr) =  TX_NULL;
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	2200      	movs	r2, #0
 8013212:	601a      	str	r2, [r3, #0]

    /* Get module manager protection mutex.  */
    _txe_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 8013214:	f04f 31ff 	mov.w	r1, #4294967295
 8013218:	4828      	ldr	r0, [pc, #160]	; (80132bc <_txm_module_manager_object_allocate+0xc4>)
 801321a:	f7f9 fa65 	bl	800c6e8 <_txe_mutex_get>

    /* Determine if an object pool was created.  */
    if (_txm_module_manager_object_pool_created)
 801321e:	4b28      	ldr	r3, [pc, #160]	; (80132c0 <_txm_module_manager_object_allocate+0xc8>)
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d040      	beq.n	80132a8 <_txm_module_manager_object_allocate+0xb0>

    TXM_MODULE_ALLOCATED_OBJECT   *next_object, *previous_object;

        /* Allocate the object requested by the module - adding an extra ULONG in order to
           store the module instance pointer.  */
        return_value =  (ULONG)  _txe_byte_allocate(&_txm_module_manager_object_pool, (VOID **) &object_ptr, 
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	f103 0210 	add.w	r2, r3, #16
 801322c:	f107 0110 	add.w	r1, r7, #16
 8013230:	2300      	movs	r3, #0
 8013232:	4824      	ldr	r0, [pc, #144]	; (80132c4 <_txm_module_manager_object_allocate+0xcc>)
 8013234:	f7f8 fe16 	bl	800be64 <_txe_byte_allocate>
 8013238:	61f8      	str	r0, [r7, #28]
            (ULONG) (object_size + sizeof(TXM_MODULE_ALLOCATED_OBJECT)), TX_NO_WAIT);

        /* Determine if the request was successful.  */
        if (return_value == TX_SUCCESS)
 801323a:	69fb      	ldr	r3, [r7, #28]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d135      	bne.n	80132ac <_txm_module_manager_object_allocate+0xb4>
        {
            /* Yes, now store the module instance in the allocated memory block.  */

            /* Link the allocated memory to the module instance.  */
            if (module_instance -> txm_module_instance_object_list_count++ == 0)
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8013246:	1c59      	adds	r1, r3, #1
 8013248:	687a      	ldr	r2, [r7, #4]
 801324a:	f8c2 14d0 	str.w	r1, [r2, #1232]	; 0x4d0
 801324e:	2b00      	cmp	r3, #0
 8013250:	d10a      	bne.n	8013268 <_txm_module_manager_object_allocate+0x70>
            {
                /* The allocated object list is empty.  Add object to empty list.  */
                module_instance -> txm_module_instance_object_list_head =  object_ptr;
 8013252:	693a      	ldr	r2, [r7, #16]
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
                object_ptr -> txm_module_allocated_object_next =           object_ptr;
 801325a:	693b      	ldr	r3, [r7, #16]
 801325c:	693a      	ldr	r2, [r7, #16]
 801325e:	605a      	str	r2, [r3, #4]
                object_ptr -> txm_module_allocated_object_previous =       object_ptr;
 8013260:	693b      	ldr	r3, [r7, #16]
 8013262:	693a      	ldr	r2, [r7, #16]
 8013264:	609a      	str	r2, [r3, #8]
 8013266:	e012      	b.n	801328e <_txm_module_manager_object_allocate+0x96>
            }
            else
            {
                /* This list is not NULL, add to the end of the list.  */
                next_object =      module_instance -> txm_module_instance_object_list_head;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f8d3 34cc 	ldr.w	r3, [r3, #1228]	; 0x4cc
 801326e:	61bb      	str	r3, [r7, #24]
                previous_object =  next_object -> txm_module_allocated_object_previous;
 8013270:	69bb      	ldr	r3, [r7, #24]
 8013272:	689b      	ldr	r3, [r3, #8]
 8013274:	617b      	str	r3, [r7, #20]

                /* Place the new object in the list.  */
                next_object -> txm_module_allocated_object_previous =  object_ptr;
 8013276:	693a      	ldr	r2, [r7, #16]
 8013278:	69bb      	ldr	r3, [r7, #24]
 801327a:	609a      	str	r2, [r3, #8]
                previous_object -> txm_module_allocated_object_next =  object_ptr;
 801327c:	693a      	ldr	r2, [r7, #16]
 801327e:	697b      	ldr	r3, [r7, #20]
 8013280:	605a      	str	r2, [r3, #4]

                /* Setup this object's allocated links.  */
                object_ptr -> txm_module_allocated_object_previous =  previous_object;
 8013282:	693b      	ldr	r3, [r7, #16]
 8013284:	697a      	ldr	r2, [r7, #20]
 8013286:	609a      	str	r2, [r3, #8]
                object_ptr -> txm_module_allocated_object_next =      next_object;
 8013288:	693b      	ldr	r3, [r7, #16]
 801328a:	69ba      	ldr	r2, [r7, #24]
 801328c:	605a      	str	r2, [r3, #4]
            }

            /* Setup the module instance pointer in the allocated object.  */
            object_ptr -> txm_module_allocated_object_module_instance =  module_instance;
 801328e:	693b      	ldr	r3, [r7, #16]
 8013290:	687a      	ldr	r2, [r7, #4]
 8013292:	601a      	str	r2, [r3, #0]

            /* Set the object size. */
            object_ptr -> txm_module_object_size =  object_size;
 8013294:	693b      	ldr	r3, [r7, #16]
 8013296:	68ba      	ldr	r2, [r7, #8]
 8013298:	60da      	str	r2, [r3, #12]

            /* Move the object pointer forward. This is what the module is given. */
            object_ptr++;
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	3310      	adds	r3, #16
 801329e:	613b      	str	r3, [r7, #16]

            /* Return this pointer to the application.  */
            *((VOID **) object_ptr_ptr) =  object_ptr;
 80132a0:	693a      	ldr	r2, [r7, #16]
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	601a      	str	r2, [r3, #0]
 80132a6:	e001      	b.n	80132ac <_txm_module_manager_object_allocate+0xb4>
        }
    }
    else
    {
        /* Set return value to not enabled.  */
        return_value =  TX_NOT_AVAILABLE;
 80132a8:	231d      	movs	r3, #29
 80132aa:	61fb      	str	r3, [r7, #28]
    }

    /* Release the protection mutex.  */
    _txe_mutex_put(&_txm_module_manager_mutex);
 80132ac:	4803      	ldr	r0, [pc, #12]	; (80132bc <_txm_module_manager_object_allocate+0xc4>)
 80132ae:	f7f9 fabd 	bl	800c82c <_txe_mutex_put>

    return(return_value);
 80132b2:	69fb      	ldr	r3, [r7, #28]
}
 80132b4:	4618      	mov	r0, r3
 80132b6:	3720      	adds	r7, #32
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd80      	pop	{r7, pc}
 80132bc:	2400f6ec 	.word	0x2400f6ec
 80132c0:	2400f6e8 	.word	0x2400f6e8
 80132c4:	2400f6b4 	.word	0x2400f6b4

080132c8 <_txm_module_manager_object_deallocate>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_object_deallocate(VOID *object_ptr)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b088      	sub	sp, #32
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
TXM_MODULE_INSTANCE         *module_instance;
TXM_MODULE_ALLOCATED_OBJECT *module_allocated_object_ptr;
UINT                        return_value;

    /* Get module manager protection mutex.  */
    _txe_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 80132d0:	f04f 31ff 	mov.w	r1, #4294967295
 80132d4:	482c      	ldr	r0, [pc, #176]	; (8013388 <_txm_module_manager_object_deallocate+0xc0>)
 80132d6:	f7f9 fa07 	bl	800c6e8 <_txe_mutex_get>

    /* Determine if an object pool was created.  */
    if (_txm_module_manager_object_pool_created)
 80132da:	4b2c      	ldr	r3, [pc, #176]	; (801338c <_txm_module_manager_object_deallocate+0xc4>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d047      	beq.n	8013372 <_txm_module_manager_object_deallocate+0xaa>
    {
        
    TXM_MODULE_ALLOCATED_OBJECT   *next_object, *previous_object;
        
        /* Pickup module instance pointer.  */
        module_instance =  _tx_thread_current_ptr -> tx_thread_module_instance_ptr;
 80132e2:	4b2b      	ldr	r3, [pc, #172]	; (8013390 <_txm_module_manager_object_deallocate+0xc8>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80132ea:	61bb      	str	r3, [r7, #24]
        
        /* Setup the memory pointer.  */
        module_allocated_object_ptr =  (TXM_MODULE_ALLOCATED_OBJECT *) object_ptr;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	617b      	str	r3, [r7, #20]
        
        /* Position the object pointer backwards to position back to the module manager information.  */
        previous_object =  module_allocated_object_ptr--;
 80132f0:	697b      	ldr	r3, [r7, #20]
 80132f2:	f1a3 0210 	sub.w	r2, r3, #16
 80132f6:	617a      	str	r2, [r7, #20]
 80132f8:	613b      	str	r3, [r7, #16]
        
        /* Make sure the object is valid.  */
        if ((module_allocated_object_ptr == TX_NULL) || (module_allocated_object_ptr -> txm_module_allocated_object_module_instance != module_instance) || (module_instance -> txm_module_instance_object_list_count == 0))
 80132fa:	697b      	ldr	r3, [r7, #20]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d009      	beq.n	8013314 <_txm_module_manager_object_deallocate+0x4c>
 8013300:	697b      	ldr	r3, [r7, #20]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	69ba      	ldr	r2, [r7, #24]
 8013306:	429a      	cmp	r2, r3
 8013308:	d104      	bne.n	8013314 <_txm_module_manager_object_deallocate+0x4c>
 801330a:	69bb      	ldr	r3, [r7, #24]
 801330c:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8013310:	2b00      	cmp	r3, #0
 8013312:	d102      	bne.n	801331a <_txm_module_manager_object_deallocate+0x52>
        {
            /* Set return value to invalid pointer.  */
            return_value =  TX_PTR_ERROR;
 8013314:	2303      	movs	r3, #3
 8013316:	61fb      	str	r3, [r7, #28]
 8013318:	e02d      	b.n	8013376 <_txm_module_manager_object_deallocate+0xae>
        }
        else
        {
            
            /* Unlink the node.  */    
            if ((--module_instance -> txm_module_instance_object_list_count) == 0)
 801331a:	69bb      	ldr	r3, [r7, #24]
 801331c:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8013320:	1e5a      	subs	r2, r3, #1
 8013322:	69bb      	ldr	r3, [r7, #24]
 8013324:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
 8013328:	69bb      	ldr	r3, [r7, #24]
 801332a:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 801332e:	2b00      	cmp	r3, #0
 8013330:	d104      	bne.n	801333c <_txm_module_manager_object_deallocate+0x74>
            {
                /* Only allocated object, just set the allocated list to NULL.  */
                module_instance -> txm_module_instance_object_list_head =  TX_NULL;
 8013332:	69bb      	ldr	r3, [r7, #24]
 8013334:	2200      	movs	r2, #0
 8013336:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
 801333a:	e015      	b.n	8013368 <_txm_module_manager_object_deallocate+0xa0>
            }
            else
            {
                /* Otherwise, not the only allocated object, link-up the neighbors.  */
                next_object =                                           module_allocated_object_ptr -> txm_module_allocated_object_next;
 801333c:	697b      	ldr	r3, [r7, #20]
 801333e:	685b      	ldr	r3, [r3, #4]
 8013340:	60fb      	str	r3, [r7, #12]
                previous_object =                                       module_allocated_object_ptr -> txm_module_allocated_object_previous;
 8013342:	697b      	ldr	r3, [r7, #20]
 8013344:	689b      	ldr	r3, [r3, #8]
 8013346:	613b      	str	r3, [r7, #16]
                next_object -> txm_module_allocated_object_previous =   previous_object;
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	693a      	ldr	r2, [r7, #16]
 801334c:	609a      	str	r2, [r3, #8]
                previous_object -> txm_module_allocated_object_next =   next_object;
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	68fa      	ldr	r2, [r7, #12]
 8013352:	605a      	str	r2, [r3, #4]
                
                /* See if we have to update the allocated object list head pointer.  */
                if (module_instance -> txm_module_instance_object_list_head == module_allocated_object_ptr)
 8013354:	69bb      	ldr	r3, [r7, #24]
 8013356:	f8d3 34cc 	ldr.w	r3, [r3, #1228]	; 0x4cc
 801335a:	697a      	ldr	r2, [r7, #20]
 801335c:	429a      	cmp	r2, r3
 801335e:	d103      	bne.n	8013368 <_txm_module_manager_object_deallocate+0xa0>
                {
                    /* Yes, move the head pointer to the next link. */
                    module_instance -> txm_module_instance_object_list_head =  next_object; 
 8013360:	69bb      	ldr	r3, [r7, #24]
 8013362:	68fa      	ldr	r2, [r7, #12]
 8013364:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
                }
            }
            
            /* Release the object memory.  */ 
            return_value =  (ULONG)  _txe_byte_release((VOID *) module_allocated_object_ptr);
 8013368:	6978      	ldr	r0, [r7, #20]
 801336a:	f7f8 ff11 	bl	800c190 <_txe_byte_release>
 801336e:	61f8      	str	r0, [r7, #28]
 8013370:	e001      	b.n	8013376 <_txm_module_manager_object_deallocate+0xae>
        }
    }
    else
    {
        /* Set return value to not enabled.  */
        return_value =  TX_NOT_AVAILABLE;
 8013372:	231d      	movs	r3, #29
 8013374:	61fb      	str	r3, [r7, #28]
    }
    
    /* Release the protection mutex.  */
    _txe_mutex_put(&_txm_module_manager_mutex);
 8013376:	4804      	ldr	r0, [pc, #16]	; (8013388 <_txm_module_manager_object_deallocate+0xc0>)
 8013378:	f7f9 fa58 	bl	800c82c <_txe_mutex_put>
    
    return(return_value);
 801337c:	69fb      	ldr	r3, [r7, #28]
}
 801337e:	4618      	mov	r0, r3
 8013380:	3720      	adds	r7, #32
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}
 8013386:	bf00      	nop
 8013388:	2400f6ec 	.word	0x2400f6ec
 801338c:	2400f6e8 	.word	0x2400f6e8
 8013390:	2400f034 	.word	0x2400f034

08013394 <_txm_module_manager_object_pointer_get>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_object_pointer_get(UINT object_type, CHAR *name, VOID **object_ptr)
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b086      	sub	sp, #24
 8013398:	af00      	add	r7, sp, #0
 801339a:	60f8      	str	r0, [r7, #12]
 801339c:	60b9      	str	r1, [r7, #8]
 801339e:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call the secure version of this function with the maximum length 
       possible since none was passed.  */
    status =  _txm_module_manager_object_pointer_get_extended(object_type, name, TXM_MODULE_MANAGER_UTIL_MAX_VALUE_OF_TYPE_UNSIGNED(UINT), object_ptr);
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f04f 32ff 	mov.w	r2, #4294967295
 80133a6:	68b9      	ldr	r1, [r7, #8]
 80133a8:	68f8      	ldr	r0, [r7, #12]
 80133aa:	f000 f807 	bl	80133bc <_txm_module_manager_object_pointer_get_extended>
 80133ae:	6178      	str	r0, [r7, #20]
    return(status);
 80133b0:	697b      	ldr	r3, [r7, #20]
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	3718      	adds	r7, #24
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}
	...

080133bc <_txm_module_manager_object_pointer_get_extended>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_object_pointer_get_extended(UINT object_type, CHAR *search_name, UINT search_name_length, VOID **object_ptr)
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b094      	sub	sp, #80	; 0x50
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	60f8      	str	r0, [r7, #12]
 80133c4:	60b9      	str	r1, [r7, #8]
 80133c6:	607a      	str	r2, [r7, #4]
 80133c8:	603b      	str	r3, [r7, #0]
UINT                    status;
TXM_MODULE_INSTANCE     *module_instance;


    /* Determine if the name or object pointer are NULL.  */
    if ((search_name == TX_NULL) || (object_ptr == TX_NULL))
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d002      	beq.n	80133d6 <_txm_module_manager_object_pointer_get_extended+0x1a>
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d101      	bne.n	80133da <_txm_module_manager_object_pointer_get_extended+0x1e>
    {
    
        /* Return error!  */
        return(TX_PTR_ERROR);
 80133d6:	2303      	movs	r3, #3
 80133d8:	e19f      	b.n	801371a <_txm_module_manager_object_pointer_get_extended+0x35e>
    }

    /* Default status to not found.  */
    status =  TX_NO_INSTANCE;
 80133da:	230d      	movs	r3, #13
 80133dc:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Set the return value to NULL.  */
    *object_ptr =  TX_NULL;
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	2200      	movs	r2, #0
 80133e2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80133e4:	f3ef 8310 	mrs	r3, PRIMASK
 80133e8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80133ea:	b672      	cpsid	i
    return(primask_value);
 80133ec:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts.  */
    TX_DISABLE
 80133ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  This will keep other threads from creating and deleting threads.  */
    _tx_thread_preempt_disable++;
 80133f0:	4b8f      	ldr	r3, [pc, #572]	; (8013630 <_txm_module_manager_object_pointer_get_extended+0x274>)
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	3301      	adds	r3, #1
 80133f6:	4a8e      	ldr	r2, [pc, #568]	; (8013630 <_txm_module_manager_object_pointer_get_extended+0x274>)
 80133f8:	6013      	str	r3, [r2, #0]
 80133fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133fc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80133fe:	69fb      	ldr	r3, [r7, #28]
 8013400:	f383 8810 	msr	PRIMASK, r3
}
 8013404:	bf00      	nop
    
    /* Restore interrupts.  */
    TX_RESTORE
    
    /* Process relative to the object type.  */
    switch(object_type)
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	3b01      	subs	r3, #1
 801340a:	2b07      	cmp	r3, #7
 801340c:	f200 816e 	bhi.w	80136ec <_txm_module_manager_object_pointer_get_extended+0x330>
 8013410:	a201      	add	r2, pc, #4	; (adr r2, 8013418 <_txm_module_manager_object_pointer_get_extended+0x5c>)
 8013412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013416:	bf00      	nop
 8013418:	080135df 	.word	0x080135df
 801341c:	08013685 	.word	0x08013685
 8013420:	0801350d 	.word	0x0801350d
 8013424:	08013599 	.word	0x08013599
 8013428:	080134c7 	.word	0x080134c7
 801342c:	08013553 	.word	0x08013553
 8013430:	08013439 	.word	0x08013439
 8013434:	08013481 	.word	0x08013481
    /* Determine if a thread object is requested.  */
    case TXM_THREAD_OBJECT:
    {    
    
        /* Loop to find the first matching thread.  */
        i = 0;
 8013438:	2300      	movs	r3, #0
 801343a:	62fb      	str	r3, [r7, #44]	; 0x2c
        thread_ptr =  _tx_thread_created_ptr;
 801343c:	4b7d      	ldr	r3, [pc, #500]	; (8013634 <_txm_module_manager_object_pointer_get_extended+0x278>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (i < _tx_thread_created_count)
 8013442:	e017      	b.n	8013474 <_txm_module_manager_object_pointer_get_extended+0xb8>
        {
    
            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, thread_ptr -> tx_thread_name))
 8013444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013448:	461a      	mov	r2, r3
 801344a:	6879      	ldr	r1, [r7, #4]
 801344c:	68b8      	ldr	r0, [r7, #8]
 801344e:	f001 fa38 	bl	80148c2 <_txm_module_manager_object_name_compare>
 8013452:	4603      	mov	r3, r0
 8013454:	2b00      	cmp	r3, #0
 8013456:	d006      	beq.n	8013466 <_txm_module_manager_object_pointer_get_extended+0xaa>
            {
                
                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) thread_ptr;
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801345c:	601a      	str	r2, [r3, #0]
                
                /* Set the the status to success!  */
                status =  TX_SUCCESS;   
 801345e:	2300      	movs	r3, #0
 8013460:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8013462:	bf00      	nop
            i++;

            /* Move to next thread.  */
            thread_ptr =  thread_ptr -> tx_thread_created_next;
        }
        break;
 8013464:	e145      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
            i++;
 8013466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013468:	3301      	adds	r3, #1
 801346a:	62fb      	str	r3, [r7, #44]	; 0x2c
            thread_ptr =  thread_ptr -> tx_thread_created_next;
 801346c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013472:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (i < _tx_thread_created_count)
 8013474:	4b70      	ldr	r3, [pc, #448]	; (8013638 <_txm_module_manager_object_pointer_get_extended+0x27c>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801347a:	429a      	cmp	r2, r3
 801347c:	d3e2      	bcc.n	8013444 <_txm_module_manager_object_pointer_get_extended+0x88>
        break;
 801347e:	e138      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
    /* Determine if a timer object is requested.  */
    case TXM_TIMER_OBJECT:
    {
    
        /* Loop to find the first matching timer.  */
        i = 0;
 8013480:	2300      	movs	r3, #0
 8013482:	62fb      	str	r3, [r7, #44]	; 0x2c
        timer_ptr =  _tx_timer_created_ptr;
 8013484:	4b6d      	ldr	r3, [pc, #436]	; (801363c <_txm_module_manager_object_pointer_get_extended+0x280>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	64bb      	str	r3, [r7, #72]	; 0x48
        while (i < _tx_timer_created_count)
 801348a:	e016      	b.n	80134ba <_txm_module_manager_object_pointer_get_extended+0xfe>
        {
    
            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, timer_ptr -> tx_timer_name))
 801348c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801348e:	685b      	ldr	r3, [r3, #4]
 8013490:	461a      	mov	r2, r3
 8013492:	6879      	ldr	r1, [r7, #4]
 8013494:	68b8      	ldr	r0, [r7, #8]
 8013496:	f001 fa14 	bl	80148c2 <_txm_module_manager_object_name_compare>
 801349a:	4603      	mov	r3, r0
 801349c:	2b00      	cmp	r3, #0
 801349e:	d006      	beq.n	80134ae <_txm_module_manager_object_pointer_get_extended+0xf2>
            {
                
                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) timer_ptr;
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80134a4:	601a      	str	r2, [r3, #0]
                
                /* Set the the status to success!  */
                status =  TX_SUCCESS;   
 80134a6:	2300      	movs	r3, #0
 80134a8:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 80134aa:	bf00      	nop
            i++;
        
            /* Move to next timer.  */
            timer_ptr =  timer_ptr -> tx_timer_created_next;
        }
        break;
 80134ac:	e121      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
            i++;
 80134ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134b0:	3301      	adds	r3, #1
 80134b2:	62fb      	str	r3, [r7, #44]	; 0x2c
            timer_ptr =  timer_ptr -> tx_timer_created_next;
 80134b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134b8:	64bb      	str	r3, [r7, #72]	; 0x48
        while (i < _tx_timer_created_count)
 80134ba:	4b61      	ldr	r3, [pc, #388]	; (8013640 <_txm_module_manager_object_pointer_get_extended+0x284>)
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134c0:	429a      	cmp	r2, r3
 80134c2:	d3e3      	bcc.n	801348c <_txm_module_manager_object_pointer_get_extended+0xd0>
        break;
 80134c4:	e115      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
    /* Determine if a queue object is requested.  */
    case TXM_QUEUE_OBJECT:
    {

        /* Loop to find the first matching queue.  */
        i = 0;
 80134c6:	2300      	movs	r3, #0
 80134c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        queue_ptr =  _tx_queue_created_ptr;
 80134ca:	4b5e      	ldr	r3, [pc, #376]	; (8013644 <_txm_module_manager_object_pointer_get_extended+0x288>)
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	647b      	str	r3, [r7, #68]	; 0x44
        while (i < _tx_queue_created_count)
 80134d0:	e016      	b.n	8013500 <_txm_module_manager_object_pointer_get_extended+0x144>
        {
    
            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, queue_ptr -> tx_queue_name))
 80134d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134d4:	685b      	ldr	r3, [r3, #4]
 80134d6:	461a      	mov	r2, r3
 80134d8:	6879      	ldr	r1, [r7, #4]
 80134da:	68b8      	ldr	r0, [r7, #8]
 80134dc:	f001 f9f1 	bl	80148c2 <_txm_module_manager_object_name_compare>
 80134e0:	4603      	mov	r3, r0
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d006      	beq.n	80134f4 <_txm_module_manager_object_pointer_get_extended+0x138>
            {
                
                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) queue_ptr;
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80134ea:	601a      	str	r2, [r3, #0]
                
                /* Set the the status to success!  */
                status =  TX_SUCCESS;   
 80134ec:	2300      	movs	r3, #0
 80134ee:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 80134f0:	bf00      	nop
            i++;
       
            /* Move to next queue.  */
            queue_ptr =  queue_ptr -> tx_queue_created_next;
        }
        break;
 80134f2:	e0fe      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
            i++;
 80134f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134f6:	3301      	adds	r3, #1
 80134f8:	62fb      	str	r3, [r7, #44]	; 0x2c
            queue_ptr =  queue_ptr -> tx_queue_created_next;
 80134fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134fe:	647b      	str	r3, [r7, #68]	; 0x44
        while (i < _tx_queue_created_count)
 8013500:	4b51      	ldr	r3, [pc, #324]	; (8013648 <_txm_module_manager_object_pointer_get_extended+0x28c>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013506:	429a      	cmp	r2, r3
 8013508:	d3e3      	bcc.n	80134d2 <_txm_module_manager_object_pointer_get_extended+0x116>
        break;
 801350a:	e0f2      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
    /* Determine if a event flags object is requested.  */
    case TXM_EVENT_FLAGS_OBJECT:
    {

        /* Loop to find the first matching event flags group.  */
        i = 0;
 801350c:	2300      	movs	r3, #0
 801350e:	62fb      	str	r3, [r7, #44]	; 0x2c
        events_ptr =  _tx_event_flags_created_ptr;
 8013510:	4b4e      	ldr	r3, [pc, #312]	; (801364c <_txm_module_manager_object_pointer_get_extended+0x290>)
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	643b      	str	r3, [r7, #64]	; 0x40
        while (i < _tx_event_flags_created_count)
 8013516:	e016      	b.n	8013546 <_txm_module_manager_object_pointer_get_extended+0x18a>
        {
    
            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, events_ptr -> tx_event_flags_group_name))
 8013518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801351a:	685b      	ldr	r3, [r3, #4]
 801351c:	461a      	mov	r2, r3
 801351e:	6879      	ldr	r1, [r7, #4]
 8013520:	68b8      	ldr	r0, [r7, #8]
 8013522:	f001 f9ce 	bl	80148c2 <_txm_module_manager_object_name_compare>
 8013526:	4603      	mov	r3, r0
 8013528:	2b00      	cmp	r3, #0
 801352a:	d006      	beq.n	801353a <_txm_module_manager_object_pointer_get_extended+0x17e>
            {
                
                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) events_ptr;
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013530:	601a      	str	r2, [r3, #0]
                
                /* Set the the status to success!  */
                status =  TX_SUCCESS;   
 8013532:	2300      	movs	r3, #0
 8013534:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 8013536:	bf00      	nop
            i++;
        
            /* Move to next event flags group.  */
            events_ptr =  events_ptr -> tx_event_flags_group_created_next;
        }
        break;
 8013538:	e0db      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
            i++;
 801353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801353c:	3301      	adds	r3, #1
 801353e:	62fb      	str	r3, [r7, #44]	; 0x2c
            events_ptr =  events_ptr -> tx_event_flags_group_created_next;
 8013540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013542:	699b      	ldr	r3, [r3, #24]
 8013544:	643b      	str	r3, [r7, #64]	; 0x40
        while (i < _tx_event_flags_created_count)
 8013546:	4b42      	ldr	r3, [pc, #264]	; (8013650 <_txm_module_manager_object_pointer_get_extended+0x294>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801354c:	429a      	cmp	r2, r3
 801354e:	d3e3      	bcc.n	8013518 <_txm_module_manager_object_pointer_get_extended+0x15c>
        break;
 8013550:	e0cf      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
    /* Determine if a semaphore object is requested.  */
    case TXM_SEMAPHORE_OBJECT:
    {

        /* Loop to find the first matching semaphore.  */
        i = 0;
 8013552:	2300      	movs	r3, #0
 8013554:	62fb      	str	r3, [r7, #44]	; 0x2c
        semaphore_ptr =  _tx_semaphore_created_ptr;
 8013556:	4b3f      	ldr	r3, [pc, #252]	; (8013654 <_txm_module_manager_object_pointer_get_extended+0x298>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (i < _tx_semaphore_created_count)
 801355c:	e016      	b.n	801358c <_txm_module_manager_object_pointer_get_extended+0x1d0>
        {
    
            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, semaphore_ptr -> tx_semaphore_name))
 801355e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013560:	685b      	ldr	r3, [r3, #4]
 8013562:	461a      	mov	r2, r3
 8013564:	6879      	ldr	r1, [r7, #4]
 8013566:	68b8      	ldr	r0, [r7, #8]
 8013568:	f001 f9ab 	bl	80148c2 <_txm_module_manager_object_name_compare>
 801356c:	4603      	mov	r3, r0
 801356e:	2b00      	cmp	r3, #0
 8013570:	d006      	beq.n	8013580 <_txm_module_manager_object_pointer_get_extended+0x1c4>
            {
                
                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) semaphore_ptr;
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013576:	601a      	str	r2, [r3, #0]
                
                /* Set the the status to success!  */
                status =  TX_SUCCESS;   
 8013578:	2300      	movs	r3, #0
 801357a:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 801357c:	bf00      	nop
            i++;
        
            /* Move to next semaphore.  */
            semaphore_ptr =  semaphore_ptr -> tx_semaphore_created_next;
        }
        break;
 801357e:	e0b8      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
            i++;
 8013580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013582:	3301      	adds	r3, #1
 8013584:	62fb      	str	r3, [r7, #44]	; 0x2c
            semaphore_ptr =  semaphore_ptr -> tx_semaphore_created_next;
 8013586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013588:	695b      	ldr	r3, [r3, #20]
 801358a:	63fb      	str	r3, [r7, #60]	; 0x3c
        while (i < _tx_semaphore_created_count)
 801358c:	4b32      	ldr	r3, [pc, #200]	; (8013658 <_txm_module_manager_object_pointer_get_extended+0x29c>)
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013592:	429a      	cmp	r2, r3
 8013594:	d3e3      	bcc.n	801355e <_txm_module_manager_object_pointer_get_extended+0x1a2>
        break;
 8013596:	e0ac      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
    /* Determine if a mutex object is requested.  */
    case TXM_MUTEX_OBJECT:
    {

        /* Loop to find the first matching mutex.  */
        i = 0;
 8013598:	2300      	movs	r3, #0
 801359a:	62fb      	str	r3, [r7, #44]	; 0x2c
        mutex_ptr =  _tx_mutex_created_ptr;
 801359c:	4b2f      	ldr	r3, [pc, #188]	; (801365c <_txm_module_manager_object_pointer_get_extended+0x2a0>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	63bb      	str	r3, [r7, #56]	; 0x38
        while (i < _tx_mutex_created_count)
 80135a2:	e016      	b.n	80135d2 <_txm_module_manager_object_pointer_get_extended+0x216>
        {
    
            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, mutex_ptr -> tx_mutex_name))
 80135a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135a6:	685b      	ldr	r3, [r3, #4]
 80135a8:	461a      	mov	r2, r3
 80135aa:	6879      	ldr	r1, [r7, #4]
 80135ac:	68b8      	ldr	r0, [r7, #8]
 80135ae:	f001 f988 	bl	80148c2 <_txm_module_manager_object_name_compare>
 80135b2:	4603      	mov	r3, r0
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d006      	beq.n	80135c6 <_txm_module_manager_object_pointer_get_extended+0x20a>
            {
                
                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) mutex_ptr;
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80135bc:	601a      	str	r2, [r3, #0]
                
                /* Set the the status to success!  */
                status =  TX_SUCCESS;   
 80135be:	2300      	movs	r3, #0
 80135c0:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 80135c2:	bf00      	nop
            i++;
        
            /* Move to next mutex.  */
            mutex_ptr =  mutex_ptr -> tx_mutex_created_next;
        }
        break;
 80135c4:	e095      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
            i++;
 80135c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135c8:	3301      	adds	r3, #1
 80135ca:	62fb      	str	r3, [r7, #44]	; 0x2c
            mutex_ptr =  mutex_ptr -> tx_mutex_created_next;
 80135cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ce:	6a1b      	ldr	r3, [r3, #32]
 80135d0:	63bb      	str	r3, [r7, #56]	; 0x38
        while (i < _tx_mutex_created_count)
 80135d2:	4b23      	ldr	r3, [pc, #140]	; (8013660 <_txm_module_manager_object_pointer_get_extended+0x2a4>)
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135d8:	429a      	cmp	r2, r3
 80135da:	d3e3      	bcc.n	80135a4 <_txm_module_manager_object_pointer_get_extended+0x1e8>
        break;
 80135dc:	e089      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
    /* Determine if a block pool object is requested.  */
    case TXM_BLOCK_POOL_OBJECT:
    {

        /* Get the module instance.  */
        module_instance =  _tx_thread_current_ptr -> tx_thread_module_instance_ptr;
 80135de:	4b21      	ldr	r3, [pc, #132]	; (8013664 <_txm_module_manager_object_pointer_get_extended+0x2a8>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80135e6:	623b      	str	r3, [r7, #32]

        /* Is a module making this request?  */
        if (module_instance != TX_NULL)
 80135e8:	6a3b      	ldr	r3, [r7, #32]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d008      	beq.n	8013600 <_txm_module_manager_object_pointer_get_extended+0x244>
        {

            /* Is memory protection enabled?  */
            if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 80135ee:	6a3b      	ldr	r3, [r7, #32]
 80135f0:	68db      	ldr	r3, [r3, #12]
 80135f2:	f003 0302 	and.w	r3, r3, #2
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d002      	beq.n	8013600 <_txm_module_manager_object_pointer_get_extended+0x244>
            {

                /* Modules with memory protection can only access block pools they created.  */
                status =  TXM_MODULE_INVALID;
 80135fa:	23f2      	movs	r3, #242	; 0xf2
 80135fc:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 80135fe:	e078      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
            }
        }

        /* Loop to find the first matching block pool.  */
        i = 0;
 8013600:	2300      	movs	r3, #0
 8013602:	62fb      	str	r3, [r7, #44]	; 0x2c
        block_pool_ptr =  _tx_block_pool_created_ptr;
 8013604:	4b18      	ldr	r3, [pc, #96]	; (8013668 <_txm_module_manager_object_pointer_get_extended+0x2ac>)
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	637b      	str	r3, [r7, #52]	; 0x34
        while (i < _tx_block_pool_created_count)
 801360a:	e035      	b.n	8013678 <_txm_module_manager_object_pointer_get_extended+0x2bc>
        {
    
            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, block_pool_ptr -> tx_block_pool_name))
 801360c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801360e:	685b      	ldr	r3, [r3, #4]
 8013610:	461a      	mov	r2, r3
 8013612:	6879      	ldr	r1, [r7, #4]
 8013614:	68b8      	ldr	r0, [r7, #8]
 8013616:	f001 f954 	bl	80148c2 <_txm_module_manager_object_name_compare>
 801361a:	4603      	mov	r3, r0
 801361c:	2b00      	cmp	r3, #0
 801361e:	d025      	beq.n	801366c <_txm_module_manager_object_pointer_get_extended+0x2b0>
            {
                
                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) block_pool_ptr;
 8013620:	683b      	ldr	r3, [r7, #0]
 8013622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013624:	601a      	str	r2, [r3, #0]
                
                /* Set the the status to success!  */
                status =  TX_SUCCESS;   
 8013626:	2300      	movs	r3, #0
 8013628:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 801362a:	bf00      	nop
            i++;
       
            /* Move to next block pool.  */
            block_pool_ptr =  block_pool_ptr -> tx_block_pool_created_next;
        }
        break;
 801362c:	e061      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
 801362e:	bf00      	nop
 8013630:	2400f0d0 	.word	0x2400f0d0
 8013634:	2400f03c 	.word	0x2400f03c
 8013638:	2400f040 	.word	0x2400f040
 801363c:	2400f174 	.word	0x2400f174
 8013640:	2400f178 	.word	0x2400f178
 8013644:	2400f004 	.word	0x2400f004
 8013648:	2400f008 	.word	0x2400f008
 801364c:	2400f00c 	.word	0x2400f00c
 8013650:	2400f010 	.word	0x2400f010
 8013654:	2400effc 	.word	0x2400effc
 8013658:	2400f000 	.word	0x2400f000
 801365c:	2400f014 	.word	0x2400f014
 8013660:	2400f018 	.word	0x2400f018
 8013664:	2400f034 	.word	0x2400f034
 8013668:	2400f01c 	.word	0x2400f01c
            i++;
 801366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801366e:	3301      	adds	r3, #1
 8013670:	62fb      	str	r3, [r7, #44]	; 0x2c
            block_pool_ptr =  block_pool_ptr -> tx_block_pool_created_next;
 8013672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013676:	637b      	str	r3, [r7, #52]	; 0x34
        while (i < _tx_block_pool_created_count)
 8013678:	4b2a      	ldr	r3, [pc, #168]	; (8013724 <_txm_module_manager_object_pointer_get_extended+0x368>)
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801367e:	429a      	cmp	r2, r3
 8013680:	d3c4      	bcc.n	801360c <_txm_module_manager_object_pointer_get_extended+0x250>
        break;
 8013682:	e036      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
    /* Determine if a byte pool object is requested.  */
    case TXM_BYTE_POOL_OBJECT:
    {

        /* Get the module instance.  */
        module_instance =  _tx_thread_current_ptr -> tx_thread_module_instance_ptr;
 8013684:	4b28      	ldr	r3, [pc, #160]	; (8013728 <_txm_module_manager_object_pointer_get_extended+0x36c>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801368c:	623b      	str	r3, [r7, #32]

        /* Is a module making this request?  */
        if (module_instance != TX_NULL)
 801368e:	6a3b      	ldr	r3, [r7, #32]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d008      	beq.n	80136a6 <_txm_module_manager_object_pointer_get_extended+0x2ea>
        {

            /* Is memory protection enabled?  */
            if (module_instance -> txm_module_instance_property_flags & TXM_MODULE_MEMORY_PROTECTION)
 8013694:	6a3b      	ldr	r3, [r7, #32]
 8013696:	68db      	ldr	r3, [r3, #12]
 8013698:	f003 0302 	and.w	r3, r3, #2
 801369c:	2b00      	cmp	r3, #0
 801369e:	d002      	beq.n	80136a6 <_txm_module_manager_object_pointer_get_extended+0x2ea>
            {

                /* Modules with memory protection can only access block pools they created.  */
                status =  TXM_MODULE_INVALID;
 80136a0:	23f2      	movs	r3, #242	; 0xf2
 80136a2:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 80136a4:	e025      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
            }
        }

        /* Loop to find the first matching byte pool.  */
        i = 0;
 80136a6:	2300      	movs	r3, #0
 80136a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        byte_pool_ptr =  _tx_byte_pool_created_ptr;
 80136aa:	4b20      	ldr	r3, [pc, #128]	; (801372c <_txm_module_manager_object_pointer_get_extended+0x370>)
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	633b      	str	r3, [r7, #48]	; 0x30
        while (i < _tx_byte_pool_created_count)
 80136b0:	e016      	b.n	80136e0 <_txm_module_manager_object_pointer_get_extended+0x324>
        {
    
            /* Do we have a match?  */
            if (_txm_module_manager_object_name_compare(search_name, search_name_length, byte_pool_ptr -> tx_byte_pool_name))
 80136b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136b4:	685b      	ldr	r3, [r3, #4]
 80136b6:	461a      	mov	r2, r3
 80136b8:	6879      	ldr	r1, [r7, #4]
 80136ba:	68b8      	ldr	r0, [r7, #8]
 80136bc:	f001 f901 	bl	80148c2 <_txm_module_manager_object_name_compare>
 80136c0:	4603      	mov	r3, r0
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d006      	beq.n	80136d4 <_txm_module_manager_object_pointer_get_extended+0x318>
            {
                
                /* Yes, we found it - return the necessary info!  */
                *object_ptr =  (VOID *) byte_pool_ptr;
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136ca:	601a      	str	r2, [r3, #0]
                
                /* Set the the status to success!  */
                status =  TX_SUCCESS;   
 80136cc:	2300      	movs	r3, #0
 80136ce:	62bb      	str	r3, [r7, #40]	; 0x28
                break;
 80136d0:	bf00      	nop
            i++;
        
            /* Move to next byte pool.  */
            byte_pool_ptr =  byte_pool_ptr -> tx_byte_pool_created_next;
        }
        break;
 80136d2:	e00e      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
            i++;
 80136d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d6:	3301      	adds	r3, #1
 80136d8:	62fb      	str	r3, [r7, #44]	; 0x2c
            byte_pool_ptr =  byte_pool_ptr -> tx_byte_pool_created_next;
 80136da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136de:	633b      	str	r3, [r7, #48]	; 0x30
        while (i < _tx_byte_pool_created_count)
 80136e0:	4b13      	ldr	r3, [pc, #76]	; (8013730 <_txm_module_manager_object_pointer_get_extended+0x374>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136e6:	429a      	cmp	r2, r3
 80136e8:	d3e3      	bcc.n	80136b2 <_txm_module_manager_object_pointer_get_extended+0x2f6>
        break;
 80136ea:	e002      	b.n	80136f2 <_txm_module_manager_object_pointer_get_extended+0x336>
    }

    default:

        /* Invalid object ID.  */
        status =  TX_OPTION_ERROR;
 80136ec:	2308      	movs	r3, #8
 80136ee:	62bb      	str	r3, [r7, #40]	; 0x28
            /* Call the USBX object get function.  */
            status =  _txm_module_manager_usbx_object_pointer_get(object_type, search_name, search_name_length, object_ptr);
        }
#endif

        break;    
 80136f0:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80136f2:	f3ef 8310 	mrs	r3, PRIMASK
 80136f6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80136f8:	b672      	cpsid	i
    return(primask_value);
 80136fa:	693b      	ldr	r3, [r7, #16]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 80136fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Enable preemption again.  */
    _tx_thread_preempt_disable--;
 80136fe:	4b0d      	ldr	r3, [pc, #52]	; (8013734 <_txm_module_manager_object_pointer_get_extended+0x378>)
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	3b01      	subs	r3, #1
 8013704:	4a0b      	ldr	r2, [pc, #44]	; (8013734 <_txm_module_manager_object_pointer_get_extended+0x378>)
 8013706:	6013      	str	r3, [r2, #0]
 8013708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801370a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	f383 8810 	msr	PRIMASK, r3
}
 8013712:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8013714:	f7f7 f898 	bl	800a848 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(status);
 8013718:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801371a:	4618      	mov	r0, r3
 801371c:	3750      	adds	r7, #80	; 0x50
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}
 8013722:	bf00      	nop
 8013724:	2400f020 	.word	0x2400f020
 8013728:	2400f034 	.word	0x2400f034
 801372c:	2400f024 	.word	0x2400f024
 8013730:	2400f028 	.word	0x2400f028
 8013734:	2400f0d0 	.word	0x2400f0d0

08013738 <_txm_module_manager_object_pool_create>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_object_pool_create(VOID *object_memory, ULONG object_memory_size)
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b082      	sub	sp, #8
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
 8013740:	6039      	str	r1, [r7, #0]

    /* Create a byte pool for allocating RAM areas for modules.  */ 
    _tx_byte_pool_create(&_txm_module_manager_object_pool, "Module Manager Object Pool", object_memory, object_memory_size);
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	687a      	ldr	r2, [r7, #4]
 8013746:	4906      	ldr	r1, [pc, #24]	; (8013760 <_txm_module_manager_object_pool_create+0x28>)
 8013748:	4806      	ldr	r0, [pc, #24]	; (8013764 <_txm_module_manager_object_pool_create+0x2c>)
 801374a:	f7f3 f82b 	bl	80067a4 <_tx_byte_pool_create>

    /* Indicate the module manager object pool has been created.  */
    _txm_module_manager_object_pool_created =  TX_TRUE;
 801374e:	4b06      	ldr	r3, [pc, #24]	; (8013768 <_txm_module_manager_object_pool_create+0x30>)
 8013750:	2201      	movs	r2, #1
 8013752:	601a      	str	r2, [r3, #0]
    
    /* Return success.  */
    return(TX_SUCCESS);
 8013754:	2300      	movs	r3, #0
}
 8013756:	4618      	mov	r0, r3
 8013758:	3708      	adds	r7, #8
 801375a:	46bd      	mov	sp, r7
 801375c:	bd80      	pop	{r7, pc}
 801375e:	bf00      	nop
 8013760:	080165b8 	.word	0x080165b8
 8013764:	2400f6b4 	.word	0x2400f6b4
 8013768:	2400f6e8 	.word	0x2400f6e8

0801376c <_txm_module_manager_properties_get>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_properties_get(TXM_MODULE_INSTANCE *module_instance, ULONG *module_properties_ptr)
{
 801376c:	b480      	push	{r7}
 801376e:	b083      	sub	sp, #12
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
 8013774:	6039      	str	r1, [r7, #0]

    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 8013776:	4b11      	ldr	r3, [pc, #68]	; (80137bc <_txm_module_manager_properties_get+0x50>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	2b01      	cmp	r3, #1
 801377c:	d001      	beq.n	8013782 <_txm_module_manager_properties_get+0x16>
    {
    
        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE); 
 801377e:	231d      	movs	r3, #29
 8013780:	e015      	b.n	80137ae <_txm_module_manager_properties_get+0x42>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d101      	bne.n	801378c <_txm_module_manager_properties_get+0x20>
    {
    
        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 8013788:	2303      	movs	r3, #3
 801378a:	e010      	b.n	80137ae <_txm_module_manager_properties_get+0x42>
    }

    /* Check the module ID.  */
    if (module_instance -> txm_module_instance_id != TXM_MODULE_ID)
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	4a0b      	ldr	r2, [pc, #44]	; (80137c0 <_txm_module_manager_properties_get+0x54>)
 8013792:	4293      	cmp	r3, r2
 8013794:	d001      	beq.n	801379a <_txm_module_manager_properties_get+0x2e>
    {

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 8013796:	2303      	movs	r3, #3
 8013798:	e009      	b.n	80137ae <_txm_module_manager_properties_get+0x42>
    }

    /* Check for non-null buffer.  */
    if (module_properties_ptr == TX_NULL)
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d101      	bne.n	80137a4 <_txm_module_manager_properties_get+0x38>
    {

        /* Invalid buffer pointer.  */
        return(TX_PTR_ERROR);
 80137a0:	2303      	movs	r3, #3
 80137a2:	e004      	b.n	80137ae <_txm_module_manager_properties_get+0x42>
    }

    /* Simply return the property bitmap.  */
    *module_properties_ptr =  module_instance -> txm_module_instance_property_flags;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	68da      	ldr	r2, [r3, #12]
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	601a      	str	r2, [r3, #0]

    /* Return success.  */
    return(TX_SUCCESS);
 80137ac:	2300      	movs	r3, #0
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	370c      	adds	r7, #12
 80137b2:	46bd      	mov	sp, r7
 80137b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b8:	4770      	bx	lr
 80137ba:	bf00      	nop
 80137bc:	2400f728 	.word	0x2400f728
 80137c0:	4d4f4455 	.word	0x4d4f4455

080137c4 <_txm_module_manager_queue_notify_trampoline>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_queue_notify_trampoline(TX_QUEUE *queue_ptr)
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b096      	sub	sp, #88	; 0x58
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80137cc:	f3ef 8310 	mrs	r3, PRIMASK
 80137d0:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile (" CPSID i" : : : "memory" );
 80137d2:	b672      	cpsid	i
    return(primask_value);
 80137d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

  
    /* We now know the callback is for a module.  */
        
    /* Disable interrupts.  */
    TX_DISABLE
 80137d6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup the module instance pointer.  */
    module_instance =  (TXM_MODULE_INSTANCE *) queue_ptr -> tx_queue_module_instance;
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137dc:	653b      	str	r3, [r7, #80]	; 0x50

    /* Determine if this module is still valid.  */
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 80137de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d034      	beq.n	801384e <_txm_module_manager_queue_notify_trampoline+0x8a>
 80137e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	4a20      	ldr	r2, [pc, #128]	; (801386c <_txm_module_manager_queue_notify_trampoline+0xa8>)
 80137ea:	4293      	cmp	r3, r2
 80137ec:	d12f      	bne.n	801384e <_txm_module_manager_queue_notify_trampoline+0x8a>
        (module_instance -> txm_module_instance_state == TXM_MODULE_STARTED))
 80137ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137f0:	689b      	ldr	r3, [r3, #8]
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 80137f2:	2b02      	cmp	r3, #2
 80137f4:	d12b      	bne.n	801384e <_txm_module_manager_queue_notify_trampoline+0x8a>
    {
        
        /* Yes, the module is still valid.  */        
         
        /* Pickup the module's callback message queue.  */
        module_callback_queue =  &(module_instance -> txm_module_instance_callback_request_queue);
 80137f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137f8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80137fc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Build the queue notification message.  */
        callback_message.txm_module_callback_message_type =                  TXM_QUEUE_SEND_CALLBACK;
 80137fe:	2302      	movs	r3, #2
 8013800:	60fb      	str	r3, [r7, #12]
        callback_message.txm_module_callback_message_activation_count =      1;
 8013802:	2301      	movs	r3, #1
 8013804:	613b      	str	r3, [r7, #16]
        callback_message.txm_module_callback_message_application_function =  (VOID (*)(VOID)) queue_ptr -> tx_queue_send_module_notify;
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801380a:	617b      	str	r3, [r7, #20]
        callback_message.txm_module_callback_message_param_1 =               (ALIGN_TYPE) queue_ptr;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	61bb      	str	r3, [r7, #24]
        callback_message.txm_module_callback_message_param_2 =               0;
 8013810:	2300      	movs	r3, #0
 8013812:	61fb      	str	r3, [r7, #28]
        callback_message.txm_module_callback_message_param_3 =               0;
 8013814:	2300      	movs	r3, #0
 8013816:	623b      	str	r3, [r7, #32]
        callback_message.txm_module_callback_message_param_4 =               0;
 8013818:	2300      	movs	r3, #0
 801381a:	627b      	str	r3, [r7, #36]	; 0x24
        callback_message.txm_module_callback_message_param_5 =               0;
 801381c:	2300      	movs	r3, #0
 801381e:	62bb      	str	r3, [r7, #40]	; 0x28
        callback_message.txm_module_callback_message_param_6 =               0;
 8013820:	2300      	movs	r3, #0
 8013822:	62fb      	str	r3, [r7, #44]	; 0x2c
        callback_message.txm_module_callback_message_param_7 =               0;
 8013824:	2300      	movs	r3, #0
 8013826:	633b      	str	r3, [r7, #48]	; 0x30
        callback_message.txm_module_callback_message_param_8 =               0;
 8013828:	2300      	movs	r3, #0
 801382a:	637b      	str	r3, [r7, #52]	; 0x34
        callback_message.txm_module_callback_message_reserved1 =             0;
 801382c:	2300      	movs	r3, #0
 801382e:	63bb      	str	r3, [r7, #56]	; 0x38
        callback_message.txm_module_callback_message_reserved2 =             0;
 8013830:	2300      	movs	r3, #0
 8013832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013836:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801383a:	f383 8810 	msr	PRIMASK, r3
}
 801383e:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Call the general processing that will place the callback on the 
           module's callback request queue.  */
        _txm_module_manager_callback_request(module_callback_queue, &callback_message);
 8013840:	f107 030c 	add.w	r3, r7, #12
 8013844:	4619      	mov	r1, r3
 8013846:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013848:	f7fa f914 	bl	800da74 <_txm_module_manager_callback_request>
 801384c:	e00a      	b.n	8013864 <_txm_module_manager_queue_notify_trampoline+0xa0>
    {
    
        /* Module no longer valid.  */
        
        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 801384e:	4b08      	ldr	r3, [pc, #32]	; (8013870 <_txm_module_manager_queue_notify_trampoline+0xac>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	3301      	adds	r3, #1
 8013854:	4a06      	ldr	r2, [pc, #24]	; (8013870 <_txm_module_manager_queue_notify_trampoline+0xac>)
 8013856:	6013      	str	r3, [r2, #0]
 8013858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801385a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801385c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801385e:	f383 8810 	msr	PRIMASK, r3
}
 8013862:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    }
}         
 8013864:	bf00      	nop
 8013866:	3758      	adds	r7, #88	; 0x58
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}
 801386c:	4d4f4455 	.word	0x4d4f4455
 8013870:	2400f730 	.word	0x2400f730

08013874 <_txm_module_manager_semaphore_notify_trampoline>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_semaphore_notify_trampoline(TX_SEMAPHORE *semaphore_ptr)
{
 8013874:	b580      	push	{r7, lr}
 8013876:	b096      	sub	sp, #88	; 0x58
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801387c:	f3ef 8310 	mrs	r3, PRIMASK
 8013880:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013882:	b672      	cpsid	i
    return(primask_value);
 8013884:	6cbb      	ldr	r3, [r7, #72]	; 0x48

  
    /* We now know the callback is for a module.  */
        
    /* Disable interrupts.  */
    TX_DISABLE
 8013886:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup the module instance pointer.  */
    module_instance =  (TXM_MODULE_INSTANCE *) semaphore_ptr -> tx_semaphore_module_instance;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	6a1b      	ldr	r3, [r3, #32]
 801388c:	653b      	str	r3, [r7, #80]	; 0x50

    /* Determine if this module is still valid.  */
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 801388e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013890:	2b00      	cmp	r3, #0
 8013892:	d034      	beq.n	80138fe <_txm_module_manager_semaphore_notify_trampoline+0x8a>
 8013894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	4a20      	ldr	r2, [pc, #128]	; (801391c <_txm_module_manager_semaphore_notify_trampoline+0xa8>)
 801389a:	4293      	cmp	r3, r2
 801389c:	d12f      	bne.n	80138fe <_txm_module_manager_semaphore_notify_trampoline+0x8a>
        (module_instance -> txm_module_instance_state == TXM_MODULE_STARTED))
 801389e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138a0:	689b      	ldr	r3, [r3, #8]
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 80138a2:	2b02      	cmp	r3, #2
 80138a4:	d12b      	bne.n	80138fe <_txm_module_manager_semaphore_notify_trampoline+0x8a>
    {
        
        /* Yes, the module is still valid.  */        
         
        /* Pickup the module's callback message queue.  */
        module_callback_queue =  &(module_instance -> txm_module_instance_callback_request_queue);
 80138a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138a8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80138ac:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Build the queue notification message.  */
        callback_message.txm_module_callback_message_type =                  TXM_SEMAPHORE_PUT_CALLBACK;
 80138ae:	2303      	movs	r3, #3
 80138b0:	60fb      	str	r3, [r7, #12]
        callback_message.txm_module_callback_message_activation_count =      1;
 80138b2:	2301      	movs	r3, #1
 80138b4:	613b      	str	r3, [r7, #16]
        callback_message.txm_module_callback_message_application_function =  (VOID (*)(VOID)) semaphore_ptr -> tx_semaphore_put_module_notify;
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ba:	617b      	str	r3, [r7, #20]
        callback_message.txm_module_callback_message_param_1 =               (ALIGN_TYPE) semaphore_ptr;
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	61bb      	str	r3, [r7, #24]
        callback_message.txm_module_callback_message_param_2 =               0;
 80138c0:	2300      	movs	r3, #0
 80138c2:	61fb      	str	r3, [r7, #28]
        callback_message.txm_module_callback_message_param_3 =               0;
 80138c4:	2300      	movs	r3, #0
 80138c6:	623b      	str	r3, [r7, #32]
        callback_message.txm_module_callback_message_param_4 =               0;
 80138c8:	2300      	movs	r3, #0
 80138ca:	627b      	str	r3, [r7, #36]	; 0x24
        callback_message.txm_module_callback_message_param_5 =               0;
 80138cc:	2300      	movs	r3, #0
 80138ce:	62bb      	str	r3, [r7, #40]	; 0x28
        callback_message.txm_module_callback_message_param_6 =               0;
 80138d0:	2300      	movs	r3, #0
 80138d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        callback_message.txm_module_callback_message_param_7 =               0;
 80138d4:	2300      	movs	r3, #0
 80138d6:	633b      	str	r3, [r7, #48]	; 0x30
        callback_message.txm_module_callback_message_param_8 =               0;
 80138d8:	2300      	movs	r3, #0
 80138da:	637b      	str	r3, [r7, #52]	; 0x34
        callback_message.txm_module_callback_message_reserved1 =             0;
 80138dc:	2300      	movs	r3, #0
 80138de:	63bb      	str	r3, [r7, #56]	; 0x38
        callback_message.txm_module_callback_message_reserved2 =             0;
 80138e0:	2300      	movs	r3, #0
 80138e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80138e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138e6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80138e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138ea:	f383 8810 	msr	PRIMASK, r3
}
 80138ee:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Call the general processing that will place the callback on the 
           module's callback request queue.  */
        _txm_module_manager_callback_request(module_callback_queue, &callback_message);
 80138f0:	f107 030c 	add.w	r3, r7, #12
 80138f4:	4619      	mov	r1, r3
 80138f6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80138f8:	f7fa f8bc 	bl	800da74 <_txm_module_manager_callback_request>
 80138fc:	e00a      	b.n	8013914 <_txm_module_manager_semaphore_notify_trampoline+0xa0>
    {
    
        /* Module no longer valid.  */

        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 80138fe:	4b08      	ldr	r3, [pc, #32]	; (8013920 <_txm_module_manager_semaphore_notify_trampoline+0xac>)
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	3301      	adds	r3, #1
 8013904:	4a06      	ldr	r2, [pc, #24]	; (8013920 <_txm_module_manager_semaphore_notify_trampoline+0xac>)
 8013906:	6013      	str	r3, [r2, #0]
 8013908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801390a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801390c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801390e:	f383 8810 	msr	PRIMASK, r3
}
 8013912:	bf00      	nop
        
        /* Restore interrupts.  */
        TX_RESTORE
    }
}         
 8013914:	bf00      	nop
 8013916:	3758      	adds	r7, #88	; 0x58
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}
 801391c:	4d4f4455 	.word	0x4d4f4455
 8013920:	2400f730 	.word	0x2400f730

08013924 <_txm_module_manager_start>:
/*  12-31-2020      Scott Larson            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_start(TXM_MODULE_INSTANCE *module_instance)
{
 8013924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013926:	b091      	sub	sp, #68	; 0x44
 8013928:	af0a      	add	r7, sp, #40	; 0x28
 801392a:	60f8      	str	r0, [r7, #12]
    
UINT    status;


    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 801392c:	4b70      	ldr	r3, [pc, #448]	; (8013af0 <_txm_module_manager_start+0x1cc>)
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	2b01      	cmp	r3, #1
 8013932:	d001      	beq.n	8013938 <_txm_module_manager_start+0x14>
    {
    
        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE); 
 8013934:	231d      	movs	r3, #29
 8013936:	e0d6      	b.n	8013ae6 <_txm_module_manager_start+0x1c2>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d101      	bne.n	8013942 <_txm_module_manager_start+0x1e>
    {
    
        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 801393e:	2303      	movs	r3, #3
 8013940:	e0d1      	b.n	8013ae6 <_txm_module_manager_start+0x1c2>
    }

    /* Get module manager protection mutex.  */
    _tx_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 8013942:	f04f 31ff 	mov.w	r1, #4294967295
 8013946:	486b      	ldr	r0, [pc, #428]	; (8013af4 <_txm_module_manager_start+0x1d0>)
 8013948:	f7f4 fa14 	bl	8007d74 <_tx_mutex_get>

    /* Determine if the module instance is valid.  */
    if (module_instance -> txm_module_instance_id != TXM_MODULE_ID)
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	4a69      	ldr	r2, [pc, #420]	; (8013af8 <_txm_module_manager_start+0x1d4>)
 8013952:	4293      	cmp	r3, r2
 8013954:	d004      	beq.n	8013960 <_txm_module_manager_start+0x3c>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8013956:	4867      	ldr	r0, [pc, #412]	; (8013af4 <_txm_module_manager_start+0x1d0>)
 8013958:	f7f4 fcca 	bl	80082f0 <_tx_mutex_put>

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 801395c:	2303      	movs	r3, #3
 801395e:	e0c2      	b.n	8013ae6 <_txm_module_manager_start+0x1c2>
    }
    
    /* Determine if the module instance is in the loaded state.  */
    if ((module_instance -> txm_module_instance_state != TXM_MODULE_LOADED) && (module_instance -> txm_module_instance_state != TXM_MODULE_STOPPED))
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	689b      	ldr	r3, [r3, #8]
 8013964:	2b01      	cmp	r3, #1
 8013966:	d008      	beq.n	801397a <_txm_module_manager_start+0x56>
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	689b      	ldr	r3, [r3, #8]
 801396c:	2b04      	cmp	r3, #4
 801396e:	d004      	beq.n	801397a <_txm_module_manager_start+0x56>
    {
    
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8013970:	4860      	ldr	r0, [pc, #384]	; (8013af4 <_txm_module_manager_start+0x1d0>)
 8013972:	f7f4 fcbd 	bl	80082f0 <_tx_mutex_put>

        /* Return error if the module is not ready.  */
        return(TX_START_ERROR);
 8013976:	2310      	movs	r3, #16
 8013978:	e0b5      	b.n	8013ae6 <_txm_module_manager_start+0x1c2>
    }

    /* Check the priorities of the start/stop and callback request threads. */
    if (module_instance -> txm_module_instance_start_stop_priority < module_instance -> txm_module_instance_maximum_priority ||
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	f8d3 24b8 	ldr.w	r2, [r3, #1208]	; 0x4b8
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 8013986:	429a      	cmp	r2, r3
 8013988:	d307      	bcc.n	801399a <_txm_module_manager_start+0x76>
        module_instance -> txm_module_instance_callback_priority < module_instance -> txm_module_instance_maximum_priority)
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	; 0x4c0
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
    if (module_instance -> txm_module_instance_start_stop_priority < module_instance -> txm_module_instance_maximum_priority ||
 8013996:	429a      	cmp	r2, r3
 8013998:	d204      	bcs.n	80139a4 <_txm_module_manager_start+0x80>
    {
    
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 801399a:	4856      	ldr	r0, [pc, #344]	; (8013af4 <_txm_module_manager_start+0x1d0>)
 801399c:	f7f4 fca8 	bl	80082f0 <_tx_mutex_put>

        /* At least one thread has an invalid priority.  */
        return(TX_PRIORITY_ERROR);
 80139a0:	230f      	movs	r3, #15
 80139a2:	e0a0      	b.n	8013ae6 <_txm_module_manager_start+0x1c2>
    }

    /* Create the module's callback request queue.  */
    status = _tx_queue_create(&(module_instance -> txm_module_instance_callback_request_queue), "Module Callback Request Queue", (sizeof(TXM_MODULE_CALLBACK_MESSAGE)/sizeof(ULONG)), 
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
                              module_instance -> txm_module_instance_callback_request_queue_area, sizeof(module_instance -> txm_module_instance_callback_request_queue_area));
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	f503 7345 	add.w	r3, r3, #788	; 0x314
    status = _tx_queue_create(&(module_instance -> txm_module_instance_callback_request_queue), "Module Callback Request Queue", (sizeof(TXM_MODULE_CALLBACK_MESSAGE)/sizeof(ULONG)), 
 80139b0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80139b4:	9200      	str	r2, [sp, #0]
 80139b6:	220d      	movs	r2, #13
 80139b8:	4950      	ldr	r1, [pc, #320]	; (8013afc <_txm_module_manager_start+0x1d8>)
 80139ba:	f7f4 fef9 	bl	80087b0 <_tx_queue_create>
 80139be:	6178      	str	r0, [r7, #20]

    /* Determine if there was an error.  */
    if (status)
 80139c0:	697b      	ldr	r3, [r7, #20]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d004      	beq.n	80139d0 <_txm_module_manager_start+0xac>
    {
    
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 80139c6:	484b      	ldr	r0, [pc, #300]	; (8013af4 <_txm_module_manager_start+0x1d0>)
 80139c8:	f7f4 fc92 	bl	80082f0 <_tx_mutex_put>

        /* Return error if the module is not ready.  */
        return(TX_START_ERROR);
 80139cc:	2310      	movs	r3, #16
 80139ce:	e08a      	b.n	8013ae6 <_txm_module_manager_start+0x1c2>
    }

    /* Create the module start thread.  */    
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	f503 7680 	add.w	r6, r3, #256	; 0x100
                                                "Module Start Thread",
                                                module_instance -> txm_module_instance_shell_entry_function,
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139da:	60bb      	str	r3, [r7, #8]
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80139e0:	6079      	str	r1, [r7, #4]
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 80139e8:	68fa      	ldr	r2, [r7, #12]
 80139ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80139ec:	68f9      	ldr	r1, [r7, #12]
 80139ee:	f8d1 14b4 	ldr.w	r1, [r1, #1204]	; 0x4b4
                                                module_instance -> txm_module_instance_start_thread_entry,
                                                module_instance -> txm_module_instance_application_module_id,
                                                module_instance -> txm_module_instance_start_stop_stack_start_address,
                                                module_instance -> txm_module_instance_start_stop_stack_size,
                                                (UINT) module_instance -> txm_module_instance_start_stop_priority,
 80139f2:	68f8      	ldr	r0, [r7, #12]
 80139f4:	f8d0 04b8 	ldr.w	r0, [r0, #1208]	; 0x4b8
                                                (UINT) module_instance -> txm_module_instance_start_stop_priority,
 80139f8:	68fc      	ldr	r4, [r7, #12]
 80139fa:	f8d4 44b8 	ldr.w	r4, [r4, #1208]	; 0x4b8
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 80139fe:	68fd      	ldr	r5, [r7, #12]
 8013a00:	9508      	str	r5, [sp, #32]
 8013a02:	25e8      	movs	r5, #232	; 0xe8
 8013a04:	9507      	str	r5, [sp, #28]
 8013a06:	2500      	movs	r5, #0
 8013a08:	9506      	str	r5, [sp, #24]
 8013a0a:	2504      	movs	r5, #4
 8013a0c:	9505      	str	r5, [sp, #20]
 8013a0e:	9404      	str	r4, [sp, #16]
 8013a10:	9003      	str	r0, [sp, #12]
 8013a12:	9102      	str	r1, [sp, #8]
 8013a14:	9201      	str	r2, [sp, #4]
 8013a16:	9300      	str	r3, [sp, #0]
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	68ba      	ldr	r2, [r7, #8]
 8013a1c:	4938      	ldr	r1, [pc, #224]	; (8013b00 <_txm_module_manager_start+0x1dc>)
 8013a1e:	4630      	mov	r0, r6
 8013a20:	f000 fad4 	bl	8013fcc <_txm_module_manager_thread_create>
 8013a24:	6178      	str	r0, [r7, #20]
                                                TX_DONT_START, 
                                                sizeof(TX_THREAD),
                                                module_instance);
    
    /* Determine if the thread create was successful.  */
    if (status != TX_SUCCESS)
 8013a26:	697b      	ldr	r3, [r7, #20]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d00a      	beq.n	8013a42 <_txm_module_manager_start+0x11e>
    {
   
        /* Delete the callback notification queue.  */
        _tx_queue_delete(&(module_instance -> txm_module_instance_callback_request_queue));
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7f4 ff2e 	bl	8008894 <_tx_queue_delete>

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8013a38:	482e      	ldr	r0, [pc, #184]	; (8013af4 <_txm_module_manager_start+0x1d0>)
 8013a3a:	f7f4 fc59 	bl	80082f0 <_tx_mutex_put>

        /* Return the error status.  */
        return(status);    
 8013a3e:	697b      	ldr	r3, [r7, #20]
 8013a40:	e051      	b.n	8013ae6 <_txm_module_manager_start+0x1c2>
    }

    /* Create the module callback thread.  */    
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_callback_request_thread),
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	f503 76f4 	add.w	r6, r3, #488	; 0x1e8
                                                "Module Callback Request Thread",
                                                module_instance -> txm_module_instance_shell_entry_function,
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a4c:	60bb      	str	r3, [r7, #8]
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_callback_request_thread),
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8013a52:	6079      	str	r1, [r7, #4]
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 8013a5a:	68fa      	ldr	r2, [r7, #12]
 8013a5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8013a5e:	68f9      	ldr	r1, [r7, #12]
 8013a60:	f8d1 14bc 	ldr.w	r1, [r1, #1212]	; 0x4bc
                                                module_instance -> txm_module_instance_callback_request_thread_entry,
                                                module_instance -> txm_module_instance_application_module_id,
                                                module_instance -> txm_module_instance_callback_stack_start_address,
                                                module_instance -> txm_module_instance_callback_stack_size,
                                                (UINT) module_instance -> txm_module_instance_callback_priority,
 8013a64:	68f8      	ldr	r0, [r7, #12]
 8013a66:	f8d0 04c0 	ldr.w	r0, [r0, #1216]	; 0x4c0
                                                (UINT) module_instance -> txm_module_instance_callback_priority,
 8013a6a:	68fc      	ldr	r4, [r7, #12]
 8013a6c:	f8d4 44c0 	ldr.w	r4, [r4, #1216]	; 0x4c0
    status =  _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_callback_request_thread),
 8013a70:	68fd      	ldr	r5, [r7, #12]
 8013a72:	9508      	str	r5, [sp, #32]
 8013a74:	25e8      	movs	r5, #232	; 0xe8
 8013a76:	9507      	str	r5, [sp, #28]
 8013a78:	2500      	movs	r5, #0
 8013a7a:	9506      	str	r5, [sp, #24]
 8013a7c:	2500      	movs	r5, #0
 8013a7e:	9505      	str	r5, [sp, #20]
 8013a80:	9404      	str	r4, [sp, #16]
 8013a82:	9003      	str	r0, [sp, #12]
 8013a84:	9102      	str	r1, [sp, #8]
 8013a86:	9201      	str	r2, [sp, #4]
 8013a88:	9300      	str	r3, [sp, #0]
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	68ba      	ldr	r2, [r7, #8]
 8013a8e:	491d      	ldr	r1, [pc, #116]	; (8013b04 <_txm_module_manager_start+0x1e0>)
 8013a90:	4630      	mov	r0, r6
 8013a92:	f000 fa9b 	bl	8013fcc <_txm_module_manager_thread_create>
 8013a96:	6178      	str	r0, [r7, #20]
                                                TX_DONT_START, 
                                                sizeof(TX_THREAD),
                                                module_instance);
    
    /* Determine if the thread create was successful.  */
    if (status != TX_SUCCESS)
 8013a98:	697b      	ldr	r3, [r7, #20]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d016      	beq.n	8013acc <_txm_module_manager_start+0x1a8>
    {

        /* Terminate the start thread.  */
        _tx_thread_terminate(&(module_instance -> txm_module_instance_start_stop_thread));
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	f7f7 f9a7 	bl	800adf8 <_tx_thread_terminate>
        
        /* Delete the start thread.  */
        _tx_thread_delete(&(module_instance -> txm_module_instance_start_stop_thread));
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f7f6 fa35 	bl	8009f20 <_tx_thread_delete>
   
        /* Delete the callback notification queue.  */
        _tx_queue_delete(&(module_instance -> txm_module_instance_callback_request_queue));
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8013abc:	4618      	mov	r0, r3
 8013abe:	f7f4 fee9 	bl	8008894 <_tx_queue_delete>

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8013ac2:	480c      	ldr	r0, [pc, #48]	; (8013af4 <_txm_module_manager_start+0x1d0>)
 8013ac4:	f7f4 fc14 	bl	80082f0 <_tx_mutex_put>

        /* Return the error status.  */
        return(status);    
 8013ac8:	697b      	ldr	r3, [r7, #20]
 8013aca:	e00c      	b.n	8013ae6 <_txm_module_manager_start+0x1c2>
    }


    /* Set the module state to started.  */
    module_instance -> txm_module_instance_state =  TXM_MODULE_STARTED;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	2202      	movs	r2, #2
 8013ad0:	609a      	str	r2, [r3, #8]

    /* Release the protection mutex.  */
    _tx_mutex_put(&_txm_module_manager_mutex);
 8013ad2:	4808      	ldr	r0, [pc, #32]	; (8013af4 <_txm_module_manager_start+0x1d0>)
 8013ad4:	f7f4 fc0c 	bl	80082f0 <_tx_mutex_put>

    /* Resume the module's start thread.  */
    _tx_thread_resume(&(module_instance -> txm_module_instance_start_stop_thread));
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f7f6 fcf6 	bl	800a4d0 <_tx_thread_resume>

    /* Return success.  */
    return(TX_SUCCESS);
 8013ae4:	2300      	movs	r3, #0
}
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	371c      	adds	r7, #28
 8013aea:	46bd      	mov	sp, r7
 8013aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013aee:	bf00      	nop
 8013af0:	2400f728 	.word	0x2400f728
 8013af4:	2400f6ec 	.word	0x2400f6ec
 8013af8:	4d4f4455 	.word	0x4d4f4455
 8013afc:	080165d4 	.word	0x080165d4
 8013b00:	080165f4 	.word	0x080165f4
 8013b04:	08016608 	.word	0x08016608

08013b08 <_txm_module_manager_stop>:
/*                                            object delete underflow,    */
/*                                            resulting in version 6.1.5  */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_stop(TXM_MODULE_INSTANCE *module_instance)
{
 8013b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b0a:	b0a9      	sub	sp, #164	; 0xa4
 8013b0c:	af0a      	add	r7, sp, #40	; 0x28
 8013b0e:	60f8      	str	r0, [r7, #12]
ULONG                           i;
TXM_MODULE_ALLOCATED_OBJECT     *object_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013b10:	4b86      	ldr	r3, [pc, #536]	; (8013d2c <_txm_module_manager_stop+0x224>)
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8013b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d101      	bne.n	8013b20 <_txm_module_manager_stop+0x18>
    {

        /* Illegal caller of this service.  */
        return(TX_CALLER_ERROR);
 8013b1c:	2313      	movs	r3, #19
 8013b1e:	e232      	b.n	8013f86 <_txm_module_manager_stop+0x47e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013b20:	f3ef 8305 	mrs	r3, IPSR
 8013b24:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8013b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    }

    /* Is the caller an ISR or Initialization?  */
    if (TX_THREAD_GET_SYSTEM_STATE() != 0)
 8013b28:	4b81      	ldr	r3, [pc, #516]	; (8013d30 <_txm_module_manager_stop+0x228>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	4313      	orrs	r3, r2
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d001      	beq.n	8013b36 <_txm_module_manager_stop+0x2e>
    {

        /* Illegal caller of this service.  */
        return(TX_CALLER_ERROR);
 8013b32:	2313      	movs	r3, #19
 8013b34:	e227      	b.n	8013f86 <_txm_module_manager_stop+0x47e>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for invalid caller of this function.  First check for a calling thread.  */
    if (thread_ptr == &_tx_timer_thread)
 8013b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013b38:	4a7e      	ldr	r2, [pc, #504]	; (8013d34 <_txm_module_manager_stop+0x22c>)
 8013b3a:	4293      	cmp	r3, r2
 8013b3c:	d101      	bne.n	8013b42 <_txm_module_manager_stop+0x3a>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        return(TX_CALLER_ERROR);
 8013b3e:	2313      	movs	r3, #19
 8013b40:	e221      	b.n	8013f86 <_txm_module_manager_stop+0x47e>
    }
#endif

    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 8013b42:	4b7d      	ldr	r3, [pc, #500]	; (8013d38 <_txm_module_manager_stop+0x230>)
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	2b01      	cmp	r3, #1
 8013b48:	d001      	beq.n	8013b4e <_txm_module_manager_stop+0x46>
    {

        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE);
 8013b4a:	231d      	movs	r3, #29
 8013b4c:	e21b      	b.n	8013f86 <_txm_module_manager_stop+0x47e>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d101      	bne.n	8013b58 <_txm_module_manager_stop+0x50>
    {

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 8013b54:	2303      	movs	r3, #3
 8013b56:	e216      	b.n	8013f86 <_txm_module_manager_stop+0x47e>
    }

    /* Get module manager protection mutex.  */
    _tx_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 8013b58:	f04f 31ff 	mov.w	r1, #4294967295
 8013b5c:	4877      	ldr	r0, [pc, #476]	; (8013d3c <_txm_module_manager_stop+0x234>)
 8013b5e:	f7f4 f909 	bl	8007d74 <_tx_mutex_get>

    /* Determine if the module instance is valid.  */
    if (module_instance -> txm_module_instance_id != TXM_MODULE_ID)
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	4a76      	ldr	r2, [pc, #472]	; (8013d40 <_txm_module_manager_stop+0x238>)
 8013b68:	4293      	cmp	r3, r2
 8013b6a:	d004      	beq.n	8013b76 <_txm_module_manager_stop+0x6e>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8013b6c:	4873      	ldr	r0, [pc, #460]	; (8013d3c <_txm_module_manager_stop+0x234>)
 8013b6e:	f7f4 fbbf 	bl	80082f0 <_tx_mutex_put>

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 8013b72:	2303      	movs	r3, #3
 8013b74:	e207      	b.n	8013f86 <_txm_module_manager_stop+0x47e>
    }

    /* Determine if the module instance is in the loaded state.  */
    if (module_instance -> txm_module_instance_state != TXM_MODULE_STARTED)
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	689b      	ldr	r3, [r3, #8]
 8013b7a:	2b02      	cmp	r3, #2
 8013b7c:	d004      	beq.n	8013b88 <_txm_module_manager_stop+0x80>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8013b7e:	486f      	ldr	r0, [pc, #444]	; (8013d3c <_txm_module_manager_stop+0x234>)
 8013b80:	f7f4 fbb6 	bl	80082f0 <_tx_mutex_put>

        /* Return error if the module is not ready.  */
        return(TX_START_ERROR);
 8013b84:	2310      	movs	r3, #16
 8013b86:	e1fe      	b.n	8013f86 <_txm_module_manager_stop+0x47e>
    }

    /* Set the module state to indicate the module is stopping.  */
    module_instance -> txm_module_instance_state =  TXM_MODULE_STOPPING;
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	2203      	movs	r2, #3
 8013b8c:	609a      	str	r2, [r3, #8]

    /* This thread was previously used as the start thread. So first, make sure it is terminated and deleted before doing anything else.  */
    _tx_thread_terminate(&(module_instance -> txm_module_instance_start_stop_thread));
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7f7 f92f 	bl	800adf8 <_tx_thread_terminate>
    _tx_thread_delete(&(module_instance -> txm_module_instance_start_stop_thread));
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7f6 f9bd 	bl	8009f20 <_tx_thread_delete>

    /* Determine if there is a module stop function.  */
    if (module_instance -> txm_module_instance_stop_thread_entry)
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d046      	beq.n	8013c3c <_txm_module_manager_stop+0x134>
    {

        /* Yes, there is a stop function.  Build a thread for executing the module stop function.  */

        /* Create the module stop thread.  */
        _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	f503 7680 	add.w	r6, r3, #256	; 0x100
                                          "Module Stop Thread",
                                          module_instance -> txm_module_instance_shell_entry_function,
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013bb8:	60bb      	str	r3, [r7, #8]
        _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013bbe:	6079      	str	r1, [r7, #4]
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	; 0x4c4
 8013bc6:	68fa      	ldr	r2, [r7, #12]
 8013bc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8013bca:	68f9      	ldr	r1, [r7, #12]
 8013bcc:	f8d1 14b4 	ldr.w	r1, [r1, #1204]	; 0x4b4
                                          module_instance -> txm_module_instance_stop_thread_entry,
                                          module_instance -> txm_module_instance_application_module_id,
                                          module_instance -> txm_module_instance_start_stop_stack_start_address,
                                          module_instance -> txm_module_instance_start_stop_stack_size,
                                          (UINT) module_instance -> txm_module_instance_start_stop_priority,
 8013bd0:	68f8      	ldr	r0, [r7, #12]
 8013bd2:	f8d0 04b8 	ldr.w	r0, [r0, #1208]	; 0x4b8
                                          (UINT) module_instance -> txm_module_instance_start_stop_priority,
 8013bd6:	68fc      	ldr	r4, [r7, #12]
 8013bd8:	f8d4 44b8 	ldr.w	r4, [r4, #1208]	; 0x4b8
        _txm_module_manager_thread_create(&(module_instance -> txm_module_instance_start_stop_thread),
 8013bdc:	68fd      	ldr	r5, [r7, #12]
 8013bde:	9508      	str	r5, [sp, #32]
 8013be0:	25e8      	movs	r5, #232	; 0xe8
 8013be2:	9507      	str	r5, [sp, #28]
 8013be4:	2501      	movs	r5, #1
 8013be6:	9506      	str	r5, [sp, #24]
 8013be8:	2504      	movs	r5, #4
 8013bea:	9505      	str	r5, [sp, #20]
 8013bec:	9404      	str	r4, [sp, #16]
 8013bee:	9003      	str	r0, [sp, #12]
 8013bf0:	9102      	str	r1, [sp, #8]
 8013bf2:	9201      	str	r2, [sp, #4]
 8013bf4:	9300      	str	r3, [sp, #0]
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	68ba      	ldr	r2, [r7, #8]
 8013bfa:	4952      	ldr	r1, [pc, #328]	; (8013d44 <_txm_module_manager_stop+0x23c>)
 8013bfc:	4630      	mov	r0, r6
 8013bfe:	f000 f9e5 	bl	8013fcc <_txm_module_manager_thread_create>
                                          TX_AUTO_START,
                                          sizeof(TX_THREAD),
                                          module_instance);

        /* Wait for the stop thread to complete.  */
        i =  0;
 8013c02:	2300      	movs	r3, #0
 8013c04:	657b      	str	r3, [r7, #84]	; 0x54
        while ((i < TXM_MODULE_TIMEOUT) && (module_instance -> txm_module_instance_start_stop_thread.tx_thread_state != TX_COMPLETED))
 8013c06:	e005      	b.n	8013c14 <_txm_module_manager_stop+0x10c>
        {

            /* Sleep to let the module stop thread run.  */
            _tx_thread_sleep(1);
 8013c08:	2001      	movs	r0, #1
 8013c0a:	f7f6 fd1d 	bl	800a648 <_tx_thread_sleep>

            /* Increment the counter.  */
            i++;
 8013c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c10:	3301      	adds	r3, #1
 8013c12:	657b      	str	r3, [r7, #84]	; 0x54
        while ((i < TXM_MODULE_TIMEOUT) && (module_instance -> txm_module_instance_start_stop_thread.tx_thread_state != TX_COMPLETED))
 8013c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c16:	2b63      	cmp	r3, #99	; 0x63
 8013c18:	d804      	bhi.n	8013c24 <_txm_module_manager_stop+0x11c>
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8013c20:	2b01      	cmp	r3, #1
 8013c22:	d1f1      	bne.n	8013c08 <_txm_module_manager_stop+0x100>
        }

        /* At this point, we need to terminate and delete the stop thread.  */
        _tx_thread_terminate(&(module_instance -> txm_module_instance_start_stop_thread));
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f7f7 f8e4 	bl	800adf8 <_tx_thread_terminate>
        _tx_thread_delete(&(module_instance -> txm_module_instance_start_stop_thread));
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7f6 f972 	bl	8009f20 <_tx_thread_delete>
    }

    /* Delete the module's callback thread and queue for the callback thread.  */
    _tx_thread_terminate(&(module_instance -> txm_module_instance_callback_request_thread));
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7f7 f8d8 	bl	800adf8 <_tx_thread_terminate>
    _tx_thread_delete(&(module_instance -> txm_module_instance_callback_request_thread));
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f7f6 f966 	bl	8009f20 <_tx_thread_delete>
    _tx_queue_delete(&(module_instance -> txm_module_instance_callback_request_queue));
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7f4 fe1a 	bl	8008894 <_tx_queue_delete>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013c60:	f3ef 8310 	mrs	r3, PRIMASK
 8013c64:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013c66:	b672      	cpsid	i
    return(primask_value);
 8013c68:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts.  */
    TX_DISABLE
 8013c6a:	653b      	str	r3, [r7, #80]	; 0x50

    /* Temporarily disable preemption.  This will keep other threads from creating and deleting threads.  */
    _tx_thread_preempt_disable++;
 8013c6c:	4b36      	ldr	r3, [pc, #216]	; (8013d48 <_txm_module_manager_stop+0x240>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	3301      	adds	r3, #1
 8013c72:	4a35      	ldr	r2, [pc, #212]	; (8013d48 <_txm_module_manager_stop+0x240>)
 8013c74:	6013      	str	r3, [r2, #0]
 8013c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c78:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013c7a:	6a3b      	ldr	r3, [r7, #32]
 8013c7c:	f383 8810 	msr	PRIMASK, r3
}
 8013c80:	bf00      	nop
    /* Call the USBX stop function.  */
    _txm_module_manager_usbx_stop(module_instance);
#endif

    /* Loop to delete any and all threads created by the module.  */
    i = _tx_thread_created_count;
 8013c82:	4b32      	ldr	r3, [pc, #200]	; (8013d4c <_txm_module_manager_stop+0x244>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	657b      	str	r3, [r7, #84]	; 0x54
    thread_ptr =  _tx_thread_created_ptr;
 8013c88:	4b31      	ldr	r3, [pc, #196]	; (8013d50 <_txm_module_manager_stop+0x248>)
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	677b      	str	r3, [r7, #116]	; 0x74
    while (i--)
 8013c8e:	e022      	b.n	8013cd6 <_txm_module_manager_stop+0x1ce>
    {

        /* Pickup the next thread pointer.  */
        next_thread_ptr =  thread_ptr -> tx_thread_created_next;
 8013c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013c96:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine if the thread control block is inside the module.  */
        if ( (((CHAR *) thread_ptr) >= ((CHAR *) module_instance -> txm_module_instance_data_start)) &&
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d30b      	bcc.n	8013cba <_txm_module_manager_stop+0x1b2>
             (((CHAR *) thread_ptr) < ((CHAR *) module_instance -> txm_module_instance_data_end)))
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if ( (((CHAR *) thread_ptr) >= ((CHAR *) module_instance -> txm_module_instance_data_start)) &&
 8013ca6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	d206      	bcs.n	8013cba <_txm_module_manager_stop+0x1b2>
        {

            /* Terminate and delete this thread, since it is part of this module.  */
            _tx_thread_terminate(thread_ptr);
 8013cac:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8013cae:	f7f7 f8a3 	bl	800adf8 <_tx_thread_terminate>
            _tx_thread_delete(thread_ptr);
 8013cb2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8013cb4:	f7f6 f934 	bl	8009f20 <_tx_thread_delete>
 8013cb8:	e00b      	b.n	8013cd2 <_txm_module_manager_stop+0x1ca>
        }

        /* Is this thread part of the module?  */
        else if (thread_ptr -> tx_thread_module_instance_ptr == module_instance)
 8013cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013cc0:	68fa      	ldr	r2, [r7, #12]
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d105      	bne.n	8013cd2 <_txm_module_manager_stop+0x1ca>
        {

            /* Terminate and delete this thread, since it is part of this module.  */
            _tx_thread_terminate(thread_ptr);
 8013cc6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8013cc8:	f7f7 f896 	bl	800adf8 <_tx_thread_terminate>
            _tx_thread_delete(thread_ptr);
 8013ccc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8013cce:	f7f6 f927 	bl	8009f20 <_tx_thread_delete>
        }

        /* Move to next thread.  */
        thread_ptr =  next_thread_ptr;
 8013cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd4:	677b      	str	r3, [r7, #116]	; 0x74
    while (i--)
 8013cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013cd8:	1e5a      	subs	r2, r3, #1
 8013cda:	657a      	str	r2, [r7, #84]	; 0x54
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d1d7      	bne.n	8013c90 <_txm_module_manager_stop+0x188>
    }

    /* Loop to delete any and all timers created by the module.  */
    i = _tx_timer_created_count;
 8013ce0:	4b1c      	ldr	r3, [pc, #112]	; (8013d54 <_txm_module_manager_stop+0x24c>)
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	657b      	str	r3, [r7, #84]	; 0x54
    timer_ptr =  _tx_timer_created_ptr;
 8013ce6:	4b1c      	ldr	r3, [pc, #112]	; (8013d58 <_txm_module_manager_stop+0x250>)
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	673b      	str	r3, [r7, #112]	; 0x70
    while (i--)
 8013cec:	e012      	b.n	8013d14 <_txm_module_manager_stop+0x20c>
    {

        /* Pickup the next timer pointer.  */
        next_timer_ptr =  timer_ptr -> tx_timer_created_next;
 8013cee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cf2:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check if this module created this timer.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) timer_ptr);
 8013cf4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013cf6:	68f8      	ldr	r0, [r7, #12]
 8013cf8:	f000 fd90 	bl	801481c <_txm_module_manager_created_object_check>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (created_by_module == TX_TRUE)
 8013d02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013d06:	2b01      	cmp	r3, #1
 8013d08:	d102      	bne.n	8013d10 <_txm_module_manager_stop+0x208>
        {

            /* Delete this timer, since it is part of this module.  */
            _tx_timer_delete(timer_ptr);
 8013d0a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8013d0c:	f7f7 fbf2 	bl	800b4f4 <_tx_timer_delete>
        }

        /* Move to next timer.  */
        timer_ptr =  next_timer_ptr;
 8013d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d12:	673b      	str	r3, [r7, #112]	; 0x70
    while (i--)
 8013d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013d16:	1e5a      	subs	r2, r3, #1
 8013d18:	657a      	str	r2, [r7, #84]	; 0x54
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d1e7      	bne.n	8013cee <_txm_module_manager_stop+0x1e6>
    }

    /* Loop to delete any and all queues created by the module.  */
    i = _tx_queue_created_count;
 8013d1e:	4b0f      	ldr	r3, [pc, #60]	; (8013d5c <_txm_module_manager_stop+0x254>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	657b      	str	r3, [r7, #84]	; 0x54
    queue_ptr =  _tx_queue_created_ptr;
 8013d24:	4b0e      	ldr	r3, [pc, #56]	; (8013d60 <_txm_module_manager_stop+0x258>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	66fb      	str	r3, [r7, #108]	; 0x6c
    while (i--)
 8013d2a:	e03b      	b.n	8013da4 <_txm_module_manager_stop+0x29c>
 8013d2c:	2400f034 	.word	0x2400f034
 8013d30:	24000020 	.word	0x24000020
 8013d34:	2400f180 	.word	0x2400f180
 8013d38:	2400f728 	.word	0x2400f728
 8013d3c:	2400f6ec 	.word	0x2400f6ec
 8013d40:	4d4f4455 	.word	0x4d4f4455
 8013d44:	08016628 	.word	0x08016628
 8013d48:	2400f0d0 	.word	0x2400f0d0
 8013d4c:	2400f040 	.word	0x2400f040
 8013d50:	2400f03c 	.word	0x2400f03c
 8013d54:	2400f178 	.word	0x2400f178
 8013d58:	2400f174 	.word	0x2400f174
 8013d5c:	2400f008 	.word	0x2400f008
 8013d60:	2400f004 	.word	0x2400f004
    {

        /* Pickup the next queue pointer.  */
        next_queue_ptr =   queue_ptr -> tx_queue_created_next;
 8013d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d68:	633b      	str	r3, [r7, #48]	; 0x30

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if the queue callback function is associated with this module.  */
        if ((queue_ptr -> tx_queue_module_instance == module_instance) &&
 8013d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d6e:	68fa      	ldr	r2, [r7, #12]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d107      	bne.n	8013d84 <_txm_module_manager_stop+0x27c>
            (queue_ptr -> tx_queue_send_notify == _txm_module_manager_queue_notify_trampoline))
 8013d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        if ((queue_ptr -> tx_queue_module_instance == module_instance) &&
 8013d78:	4a85      	ldr	r2, [pc, #532]	; (8013f90 <_txm_module_manager_stop+0x488>)
 8013d7a:	4293      	cmp	r3, r2
 8013d7c:	d102      	bne.n	8013d84 <_txm_module_manager_stop+0x27c>
        {

            /* Clear the callback notification for this queue since it is no longer valid.  */
            queue_ptr -> tx_queue_send_notify =  TX_NULL;
 8013d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013d80:	2200      	movs	r2, #0
 8013d82:	639a      	str	r2, [r3, #56]	; 0x38
        }
#endif

        /* Check if this module created this queue.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) queue_ptr);
 8013d84:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8013d86:	68f8      	ldr	r0, [r7, #12]
 8013d88:	f000 fd48 	bl	801481c <_txm_module_manager_created_object_check>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (created_by_module == TX_TRUE)
 8013d92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013d96:	2b01      	cmp	r3, #1
 8013d98:	d102      	bne.n	8013da0 <_txm_module_manager_stop+0x298>
        {

            /* Delete this queue, since it is part of this module.  */
            _tx_queue_delete(queue_ptr);
 8013d9a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013d9c:	f7f4 fd7a 	bl	8008894 <_tx_queue_delete>
        }

        /* Move to next queue.  */
        queue_ptr =  next_queue_ptr;
 8013da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da2:	66fb      	str	r3, [r7, #108]	; 0x6c
    while (i--)
 8013da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013da6:	1e5a      	subs	r2, r3, #1
 8013da8:	657a      	str	r2, [r7, #84]	; 0x54
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d1da      	bne.n	8013d64 <_txm_module_manager_stop+0x25c>
    }

    /* Loop to delete any and all event flag groups created by the module.  */
    i = _tx_event_flags_created_count;
 8013dae:	4b79      	ldr	r3, [pc, #484]	; (8013f94 <_txm_module_manager_stop+0x48c>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	657b      	str	r3, [r7, #84]	; 0x54
    events_ptr =  _tx_event_flags_created_ptr;
 8013db4:	4b78      	ldr	r3, [pc, #480]	; (8013f98 <_txm_module_manager_stop+0x490>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	66bb      	str	r3, [r7, #104]	; 0x68
    while (i--)
 8013dba:	e01f      	b.n	8013dfc <_txm_module_manager_stop+0x2f4>
    {

        /* Pickup the next event flags group pointer.  */
        next_events_ptr =   events_ptr -> tx_event_flags_group_created_next;
 8013dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013dbe:	699b      	ldr	r3, [r3, #24]
 8013dc0:	637b      	str	r3, [r7, #52]	; 0x34

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if the event flags callback function is associated with this module.  */
        if ((events_ptr -> tx_event_flags_group_module_instance == module_instance) &&
 8013dc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dc6:	68fa      	ldr	r2, [r7, #12]
 8013dc8:	429a      	cmp	r2, r3
 8013dca:	d107      	bne.n	8013ddc <_txm_module_manager_stop+0x2d4>
            (events_ptr -> tx_event_flags_group_set_notify == _txm_module_manager_event_flags_notify_trampoline))
 8013dcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((events_ptr -> tx_event_flags_group_module_instance == module_instance) &&
 8013dd0:	4a72      	ldr	r2, [pc, #456]	; (8013f9c <_txm_module_manager_stop+0x494>)
 8013dd2:	4293      	cmp	r3, r2
 8013dd4:	d102      	bne.n	8013ddc <_txm_module_manager_stop+0x2d4>
        {

            /* Clear the callback notification for this event flag group since it is no longer valid.  */
            events_ptr -> tx_event_flags_group_set_notify =  TX_NULL;
 8013dd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013dd8:	2200      	movs	r2, #0
 8013dda:	625a      	str	r2, [r3, #36]	; 0x24
        }
#endif

        /* Check if this module created this event flags.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) events_ptr);
 8013ddc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013dde:	68f8      	ldr	r0, [r7, #12]
 8013de0:	f000 fd1c 	bl	801481c <_txm_module_manager_created_object_check>
 8013de4:	4603      	mov	r3, r0
 8013de6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (created_by_module == TX_TRUE)
 8013dea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013dee:	2b01      	cmp	r3, #1
 8013df0:	d102      	bne.n	8013df8 <_txm_module_manager_stop+0x2f0>
        {

            /* Delete this event flags group, since it is part of this module.  */
            _tx_event_flags_delete(events_ptr);
 8013df2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8013df4:	f7f3 f9dc 	bl	80071b0 <_tx_event_flags_delete>
        }

        /* Move to next event flags group.  */
        events_ptr =  next_events_ptr;
 8013df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dfa:	66bb      	str	r3, [r7, #104]	; 0x68
    while (i--)
 8013dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013dfe:	1e5a      	subs	r2, r3, #1
 8013e00:	657a      	str	r2, [r7, #84]	; 0x54
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d1da      	bne.n	8013dbc <_txm_module_manager_stop+0x2b4>
    }

    /* Loop to delete any and all semaphores created by the module.  */
    i = _tx_semaphore_created_count;
 8013e06:	4b66      	ldr	r3, [pc, #408]	; (8013fa0 <_txm_module_manager_stop+0x498>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	657b      	str	r3, [r7, #84]	; 0x54
    semaphore_ptr =  _tx_semaphore_created_ptr;
 8013e0c:	4b65      	ldr	r3, [pc, #404]	; (8013fa4 <_txm_module_manager_stop+0x49c>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	667b      	str	r3, [r7, #100]	; 0x64
    while (i--)
 8013e12:	e01f      	b.n	8013e54 <_txm_module_manager_stop+0x34c>
    {

        /* Pickup the next semaphore pointer.  */
        next_semaphore_ptr =   semaphore_ptr -> tx_semaphore_created_next;
 8013e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013e16:	695b      	ldr	r3, [r3, #20]
 8013e18:	63bb      	str	r3, [r7, #56]	; 0x38

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if the semaphore callback function is associated with this module.  */
        if ((semaphore_ptr -> tx_semaphore_module_instance == module_instance) &&
 8013e1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013e1c:	6a1b      	ldr	r3, [r3, #32]
 8013e1e:	68fa      	ldr	r2, [r7, #12]
 8013e20:	429a      	cmp	r2, r3
 8013e22:	d107      	bne.n	8013e34 <_txm_module_manager_stop+0x32c>
            (semaphore_ptr -> tx_semaphore_put_notify == _txm_module_manager_semaphore_notify_trampoline))
 8013e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013e26:	69db      	ldr	r3, [r3, #28]
        if ((semaphore_ptr -> tx_semaphore_module_instance == module_instance) &&
 8013e28:	4a5f      	ldr	r2, [pc, #380]	; (8013fa8 <_txm_module_manager_stop+0x4a0>)
 8013e2a:	4293      	cmp	r3, r2
 8013e2c:	d102      	bne.n	8013e34 <_txm_module_manager_stop+0x32c>
        {

            /* Clear the callback notification for this semaphore since it is no longer valid.  */
            semaphore_ptr -> tx_semaphore_put_notify =  TX_NULL;
 8013e2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013e30:	2200      	movs	r2, #0
 8013e32:	61da      	str	r2, [r3, #28]
        }
#endif

        /* Check if this module created this semaphore.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) semaphore_ptr);
 8013e34:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013e36:	68f8      	ldr	r0, [r7, #12]
 8013e38:	f000 fcf0 	bl	801481c <_txm_module_manager_created_object_check>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (created_by_module == TX_TRUE)
 8013e42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013e46:	2b01      	cmp	r3, #1
 8013e48:	d102      	bne.n	8013e50 <_txm_module_manager_stop+0x348>
        {

            /* Delete this semaphore, since it is part of this module.  */
            _tx_semaphore_delete(semaphore_ptr);
 8013e4a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8013e4c:	f7f5 fcf6 	bl	800983c <_tx_semaphore_delete>
        }

        /* Move to next semaphore.  */
        semaphore_ptr =  next_semaphore_ptr;
 8013e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e52:	667b      	str	r3, [r7, #100]	; 0x64
    while (i--)
 8013e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e56:	1e5a      	subs	r2, r3, #1
 8013e58:	657a      	str	r2, [r7, #84]	; 0x54
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d1da      	bne.n	8013e14 <_txm_module_manager_stop+0x30c>
    }

    /* Loop to delete any and all mutexes created by the module.  */
    i = _tx_mutex_created_count;
 8013e5e:	4b53      	ldr	r3, [pc, #332]	; (8013fac <_txm_module_manager_stop+0x4a4>)
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	657b      	str	r3, [r7, #84]	; 0x54
    mutex_ptr =  _tx_mutex_created_ptr;
 8013e64:	4b52      	ldr	r3, [pc, #328]	; (8013fb0 <_txm_module_manager_stop+0x4a8>)
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	663b      	str	r3, [r7, #96]	; 0x60
    while (i--)
 8013e6a:	e012      	b.n	8013e92 <_txm_module_manager_stop+0x38a>
    {

        /* Pickup the next mutex pointer.  */
        next_mutex_ptr =   mutex_ptr -> tx_mutex_created_next;
 8013e6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013e6e:	6a1b      	ldr	r3, [r3, #32]
 8013e70:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Check if this module created this mutex.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) mutex_ptr);
 8013e72:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8013e74:	68f8      	ldr	r0, [r7, #12]
 8013e76:	f000 fcd1 	bl	801481c <_txm_module_manager_created_object_check>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (created_by_module == TX_TRUE)
 8013e80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013e84:	2b01      	cmp	r3, #1
 8013e86:	d102      	bne.n	8013e8e <_txm_module_manager_stop+0x386>
        {

            /* Delete this mutex, since it is part of this module.  */
            _tx_mutex_delete(mutex_ptr);
 8013e88:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8013e8a:	f7f3 fed1 	bl	8007c30 <_tx_mutex_delete>
        }

        /* Move to next mutex.  */
        mutex_ptr =  next_mutex_ptr;
 8013e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e90:	663b      	str	r3, [r7, #96]	; 0x60
    while (i--)
 8013e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e94:	1e5a      	subs	r2, r3, #1
 8013e96:	657a      	str	r2, [r7, #84]	; 0x54
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d1e7      	bne.n	8013e6c <_txm_module_manager_stop+0x364>
    }

    /* Loop to delete any and all block pools created by the module.  */
    i = _tx_block_pool_created_count;
 8013e9c:	4b45      	ldr	r3, [pc, #276]	; (8013fb4 <_txm_module_manager_stop+0x4ac>)
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	657b      	str	r3, [r7, #84]	; 0x54
    block_pool_ptr =  _tx_block_pool_created_ptr;
 8013ea2:	4b45      	ldr	r3, [pc, #276]	; (8013fb8 <_txm_module_manager_stop+0x4b0>)
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (i--)
 8013ea8:	e012      	b.n	8013ed0 <_txm_module_manager_stop+0x3c8>
    {

        /* Pickup the next block pool pointer.  */
        next_block_pool_ptr =   block_pool_ptr -> tx_block_pool_created_next;
 8013eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013eae:	643b      	str	r3, [r7, #64]	; 0x40

        /* Check if this module created this block pool.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) block_pool_ptr);
 8013eb0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8013eb2:	68f8      	ldr	r0, [r7, #12]
 8013eb4:	f000 fcb2 	bl	801481c <_txm_module_manager_created_object_check>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (created_by_module == TX_TRUE)
 8013ebe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013ec2:	2b01      	cmp	r3, #1
 8013ec4:	d102      	bne.n	8013ecc <_txm_module_manager_stop+0x3c4>
        {

            /* Delete this block pool, since it is part of this module.  */
            _tx_block_pool_delete(block_pool_ptr);
 8013ec6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013ec8:	f7f2 f946 	bl	8006158 <_tx_block_pool_delete>
        }

        /* Move to next block pool.  */
        block_pool_ptr =  next_block_pool_ptr;
 8013ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ece:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (i--)
 8013ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ed2:	1e5a      	subs	r2, r3, #1
 8013ed4:	657a      	str	r2, [r7, #84]	; 0x54
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d1e7      	bne.n	8013eaa <_txm_module_manager_stop+0x3a2>
    }

    /* Loop to delete any and all byte pools created by the module.  */
    i = _tx_byte_pool_created_count;
 8013eda:	4b38      	ldr	r3, [pc, #224]	; (8013fbc <_txm_module_manager_stop+0x4b4>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	657b      	str	r3, [r7, #84]	; 0x54
    byte_pool_ptr =  _tx_byte_pool_created_ptr;
 8013ee0:	4b37      	ldr	r3, [pc, #220]	; (8013fc0 <_txm_module_manager_stop+0x4b8>)
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	65bb      	str	r3, [r7, #88]	; 0x58
    while (i--)
 8013ee6:	e012      	b.n	8013f0e <_txm_module_manager_stop+0x406>
    {

        /* Pickup the next byte pool pointer.  */
        next_byte_pool_ptr =   byte_pool_ptr -> tx_byte_pool_created_next;
 8013ee8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013eec:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Check if this module created this byte pool.  */
        created_by_module =  _txm_module_manager_created_object_check(module_instance, (VOID *) byte_pool_ptr);
 8013eee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013ef0:	68f8      	ldr	r0, [r7, #12]
 8013ef2:	f000 fc93 	bl	801481c <_txm_module_manager_created_object_check>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if (created_by_module == TX_TRUE)
 8013efc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013f00:	2b01      	cmp	r3, #1
 8013f02:	d102      	bne.n	8013f0a <_txm_module_manager_stop+0x402>
        {

            /* Delete this byte pool, since it is part of this module.  */
            _tx_byte_pool_delete(byte_pool_ptr);
 8013f04:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8013f06:	f7f2 fce1 	bl	80068cc <_tx_byte_pool_delete>
        }

        /* Move to next byte pool.  */
        byte_pool_ptr =  next_byte_pool_ptr;
 8013f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f0c:	65bb      	str	r3, [r7, #88]	; 0x58
    while (i--)
 8013f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f10:	1e5a      	subs	r2, r3, #1
 8013f12:	657a      	str	r2, [r7, #84]	; 0x54
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d1e7      	bne.n	8013ee8 <_txm_module_manager_stop+0x3e0>
        }
    }
#endif

    /* Delete the allocated objects for this module.  */
    while (module_instance -> txm_module_instance_object_list_count != 0)
 8013f18:	e012      	b.n	8013f40 <_txm_module_manager_stop+0x438>
    {
        /* Pickup the current object pointer.  */
        object_ptr =  module_instance -> txm_module_instance_object_list_head;
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	f8d3 34cc 	ldr.w	r3, [r3, #1228]	; 0x4cc
 8013f20:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Move the head pointer forward.  */
        module_instance -> txm_module_instance_object_list_head =  object_ptr -> txm_module_allocated_object_next;
 8013f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f24:	685a      	ldr	r2, [r3, #4]
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc

        /* Release the object.  */
        _tx_byte_release((VOID *) object_ptr);
 8013f2c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013f2e:	f7f2 ff53 	bl	8006dd8 <_tx_byte_release>

        /* Decrement count.  */
        module_instance -> txm_module_instance_object_list_count--;
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8013f38:	1e5a      	subs	r2, r3, #1
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
    while (module_instance -> txm_module_instance_object_list_count != 0)
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	; 0x4d0
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d1e7      	bne.n	8013f1a <_txm_module_manager_stop+0x412>
    }

    /* Set the allocated list head pointer to NULL.  */
    module_instance -> txm_module_instance_object_list_head =  TX_NULL;
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013f52:	f3ef 8310 	mrs	r3, PRIMASK
 8013f56:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013f58:	b672      	cpsid	i
    return(primask_value);
 8013f5a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
 8013f5c:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable preemption again.  */
    _tx_thread_preempt_disable--;
 8013f5e:	4b19      	ldr	r3, [pc, #100]	; (8013fc4 <_txm_module_manager_stop+0x4bc>)
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	3b01      	subs	r3, #1
 8013f64:	4a17      	ldr	r2, [pc, #92]	; (8013fc4 <_txm_module_manager_stop+0x4bc>)
 8013f66:	6013      	str	r3, [r2, #0]

    /* Set the module state to indicate the module is stopped.  */
    module_instance -> txm_module_instance_state =  TXM_MODULE_STOPPED;
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	2204      	movs	r2, #4
 8013f6c:	609a      	str	r2, [r3, #8]
 8013f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f70:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013f72:	69bb      	ldr	r3, [r7, #24]
 8013f74:	f383 8810 	msr	PRIMASK, r3
}
 8013f78:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    _tx_mutex_put(&_txm_module_manager_mutex);
 8013f7a:	4813      	ldr	r0, [pc, #76]	; (8013fc8 <_txm_module_manager_stop+0x4c0>)
 8013f7c:	f7f4 f9b8 	bl	80082f0 <_tx_mutex_put>

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8013f80:	f7f6 fc62 	bl	800a848 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(TX_SUCCESS);
 8013f84:	2300      	movs	r3, #0
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	377c      	adds	r7, #124	; 0x7c
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f8e:	bf00      	nop
 8013f90:	080137c5 	.word	0x080137c5
 8013f94:	2400f010 	.word	0x2400f010
 8013f98:	2400f00c 	.word	0x2400f00c
 8013f9c:	0800dbcd 	.word	0x0800dbcd
 8013fa0:	2400f000 	.word	0x2400f000
 8013fa4:	2400effc 	.word	0x2400effc
 8013fa8:	08013875 	.word	0x08013875
 8013fac:	2400f018 	.word	0x2400f018
 8013fb0:	2400f014 	.word	0x2400f014
 8013fb4:	2400f020 	.word	0x2400f020
 8013fb8:	2400f01c 	.word	0x2400f01c
 8013fbc:	2400f028 	.word	0x2400f028
 8013fc0:	2400f024 	.word	0x2400f024
 8013fc4:	2400f0d0 	.word	0x2400f0d0
 8013fc8:	2400f6ec 	.word	0x2400f6ec

08013fcc <_txm_module_manager_thread_create>:
                            VOID (*shell_function)(TX_THREAD *, TXM_MODULE_INSTANCE *),
                            VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start,
                            UINT thread_control_block_size, TXM_MODULE_INSTANCE *module_instance)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b09c      	sub	sp, #112	; 0x70
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	60f8      	str	r0, [r7, #12]
 8013fd4:	60b9      	str	r1, [r7, #8]
 8013fd6:	607a      	str	r2, [r7, #4]
 8013fd8:	603b      	str	r3, [r7, #0]
UINT                    core_index;
#endif
TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8013fda:	2300      	movs	r3, #0
 8013fdc:	667b      	str	r3, [r7, #100]	; 0x64
TXM_MODULE_THREAD_ENTRY_INFO *thread_entry_info;
VOID                    *stack_end;
ULONG                   i;

    /* First, check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d101      	bne.n	8013fe8 <_txm_module_manager_thread_create+0x1c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        return(TX_THREAD_ERROR);
 8013fe4:	230e      	movs	r3, #14
 8013fe6:	e226      	b.n	8014436 <_txm_module_manager_thread_create+0x46a>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8013fe8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013fec:	2be8      	cmp	r3, #232	; 0xe8
 8013fee:	d001      	beq.n	8013ff4 <_txm_module_manager_thread_create+0x28>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        return(TX_THREAD_ERROR);
 8013ff0:	230e      	movs	r3, #14
 8013ff2:	e220      	b.n	8014436 <_txm_module_manager_thread_create+0x46a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8013ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013ffa:	b672      	cpsid	i
    return(primask_value);
 8013ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8013ffe:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8014000:	4b5b      	ldr	r3, [pc, #364]	; (8014170 <_txm_module_manager_thread_create+0x1a4>)
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	3301      	adds	r3, #1
 8014006:	4a5a      	ldr	r2, [pc, #360]	; (8014170 <_txm_module_manager_thread_create+0x1a4>)
 8014008:	6013      	str	r3, [r2, #0]
 801400a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801400c:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801400e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014010:	f383 8810 	msr	PRIMASK, r3
}
 8014014:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Next see if it is already in the created list.  */
    next_thread =  _tx_thread_created_ptr;
 8014016:	4b57      	ldr	r3, [pc, #348]	; (8014174 <_txm_module_manager_thread_create+0x1a8>)
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	66fb      	str	r3, [r7, #108]	; 0x6c
    stack_end   =  (VOID *) (((UCHAR *) ((VOID *) stack_start)) + (stack_size - 1));
 801401c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014020:	3b01      	subs	r3, #1
 8014022:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014024:	4413      	add	r3, r2
 8014026:	65bb      	str	r3, [r7, #88]	; 0x58
    for (i = 0; i < _tx_thread_created_count; i++)
 8014028:	2300      	movs	r3, #0
 801402a:	663b      	str	r3, [r7, #96]	; 0x60
 801402c:	e017      	b.n	801405e <_txm_module_manager_thread_create+0x92>
    {

        /* Determine if this thread matches the thread in the list.  */
        if (thread_ptr == next_thread)
 801402e:	68fa      	ldr	r2, [r7, #12]
 8014030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014032:	429a      	cmp	r2, r3
 8014034:	d019      	beq.n	801406a <_txm_module_manager_thread_create+0x9e>

            break;
        }

        /* Check the stack pointer to see if it overlaps with this thread's stack.  */
        if ((((UCHAR *) ((VOID *) stack_start)) <= ((UCHAR *) ((VOID *) next_thread -> tx_thread_stack_end))) &&
 8014036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014038:	691b      	ldr	r3, [r3, #16]
 801403a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801403c:	429a      	cmp	r2, r3
 801403e:	d807      	bhi.n	8014050 <_txm_module_manager_thread_create+0x84>
            (((UCHAR *) ((VOID *) stack_end)) >= ((UCHAR *) ((VOID *) next_thread -> tx_thread_stack_start))))
 8014040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014042:	68db      	ldr	r3, [r3, #12]
        if ((((UCHAR *) ((VOID *) stack_start)) <= ((UCHAR *) ((VOID *) next_thread -> tx_thread_stack_end))) &&
 8014044:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014046:	429a      	cmp	r2, r3
 8014048:	d302      	bcc.n	8014050 <_txm_module_manager_thread_create+0x84>
        {
            /* Stacks overlap, clear the stack pointer to force a stack error below.  */
            stack_start =  TX_NULL;
 801404a:	2300      	movs	r3, #0
 801404c:	67fb      	str	r3, [r7, #124]	; 0x7c
            break;
 801404e:	e00d      	b.n	801406c <_txm_module_manager_thread_create+0xa0>
        }

        /* Move to the next thread.  */
        next_thread =  next_thread -> tx_thread_created_next;
 8014050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014056:	66fb      	str	r3, [r7, #108]	; 0x6c
    for (i = 0; i < _tx_thread_created_count; i++)
 8014058:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801405a:	3301      	adds	r3, #1
 801405c:	663b      	str	r3, [r7, #96]	; 0x60
 801405e:	4b46      	ldr	r3, [pc, #280]	; (8014178 <_txm_module_manager_thread_create+0x1ac>)
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014064:	429a      	cmp	r2, r3
 8014066:	d3e2      	bcc.n	801402e <_txm_module_manager_thread_create+0x62>
 8014068:	e000      	b.n	801406c <_txm_module_manager_thread_create+0xa0>
            break;
 801406a:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801406c:	f3ef 8310 	mrs	r3, PRIMASK
 8014070:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 8014072:	b672      	cpsid	i
    return(primask_value);
 8014074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }

    /* Disable interrupts.  */
    TX_DISABLE
 8014076:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Decrement the preempt disable flag.  */
    _tx_thread_preempt_disable--;
 8014078:	4b3d      	ldr	r3, [pc, #244]	; (8014170 <_txm_module_manager_thread_create+0x1a4>)
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	3b01      	subs	r3, #1
 801407e:	4a3c      	ldr	r2, [pc, #240]	; (8014170 <_txm_module_manager_thread_create+0x1a4>)
 8014080:	6013      	str	r3, [r2, #0]
 8014082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014084:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014088:	f383 8810 	msr	PRIMASK, r3
}
 801408c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 801408e:	f7f6 fbdb 	bl	800a848 <_tx_thread_system_preempt_check>

    /* At this point, check to see if there is a duplicate thread.  */
    if (thread_ptr == next_thread)
 8014092:	68fa      	ldr	r2, [r7, #12]
 8014094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014096:	429a      	cmp	r2, r3
 8014098:	d101      	bne.n	801409e <_txm_module_manager_thread_create+0xd2>
    {

        /* Thread is already created, return appropriate error code.  */
        return(TX_THREAD_ERROR);
 801409a:	230e      	movs	r3, #14
 801409c:	e1cb      	b.n	8014436 <_txm_module_manager_thread_create+0x46a>
    }

    /* Check for invalid starting address of stack.  */
    if (stack_start == TX_NULL)
 801409e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d101      	bne.n	80140a8 <_txm_module_manager_thread_create+0xdc>
    {

        /* Invalid stack or entry point, return appropriate error code.  */
        return(TX_PTR_ERROR);
 80140a4:	2303      	movs	r3, #3
 80140a6:	e1c6      	b.n	8014436 <_txm_module_manager_thread_create+0x46a>
    }

    /* Check for invalid thread entry point.  */
    if (entry_function == TX_NULL)
 80140a8:	683b      	ldr	r3, [r7, #0]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d101      	bne.n	80140b2 <_txm_module_manager_thread_create+0xe6>
    {

        /* Invalid stack or entry point, return appropriate error code.  */
        return(TX_PTR_ERROR);
 80140ae:	2303      	movs	r3, #3
 80140b0:	e1c1      	b.n	8014436 <_txm_module_manager_thread_create+0x46a>
    }

    /* Check the stack size.  */
    if (stack_size < TX_MINIMUM_STACK)
 80140b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80140b6:	2bc7      	cmp	r3, #199	; 0xc7
 80140b8:	d801      	bhi.n	80140be <_txm_module_manager_thread_create+0xf2>
    {

        /* Stack is not big enough, return appropriate error code.  */
        return(TX_SIZE_ERROR);
 80140ba:	2305      	movs	r3, #5
 80140bc:	e1bb      	b.n	8014436 <_txm_module_manager_thread_create+0x46a>
    }

    /* Check the priority specified.  */
    if (priority >= TX_MAX_PRIORITIES)
 80140be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80140c2:	2b1f      	cmp	r3, #31
 80140c4:	d901      	bls.n	80140ca <_txm_module_manager_thread_create+0xfe>
    {

        /* Invalid priority selected, return appropriate error code.  */
        return(TX_PRIORITY_ERROR);
 80140c6:	230f      	movs	r3, #15
 80140c8:	e1b5      	b.n	8014436 <_txm_module_manager_thread_create+0x46a>
    }

    /* Check preemption threshold. */
    if (preempt_threshold > priority)
 80140ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80140ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d901      	bls.n	80140da <_txm_module_manager_thread_create+0x10e>
    {

        /* Invalid preempt threshold, return appropriate error code.  */
        return(TX_THRESH_ERROR);
 80140d6:	2318      	movs	r3, #24
 80140d8:	e1ad      	b.n	8014436 <_txm_module_manager_thread_create+0x46a>
    }

    /* Check the start selection.  */
    if (auto_start > TX_AUTO_START)
 80140da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80140de:	2b01      	cmp	r3, #1
 80140e0:	d901      	bls.n	80140e6 <_txm_module_manager_thread_create+0x11a>
    {

        /* Invalid auto start selection, return appropriate error code.  */
        return(TX_START_ERROR);
 80140e2:	2310      	movs	r3, #16
 80140e4:	e1a7      	b.n	8014436 <_txm_module_manager_thread_create+0x46a>
#ifndef TX_TIMER_PROCESS_IN_ISR
    {
        TX_THREAD *current_thread;

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80140e6:	4b25      	ldr	r3, [pc, #148]	; (801417c <_txm_module_manager_thread_create+0x1b0>)
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	657b      	str	r3, [r7, #84]	; 0x54

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (current_thread == &_tx_timer_thread)
 80140ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80140ee:	4a24      	ldr	r2, [pc, #144]	; (8014180 <_txm_module_manager_thread_create+0x1b4>)
 80140f0:	4293      	cmp	r3, r2
 80140f2:	d101      	bne.n	80140f8 <_txm_module_manager_thread_create+0x12c>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            return(TX_CALLER_ERROR);
 80140f4:	2313      	movs	r3, #19
 80140f6:	e19e      	b.n	8014436 <_txm_module_manager_thread_create+0x46a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80140f8:	f3ef 8305 	mrs	r3, IPSR
 80140fc:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 80140fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
        }
    }
#endif

    /* Check for interrupt call.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != 0)
 8014100:	4b20      	ldr	r3, [pc, #128]	; (8014184 <_txm_module_manager_thread_create+0x1b8>)
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	4313      	orrs	r3, r2
 8014106:	2b00      	cmp	r3, #0
 8014108:	d00b      	beq.n	8014122 <_txm_module_manager_thread_create+0x156>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801410a:	f3ef 8305 	mrs	r3, IPSR
 801410e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8014110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    {

        /* Now, make sure the call is from an interrupt and not initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014112:	4b1c      	ldr	r3, [pc, #112]	; (8014184 <_txm_module_manager_thread_create+0x1b8>)
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	4313      	orrs	r3, r2
 8014118:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801411c:	d201      	bcs.n	8014122 <_txm_module_manager_thread_create+0x156>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            return(TX_CALLER_ERROR);
 801411e:	2313      	movs	r3, #19
 8014120:	e189      	b.n	8014436 <_txm_module_manager_thread_create+0x46a>
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8014122:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014126:	21ef      	movs	r1, #239	; 0xef
 8014128:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801412a:	f001 f89f 	bl	801526c <memset>
    stack_start =  TX_ALIGN_TYPE_TO_POINTER_CONVERT(updated_stack_start);
#endif

    /* Allocate the thread entry information at the top of thread's stack - Leaving one
       ULONG worth of 0xEF pattern between the actual stack and the entry info structure.  */
    stack_size =  stack_size - (sizeof(TXM_MODULE_THREAD_ENTRY_INFO) + (3*sizeof(ULONG)));
 801412e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014132:	3b3c      	subs	r3, #60	; 0x3c
 8014134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, sizeof(TX_THREAD));
 8014138:	22e8      	movs	r2, #232	; 0xe8
 801413a:	2100      	movs	r1, #0
 801413c:	68f8      	ldr	r0, [r7, #12]
 801413e:	f001 f895 	bl	801526c <memset>

#if TXM_MODULE_MEMORY_PROTECTION
    /* If this is a memory protected module, allocate a kernel stack.  */
    if((module_instance -> txm_module_instance_property_flags) & TXM_MODULE_MEMORY_PROTECTION)
 8014142:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014146:	68db      	ldr	r3, [r3, #12]
 8014148:	f003 0302 	and.w	r3, r3, #2
 801414c:	2b00      	cmp	r3, #0
 801414e:	d034      	beq.n	80141ba <_txm_module_manager_thread_create+0x1ee>
    {
        ULONG status;

        /* Allocate kernel stack space. */
        status = _txm_module_manager_object_allocate((VOID **) &(thread_ptr -> tx_thread_module_kernel_stack_start), TXM_MODULE_KERNEL_STACK_SIZE, module_instance);
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	33a4      	adds	r3, #164	; 0xa4
 8014154:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8014158:	f44f 7140 	mov.w	r1, #768	; 0x300
 801415c:	4618      	mov	r0, r3
 801415e:	f7ff f84b 	bl	80131f8 <_txm_module_manager_object_allocate>
 8014162:	6538      	str	r0, [r7, #80]	; 0x50
        if(status)
 8014164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014166:	2b00      	cmp	r3, #0
 8014168:	d00e      	beq.n	8014188 <_txm_module_manager_thread_create+0x1bc>
        {
            return(status);
 801416a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801416c:	e163      	b.n	8014436 <_txm_module_manager_thread_create+0x46a>
 801416e:	bf00      	nop
 8014170:	2400f0d0 	.word	0x2400f0d0
 8014174:	2400f03c 	.word	0x2400f03c
 8014178:	2400f040 	.word	0x2400f040
 801417c:	2400f034 	.word	0x2400f034
 8014180:	2400f180 	.word	0x2400f180
 8014184:	24000020 	.word	0x24000020

#ifndef TX_DISABLE_STACK_FILLING
        /* Set the thread stack to a pattern prior to creating the initial
           stack frame.  This pattern is used by the stack checking routines
           to see how much has been used.  */
        TX_MEMSET(thread_ptr -> tx_thread_module_kernel_stack_start, ((UCHAR) TX_STACK_FILL), TXM_MODULE_KERNEL_STACK_SIZE);
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801418e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8014192:	21ef      	movs	r1, #239	; 0xef
 8014194:	4618      	mov	r0, r3
 8014196:	f001 f869 	bl	801526c <memset>
#endif

        /* Align kernel stack pointer.  */
        thread_ptr -> tx_thread_module_kernel_stack_end = (VOID *) (((ALIGN_TYPE)(thread_ptr -> tx_thread_module_kernel_stack_start) + TXM_MODULE_KERNEL_STACK_SIZE) & ~0x07);
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80141a0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80141a4:	f023 0307 	bic.w	r3, r3, #7
 80141a8:	461a      	mov	r2, r3
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

        /* Set kernel stack size.  */
        thread_ptr -> tx_thread_module_kernel_stack_size = TXM_MODULE_KERNEL_STACK_SIZE;
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80141b6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }

    /* Place the stack parameters into the thread's control block.  */
    thread_ptr -> tx_thread_module_stack_start =  stack_start;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80141be:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    thread_ptr -> tx_thread_module_stack_size =   stack_size;
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80141c8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
#endif

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =                name_ptr;
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	68ba      	ldr	r2, [r7, #8]
 80141d0:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =               entry_function;
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	683a      	ldr	r2, [r7, #0]
 80141d6:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =     entry_input;
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80141dc:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =         stack_start;
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80141e2:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =          stack_size;
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80141ea:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =            priority;
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80141f2:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =       priority;
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80141fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    thread_ptr -> tx_thread_time_slice =          time_slice;
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8014204:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =      time_slice;
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801420c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =    ((UINT) TX_MAX_PRIORITIES);
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	2220      	movs	r2, #32
 8014212:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    thread_ptr -> tx_thread_smp_core_mapped =  0;
#endif
#endif

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8014216:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014218:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 801421a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801421e:	3b01      	subs	r3, #1
 8014220:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014222:	4413      	add	r3, r2
 8014224:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801422a:	611a      	str	r2, [r3, #16]
#if TXM_MODULE_MEMORY_PROTECTION
    thread_ptr -> tx_thread_module_stack_end =  thread_ptr -> tx_thread_stack_end;
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	691a      	ldr	r2, [r3, #16]
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* TXM_MODULE_MEMORY_PROTECTION */

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801423c:	63da      	str	r2, [r3, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8014244:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	2203      	movs	r2, #3
 801424c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	4a7b      	ldr	r2, [pc, #492]	; (8014440 <_txm_module_manager_thread_create+0x474>)
 8014252:	655a      	str	r2, [r3, #84]	; 0x54
 8014254:	68fa      	ldr	r2, [r7, #12]
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Setup pointer to the thread entry information structure, which will live at the top of each
       module thread's stack. This will allow the module thread entry function to avoid direct
       access to the actual thread control block.  */
    thread_entry_info =  (TXM_MODULE_THREAD_ENTRY_INFO *) (((UCHAR *) thread_ptr -> tx_thread_stack_end) + (2*sizeof(ULONG)) + 1);
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	691b      	ldr	r3, [r3, #16]
 801425e:	3309      	adds	r3, #9
 8014260:	64bb      	str	r3, [r7, #72]	; 0x48
    thread_entry_info =  (TXM_MODULE_THREAD_ENTRY_INFO *) (((ALIGN_TYPE)(thread_entry_info)) & (~0x3));
 8014262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014264:	f023 0303 	bic.w	r3, r3, #3
 8014268:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Build the thread entry information structure.  */
    thread_entry_info -> txm_module_thread_entry_info_thread =                   thread_ptr;
 801426a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801426c:	68fa      	ldr	r2, [r7, #12]
 801426e:	601a      	str	r2, [r3, #0]
    thread_entry_info -> txm_module_thread_entry_info_module =                   module_instance;
 8014270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014272:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8014276:	605a      	str	r2, [r3, #4]
    thread_entry_info -> txm_module_thread_entry_info_data_base_address =        module_instance -> txm_module_instance_module_data_base_address;
 8014278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801427c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801427e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014280:	609a      	str	r2, [r3, #8]
    thread_entry_info -> txm_module_thread_entry_info_code_base_address =        module_instance -> txm_module_instance_code_start;
 8014282:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014286:	699a      	ldr	r2, [r3, #24]
 8014288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801428a:	60da      	str	r2, [r3, #12]
    thread_entry_info -> txm_module_thread_entry_info_entry =                    thread_ptr -> tx_thread_entry;
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014292:	611a      	str	r2, [r3, #16]
    thread_entry_info -> txm_module_thread_entry_info_parameter =                thread_ptr -> tx_thread_entry_parameter;
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801429a:	615a      	str	r2, [r3, #20]
    thread_entry_info -> txm_module_thread_entry_info_callback_request_queue =   &(module_instance -> txm_module_instance_callback_request_queue);
 801429c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80142a0:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
 80142a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142a6:	625a      	str	r2, [r3, #36]	; 0x24
    thread_entry_info -> txm_module_thread_entry_info_callback_request_thread =  &(module_instance -> txm_module_instance_callback_request_thread);
 80142a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80142ac:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80142b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142b2:	621a      	str	r2, [r3, #32]

    /* Populate thread control block with some stock information from the module.  */
    TXM_MODULE_MANAGER_THREAD_SETUP(thread_ptr, module_instance)
 80142b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80142b8:	68db      	ldr	r3, [r3, #12]
 80142ba:	f003 0201 	and.w	r2, r3, #1
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80142c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80142c8:	68db      	ldr	r3, [r3, #12]
 80142ca:	f003 0201 	and.w	r2, r3, #1
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d003      	beq.n	80142e6 <_txm_module_manager_thread_create+0x31a>
 80142de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142e0:	4a58      	ldr	r2, [pc, #352]	; (8014444 <_txm_module_manager_thread_create+0x478>)
 80142e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80142e4:	e002      	b.n	80142ec <_txm_module_manager_thread_create+0x320>
 80142e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142e8:	4a57      	ldr	r2, [pc, #348]	; (8014448 <_txm_module_manager_thread_create+0x47c>)
 80142ea:	62da      	str	r2, [r3, #44]	; 0x2c

#ifndef TX_DISABLE_NOTIFY_CALLBACKS
    thread_entry_info ->  txm_module_thread_entry_info_exit_notify =        thread_ptr -> tx_thread_entry_exit_notify;
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80142f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142f4:	619a      	str	r2, [r3, #24]
#else /* TX_DISABLE_NOTIFY_CALLBACKS */
    thread_entry_info ->  txm_module_thread_entry_info_exit_notify =        TX_NULL;
#endif /* TX_DISABLE_NOTIFY_CALLBACKS */
    if (thread_ptr -> tx_thread_entry == module_instance -> txm_module_instance_start_thread_entry)
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80142fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80142fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014300:	429a      	cmp	r2, r3
 8014302:	d103      	bne.n	801430c <_txm_module_manager_thread_create+0x340>
        thread_entry_info ->  txm_module_thread_entry_info_start_thread =   TX_TRUE;
 8014304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014306:	2201      	movs	r2, #1
 8014308:	61da      	str	r2, [r3, #28]
 801430a:	e002      	b.n	8014312 <_txm_module_manager_thread_create+0x346>
    else
        thread_entry_info ->  txm_module_thread_entry_info_start_thread =   TX_FALSE;
 801430c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801430e:	2200      	movs	r2, #0
 8014310:	61da      	str	r2, [r3, #28]

    /* Place pointers to the thread info and module instance in the thread control block.  */
    thread_ptr -> tx_thread_module_instance_ptr =    (VOID *) module_instance;
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8014318:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    thread_ptr -> tx_thread_module_entry_info_ptr =  (VOID *) thread_entry_info;
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014320:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Place the thread entry information pointer in the thread control block so it can be picked up
       in the following stack build function. This is supplied to the module's shell entry function
       to avoid direct access to the actual thread control block. Note that this is overwritten
       with the actual stack pointer at the end of stack build.  */
    thread_ptr -> tx_thread_stack_ptr =  (VOID *) thread_entry_info;
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014328:	609a      	str	r2, [r3, #8]

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _txm_module_manager_thread_stack_build(thread_ptr, shell_function);
 801432a:	6879      	ldr	r1, [r7, #4]
 801432c:	68f8      	ldr	r0, [r7, #12]
 801432e:	f7ec fa47 	bl	80007c0 <_txm_module_manager_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8014332:	f3ef 8310 	mrs	r3, PRIMASK
 8014336:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8014338:	b672      	cpsid	i
    return(primask_value);
 801433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 801433c:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	4a42      	ldr	r2, [pc, #264]	; (801444c <_txm_module_manager_thread_create+0x480>)
 8014342:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8014344:	4b42      	ldr	r3, [pc, #264]	; (8014450 <_txm_module_manager_thread_create+0x484>)
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d10b      	bne.n	8014364 <_txm_module_manager_thread_create+0x398>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 801434c:	4a41      	ldr	r2, [pc, #260]	; (8014454 <_txm_module_manager_thread_create+0x488>)
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	68fa      	ldr	r2, [r7, #12]
 8014356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	68fa      	ldr	r2, [r7, #12]
 801435e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8014362:	e016      	b.n	8014392 <_txm_module_manager_thread_create+0x3c6>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8014364:	4b3b      	ldr	r3, [pc, #236]	; (8014454 <_txm_module_manager_thread_create+0x488>)
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	66fb      	str	r3, [r7, #108]	; 0x6c
        previous_thread =  next_thread -> tx_thread_created_previous;
 801436a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801436c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014370:	647b      	str	r3, [r7, #68]	; 0x44

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8014372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014374:	68fa      	ldr	r2, [r7, #12]
 8014376:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 801437a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801437c:	68fa      	ldr	r2, [r7, #12]
 801437e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801438e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8014392:	4b2f      	ldr	r3, [pc, #188]	; (8014450 <_txm_module_manager_thread_create+0x484>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	3301      	adds	r3, #1
 8014398:	4a2d      	ldr	r2, [pc, #180]	; (8014450 <_txm_module_manager_thread_create+0x484>)
 801439a:	6013      	str	r3, [r2, #0]
#else /* TX_THREAD_SMP */

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801439c:	4b2e      	ldr	r3, [pc, #184]	; (8014458 <_txm_module_manager_thread_create+0x48c>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	3301      	adds	r3, #1
 80143a2:	4a2d      	ldr	r2, [pc, #180]	; (8014458 <_txm_module_manager_thread_create+0x48c>)
 80143a4:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80143a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80143aa:	2b01      	cmp	r3, #1
 80143ac:	d129      	bne.n	8014402 <_txm_module_manager_thread_create+0x436>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80143ae:	f3ef 8305 	mrs	r3, IPSR
 80143b2:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80143b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80143b6:	4b29      	ldr	r3, [pc, #164]	; (801445c <_txm_module_manager_thread_create+0x490>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	4313      	orrs	r3, r2
 80143bc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80143c0:	d30d      	bcc.n	80143de <_txm_module_manager_thread_create+0x412>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80143c2:	4b27      	ldr	r3, [pc, #156]	; (8014460 <_txm_module_manager_thread_create+0x494>)
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	66bb      	str	r3, [r7, #104]	; 0x68

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80143c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d009      	beq.n	80143e2 <_txm_module_manager_thread_create+0x416>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80143ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80143d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143d2:	667b      	str	r3, [r7, #100]	; 0x64

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80143d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80143d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80143da:	63da      	str	r2, [r3, #60]	; 0x3c
 80143dc:	e001      	b.n	80143e2 <_txm_module_manager_thread_create+0x416>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80143de:	2300      	movs	r3, #0
 80143e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80143e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80143e4:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80143e6:	6a3b      	ldr	r3, [r7, #32]
 80143e8:	f383 8810 	msr	PRIMASK, r3
}
 80143ec:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80143ee:	68f8      	ldr	r0, [r7, #12]
 80143f0:	f7f6 fa64 	bl	800a8bc <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80143f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d01c      	beq.n	8014434 <_txm_module_manager_thread_create+0x468>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80143fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80143fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80143fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8014400:	e018      	b.n	8014434 <_txm_module_manager_thread_create+0x468>
 8014402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014404:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014406:	697b      	ldr	r3, [r7, #20]
 8014408:	f383 8810 	msr	PRIMASK, r3
}
 801440c:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801440e:	f3ef 8310 	mrs	r3, PRIMASK
 8014412:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8014414:	b672      	cpsid	i
    return(primask_value);
 8014416:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8014418:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 801441a:	4b0f      	ldr	r3, [pc, #60]	; (8014458 <_txm_module_manager_thread_create+0x48c>)
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	3b01      	subs	r3, #1
 8014420:	4a0d      	ldr	r2, [pc, #52]	; (8014458 <_txm_module_manager_thread_create+0x48c>)
 8014422:	6013      	str	r3, [r2, #0]
 8014424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014426:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014428:	69fb      	ldr	r3, [r7, #28]
 801442a:	f383 8810 	msr	PRIMASK, r3
}
 801442e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014430:	f7f6 fa0a 	bl	800a848 <_tx_thread_system_preempt_check>
    }

#endif /* TX_THREAD_SMP */

    /* Return success.  */
    return(TX_SUCCESS);
 8014434:	2300      	movs	r3, #0
}
 8014436:	4618      	mov	r0, r3
 8014438:	3770      	adds	r7, #112	; 0x70
 801443a:	46bd      	mov	sp, r7
 801443c:	bd80      	pop	{r7, pc}
 801443e:	bf00      	nop
 8014440:	0800b075 	.word	0x0800b075
 8014444:	08000661 	.word	0x08000661
 8014448:	08012625 	.word	0x08012625
 801444c:	54485244 	.word	0x54485244
 8014450:	2400f040 	.word	0x2400f040
 8014454:	2400f03c 	.word	0x2400f03c
 8014458:	2400f0d0 	.word	0x2400f0d0
 801445c:	24000020 	.word	0x24000020
 8014460:	2400f038 	.word	0x2400f038

08014464 <_txm_module_manager_thread_notify_trampoline>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_thread_notify_trampoline(TX_THREAD *thread_ptr, UINT type)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b098      	sub	sp, #96	; 0x60
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
 801446c:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801446e:	f3ef 8310 	mrs	r3, PRIMASK
 8014472:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8014474:	b672      	cpsid	i
    return(primask_value);
 8014476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

  
    /* We now know the callback is for a module.  */
        
    /* Disable interrupts.  */
    TX_DISABLE
 8014478:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Determine if the thread is valid.  */
    if ((thread_ptr) && (thread_ptr -> tx_thread_id == TX_THREAD_ID))
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d050      	beq.n	8014522 <_txm_module_manager_thread_notify_trampoline+0xbe>
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	4a2e      	ldr	r2, [pc, #184]	; (8014540 <_txm_module_manager_thread_notify_trampoline+0xdc>)
 8014486:	4293      	cmp	r3, r2
 8014488:	d14b      	bne.n	8014522 <_txm_module_manager_thread_notify_trampoline+0xbe>
    {

        /* Pickup the module instance pointer.  */
        module_instance =  (TXM_MODULE_INSTANCE *) thread_ptr -> tx_thread_module_instance_ptr;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014490:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Pickup the module's thread pointer.  */
        thread_info =  (TXM_MODULE_THREAD_ENTRY_INFO *) thread_ptr -> tx_thread_module_entry_info_ptr;
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014498:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if this module is still valid.  */
        if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 801449a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801449c:	2b00      	cmp	r3, #0
 801449e:	d034      	beq.n	801450a <_txm_module_manager_thread_notify_trampoline+0xa6>
 80144a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	4a27      	ldr	r2, [pc, #156]	; (8014544 <_txm_module_manager_thread_notify_trampoline+0xe0>)
 80144a6:	4293      	cmp	r3, r2
 80144a8:	d12f      	bne.n	801450a <_txm_module_manager_thread_notify_trampoline+0xa6>
            (module_instance -> txm_module_instance_state == TXM_MODULE_STARTED))
 80144aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80144ac:	689b      	ldr	r3, [r3, #8]
        if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 80144ae:	2b02      	cmp	r3, #2
 80144b0:	d12b      	bne.n	801450a <_txm_module_manager_thread_notify_trampoline+0xa6>
        {
        
            /* Yes, the module is still valid.  */        
         
            /* Pickup the module's callback message queue.  */
            module_callback_queue =  &(module_instance -> txm_module_instance_callback_request_queue);
 80144b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80144b4:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80144b8:	653b      	str	r3, [r7, #80]	; 0x50

            /* Build the queue notification message.  */
            callback_message.txm_module_callback_message_type =                  TXM_THREAD_ENTRY_EXIT_CALLBACK;
 80144ba:	2304      	movs	r3, #4
 80144bc:	60fb      	str	r3, [r7, #12]
            callback_message.txm_module_callback_message_activation_count =      1;
 80144be:	2301      	movs	r3, #1
 80144c0:	613b      	str	r3, [r7, #16]
            callback_message.txm_module_callback_message_application_function =  (VOID (*)(VOID)) thread_info -> txm_module_thread_entry_info_exit_notify;
 80144c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80144c4:	699b      	ldr	r3, [r3, #24]
 80144c6:	617b      	str	r3, [r7, #20]
            callback_message.txm_module_callback_message_param_1 =               (ALIGN_TYPE) thread_ptr;
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	61bb      	str	r3, [r7, #24]
            callback_message.txm_module_callback_message_param_2 =               (ALIGN_TYPE) type;
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	61fb      	str	r3, [r7, #28]
            callback_message.txm_module_callback_message_param_3 =               0;
 80144d0:	2300      	movs	r3, #0
 80144d2:	623b      	str	r3, [r7, #32]
            callback_message.txm_module_callback_message_param_4 =               0;
 80144d4:	2300      	movs	r3, #0
 80144d6:	627b      	str	r3, [r7, #36]	; 0x24
            callback_message.txm_module_callback_message_param_5 =               0;
 80144d8:	2300      	movs	r3, #0
 80144da:	62bb      	str	r3, [r7, #40]	; 0x28
            callback_message.txm_module_callback_message_param_6 =               0;
 80144dc:	2300      	movs	r3, #0
 80144de:	62fb      	str	r3, [r7, #44]	; 0x2c
            callback_message.txm_module_callback_message_param_7 =               0;
 80144e0:	2300      	movs	r3, #0
 80144e2:	633b      	str	r3, [r7, #48]	; 0x30
            callback_message.txm_module_callback_message_param_8 =               0;
 80144e4:	2300      	movs	r3, #0
 80144e6:	637b      	str	r3, [r7, #52]	; 0x34
            callback_message.txm_module_callback_message_reserved1 =             0;
 80144e8:	2300      	movs	r3, #0
 80144ea:	63bb      	str	r3, [r7, #56]	; 0x38
            callback_message.txm_module_callback_message_reserved2 =             0;
 80144ec:	2300      	movs	r3, #0
 80144ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80144f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80144f2:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80144f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144f6:	f383 8810 	msr	PRIMASK, r3
}
 80144fa:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE
    
            /* Call the general processing that will place the callback on the 
               module's callback request queue.  */
            _txm_module_manager_callback_request(module_callback_queue, &callback_message);
 80144fc:	f107 030c 	add.w	r3, r7, #12
 8014500:	4619      	mov	r1, r3
 8014502:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8014504:	f7f9 fab6 	bl	800da74 <_txm_module_manager_callback_request>
 8014508:	e00a      	b.n	8014520 <_txm_module_manager_thread_notify_trampoline+0xbc>
        {
    
            /* Module no longer valid.  */
        
            /* Error, increment the error counter and return.  */
            _txm_module_manager_callback_error_count++;
 801450a:	4b0f      	ldr	r3, [pc, #60]	; (8014548 <_txm_module_manager_thread_notify_trampoline+0xe4>)
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	3301      	adds	r3, #1
 8014510:	4a0d      	ldr	r2, [pc, #52]	; (8014548 <_txm_module_manager_thread_notify_trampoline+0xe4>)
 8014512:	6013      	str	r3, [r2, #0]
 8014514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014516:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801451a:	f383 8810 	msr	PRIMASK, r3
}
 801451e:	bf00      	nop
        if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 8014520:	e00a      	b.n	8014538 <_txm_module_manager_thread_notify_trampoline+0xd4>
    {
    
        /* Thread pointer is not valid.  */
    
        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 8014522:	4b09      	ldr	r3, [pc, #36]	; (8014548 <_txm_module_manager_thread_notify_trampoline+0xe4>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	3301      	adds	r3, #1
 8014528:	4a07      	ldr	r2, [pc, #28]	; (8014548 <_txm_module_manager_thread_notify_trampoline+0xe4>)
 801452a:	6013      	str	r3, [r2, #0]
 801452c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801452e:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014532:	f383 8810 	msr	PRIMASK, r3
}
 8014536:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
    }
}         
 8014538:	bf00      	nop
 801453a:	3760      	adds	r7, #96	; 0x60
 801453c:	46bd      	mov	sp, r7
 801453e:	bd80      	pop	{r7, pc}
 8014540:	54485244 	.word	0x54485244
 8014544:	4d4f4455 	.word	0x4d4f4455
 8014548:	2400f730 	.word	0x2400f730

0801454c <_txm_module_manager_thread_reset>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_thread_reset(TX_THREAD *thread_ptr)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b08c      	sub	sp, #48	; 0x30
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
UINT            status;
TXM_MODULE_INSTANCE             *module_instance;
TXM_MODULE_THREAD_ENTRY_INFO    *thread_entry_info;

    /* Default a successful completion status.  */
    status =  TX_SUCCESS;
 8014554:	2300      	movs	r3, #0
 8014556:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8014558:	f3ef 8310 	mrs	r3, PRIMASK
 801455c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801455e:	b672      	cpsid	i
    return(primask_value);
 8014560:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts.  */
    TX_DISABLE
 8014562:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8014564:	4b2b      	ldr	r3, [pc, #172]	; (8014614 <_txm_module_manager_thread_reset+0xc8>)
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for a call from the current thread, which is not allowed!  */
    if (current_thread == thread_ptr)
 801456a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	429a      	cmp	r2, r3
 8014570:	d108      	bne.n	8014584 <_txm_module_manager_thread_reset+0x38>
 8014572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014574:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014576:	697b      	ldr	r3, [r7, #20]
 8014578:	f383 8810 	msr	PRIMASK, r3
}
 801457c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Thread not completed or terminated - return an error!  */
        status =  TX_NOT_DONE;
 801457e:	2320      	movs	r3, #32
 8014580:	62bb      	str	r3, [r7, #40]	; 0x28
 8014582:	e009      	b.n	8014598 <_txm_module_manager_thread_reset+0x4c>
    }
    else
    {

        /* Check for proper status of this thread to reset.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED) 
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014588:	2b01      	cmp	r3, #1
 801458a:	d005      	beq.n	8014598 <_txm_module_manager_thread_reset+0x4c>
        {

            /* Now check for terminated state.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014590:	2b02      	cmp	r3, #2
 8014592:	d001      	beq.n	8014598 <_txm_module_manager_thread_reset+0x4c>
            {

                /* Thread not completed or terminated - return an error!  */
                status =  TX_NOT_DONE;
 8014594:	2320      	movs	r3, #32
 8014596:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }
    }

    /* Is the request valid?  */
    if (status == TX_SUCCESS)
 8014598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801459a:	2b00      	cmp	r3, #0
 801459c:	d12e      	bne.n	80145fc <_txm_module_manager_thread_reset+0xb0>
    {

        /* Modify the thread status to prevent additional reset calls.  */
        thread_ptr -> tx_thread_state =  TX_NOT_DONE;
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	2220      	movs	r2, #32
 80145a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Get the module instance.  */
        module_instance =  thread_ptr -> tx_thread_module_instance_ptr;
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80145aa:	623b      	str	r3, [r7, #32]
 80145ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	f383 8810 	msr	PRIMASK, r3
}
 80145b6:	bf00      	nop
#ifndef TX_DISABLE_STACK_FILLING

        /* Set the thread stack to a pattern prior to creating the initial
           stack frame.  This pattern is used by the stack checking routines
           to see how much has been used.  */
        TX_MEMSET(thread_ptr -> tx_thread_stack_start, ((UCHAR) TX_STACK_FILL), thread_ptr -> tx_thread_stack_size);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	68d8      	ldr	r0, [r3, #12]
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	695b      	ldr	r3, [r3, #20]
 80145c0:	461a      	mov	r2, r3
 80145c2:	21ef      	movs	r1, #239	; 0xef
 80145c4:	f000 fe52 	bl	801526c <memset>
#endif

        /* Setup pointer to the thread entry information structure, which will live at the top of each
           module thread's stack. This will allow the module thread entry function to avoid direct 
           access to the actual thread control block.  */
        thread_entry_info =  (TXM_MODULE_THREAD_ENTRY_INFO *) (((UCHAR *) thread_ptr -> tx_thread_stack_end) + (2*sizeof(ULONG)) + 1);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	691b      	ldr	r3, [r3, #16]
 80145cc:	3309      	adds	r3, #9
 80145ce:	61fb      	str	r3, [r7, #28]
        thread_entry_info =  (TXM_MODULE_THREAD_ENTRY_INFO *) (((ALIGN_TYPE)(thread_entry_info)) & (~0x3));
 80145d0:	69fb      	ldr	r3, [r7, #28]
 80145d2:	f023 0303 	bic.w	r3, r3, #3
 80145d6:	61fb      	str	r3, [r7, #28]
        
        /* Place the thread entry information pointer in the thread control block so it can be picked up
           in the following stack build function. This is supplied to the module's shell entry function
           to avoid direct access to the actual thread control block. Note that this is overwritten
           with the actual stack pointer at the end of stack build.  */
        thread_ptr -> tx_thread_stack_ptr =  (VOID *) thread_entry_info;
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	69fa      	ldr	r2, [r7, #28]
 80145dc:	609a      	str	r2, [r3, #8]
        
        /* Call the target specific stack frame building routine to build the 
           thread's initial stack and to setup the actual stack pointer in the
           control block.  */
        _txm_module_manager_thread_stack_build(thread_ptr, module_instance -> txm_module_instance_shell_entry_function);
 80145de:	6a3b      	ldr	r3, [r7, #32]
 80145e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80145e2:	4619      	mov	r1, r3
 80145e4:	6878      	ldr	r0, [r7, #4]
 80145e6:	f7ec f8eb 	bl	80007c0 <_txm_module_manager_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80145ea:	f3ef 8310 	mrs	r3, PRIMASK
 80145ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80145f0:	b672      	cpsid	i
    return(primask_value);
 80145f2:	693b      	ldr	r3, [r7, #16]

        /* Disable interrupts.  */
        TX_DISABLE
 80145f4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Finally, move into a suspended state to allow for the thread to be resumed.  */
        thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2203      	movs	r2, #3
 80145fa:	631a      	str	r2, [r3, #48]	; 0x30
 80145fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145fe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014600:	68bb      	ldr	r3, [r7, #8]
 8014602:	f383 8810 	msr	PRIMASK, r3
}
 8014606:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status to caller.  */
    return(status);
 8014608:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801460a:	4618      	mov	r0, r3
 801460c:	3730      	adds	r7, #48	; 0x30
 801460e:	46bd      	mov	sp, r7
 8014610:	bd80      	pop	{r7, pc}
 8014612:	bf00      	nop
 8014614:	2400f034 	.word	0x2400f034

08014618 <_txm_module_manager_timer_notify_trampoline>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
VOID  _txm_module_manager_timer_notify_trampoline(ULONG id)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b098      	sub	sp, #96	; 0x60
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8014620:	f3ef 8310 	mrs	r3, PRIMASK
 8014624:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 8014626:	b672      	cpsid	i
    return(primask_value);
 8014628:	6c7b      	ldr	r3, [r7, #68]	; 0x44

  
    /* We now know the callback is for a module.  */
        
    /* Disable interrupts.  */
    TX_DISABLE
 801462a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Our expired timer pointer points to the internal timer, 
     * we need to get to the full timer pointer.  */
    /* Pickup the current internal timer pointer.  */
    internal_ptr =  (CHAR *) _tx_timer_expired_timer_ptr;  
 801462c:	4b2a      	ldr	r3, [pc, #168]	; (80146d8 <_txm_module_manager_timer_notify_trampoline+0xc0>)
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* Get the timer pointer from the internal pointer.  */
    TX_USER_TIMER_POINTER_GET((TX_TIMER_INTERNAL *) internal_ptr, timer_ptr);
 8014632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014634:	657b      	str	r3, [r7, #84]	; 0x54
 8014636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014638:	653b      	str	r3, [r7, #80]	; 0x50
 801463a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801463c:	3b08      	subs	r3, #8
 801463e:	657b      	str	r3, [r7, #84]	; 0x54
 8014640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014642:	653b      	str	r3, [r7, #80]	; 0x50
    
    /* Pickup the module instance pointer.  */
    module_instance =  (TXM_MODULE_INSTANCE *) timer_ptr -> tx_timer_module_instance;
 8014644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014648:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Determine if this module is still valid.  */
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 801464a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801464c:	2b00      	cmp	r3, #0
 801464e:	d034      	beq.n	80146ba <_txm_module_manager_timer_notify_trampoline+0xa2>
 8014650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	4a21      	ldr	r2, [pc, #132]	; (80146dc <_txm_module_manager_timer_notify_trampoline+0xc4>)
 8014656:	4293      	cmp	r3, r2
 8014658:	d12f      	bne.n	80146ba <_txm_module_manager_timer_notify_trampoline+0xa2>
        (module_instance -> txm_module_instance_state == TXM_MODULE_STARTED))
 801465a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801465c:	689b      	ldr	r3, [r3, #8]
    if ((module_instance) && (module_instance -> txm_module_instance_id == TXM_MODULE_ID) &&
 801465e:	2b02      	cmp	r3, #2
 8014660:	d12b      	bne.n	80146ba <_txm_module_manager_timer_notify_trampoline+0xa2>
    {
        
        /* Yes, the module is still valid.  */        
         
        /* Pickup the module's callback message queue.  */
        module_callback_queue =  &(module_instance -> txm_module_instance_callback_request_queue);
 8014662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014664:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8014668:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Build the queue notification message.  */
        callback_message.txm_module_callback_message_type =                  TXM_TIMER_CALLBACK;
 801466a:	2300      	movs	r3, #0
 801466c:	60bb      	str	r3, [r7, #8]
        callback_message.txm_module_callback_message_activation_count =      1;
 801466e:	2301      	movs	r3, #1
 8014670:	60fb      	str	r3, [r7, #12]
        callback_message.txm_module_callback_message_application_function =  (VOID (*)(VOID)) timer_ptr -> tx_timer_module_expiration_function;
 8014672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014676:	613b      	str	r3, [r7, #16]
        callback_message.txm_module_callback_message_param_1 =               (ULONG) id;
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	617b      	str	r3, [r7, #20]
        callback_message.txm_module_callback_message_param_2 =               0;
 801467c:	2300      	movs	r3, #0
 801467e:	61bb      	str	r3, [r7, #24]
        callback_message.txm_module_callback_message_param_3 =               0;
 8014680:	2300      	movs	r3, #0
 8014682:	61fb      	str	r3, [r7, #28]
        callback_message.txm_module_callback_message_param_4 =               0;
 8014684:	2300      	movs	r3, #0
 8014686:	623b      	str	r3, [r7, #32]
        callback_message.txm_module_callback_message_param_5 =               0;
 8014688:	2300      	movs	r3, #0
 801468a:	627b      	str	r3, [r7, #36]	; 0x24
        callback_message.txm_module_callback_message_param_6 =               0;
 801468c:	2300      	movs	r3, #0
 801468e:	62bb      	str	r3, [r7, #40]	; 0x28
        callback_message.txm_module_callback_message_param_7 =               0;
 8014690:	2300      	movs	r3, #0
 8014692:	62fb      	str	r3, [r7, #44]	; 0x2c
        callback_message.txm_module_callback_message_param_8 =               0;
 8014694:	2300      	movs	r3, #0
 8014696:	633b      	str	r3, [r7, #48]	; 0x30
        callback_message.txm_module_callback_message_reserved1 =             0;
 8014698:	2300      	movs	r3, #0
 801469a:	637b      	str	r3, [r7, #52]	; 0x34
        callback_message.txm_module_callback_message_reserved2 =             0;
 801469c:	2300      	movs	r3, #0
 801469e:	63bb      	str	r3, [r7, #56]	; 0x38
 80146a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80146a2:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80146a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146a6:	f383 8810 	msr	PRIMASK, r3
}
 80146aa:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Call the general processing that will place the callback on the 
           module's callback request queue.  */
        _txm_module_manager_callback_request(module_callback_queue, &callback_message);
 80146ac:	f107 0308 	add.w	r3, r7, #8
 80146b0:	4619      	mov	r1, r3
 80146b2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80146b4:	f7f9 f9de 	bl	800da74 <_txm_module_manager_callback_request>
 80146b8:	e00a      	b.n	80146d0 <_txm_module_manager_timer_notify_trampoline+0xb8>
    {
    
        /* Module no longer valid.  */

        /* Error, increment the error counter and return.  */
        _txm_module_manager_callback_error_count++;
 80146ba:	4b09      	ldr	r3, [pc, #36]	; (80146e0 <_txm_module_manager_timer_notify_trampoline+0xc8>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	3301      	adds	r3, #1
 80146c0:	4a07      	ldr	r2, [pc, #28]	; (80146e0 <_txm_module_manager_timer_notify_trampoline+0xc8>)
 80146c2:	6013      	str	r3, [r2, #0]
 80146c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80146c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80146c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146ca:	f383 8810 	msr	PRIMASK, r3
}
 80146ce:	bf00      	nop
        
        /* Restore interrupts.  */
        TX_RESTORE
    }
}       
 80146d0:	bf00      	nop
 80146d2:	3760      	adds	r7, #96	; 0x60
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}
 80146d8:	2400f17c 	.word	0x2400f17c
 80146dc:	4d4f4455 	.word	0x4d4f4455
 80146e0:	2400f730 	.word	0x2400f730

080146e4 <_txm_module_manager_unload>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_unload(TXM_MODULE_INSTANCE *module_instance)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b08a      	sub	sp, #40	; 0x28
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80146ec:	f3ef 8305 	mrs	r3, IPSR
 80146f0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80146f2:	697a      	ldr	r2, [r7, #20]
TXM_MODULE_INSTANCE *next_module, *previous_module;
CHAR                *memory_ptr;


    /* Check for interrupt call.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != 0)
 80146f4:	4b43      	ldr	r3, [pc, #268]	; (8014804 <_txm_module_manager_unload+0x120>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	4313      	orrs	r3, r2
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d00b      	beq.n	8014716 <_txm_module_manager_unload+0x32>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80146fe:	f3ef 8305 	mrs	r3, IPSR
 8014702:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8014704:	693a      	ldr	r2, [r7, #16]
    {
    
        /* Now, make sure the call is from an interrupt and not initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8014706:	4b3f      	ldr	r3, [pc, #252]	; (8014804 <_txm_module_manager_unload+0x120>)
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	4313      	orrs	r3, r2
 801470c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8014710:	d201      	bcs.n	8014716 <_txm_module_manager_unload+0x32>
        {
        
            /* Invalid caller of this function, return appropriate error code.  */
            return(TX_CALLER_ERROR);
 8014712:	2313      	movs	r3, #19
 8014714:	e071      	b.n	80147fa <_txm_module_manager_unload+0x116>
        }
    }

    /* Determine if the module manager has not been initialized yet.  */
    if (_txm_module_manager_ready != TX_TRUE)
 8014716:	4b3c      	ldr	r3, [pc, #240]	; (8014808 <_txm_module_manager_unload+0x124>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	2b01      	cmp	r3, #1
 801471c:	d001      	beq.n	8014722 <_txm_module_manager_unload+0x3e>
    {
    
        /* Module manager has not been initialized.  */
        return(TX_NOT_AVAILABLE); 
 801471e:	231d      	movs	r3, #29
 8014720:	e06b      	b.n	80147fa <_txm_module_manager_unload+0x116>
    }

    /* Determine if the module is valid.  */
    if (module_instance == TX_NULL)
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d101      	bne.n	801472c <_txm_module_manager_unload+0x48>
    {
    
        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 8014728:	2303      	movs	r3, #3
 801472a:	e066      	b.n	80147fa <_txm_module_manager_unload+0x116>
    }

    /* Get module manager protection mutex.  */
    _tx_mutex_get(&_txm_module_manager_mutex, TX_WAIT_FOREVER);
 801472c:	f04f 31ff 	mov.w	r1, #4294967295
 8014730:	4836      	ldr	r0, [pc, #216]	; (801480c <_txm_module_manager_unload+0x128>)
 8014732:	f7f3 fb1f 	bl	8007d74 <_tx_mutex_get>

    /* Determine if the module is already valid.  */
    if (module_instance -> txm_module_instance_id != TXM_MODULE_ID)
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	4a35      	ldr	r2, [pc, #212]	; (8014810 <_txm_module_manager_unload+0x12c>)
 801473c:	4293      	cmp	r3, r2
 801473e:	d004      	beq.n	801474a <_txm_module_manager_unload+0x66>
    {

        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 8014740:	4832      	ldr	r0, [pc, #200]	; (801480c <_txm_module_manager_unload+0x128>)
 8014742:	f7f3 fdd5 	bl	80082f0 <_tx_mutex_put>

        /* Invalid module pointer.  */
        return(TX_PTR_ERROR);
 8014746:	2303      	movs	r3, #3
 8014748:	e057      	b.n	80147fa <_txm_module_manager_unload+0x116>
    }

    /* Determine if the module instance is in the  state.  */
    if ((module_instance -> txm_module_instance_state != TXM_MODULE_LOADED) && (module_instance -> txm_module_instance_state != TXM_MODULE_STOPPED))
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	689b      	ldr	r3, [r3, #8]
 801474e:	2b01      	cmp	r3, #1
 8014750:	d008      	beq.n	8014764 <_txm_module_manager_unload+0x80>
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	689b      	ldr	r3, [r3, #8]
 8014756:	2b04      	cmp	r3, #4
 8014758:	d004      	beq.n	8014764 <_txm_module_manager_unload+0x80>
    {
    
        /* Release the protection mutex.  */
        _tx_mutex_put(&_txm_module_manager_mutex);
 801475a:	482c      	ldr	r0, [pc, #176]	; (801480c <_txm_module_manager_unload+0x128>)
 801475c:	f7f3 fdc8 	bl	80082f0 <_tx_mutex_put>

        /* Return error if the module is not ready.  */
        return(TX_NOT_DONE);
 8014760:	2320      	movs	r3, #32
 8014762:	e04a      	b.n	80147fa <_txm_module_manager_unload+0x116>
    }

    /* Pickup the module data memory allocation address.  */
    memory_ptr =  module_instance -> txm_module_instance_data_allocation_ptr;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014768:	627b      	str	r3, [r7, #36]	; 0x24

    /* Release the module's data memory.  */
    _tx_byte_release(memory_ptr);
 801476a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801476c:	f7f2 fb34 	bl	8006dd8 <_tx_byte_release>

    /* Determine if there was memory allocated for the code.  */
    if (module_instance -> txm_module_instance_code_allocation_ptr)
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	691b      	ldr	r3, [r3, #16]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d005      	beq.n	8014784 <_txm_module_manager_unload+0xa0>
    {
     
        /* Yes, release the module's code memory.  */
        memory_ptr =  module_instance -> txm_module_instance_code_allocation_ptr;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	691b      	ldr	r3, [r3, #16]
 801477c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Release the module's data memory.  */
        _tx_byte_release(memory_ptr);
 801477e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014780:	f7f2 fb2a 	bl	8006dd8 <_tx_byte_release>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8014784:	f3ef 8310 	mrs	r3, PRIMASK
 8014788:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801478a:	b672      	cpsid	i
    return(primask_value);
 801478c:	68fb      	ldr	r3, [r7, #12]
    }
    
    /* Temporarily disable interrupts.  */
    TX_DISABLE
 801478e:	623b      	str	r3, [r7, #32]

    /* Clear some of the module information.  */
    module_instance -> txm_module_instance_id =     0;
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	2200      	movs	r2, #0
 8014794:	601a      	str	r2, [r3, #0]
    module_instance -> txm_module_instance_state =  TXM_MODULE_UNLOADED;
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	2205      	movs	r2, #5
 801479a:	609a      	str	r2, [r3, #8]
    TXM_MODULE_MANAGER_MODULE_UNLOAD(module_instance);
    
    /* Remove the module from the linked list of loaded modules.  */

    /* See if the module is the only one on the list.  */
    if ((--_txm_module_manger_loaded_count) == 0)
 801479c:	4b1d      	ldr	r3, [pc, #116]	; (8014814 <_txm_module_manager_unload+0x130>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	3b01      	subs	r3, #1
 80147a2:	4a1c      	ldr	r2, [pc, #112]	; (8014814 <_txm_module_manager_unload+0x130>)
 80147a4:	6013      	str	r3, [r2, #0]
 80147a6:	4b1b      	ldr	r3, [pc, #108]	; (8014814 <_txm_module_manager_unload+0x130>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d103      	bne.n	80147b6 <_txm_module_manager_unload+0xd2>
    {

        /* Only created module, just set the created list to NULL.  */
        _txm_module_manager_loaded_list_ptr =  TX_NULL;
 80147ae:	4b1a      	ldr	r3, [pc, #104]	; (8014818 <_txm_module_manager_unload+0x134>)
 80147b0:	2200      	movs	r2, #0
 80147b2:	601a      	str	r2, [r3, #0]
 80147b4:	e017      	b.n	80147e6 <_txm_module_manager_unload+0x102>
    }
    else
    {

        /* Otherwise, not the only created module, link-up the neighbors.  */
        next_module =                                module_instance -> txm_module_instance_loaded_next;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80147bc:	61fb      	str	r3, [r7, #28]
        previous_module =                            module_instance -> txm_module_instance_loaded_previous;
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	; 0x4d8
 80147c4:	61bb      	str	r3, [r7, #24]
        next_module -> txm_module_instance_loaded_previous =  previous_module;
 80147c6:	69fb      	ldr	r3, [r7, #28]
 80147c8:	69ba      	ldr	r2, [r7, #24]
 80147ca:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
        previous_module -> txm_module_instance_loaded_next =  next_module;
 80147ce:	69bb      	ldr	r3, [r7, #24]
 80147d0:	69fa      	ldr	r2, [r7, #28]
 80147d2:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

        /* See if we have to update the created list head pointer.  */
        if (_txm_module_manager_loaded_list_ptr == module_instance)
 80147d6:	4b10      	ldr	r3, [pc, #64]	; (8014818 <_txm_module_manager_unload+0x134>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	687a      	ldr	r2, [r7, #4]
 80147dc:	429a      	cmp	r2, r3
 80147de:	d102      	bne.n	80147e6 <_txm_module_manager_unload+0x102>
        {
                        
            /* Yes, move the head pointer to the next link. */
            _txm_module_manager_loaded_list_ptr =  next_module; 
 80147e0:	4a0d      	ldr	r2, [pc, #52]	; (8014818 <_txm_module_manager_unload+0x134>)
 80147e2:	69fb      	ldr	r3, [r7, #28]
 80147e4:	6013      	str	r3, [r2, #0]
 80147e6:	6a3b      	ldr	r3, [r7, #32]
 80147e8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80147ea:	68bb      	ldr	r3, [r7, #8]
 80147ec:	f383 8810 	msr	PRIMASK, r3
}
 80147f0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    _tx_mutex_put(&_txm_module_manager_mutex);
 80147f2:	4806      	ldr	r0, [pc, #24]	; (801480c <_txm_module_manager_unload+0x128>)
 80147f4:	f7f3 fd7c 	bl	80082f0 <_tx_mutex_put>

    /* Return success.  */
    return(TX_SUCCESS);
 80147f8:	2300      	movs	r3, #0
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	3728      	adds	r7, #40	; 0x28
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
 8014802:	bf00      	nop
 8014804:	24000020 	.word	0x24000020
 8014808:	2400f728 	.word	0x2400f728
 801480c:	2400f6ec 	.word	0x2400f6ec
 8014810:	4d4f4455 	.word	0x4d4f4455
 8014814:	2400f724 	.word	0x2400f724
 8014818:	2400f720 	.word	0x2400f720

0801481c <_txm_module_manager_created_object_check>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UCHAR _txm_module_manager_created_object_check(TXM_MODULE_INSTANCE *module_instance, VOID *object_ptr)
{
 801481c:	b480      	push	{r7}
 801481e:	b085      	sub	sp, #20
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	6039      	str	r1, [r7, #0]

TXM_MODULE_ALLOCATED_OBJECT     *allocated_object_ptr;

    /* Determine if the socket control block is inside the module.  */
    if ( (((CHAR *) object_ptr) >= ((CHAR *) module_instance -> txm_module_instance_data_start)) &&
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801482a:	683a      	ldr	r2, [r7, #0]
 801482c:	429a      	cmp	r2, r3
 801482e:	d306      	bcc.n	801483e <_txm_module_manager_created_object_check+0x22>
         (((CHAR *) object_ptr) < ((CHAR *) module_instance -> txm_module_instance_data_end)))
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    if ( (((CHAR *) object_ptr) >= ((CHAR *) module_instance -> txm_module_instance_data_start)) &&
 8014834:	683a      	ldr	r2, [r7, #0]
 8014836:	429a      	cmp	r2, r3
 8014838:	d201      	bcs.n	801483e <_txm_module_manager_created_object_check+0x22>
    {
        return TX_TRUE;
 801483a:	2301      	movs	r3, #1
 801483c:	e01d      	b.n	801487a <_txm_module_manager_created_object_check+0x5e>
    }

    /* Determine if this object control block was allocated by this module instance.  */
    else if (_txm_module_manager_object_pool_created)
 801483e:	4b12      	ldr	r3, [pc, #72]	; (8014888 <_txm_module_manager_created_object_check+0x6c>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d018      	beq.n	8014878 <_txm_module_manager_created_object_check+0x5c>
    {

        /* Determine if the current object is from the pool of dynamically allocated objects.  */
        if ((((UCHAR *) object_ptr) >= _txm_module_manager_object_pool.tx_byte_pool_start) &&
 8014846:	4b11      	ldr	r3, [pc, #68]	; (801488c <_txm_module_manager_created_object_check+0x70>)
 8014848:	699b      	ldr	r3, [r3, #24]
 801484a:	683a      	ldr	r2, [r7, #0]
 801484c:	429a      	cmp	r2, r3
 801484e:	d313      	bcc.n	8014878 <_txm_module_manager_created_object_check+0x5c>
            (((UCHAR *) object_ptr) < (_txm_module_manager_object_pool.tx_byte_pool_start + _txm_module_manager_object_pool.tx_byte_pool_size)))
 8014850:	4b0e      	ldr	r3, [pc, #56]	; (801488c <_txm_module_manager_created_object_check+0x70>)
 8014852:	699a      	ldr	r2, [r3, #24]
 8014854:	4b0d      	ldr	r3, [pc, #52]	; (801488c <_txm_module_manager_created_object_check+0x70>)
 8014856:	69db      	ldr	r3, [r3, #28]
 8014858:	4413      	add	r3, r2
        if ((((UCHAR *) object_ptr) >= _txm_module_manager_object_pool.tx_byte_pool_start) &&
 801485a:	683a      	ldr	r2, [r7, #0]
 801485c:	429a      	cmp	r2, r3
 801485e:	d20b      	bcs.n	8014878 <_txm_module_manager_created_object_check+0x5c>
        {

            /* Pickup object pointer.  */
            allocated_object_ptr =  (TXM_MODULE_ALLOCATED_OBJECT *) object_ptr;
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	60fb      	str	r3, [r7, #12]

            /* Move back to get the header information.  */
            allocated_object_ptr--;
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	3b10      	subs	r3, #16
 8014868:	60fb      	str	r3, [r7, #12]

            /* Now determine if this object belongs to this module.  */
            if (allocated_object_ptr -> txm_module_allocated_object_module_instance == module_instance)
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	687a      	ldr	r2, [r7, #4]
 8014870:	429a      	cmp	r2, r3
 8014872:	d101      	bne.n	8014878 <_txm_module_manager_created_object_check+0x5c>
            {
                return TX_TRUE;
 8014874:	2301      	movs	r3, #1
 8014876:	e000      	b.n	801487a <_txm_module_manager_created_object_check+0x5e>
            }
        }
    }

    return TX_FALSE;
 8014878:	2300      	movs	r3, #0
}
 801487a:	4618      	mov	r0, r3
 801487c:	3714      	adds	r7, #20
 801487e:	46bd      	mov	sp, r7
 8014880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014884:	4770      	bx	lr
 8014886:	bf00      	nop
 8014888:	2400f6e8 	.word	0x2400f6e8
 801488c:	2400f6b4 	.word	0x2400f6b4

08014890 <_txm_module_manager_object_size_check>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_object_size_check(ALIGN_TYPE object_ptr, ULONG object_size)
{
 8014890:	b480      	push	{r7}
 8014892:	b085      	sub	sp, #20
 8014894:	af00      	add	r7, sp, #0
 8014896:	6078      	str	r0, [r7, #4]
 8014898:	6039      	str	r1, [r7, #0]
TXM_MODULE_ALLOCATED_OBJECT *module_allocated_object_ptr;
UINT                        return_value;
    
    /* Pickup the allocated object pointer.  */
    module_allocated_object_ptr = ((TXM_MODULE_ALLOCATED_OBJECT *) object_ptr) - 1;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	3b10      	subs	r3, #16
 801489e:	60bb      	str	r3, [r7, #8]

    /* Does the allocated memory match the expected object size?  */
    if (module_allocated_object_ptr -> txm_module_object_size == object_size)
 80148a0:	68bb      	ldr	r3, [r7, #8]
 80148a2:	68db      	ldr	r3, [r3, #12]
 80148a4:	683a      	ldr	r2, [r7, #0]
 80148a6:	429a      	cmp	r2, r3
 80148a8:	d102      	bne.n	80148b0 <_txm_module_manager_object_size_check+0x20>
        return_value =  TX_SUCCESS;
 80148aa:	2300      	movs	r3, #0
 80148ac:	60fb      	str	r3, [r7, #12]
 80148ae:	e001      	b.n	80148b4 <_txm_module_manager_object_size_check+0x24>
    else
        return_value =  TXM_MODULE_INVALID_MEMORY;
 80148b0:	23f4      	movs	r3, #244	; 0xf4
 80148b2:	60fb      	str	r3, [r7, #12]
    
    return(return_value);
 80148b4:	68fb      	ldr	r3, [r7, #12]
}
 80148b6:	4618      	mov	r0, r3
 80148b8:	3714      	adds	r7, #20
 80148ba:	46bd      	mov	sp, r7
 80148bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c0:	4770      	bx	lr

080148c2 <_txm_module_manager_object_name_compare>:
/*                                                                        */
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_object_name_compare(CHAR *search_name, UINT search_name_length, CHAR *object_name)
{
 80148c2:	b480      	push	{r7}
 80148c4:	b087      	sub	sp, #28
 80148c6:	af00      	add	r7, sp, #0
 80148c8:	60f8      	str	r0, [r7, #12]
 80148ca:	60b9      	str	r1, [r7, #8]
 80148cc:	607a      	str	r2, [r7, #4]
CHAR    object_name_char;


    /* Is the object name null? Note that the search name has already been checked
       by the caller.  */
    if (object_name == TX_NULL)
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d101      	bne.n	80148d8 <_txm_module_manager_object_name_compare+0x16>
    {

        /* The strings can't match.  */
        return(TX_FALSE);
 80148d4:	2300      	movs	r3, #0
 80148d6:	e01f      	b.n	8014918 <_txm_module_manager_object_name_compare+0x56>
    /* Loop through the names.  */
    while (1)
    {

        /* Get the current characters from each name.  */
        search_name_char =  *search_name;
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	781b      	ldrb	r3, [r3, #0]
 80148dc:	75fb      	strb	r3, [r7, #23]
        object_name_char =  *object_name;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	781b      	ldrb	r3, [r3, #0]
 80148e2:	75bb      	strb	r3, [r7, #22]

        /* Check for match.  */
        if (search_name_char == object_name_char)
 80148e4:	7dfa      	ldrb	r2, [r7, #23]
 80148e6:	7dbb      	ldrb	r3, [r7, #22]
 80148e8:	429a      	cmp	r2, r3
 80148ea:	d104      	bne.n	80148f6 <_txm_module_manager_object_name_compare+0x34>
        {

            /* Are they null-terminators?  */
            if (search_name_char == '\0')
 80148ec:	7dfb      	ldrb	r3, [r7, #23]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d103      	bne.n	80148fa <_txm_module_manager_object_name_compare+0x38>
            {

                /* The strings match.  */
                return(TX_TRUE);
 80148f2:	2301      	movs	r3, #1
 80148f4:	e010      	b.n	8014918 <_txm_module_manager_object_name_compare+0x56>
        }
        else
        {

            /* The strings don't match.  */
            return(TX_FALSE);
 80148f6:	2300      	movs	r3, #0
 80148f8:	e00e      	b.n	8014918 <_txm_module_manager_object_name_compare+0x56>
        }

        /* Are we at the end of the search name?  */
        if (search_name_length == 0)
 80148fa:	68bb      	ldr	r3, [r7, #8]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d101      	bne.n	8014904 <_txm_module_manager_object_name_compare+0x42>
        {

            /* The strings don't match.  */
            return(TX_FALSE);
 8014900:	2300      	movs	r3, #0
 8014902:	e009      	b.n	8014918 <_txm_module_manager_object_name_compare+0x56>
        }

        /* Move to next character.  */
        search_name++;
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	3301      	adds	r3, #1
 8014908:	60fb      	str	r3, [r7, #12]
        object_name++;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	3301      	adds	r3, #1
 801490e:	607b      	str	r3, [r7, #4]
        search_name_length--;
 8014910:	68bb      	ldr	r3, [r7, #8]
 8014912:	3b01      	subs	r3, #1
 8014914:	60bb      	str	r3, [r7, #8]
        search_name_char =  *search_name;
 8014916:	e7df      	b.n	80148d8 <_txm_module_manager_object_name_compare+0x16>
    }
}
 8014918:	4618      	mov	r0, r3
 801491a:	371c      	adds	r7, #28
 801491c:	46bd      	mov	sp, r7
 801491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014922:	4770      	bx	lr

08014924 <_txm_module_manager_util_code_allocation_size_and_alignment_get>:
/*  09-30-2020     Scott Larson             Initial Version 6.1           */
/*                                                                        */
/**************************************************************************/
UINT  _txm_module_manager_util_code_allocation_size_and_alignment_get(TXM_MODULE_PREAMBLE *module_preamble,
                                                                      ULONG *code_alignment_dest, ULONG *code_allocation_size_dest)
{
 8014924:	b580      	push	{r7, lr}
 8014926:	b08a      	sub	sp, #40	; 0x28
 8014928:	af02      	add	r7, sp, #8
 801492a:	60f8      	str	r0, [r7, #12]
 801492c:	60b9      	str	r1, [r7, #8]
 801492e:	607a      	str	r2, [r7, #4]
ULONG   data_size_ignored;
ULONG   data_alignment_ignored;


    /* Pickup the module code size.  */
    code_size =  module_preamble -> txm_module_preamble_code_size;
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014934:	61fb      	str	r3, [r7, #28]

    /* Adjust the size of the module elements to be aligned to the default alignment.  */
    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(code_size, TXM_MODULE_CODE_ALIGNMENT, code_size);
 8014936:	69fb      	ldr	r3, [r7, #28]
 8014938:	f113 0f05 	cmn.w	r3, #5
 801493c:	d901      	bls.n	8014942 <_txm_module_manager_util_code_allocation_size_and_alignment_get+0x1e>
 801493e:	23f8      	movs	r3, #248	; 0xf8
 8014940:	e02a      	b.n	8014998 <_txm_module_manager_util_code_allocation_size_and_alignment_get+0x74>
 8014942:	69fb      	ldr	r3, [r7, #28]
 8014944:	3304      	adds	r3, #4
 8014946:	61fb      	str	r3, [r7, #28]
    code_size =  ((code_size - 1)/TXM_MODULE_CODE_ALIGNMENT) * TXM_MODULE_CODE_ALIGNMENT;
 8014948:	69fb      	ldr	r3, [r7, #28]
 801494a:	3b01      	subs	r3, #1
 801494c:	f023 0303 	bic.w	r3, r3, #3
 8014950:	61fb      	str	r3, [r7, #28]

    /* Setup the default code and data alignments.  */
    code_alignment =  (ULONG) TXM_MODULE_CODE_ALIGNMENT;
 8014952:	2304      	movs	r3, #4
 8014954:	61bb      	str	r3, [r7, #24]

    /* Get the port-specific alignment for the code size. Note we only want code so we pass 'null' values for data.  */
    data_size_ignored = 1;
 8014956:	2301      	movs	r3, #1
 8014958:	617b      	str	r3, [r7, #20]
    data_alignment_ignored = 1;
 801495a:	2301      	movs	r3, #1
 801495c:	613b      	str	r3, [r7, #16]
    TXM_MODULE_MANAGER_ALIGNMENT_ADJUST(module_preamble, code_size, code_alignment, data_size_ignored, data_alignment_ignored)
 801495e:	f107 0014 	add.w	r0, r7, #20
 8014962:	f107 0218 	add.w	r2, r7, #24
 8014966:	f107 011c 	add.w	r1, r7, #28
 801496a:	f107 0310 	add.w	r3, r7, #16
 801496e:	9300      	str	r3, [sp, #0]
 8014970:	4603      	mov	r3, r0
 8014972:	68f8      	ldr	r0, [r7, #12]
 8014974:	f7f9 f80c 	bl	800d990 <_txm_module_manager_alignment_adjust>

    /* Calculate the code memory allocation size.  */
    TXM_MODULE_MANAGER_UTIL_MATH_ADD_ULONG(code_size, code_alignment, *code_allocation_size_dest);
 8014978:	69fb      	ldr	r3, [r7, #28]
 801497a:	43da      	mvns	r2, r3
 801497c:	69bb      	ldr	r3, [r7, #24]
 801497e:	429a      	cmp	r2, r3
 8014980:	d201      	bcs.n	8014986 <_txm_module_manager_util_code_allocation_size_and_alignment_get+0x62>
 8014982:	23f8      	movs	r3, #248	; 0xf8
 8014984:	e008      	b.n	8014998 <_txm_module_manager_util_code_allocation_size_and_alignment_get+0x74>
 8014986:	69fa      	ldr	r2, [r7, #28]
 8014988:	69bb      	ldr	r3, [r7, #24]
 801498a:	441a      	add	r2, r3
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	601a      	str	r2, [r3, #0]

    /* Write the alignment result into the caller's destination address.  */
    *code_alignment_dest =  code_alignment;
 8014990:	69ba      	ldr	r2, [r7, #24]
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	601a      	str	r2, [r3, #0]

    /* Return success.  */
    return(TX_SUCCESS);
 8014996:	2300      	movs	r3, #0
}
 8014998:	4618      	mov	r0, r3
 801499a:	3720      	adds	r7, #32
 801499c:	46bd      	mov	sp, r7
 801499e:	bd80      	pop	{r7, pc}

080149a0 <_tx_block_pool_performance_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_pool_performance_info_get(TX_BLOCK_POOL *pool_ptr, ULONG *allocates, ULONG *releases,
                    ULONG *suspensions, ULONG *timeouts)
{
 80149a0:	b480      	push	{r7}
 80149a2:	b087      	sub	sp, #28
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	60f8      	str	r0, [r7, #12]
 80149a8:	60b9      	str	r1, [r7, #8]
 80149aa:	607a      	str	r2, [r7, #4]
 80149ac:	603b      	str	r3, [r7, #0]
#else
UINT                    status;

    
    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (pool_ptr != TX_NULL)
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d002      	beq.n	80149ba <_tx_block_pool_performance_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80149b4:	23ff      	movs	r3, #255	; 0xff
 80149b6:	617b      	str	r3, [r7, #20]
 80149b8:	e019      	b.n	80149ee <_tx_block_pool_performance_info_get+0x4e>
    }
    else if (allocates != TX_NULL)
 80149ba:	68bb      	ldr	r3, [r7, #8]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d002      	beq.n	80149c6 <_tx_block_pool_performance_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80149c0:	23ff      	movs	r3, #255	; 0xff
 80149c2:	617b      	str	r3, [r7, #20]
 80149c4:	e013      	b.n	80149ee <_tx_block_pool_performance_info_get+0x4e>
    }
    else if (releases != TX_NULL)
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d002      	beq.n	80149d2 <_tx_block_pool_performance_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80149cc:	23ff      	movs	r3, #255	; 0xff
 80149ce:	617b      	str	r3, [r7, #20]
 80149d0:	e00d      	b.n	80149ee <_tx_block_pool_performance_info_get+0x4e>
    }
    else if (suspensions != TX_NULL)
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d002      	beq.n	80149de <_tx_block_pool_performance_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80149d8:	23ff      	movs	r3, #255	; 0xff
 80149da:	617b      	str	r3, [r7, #20]
 80149dc:	e007      	b.n	80149ee <_tx_block_pool_performance_info_get+0x4e>
    }
    else if (timeouts != TX_NULL)
 80149de:	6a3b      	ldr	r3, [r7, #32]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d002      	beq.n	80149ea <_tx_block_pool_performance_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80149e4:	23ff      	movs	r3, #255	; 0xff
 80149e6:	617b      	str	r3, [r7, #20]
 80149e8:	e001      	b.n	80149ee <_tx_block_pool_performance_info_get+0x4e>
    }
    else
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80149ea:	23ff      	movs	r3, #255	; 0xff
 80149ec:	617b      	str	r3, [r7, #20]
    }
#endif

    /* Return completion status.  */
    return(status);
 80149ee:	697b      	ldr	r3, [r7, #20]
}
 80149f0:	4618      	mov	r0, r3
 80149f2:	371c      	adds	r7, #28
 80149f4:	46bd      	mov	sp, r7
 80149f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149fa:	4770      	bx	lr

080149fc <_tx_block_pool_performance_system_info_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_block_pool_performance_system_info_get(ULONG *allocates, ULONG *releases, ULONG *suspensions, ULONG *timeouts)
{
 80149fc:	b480      	push	{r7}
 80149fe:	b087      	sub	sp, #28
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	60f8      	str	r0, [r7, #12]
 8014a04:	60b9      	str	r1, [r7, #8]
 8014a06:	607a      	str	r2, [r7, #4]
 8014a08:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (allocates != TX_NULL)
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d002      	beq.n	8014a16 <_tx_block_pool_performance_system_info_get+0x1a>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a10:	23ff      	movs	r3, #255	; 0xff
 8014a12:	617b      	str	r3, [r7, #20]
 8014a14:	e013      	b.n	8014a3e <_tx_block_pool_performance_system_info_get+0x42>
    }
    else if (releases != TX_NULL)
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d002      	beq.n	8014a22 <_tx_block_pool_performance_system_info_get+0x26>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a1c:	23ff      	movs	r3, #255	; 0xff
 8014a1e:	617b      	str	r3, [r7, #20]
 8014a20:	e00d      	b.n	8014a3e <_tx_block_pool_performance_system_info_get+0x42>
    }
    else if (suspensions != TX_NULL)
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d002      	beq.n	8014a2e <_tx_block_pool_performance_system_info_get+0x32>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a28:	23ff      	movs	r3, #255	; 0xff
 8014a2a:	617b      	str	r3, [r7, #20]
 8014a2c:	e007      	b.n	8014a3e <_tx_block_pool_performance_system_info_get+0x42>
    }
    else if (timeouts != TX_NULL)
 8014a2e:	683b      	ldr	r3, [r7, #0]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d002      	beq.n	8014a3a <_tx_block_pool_performance_system_info_get+0x3e>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a34:	23ff      	movs	r3, #255	; 0xff
 8014a36:	617b      	str	r3, [r7, #20]
 8014a38:	e001      	b.n	8014a3e <_tx_block_pool_performance_system_info_get+0x42>
    }
    else
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a3a:	23ff      	movs	r3, #255	; 0xff
 8014a3c:	617b      	str	r3, [r7, #20]
    }
    
    /* Return completion status.  */
    return(status);
 8014a3e:	697b      	ldr	r3, [r7, #20]
#endif
}
 8014a40:	4618      	mov	r0, r3
 8014a42:	371c      	adds	r7, #28
 8014a44:	46bd      	mov	sp, r7
 8014a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4a:	4770      	bx	lr

08014a4c <_tx_byte_pool_performance_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_performance_info_get(TX_BYTE_POOL *pool_ptr, ULONG *allocates, ULONG *releases,
                    ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 8014a4c:	b480      	push	{r7}
 8014a4e:	b087      	sub	sp, #28
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	60f8      	str	r0, [r7, #12]
 8014a54:	60b9      	str	r1, [r7, #8]
 8014a56:	607a      	str	r2, [r7, #4]
 8014a58:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (pool_ptr != TX_NULL)
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d002      	beq.n	8014a66 <_tx_byte_pool_performance_info_get+0x1a>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a60:	23ff      	movs	r3, #255	; 0xff
 8014a62:	617b      	str	r3, [r7, #20]
 8014a64:	e02b      	b.n	8014abe <_tx_byte_pool_performance_info_get+0x72>
    }
    else if (allocates != TX_NULL)
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d002      	beq.n	8014a72 <_tx_byte_pool_performance_info_get+0x26>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a6c:	23ff      	movs	r3, #255	; 0xff
 8014a6e:	617b      	str	r3, [r7, #20]
 8014a70:	e025      	b.n	8014abe <_tx_byte_pool_performance_info_get+0x72>
    }
    else if (releases != TX_NULL)
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d002      	beq.n	8014a7e <_tx_byte_pool_performance_info_get+0x32>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a78:	23ff      	movs	r3, #255	; 0xff
 8014a7a:	617b      	str	r3, [r7, #20]
 8014a7c:	e01f      	b.n	8014abe <_tx_byte_pool_performance_info_get+0x72>
    }
    else if (fragments_searched != TX_NULL)
 8014a7e:	683b      	ldr	r3, [r7, #0]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d002      	beq.n	8014a8a <_tx_byte_pool_performance_info_get+0x3e>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a84:	23ff      	movs	r3, #255	; 0xff
 8014a86:	617b      	str	r3, [r7, #20]
 8014a88:	e019      	b.n	8014abe <_tx_byte_pool_performance_info_get+0x72>
    }
    else if (merges != TX_NULL)
 8014a8a:	6a3b      	ldr	r3, [r7, #32]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d002      	beq.n	8014a96 <_tx_byte_pool_performance_info_get+0x4a>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a90:	23ff      	movs	r3, #255	; 0xff
 8014a92:	617b      	str	r3, [r7, #20]
 8014a94:	e013      	b.n	8014abe <_tx_byte_pool_performance_info_get+0x72>
    }
    else if (splits != TX_NULL)
 8014a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d002      	beq.n	8014aa2 <_tx_byte_pool_performance_info_get+0x56>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014a9c:	23ff      	movs	r3, #255	; 0xff
 8014a9e:	617b      	str	r3, [r7, #20]
 8014aa0:	e00d      	b.n	8014abe <_tx_byte_pool_performance_info_get+0x72>
    }
    else if (suspensions != TX_NULL)
 8014aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d002      	beq.n	8014aae <_tx_byte_pool_performance_info_get+0x62>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014aa8:	23ff      	movs	r3, #255	; 0xff
 8014aaa:	617b      	str	r3, [r7, #20]
 8014aac:	e007      	b.n	8014abe <_tx_byte_pool_performance_info_get+0x72>
    }
    else if (timeouts != TX_NULL)
 8014aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d002      	beq.n	8014aba <_tx_byte_pool_performance_info_get+0x6e>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014ab4:	23ff      	movs	r3, #255	; 0xff
 8014ab6:	617b      	str	r3, [r7, #20]
 8014ab8:	e001      	b.n	8014abe <_tx_byte_pool_performance_info_get+0x72>
    }
    else
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014aba:	23ff      	movs	r3, #255	; 0xff
 8014abc:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014abe:	697b      	ldr	r3, [r7, #20]
#endif
}
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	371c      	adds	r7, #28
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aca:	4770      	bx	lr

08014acc <_tx_byte_pool_performance_system_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_performance_system_info_get(ULONG *allocates, ULONG *releases,
                    ULONG *fragments_searched, ULONG *merges, ULONG *splits, ULONG *suspensions, ULONG *timeouts)
{
 8014acc:	b480      	push	{r7}
 8014ace:	b087      	sub	sp, #28
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	60f8      	str	r0, [r7, #12]
 8014ad4:	60b9      	str	r1, [r7, #8]
 8014ad6:	607a      	str	r2, [r7, #4]
 8014ad8:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (allocates != TX_NULL)
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d002      	beq.n	8014ae6 <_tx_byte_pool_performance_system_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014ae0:	23ff      	movs	r3, #255	; 0xff
 8014ae2:	617b      	str	r3, [r7, #20]
 8014ae4:	e025      	b.n	8014b32 <_tx_byte_pool_performance_system_info_get+0x66>
    }
    else if (releases != TX_NULL)
 8014ae6:	68bb      	ldr	r3, [r7, #8]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d002      	beq.n	8014af2 <_tx_byte_pool_performance_system_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014aec:	23ff      	movs	r3, #255	; 0xff
 8014aee:	617b      	str	r3, [r7, #20]
 8014af0:	e01f      	b.n	8014b32 <_tx_byte_pool_performance_system_info_get+0x66>
    }
    else if (fragments_searched != TX_NULL)
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d002      	beq.n	8014afe <_tx_byte_pool_performance_system_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014af8:	23ff      	movs	r3, #255	; 0xff
 8014afa:	617b      	str	r3, [r7, #20]
 8014afc:	e019      	b.n	8014b32 <_tx_byte_pool_performance_system_info_get+0x66>
    }
    else if (merges != TX_NULL)
 8014afe:	683b      	ldr	r3, [r7, #0]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d002      	beq.n	8014b0a <_tx_byte_pool_performance_system_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b04:	23ff      	movs	r3, #255	; 0xff
 8014b06:	617b      	str	r3, [r7, #20]
 8014b08:	e013      	b.n	8014b32 <_tx_byte_pool_performance_system_info_get+0x66>
    }
    else if (splits != TX_NULL)
 8014b0a:	6a3b      	ldr	r3, [r7, #32]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d002      	beq.n	8014b16 <_tx_byte_pool_performance_system_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b10:	23ff      	movs	r3, #255	; 0xff
 8014b12:	617b      	str	r3, [r7, #20]
 8014b14:	e00d      	b.n	8014b32 <_tx_byte_pool_performance_system_info_get+0x66>
    }
    else if (suspensions != TX_NULL)
 8014b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d002      	beq.n	8014b22 <_tx_byte_pool_performance_system_info_get+0x56>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b1c:	23ff      	movs	r3, #255	; 0xff
 8014b1e:	617b      	str	r3, [r7, #20]
 8014b20:	e007      	b.n	8014b32 <_tx_byte_pool_performance_system_info_get+0x66>
    }
    else if (timeouts != TX_NULL)
 8014b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d002      	beq.n	8014b2e <_tx_byte_pool_performance_system_info_get+0x62>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b28:	23ff      	movs	r3, #255	; 0xff
 8014b2a:	617b      	str	r3, [r7, #20]
 8014b2c:	e001      	b.n	8014b32 <_tx_byte_pool_performance_system_info_get+0x66>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b2e:	23ff      	movs	r3, #255	; 0xff
 8014b30:	617b      	str	r3, [r7, #20]
    }
    
    /* Return completion status.  */
    return(status);
 8014b32:	697b      	ldr	r3, [r7, #20]
#endif
}
 8014b34:	4618      	mov	r0, r3
 8014b36:	371c      	adds	r7, #28
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3e:	4770      	bx	lr

08014b40 <_tx_event_flags_performance_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_performance_info_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG *sets, ULONG *gets,
                    ULONG *suspensions, ULONG *timeouts)
{
 8014b40:	b480      	push	{r7}
 8014b42:	b087      	sub	sp, #28
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	60f8      	str	r0, [r7, #12]
 8014b48:	60b9      	str	r1, [r7, #8]
 8014b4a:	607a      	str	r2, [r7, #4]
 8014b4c:	603b      	str	r3, [r7, #0]
#else
UINT                    status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (group_ptr != TX_NULL)
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d002      	beq.n	8014b5a <_tx_event_flags_performance_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b54:	23ff      	movs	r3, #255	; 0xff
 8014b56:	617b      	str	r3, [r7, #20]
 8014b58:	e019      	b.n	8014b8e <_tx_event_flags_performance_info_get+0x4e>
    }
    else if (sets != TX_NULL)
 8014b5a:	68bb      	ldr	r3, [r7, #8]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d002      	beq.n	8014b66 <_tx_event_flags_performance_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b60:	23ff      	movs	r3, #255	; 0xff
 8014b62:	617b      	str	r3, [r7, #20]
 8014b64:	e013      	b.n	8014b8e <_tx_event_flags_performance_info_get+0x4e>
    }
    else if (gets != TX_NULL)
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d002      	beq.n	8014b72 <_tx_event_flags_performance_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b6c:	23ff      	movs	r3, #255	; 0xff
 8014b6e:	617b      	str	r3, [r7, #20]
 8014b70:	e00d      	b.n	8014b8e <_tx_event_flags_performance_info_get+0x4e>
    }
    else if (suspensions != TX_NULL)
 8014b72:	683b      	ldr	r3, [r7, #0]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d002      	beq.n	8014b7e <_tx_event_flags_performance_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b78:	23ff      	movs	r3, #255	; 0xff
 8014b7a:	617b      	str	r3, [r7, #20]
 8014b7c:	e007      	b.n	8014b8e <_tx_event_flags_performance_info_get+0x4e>
    }
    else if (timeouts != TX_NULL)
 8014b7e:	6a3b      	ldr	r3, [r7, #32]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d002      	beq.n	8014b8a <_tx_event_flags_performance_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b84:	23ff      	movs	r3, #255	; 0xff
 8014b86:	617b      	str	r3, [r7, #20]
 8014b88:	e001      	b.n	8014b8e <_tx_event_flags_performance_info_get+0x4e>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014b8a:	23ff      	movs	r3, #255	; 0xff
 8014b8c:	617b      	str	r3, [r7, #20]
    }
#endif

    /* Return completion status.  */
    return(status);
 8014b8e:	697b      	ldr	r3, [r7, #20]
}
 8014b90:	4618      	mov	r0, r3
 8014b92:	371c      	adds	r7, #28
 8014b94:	46bd      	mov	sp, r7
 8014b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9a:	4770      	bx	lr

08014b9c <_tx_event_flags_performance_system_info_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_performance_system_info_get(ULONG *sets, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8014b9c:	b480      	push	{r7}
 8014b9e:	b087      	sub	sp, #28
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	60f8      	str	r0, [r7, #12]
 8014ba4:	60b9      	str	r1, [r7, #8]
 8014ba6:	607a      	str	r2, [r7, #4]
 8014ba8:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (sets != TX_NULL)
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d002      	beq.n	8014bb6 <_tx_event_flags_performance_system_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014bb0:	23ff      	movs	r3, #255	; 0xff
 8014bb2:	617b      	str	r3, [r7, #20]
 8014bb4:	e013      	b.n	8014bde <_tx_event_flags_performance_system_info_get+0x42>
    }
    else if (gets != TX_NULL)
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d002      	beq.n	8014bc2 <_tx_event_flags_performance_system_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014bbc:	23ff      	movs	r3, #255	; 0xff
 8014bbe:	617b      	str	r3, [r7, #20]
 8014bc0:	e00d      	b.n	8014bde <_tx_event_flags_performance_system_info_get+0x42>
    }
    else if (suspensions != TX_NULL)
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d002      	beq.n	8014bce <_tx_event_flags_performance_system_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014bc8:	23ff      	movs	r3, #255	; 0xff
 8014bca:	617b      	str	r3, [r7, #20]
 8014bcc:	e007      	b.n	8014bde <_tx_event_flags_performance_system_info_get+0x42>
    }
    else if (timeouts != TX_NULL)
 8014bce:	683b      	ldr	r3, [r7, #0]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d002      	beq.n	8014bda <_tx_event_flags_performance_system_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014bd4:	23ff      	movs	r3, #255	; 0xff
 8014bd6:	617b      	str	r3, [r7, #20]
 8014bd8:	e001      	b.n	8014bde <_tx_event_flags_performance_system_info_get+0x42>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014bda:	23ff      	movs	r3, #255	; 0xff
 8014bdc:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014bde:	697b      	ldr	r3, [r7, #20]
#endif
}
 8014be0:	4618      	mov	r0, r3
 8014be2:	371c      	adds	r7, #28
 8014be4:	46bd      	mov	sp, r7
 8014be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bea:	4770      	bx	lr

08014bec <_tx_mutex_performance_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_performance_info_get(TX_MUTEX *mutex_ptr, ULONG *puts, ULONG *gets,
                    ULONG *suspensions, ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 8014bec:	b480      	push	{r7}
 8014bee:	b087      	sub	sp, #28
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	60f8      	str	r0, [r7, #12]
 8014bf4:	60b9      	str	r1, [r7, #8]
 8014bf6:	607a      	str	r2, [r7, #4]
 8014bf8:	603b      	str	r3, [r7, #0]
#else
UINT                    status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (mutex_ptr != TX_NULL)
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d002      	beq.n	8014c06 <_tx_mutex_performance_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014c00:	23ff      	movs	r3, #255	; 0xff
 8014c02:	617b      	str	r3, [r7, #20]
 8014c04:	e025      	b.n	8014c52 <_tx_mutex_performance_info_get+0x66>
    }
    else if (puts != TX_NULL)
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d002      	beq.n	8014c12 <_tx_mutex_performance_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014c0c:	23ff      	movs	r3, #255	; 0xff
 8014c0e:	617b      	str	r3, [r7, #20]
 8014c10:	e01f      	b.n	8014c52 <_tx_mutex_performance_info_get+0x66>
    }
    else if (gets != TX_NULL)
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d002      	beq.n	8014c1e <_tx_mutex_performance_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014c18:	23ff      	movs	r3, #255	; 0xff
 8014c1a:	617b      	str	r3, [r7, #20]
 8014c1c:	e019      	b.n	8014c52 <_tx_mutex_performance_info_get+0x66>
    }
    else if (suspensions != TX_NULL)
 8014c1e:	683b      	ldr	r3, [r7, #0]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d002      	beq.n	8014c2a <_tx_mutex_performance_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014c24:	23ff      	movs	r3, #255	; 0xff
 8014c26:	617b      	str	r3, [r7, #20]
 8014c28:	e013      	b.n	8014c52 <_tx_mutex_performance_info_get+0x66>
    }
    else if (timeouts != TX_NULL)
 8014c2a:	6a3b      	ldr	r3, [r7, #32]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d002      	beq.n	8014c36 <_tx_mutex_performance_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014c30:	23ff      	movs	r3, #255	; 0xff
 8014c32:	617b      	str	r3, [r7, #20]
 8014c34:	e00d      	b.n	8014c52 <_tx_mutex_performance_info_get+0x66>
    }
    else if (inversions != TX_NULL)
 8014c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d002      	beq.n	8014c42 <_tx_mutex_performance_info_get+0x56>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014c3c:	23ff      	movs	r3, #255	; 0xff
 8014c3e:	617b      	str	r3, [r7, #20]
 8014c40:	e007      	b.n	8014c52 <_tx_mutex_performance_info_get+0x66>
    }
    else if (inheritances != TX_NULL)
 8014c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d002      	beq.n	8014c4e <_tx_mutex_performance_info_get+0x62>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014c48:	23ff      	movs	r3, #255	; 0xff
 8014c4a:	617b      	str	r3, [r7, #20]
 8014c4c:	e001      	b.n	8014c52 <_tx_mutex_performance_info_get+0x66>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014c4e:	23ff      	movs	r3, #255	; 0xff
 8014c50:	617b      	str	r3, [r7, #20]
    }
#endif
    
    /* Return completion status.  */
    return(status);
 8014c52:	697b      	ldr	r3, [r7, #20]
}
 8014c54:	4618      	mov	r0, r3
 8014c56:	371c      	adds	r7, #28
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5e:	4770      	bx	lr

08014c60 <_tx_mutex_performance_system_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions, 
                                ULONG *timeouts, ULONG *inversions, ULONG *inheritances)
{
 8014c60:	b480      	push	{r7}
 8014c62:	b087      	sub	sp, #28
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	60f8      	str	r0, [r7, #12]
 8014c68:	60b9      	str	r1, [r7, #8]
 8014c6a:	607a      	str	r2, [r7, #4]
 8014c6c:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (puts != TX_NULL)
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d002      	beq.n	8014c7a <_tx_mutex_performance_system_info_get+0x1a>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014c74:	23ff      	movs	r3, #255	; 0xff
 8014c76:	617b      	str	r3, [r7, #20]
 8014c78:	e01f      	b.n	8014cba <_tx_mutex_performance_system_info_get+0x5a>
    }
    else if (gets != TX_NULL)
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d002      	beq.n	8014c86 <_tx_mutex_performance_system_info_get+0x26>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014c80:	23ff      	movs	r3, #255	; 0xff
 8014c82:	617b      	str	r3, [r7, #20]
 8014c84:	e019      	b.n	8014cba <_tx_mutex_performance_system_info_get+0x5a>
    }
    else if (suspensions != TX_NULL)
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d002      	beq.n	8014c92 <_tx_mutex_performance_system_info_get+0x32>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014c8c:	23ff      	movs	r3, #255	; 0xff
 8014c8e:	617b      	str	r3, [r7, #20]
 8014c90:	e013      	b.n	8014cba <_tx_mutex_performance_system_info_get+0x5a>
    }
    else if (timeouts != TX_NULL)
 8014c92:	683b      	ldr	r3, [r7, #0]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d002      	beq.n	8014c9e <_tx_mutex_performance_system_info_get+0x3e>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014c98:	23ff      	movs	r3, #255	; 0xff
 8014c9a:	617b      	str	r3, [r7, #20]
 8014c9c:	e00d      	b.n	8014cba <_tx_mutex_performance_system_info_get+0x5a>
    }
    else if (inversions != TX_NULL)
 8014c9e:	6a3b      	ldr	r3, [r7, #32]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d002      	beq.n	8014caa <_tx_mutex_performance_system_info_get+0x4a>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014ca4:	23ff      	movs	r3, #255	; 0xff
 8014ca6:	617b      	str	r3, [r7, #20]
 8014ca8:	e007      	b.n	8014cba <_tx_mutex_performance_system_info_get+0x5a>
    }
    else if (inheritances != TX_NULL)
 8014caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d002      	beq.n	8014cb6 <_tx_mutex_performance_system_info_get+0x56>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014cb0:	23ff      	movs	r3, #255	; 0xff
 8014cb2:	617b      	str	r3, [r7, #20]
 8014cb4:	e001      	b.n	8014cba <_tx_mutex_performance_system_info_get+0x5a>
    }
    else
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014cb6:	23ff      	movs	r3, #255	; 0xff
 8014cb8:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014cba:	697b      	ldr	r3, [r7, #20]
#endif
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	371c      	adds	r7, #28
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc6:	4770      	bx	lr

08014cc8 <_tx_queue_performance_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_performance_info_get(TX_QUEUE *queue_ptr, ULONG *messages_sent, ULONG *messages_received,
                    ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 8014cc8:	b480      	push	{r7}
 8014cca:	b087      	sub	sp, #28
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	60f8      	str	r0, [r7, #12]
 8014cd0:	60b9      	str	r1, [r7, #8]
 8014cd2:	607a      	str	r2, [r7, #4]
 8014cd4:	603b      	str	r3, [r7, #0]
#else
UINT                    status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (queue_ptr != TX_NULL)
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d002      	beq.n	8014ce2 <_tx_queue_performance_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014cdc:	23ff      	movs	r3, #255	; 0xff
 8014cde:	617b      	str	r3, [r7, #20]
 8014ce0:	e025      	b.n	8014d2e <_tx_queue_performance_info_get+0x66>
    }
    else if (messages_sent != TX_NULL)
 8014ce2:	68bb      	ldr	r3, [r7, #8]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d002      	beq.n	8014cee <_tx_queue_performance_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014ce8:	23ff      	movs	r3, #255	; 0xff
 8014cea:	617b      	str	r3, [r7, #20]
 8014cec:	e01f      	b.n	8014d2e <_tx_queue_performance_info_get+0x66>
    }
    else if (messages_received != TX_NULL)
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d002      	beq.n	8014cfa <_tx_queue_performance_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014cf4:	23ff      	movs	r3, #255	; 0xff
 8014cf6:	617b      	str	r3, [r7, #20]
 8014cf8:	e019      	b.n	8014d2e <_tx_queue_performance_info_get+0x66>
    }
    else if (empty_suspensions != TX_NULL)
 8014cfa:	683b      	ldr	r3, [r7, #0]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d002      	beq.n	8014d06 <_tx_queue_performance_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014d00:	23ff      	movs	r3, #255	; 0xff
 8014d02:	617b      	str	r3, [r7, #20]
 8014d04:	e013      	b.n	8014d2e <_tx_queue_performance_info_get+0x66>
    }
    else if (full_suspensions != TX_NULL)
 8014d06:	6a3b      	ldr	r3, [r7, #32]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d002      	beq.n	8014d12 <_tx_queue_performance_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014d0c:	23ff      	movs	r3, #255	; 0xff
 8014d0e:	617b      	str	r3, [r7, #20]
 8014d10:	e00d      	b.n	8014d2e <_tx_queue_performance_info_get+0x66>
    }
    else if (full_errors != TX_NULL)
 8014d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d002      	beq.n	8014d1e <_tx_queue_performance_info_get+0x56>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014d18:	23ff      	movs	r3, #255	; 0xff
 8014d1a:	617b      	str	r3, [r7, #20]
 8014d1c:	e007      	b.n	8014d2e <_tx_queue_performance_info_get+0x66>
    }
    else if (timeouts != TX_NULL)
 8014d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d002      	beq.n	8014d2a <_tx_queue_performance_info_get+0x62>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014d24:	23ff      	movs	r3, #255	; 0xff
 8014d26:	617b      	str	r3, [r7, #20]
 8014d28:	e001      	b.n	8014d2e <_tx_queue_performance_info_get+0x66>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014d2a:	23ff      	movs	r3, #255	; 0xff
 8014d2c:	617b      	str	r3, [r7, #20]
    }
#endif

    /* Return completion status.  */
    return(status);
 8014d2e:	697b      	ldr	r3, [r7, #20]
}
 8014d30:	4618      	mov	r0, r3
 8014d32:	371c      	adds	r7, #28
 8014d34:	46bd      	mov	sp, r7
 8014d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3a:	4770      	bx	lr

08014d3c <_tx_queue_performance_system_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_performance_system_info_get(ULONG *messages_sent, ULONG *messages_received,
                    ULONG *empty_suspensions, ULONG *full_suspensions, ULONG *full_errors, ULONG *timeouts)
{
 8014d3c:	b480      	push	{r7}
 8014d3e:	b087      	sub	sp, #28
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	60f8      	str	r0, [r7, #12]
 8014d44:	60b9      	str	r1, [r7, #8]
 8014d46:	607a      	str	r2, [r7, #4]
 8014d48:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (messages_sent != TX_NULL)
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d002      	beq.n	8014d56 <_tx_queue_performance_system_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014d50:	23ff      	movs	r3, #255	; 0xff
 8014d52:	617b      	str	r3, [r7, #20]
 8014d54:	e01f      	b.n	8014d96 <_tx_queue_performance_system_info_get+0x5a>
    }
    else if (messages_received != TX_NULL)
 8014d56:	68bb      	ldr	r3, [r7, #8]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d002      	beq.n	8014d62 <_tx_queue_performance_system_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014d5c:	23ff      	movs	r3, #255	; 0xff
 8014d5e:	617b      	str	r3, [r7, #20]
 8014d60:	e019      	b.n	8014d96 <_tx_queue_performance_system_info_get+0x5a>
    }
    else if (empty_suspensions != TX_NULL)
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d002      	beq.n	8014d6e <_tx_queue_performance_system_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014d68:	23ff      	movs	r3, #255	; 0xff
 8014d6a:	617b      	str	r3, [r7, #20]
 8014d6c:	e013      	b.n	8014d96 <_tx_queue_performance_system_info_get+0x5a>
    }
    else if (full_suspensions != TX_NULL)
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d002      	beq.n	8014d7a <_tx_queue_performance_system_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014d74:	23ff      	movs	r3, #255	; 0xff
 8014d76:	617b      	str	r3, [r7, #20]
 8014d78:	e00d      	b.n	8014d96 <_tx_queue_performance_system_info_get+0x5a>
    }
    else if (full_errors != TX_NULL)
 8014d7a:	6a3b      	ldr	r3, [r7, #32]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d002      	beq.n	8014d86 <_tx_queue_performance_system_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014d80:	23ff      	movs	r3, #255	; 0xff
 8014d82:	617b      	str	r3, [r7, #20]
 8014d84:	e007      	b.n	8014d96 <_tx_queue_performance_system_info_get+0x5a>
    }
    else if (timeouts != TX_NULL)
 8014d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d002      	beq.n	8014d92 <_tx_queue_performance_system_info_get+0x56>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014d8c:	23ff      	movs	r3, #255	; 0xff
 8014d8e:	617b      	str	r3, [r7, #20]
 8014d90:	e001      	b.n	8014d96 <_tx_queue_performance_system_info_get+0x5a>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014d92:	23ff      	movs	r3, #255	; 0xff
 8014d94:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014d96:	697b      	ldr	r3, [r7, #20]
#endif
}
 8014d98:	4618      	mov	r0, r3
 8014d9a:	371c      	adds	r7, #28
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da2:	4770      	bx	lr

08014da4 <_tx_semaphore_performance_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_performance_info_get(TX_SEMAPHORE *semaphore_ptr, ULONG *puts, ULONG *gets,
                    ULONG *suspensions, ULONG *timeouts)
{
 8014da4:	b480      	push	{r7}
 8014da6:	b087      	sub	sp, #28
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	60f8      	str	r0, [r7, #12]
 8014dac:	60b9      	str	r1, [r7, #8]
 8014dae:	607a      	str	r2, [r7, #4]
 8014db0:	603b      	str	r3, [r7, #0]
#else
UINT                    status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (semaphore_ptr != TX_NULL)
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d002      	beq.n	8014dbe <_tx_semaphore_performance_info_get+0x1a>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014db8:	23ff      	movs	r3, #255	; 0xff
 8014dba:	617b      	str	r3, [r7, #20]
 8014dbc:	e019      	b.n	8014df2 <_tx_semaphore_performance_info_get+0x4e>
    }
    else if (puts != TX_NULL)
 8014dbe:	68bb      	ldr	r3, [r7, #8]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d002      	beq.n	8014dca <_tx_semaphore_performance_info_get+0x26>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014dc4:	23ff      	movs	r3, #255	; 0xff
 8014dc6:	617b      	str	r3, [r7, #20]
 8014dc8:	e013      	b.n	8014df2 <_tx_semaphore_performance_info_get+0x4e>
    }
    else if (gets != TX_NULL)
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d002      	beq.n	8014dd6 <_tx_semaphore_performance_info_get+0x32>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014dd0:	23ff      	movs	r3, #255	; 0xff
 8014dd2:	617b      	str	r3, [r7, #20]
 8014dd4:	e00d      	b.n	8014df2 <_tx_semaphore_performance_info_get+0x4e>
    }
    else if (suspensions != TX_NULL)
 8014dd6:	683b      	ldr	r3, [r7, #0]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d002      	beq.n	8014de2 <_tx_semaphore_performance_info_get+0x3e>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014ddc:	23ff      	movs	r3, #255	; 0xff
 8014dde:	617b      	str	r3, [r7, #20]
 8014de0:	e007      	b.n	8014df2 <_tx_semaphore_performance_info_get+0x4e>
    }
    else if (timeouts != TX_NULL)
 8014de2:	6a3b      	ldr	r3, [r7, #32]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d002      	beq.n	8014dee <_tx_semaphore_performance_info_get+0x4a>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014de8:	23ff      	movs	r3, #255	; 0xff
 8014dea:	617b      	str	r3, [r7, #20]
 8014dec:	e001      	b.n	8014df2 <_tx_semaphore_performance_info_get+0x4e>
    }
    else
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014dee:	23ff      	movs	r3, #255	; 0xff
 8014df0:	617b      	str	r3, [r7, #20]
    }
#endif

    /* Return completion status.  */
    return(status);
 8014df2:	697b      	ldr	r3, [r7, #20]
}
 8014df4:	4618      	mov	r0, r3
 8014df6:	371c      	adds	r7, #28
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfe:	4770      	bx	lr

08014e00 <_tx_semaphore_performance_system_info_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_performance_system_info_get(ULONG *puts, ULONG *gets, ULONG *suspensions, ULONG *timeouts)
{
 8014e00:	b480      	push	{r7}
 8014e02:	b087      	sub	sp, #28
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	60f8      	str	r0, [r7, #12]
 8014e08:	60b9      	str	r1, [r7, #8]
 8014e0a:	607a      	str	r2, [r7, #4]
 8014e0c:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (puts != TX_NULL)
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d002      	beq.n	8014e1a <_tx_semaphore_performance_system_info_get+0x1a>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014e14:	23ff      	movs	r3, #255	; 0xff
 8014e16:	617b      	str	r3, [r7, #20]
 8014e18:	e013      	b.n	8014e42 <_tx_semaphore_performance_system_info_get+0x42>
    }
    else if (gets != TX_NULL)
 8014e1a:	68bb      	ldr	r3, [r7, #8]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d002      	beq.n	8014e26 <_tx_semaphore_performance_system_info_get+0x26>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014e20:	23ff      	movs	r3, #255	; 0xff
 8014e22:	617b      	str	r3, [r7, #20]
 8014e24:	e00d      	b.n	8014e42 <_tx_semaphore_performance_system_info_get+0x42>
    }
    else if (suspensions != TX_NULL)
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d002      	beq.n	8014e32 <_tx_semaphore_performance_system_info_get+0x32>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014e2c:	23ff      	movs	r3, #255	; 0xff
 8014e2e:	617b      	str	r3, [r7, #20]
 8014e30:	e007      	b.n	8014e42 <_tx_semaphore_performance_system_info_get+0x42>
    }
    else if (timeouts != TX_NULL)
 8014e32:	683b      	ldr	r3, [r7, #0]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d002      	beq.n	8014e3e <_tx_semaphore_performance_system_info_get+0x3e>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014e38:	23ff      	movs	r3, #255	; 0xff
 8014e3a:	617b      	str	r3, [r7, #20]
 8014e3c:	e001      	b.n	8014e42 <_tx_semaphore_performance_system_info_get+0x42>
    }
    else
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014e3e:	23ff      	movs	r3, #255	; 0xff
 8014e40:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014e42:	697b      	ldr	r3, [r7, #20]
#endif
}
 8014e44:	4618      	mov	r0, r3
 8014e46:	371c      	adds	r7, #28
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e4e:	4770      	bx	lr

08014e50 <_tx_thread_performance_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_performance_info_get(TX_THREAD *thread_ptr, ULONG *resumptions, ULONG *suspensions, 
                ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions,
                ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts, TX_THREAD **last_preempted_by)
{
 8014e50:	b480      	push	{r7}
 8014e52:	b087      	sub	sp, #28
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	60f8      	str	r0, [r7, #12]
 8014e58:	60b9      	str	r1, [r7, #8]
 8014e5a:	607a      	str	r2, [r7, #4]
 8014e5c:	603b      	str	r3, [r7, #0]
#else
UINT                    status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (thread_ptr != TX_NULL)
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d002      	beq.n	8014e6a <_tx_thread_performance_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014e64:	23ff      	movs	r3, #255	; 0xff
 8014e66:	617b      	str	r3, [r7, #20]
 8014e68:	e03d      	b.n	8014ee6 <_tx_thread_performance_info_get+0x96>
    }
    else if (resumptions != TX_NULL)
 8014e6a:	68bb      	ldr	r3, [r7, #8]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d002      	beq.n	8014e76 <_tx_thread_performance_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014e70:	23ff      	movs	r3, #255	; 0xff
 8014e72:	617b      	str	r3, [r7, #20]
 8014e74:	e037      	b.n	8014ee6 <_tx_thread_performance_info_get+0x96>
    }
    else if (suspensions != TX_NULL)
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d002      	beq.n	8014e82 <_tx_thread_performance_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014e7c:	23ff      	movs	r3, #255	; 0xff
 8014e7e:	617b      	str	r3, [r7, #20]
 8014e80:	e031      	b.n	8014ee6 <_tx_thread_performance_info_get+0x96>
    }
    else if (solicited_preemptions != TX_NULL)
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d002      	beq.n	8014e8e <_tx_thread_performance_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014e88:	23ff      	movs	r3, #255	; 0xff
 8014e8a:	617b      	str	r3, [r7, #20]
 8014e8c:	e02b      	b.n	8014ee6 <_tx_thread_performance_info_get+0x96>
    }
    else if (interrupt_preemptions != TX_NULL)
 8014e8e:	6a3b      	ldr	r3, [r7, #32]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d002      	beq.n	8014e9a <_tx_thread_performance_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014e94:	23ff      	movs	r3, #255	; 0xff
 8014e96:	617b      	str	r3, [r7, #20]
 8014e98:	e025      	b.n	8014ee6 <_tx_thread_performance_info_get+0x96>
    }
    else if (priority_inversions != TX_NULL)
 8014e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d002      	beq.n	8014ea6 <_tx_thread_performance_info_get+0x56>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014ea0:	23ff      	movs	r3, #255	; 0xff
 8014ea2:	617b      	str	r3, [r7, #20]
 8014ea4:	e01f      	b.n	8014ee6 <_tx_thread_performance_info_get+0x96>
    }
    else if (time_slices != TX_NULL)
 8014ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d002      	beq.n	8014eb2 <_tx_thread_performance_info_get+0x62>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014eac:	23ff      	movs	r3, #255	; 0xff
 8014eae:	617b      	str	r3, [r7, #20]
 8014eb0:	e019      	b.n	8014ee6 <_tx_thread_performance_info_get+0x96>
    }
    else if (relinquishes != TX_NULL)
 8014eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d002      	beq.n	8014ebe <_tx_thread_performance_info_get+0x6e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014eb8:	23ff      	movs	r3, #255	; 0xff
 8014eba:	617b      	str	r3, [r7, #20]
 8014ebc:	e013      	b.n	8014ee6 <_tx_thread_performance_info_get+0x96>
    }
    else if (timeouts != TX_NULL)
 8014ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d002      	beq.n	8014eca <_tx_thread_performance_info_get+0x7a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014ec4:	23ff      	movs	r3, #255	; 0xff
 8014ec6:	617b      	str	r3, [r7, #20]
 8014ec8:	e00d      	b.n	8014ee6 <_tx_thread_performance_info_get+0x96>
    }
    else if (wait_aborts != TX_NULL)
 8014eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d002      	beq.n	8014ed6 <_tx_thread_performance_info_get+0x86>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014ed0:	23ff      	movs	r3, #255	; 0xff
 8014ed2:	617b      	str	r3, [r7, #20]
 8014ed4:	e007      	b.n	8014ee6 <_tx_thread_performance_info_get+0x96>
    }
    else if (last_preempted_by != TX_NULL)
 8014ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d002      	beq.n	8014ee2 <_tx_thread_performance_info_get+0x92>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014edc:	23ff      	movs	r3, #255	; 0xff
 8014ede:	617b      	str	r3, [r7, #20]
 8014ee0:	e001      	b.n	8014ee6 <_tx_thread_performance_info_get+0x96>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014ee2:	23ff      	movs	r3, #255	; 0xff
 8014ee4:	617b      	str	r3, [r7, #20]
    }
#endif

    /* Return completion status.  */
    return(status);
 8014ee6:	697b      	ldr	r3, [r7, #20]
}
 8014ee8:	4618      	mov	r0, r3
 8014eea:	371c      	adds	r7, #28
 8014eec:	46bd      	mov	sp, r7
 8014eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef2:	4770      	bx	lr

08014ef4 <_tx_thread_performance_system_info_get>:
/**************************************************************************/
UINT  _tx_thread_performance_system_info_get(ULONG *resumptions, ULONG *suspensions,
                ULONG *solicited_preemptions, ULONG *interrupt_preemptions, ULONG *priority_inversions,
                ULONG *time_slices, ULONG *relinquishes, ULONG *timeouts, ULONG *wait_aborts,
                ULONG *non_idle_returns, ULONG *idle_returns)
{
 8014ef4:	b480      	push	{r7}
 8014ef6:	b087      	sub	sp, #28
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	60f8      	str	r0, [r7, #12]
 8014efc:	60b9      	str	r1, [r7, #8]
 8014efe:	607a      	str	r2, [r7, #4]
 8014f00:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (resumptions != TX_NULL)
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d002      	beq.n	8014f0e <_tx_thread_performance_system_info_get+0x1a>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014f08:	23ff      	movs	r3, #255	; 0xff
 8014f0a:	617b      	str	r3, [r7, #20]
 8014f0c:	e03d      	b.n	8014f8a <_tx_thread_performance_system_info_get+0x96>
    }
    else if (suspensions != TX_NULL)
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d002      	beq.n	8014f1a <_tx_thread_performance_system_info_get+0x26>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014f14:	23ff      	movs	r3, #255	; 0xff
 8014f16:	617b      	str	r3, [r7, #20]
 8014f18:	e037      	b.n	8014f8a <_tx_thread_performance_system_info_get+0x96>
    }
    else if (solicited_preemptions != TX_NULL)
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d002      	beq.n	8014f26 <_tx_thread_performance_system_info_get+0x32>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014f20:	23ff      	movs	r3, #255	; 0xff
 8014f22:	617b      	str	r3, [r7, #20]
 8014f24:	e031      	b.n	8014f8a <_tx_thread_performance_system_info_get+0x96>
    }
    else if (interrupt_preemptions != TX_NULL)
 8014f26:	683b      	ldr	r3, [r7, #0]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d002      	beq.n	8014f32 <_tx_thread_performance_system_info_get+0x3e>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014f2c:	23ff      	movs	r3, #255	; 0xff
 8014f2e:	617b      	str	r3, [r7, #20]
 8014f30:	e02b      	b.n	8014f8a <_tx_thread_performance_system_info_get+0x96>
    }
    else if (priority_inversions != TX_NULL)
 8014f32:	6a3b      	ldr	r3, [r7, #32]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d002      	beq.n	8014f3e <_tx_thread_performance_system_info_get+0x4a>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014f38:	23ff      	movs	r3, #255	; 0xff
 8014f3a:	617b      	str	r3, [r7, #20]
 8014f3c:	e025      	b.n	8014f8a <_tx_thread_performance_system_info_get+0x96>
    }
    else if (time_slices != TX_NULL)
 8014f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d002      	beq.n	8014f4a <_tx_thread_performance_system_info_get+0x56>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014f44:	23ff      	movs	r3, #255	; 0xff
 8014f46:	617b      	str	r3, [r7, #20]
 8014f48:	e01f      	b.n	8014f8a <_tx_thread_performance_system_info_get+0x96>
    }
    else if (relinquishes != TX_NULL)
 8014f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d002      	beq.n	8014f56 <_tx_thread_performance_system_info_get+0x62>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014f50:	23ff      	movs	r3, #255	; 0xff
 8014f52:	617b      	str	r3, [r7, #20]
 8014f54:	e019      	b.n	8014f8a <_tx_thread_performance_system_info_get+0x96>
    }
    else if (timeouts != TX_NULL)
 8014f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d002      	beq.n	8014f62 <_tx_thread_performance_system_info_get+0x6e>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014f5c:	23ff      	movs	r3, #255	; 0xff
 8014f5e:	617b      	str	r3, [r7, #20]
 8014f60:	e013      	b.n	8014f8a <_tx_thread_performance_system_info_get+0x96>
    }
    else if (wait_aborts != TX_NULL)
 8014f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d002      	beq.n	8014f6e <_tx_thread_performance_system_info_get+0x7a>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014f68:	23ff      	movs	r3, #255	; 0xff
 8014f6a:	617b      	str	r3, [r7, #20]
 8014f6c:	e00d      	b.n	8014f8a <_tx_thread_performance_system_info_get+0x96>
    }
    else if (non_idle_returns != TX_NULL)
 8014f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d002      	beq.n	8014f7a <_tx_thread_performance_system_info_get+0x86>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014f74:	23ff      	movs	r3, #255	; 0xff
 8014f76:	617b      	str	r3, [r7, #20]
 8014f78:	e007      	b.n	8014f8a <_tx_thread_performance_system_info_get+0x96>
    }
    else if (idle_returns != TX_NULL)
 8014f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d002      	beq.n	8014f86 <_tx_thread_performance_system_info_get+0x92>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014f80:	23ff      	movs	r3, #255	; 0xff
 8014f82:	617b      	str	r3, [r7, #20]
 8014f84:	e001      	b.n	8014f8a <_tx_thread_performance_system_info_get+0x96>
    }
    else
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014f86:	23ff      	movs	r3, #255	; 0xff
 8014f88:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8014f8a:	697b      	ldr	r3, [r7, #20]
#endif
}
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	371c      	adds	r7, #28
 8014f90:	46bd      	mov	sp, r7
 8014f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f96:	4770      	bx	lr

08014f98 <_tx_timer_performance_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_performance_info_get(TX_TIMER *timer_ptr, ULONG *activates, ULONG *reactivates,
                    ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 8014f98:	b480      	push	{r7}
 8014f9a:	b087      	sub	sp, #28
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	60f8      	str	r0, [r7, #12]
 8014fa0:	60b9      	str	r1, [r7, #8]
 8014fa2:	607a      	str	r2, [r7, #4]
 8014fa4:	603b      	str	r3, [r7, #0]
#else
UINT                    status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (timer_ptr != TX_NULL)
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d002      	beq.n	8014fb2 <_tx_timer_performance_info_get+0x1a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014fac:	23ff      	movs	r3, #255	; 0xff
 8014fae:	617b      	str	r3, [r7, #20]
 8014fb0:	e01f      	b.n	8014ff2 <_tx_timer_performance_info_get+0x5a>
    }
    else if (activates != TX_NULL)
 8014fb2:	68bb      	ldr	r3, [r7, #8]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d002      	beq.n	8014fbe <_tx_timer_performance_info_get+0x26>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014fb8:	23ff      	movs	r3, #255	; 0xff
 8014fba:	617b      	str	r3, [r7, #20]
 8014fbc:	e019      	b.n	8014ff2 <_tx_timer_performance_info_get+0x5a>
    }
    else if (reactivates != TX_NULL)
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d002      	beq.n	8014fca <_tx_timer_performance_info_get+0x32>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014fc4:	23ff      	movs	r3, #255	; 0xff
 8014fc6:	617b      	str	r3, [r7, #20]
 8014fc8:	e013      	b.n	8014ff2 <_tx_timer_performance_info_get+0x5a>
    }
    else if (deactivates != TX_NULL)
 8014fca:	683b      	ldr	r3, [r7, #0]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d002      	beq.n	8014fd6 <_tx_timer_performance_info_get+0x3e>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014fd0:	23ff      	movs	r3, #255	; 0xff
 8014fd2:	617b      	str	r3, [r7, #20]
 8014fd4:	e00d      	b.n	8014ff2 <_tx_timer_performance_info_get+0x5a>
    }
    else if (expirations != TX_NULL)
 8014fd6:	6a3b      	ldr	r3, [r7, #32]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d002      	beq.n	8014fe2 <_tx_timer_performance_info_get+0x4a>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014fdc:	23ff      	movs	r3, #255	; 0xff
 8014fde:	617b      	str	r3, [r7, #20]
 8014fe0:	e007      	b.n	8014ff2 <_tx_timer_performance_info_get+0x5a>
    }
    else if (expiration_adjusts != TX_NULL)
 8014fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d002      	beq.n	8014fee <_tx_timer_performance_info_get+0x56>
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014fe8:	23ff      	movs	r3, #255	; 0xff
 8014fea:	617b      	str	r3, [r7, #20]
 8014fec:	e001      	b.n	8014ff2 <_tx_timer_performance_info_get+0x5a>
    }
    else
    {

        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8014fee:	23ff      	movs	r3, #255	; 0xff
 8014ff0:	617b      	str	r3, [r7, #20]
    }
#endif

    /* Return completion status.  */
    return(status);
 8014ff2:	697b      	ldr	r3, [r7, #20]
}
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	371c      	adds	r7, #28
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffe:	4770      	bx	lr

08015000 <_tx_timer_performance_system_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_performance_system_info_get(ULONG *activates, ULONG *reactivates,
                    ULONG *deactivates, ULONG *expirations, ULONG *expiration_adjusts)
{
 8015000:	b480      	push	{r7}
 8015002:	b087      	sub	sp, #28
 8015004:	af00      	add	r7, sp, #0
 8015006:	60f8      	str	r0, [r7, #12]
 8015008:	60b9      	str	r1, [r7, #8]
 801500a:	607a      	str	r2, [r7, #4]
 801500c:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (activates != TX_NULL)
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d002      	beq.n	801501a <_tx_timer_performance_system_info_get+0x1a>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8015014:	23ff      	movs	r3, #255	; 0xff
 8015016:	617b      	str	r3, [r7, #20]
 8015018:	e019      	b.n	801504e <_tx_timer_performance_system_info_get+0x4e>
    }
    else if (reactivates != TX_NULL)
 801501a:	68bb      	ldr	r3, [r7, #8]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d002      	beq.n	8015026 <_tx_timer_performance_system_info_get+0x26>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8015020:	23ff      	movs	r3, #255	; 0xff
 8015022:	617b      	str	r3, [r7, #20]
 8015024:	e013      	b.n	801504e <_tx_timer_performance_system_info_get+0x4e>
    }
    else if (deactivates != TX_NULL)
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d002      	beq.n	8015032 <_tx_timer_performance_system_info_get+0x32>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801502c:	23ff      	movs	r3, #255	; 0xff
 801502e:	617b      	str	r3, [r7, #20]
 8015030:	e00d      	b.n	801504e <_tx_timer_performance_system_info_get+0x4e>
    }
    else if (expirations != TX_NULL)
 8015032:	683b      	ldr	r3, [r7, #0]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d002      	beq.n	801503e <_tx_timer_performance_system_info_get+0x3e>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8015038:	23ff      	movs	r3, #255	; 0xff
 801503a:	617b      	str	r3, [r7, #20]
 801503c:	e007      	b.n	801504e <_tx_timer_performance_system_info_get+0x4e>
    }
    else if (expiration_adjusts != TX_NULL)
 801503e:	6a3b      	ldr	r3, [r7, #32]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d002      	beq.n	801504a <_tx_timer_performance_system_info_get+0x4a>
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8015044:	23ff      	movs	r3, #255	; 0xff
 8015046:	617b      	str	r3, [r7, #20]
 8015048:	e001      	b.n	801504e <_tx_timer_performance_system_info_get+0x4e>
    }
    else
    {
    
        /* Not enabled, return error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801504a:	23ff      	movs	r3, #255	; 0xff
 801504c:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801504e:	697b      	ldr	r3, [r7, #20]
#endif
}
 8015050:	4618      	mov	r0, r3
 8015052:	371c      	adds	r7, #28
 8015054:	46bd      	mov	sp, r7
 8015056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505a:	4770      	bx	lr

0801505c <_tx_trace_buffer_full_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_buffer_full_notify(VOID (*full_buffer_callback)(VOID *buffer))
{
 801505c:	b480      	push	{r7}
 801505e:	b085      	sub	sp, #20
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (full_buffer_callback != TX_NULL)
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d002      	beq.n	8015070 <_tx_trace_buffer_full_notify+0x14>
    {
 
        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801506a:	23ff      	movs	r3, #255	; 0xff
 801506c:	60fb      	str	r3, [r7, #12]
 801506e:	e001      	b.n	8015074 <_tx_trace_buffer_full_notify+0x18>
    }
    else
    {
 
        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8015070:	23ff      	movs	r3, #255	; 0xff
 8015072:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8015074:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8015076:	4618      	mov	r0, r3
 8015078:	3714      	adds	r7, #20
 801507a:	46bd      	mov	sp, r7
 801507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015080:	4770      	bx	lr

08015082 <_tx_trace_disable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_disable(VOID)
{
 8015082:	b480      	push	{r7}
 8015084:	af00      	add	r7, sp, #0
    return(status);

#else

    /* Trace not enabled, return an error.  */
    return(TX_FEATURE_NOT_ENABLED);
 8015086:	23ff      	movs	r3, #255	; 0xff
#endif
}
 8015088:	4618      	mov	r0, r3
 801508a:	46bd      	mov	sp, r7
 801508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015090:	4770      	bx	lr

08015092 <_tx_trace_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_enable(VOID *trace_buffer_start, ULONG trace_buffer_size, ULONG registry_entries)
{
 8015092:	b480      	push	{r7}
 8015094:	b087      	sub	sp, #28
 8015096:	af00      	add	r7, sp, #0
 8015098:	60f8      	str	r0, [r7, #12]
 801509a:	60b9      	str	r1, [r7, #8]
 801509c:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (trace_buffer_start != TX_NULL)
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d002      	beq.n	80150aa <_tx_trace_enable+0x18>
    {
    
        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80150a4:	23ff      	movs	r3, #255	; 0xff
 80150a6:	617b      	str	r3, [r7, #20]
 80150a8:	e00d      	b.n	80150c6 <_tx_trace_enable+0x34>
    }
    else if (trace_buffer_size == ((ULONG) 0))
 80150aa:	68bb      	ldr	r3, [r7, #8]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d102      	bne.n	80150b6 <_tx_trace_enable+0x24>
    {
    
        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80150b0:	23ff      	movs	r3, #255	; 0xff
 80150b2:	617b      	str	r3, [r7, #20]
 80150b4:	e007      	b.n	80150c6 <_tx_trace_enable+0x34>
    }
    else if (registry_entries == ((ULONG) 0))
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d102      	bne.n	80150c2 <_tx_trace_enable+0x30>
    {
    
        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80150bc:	23ff      	movs	r3, #255	; 0xff
 80150be:	617b      	str	r3, [r7, #20]
 80150c0:	e001      	b.n	80150c6 <_tx_trace_enable+0x34>
    }
    else
    {
    
        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80150c2:	23ff      	movs	r3, #255	; 0xff
 80150c4:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80150c6:	697b      	ldr	r3, [r7, #20]
#endif
}
 80150c8:	4618      	mov	r0, r3
 80150ca:	371c      	adds	r7, #28
 80150cc:	46bd      	mov	sp, r7
 80150ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d2:	4770      	bx	lr

080150d4 <_tx_trace_event_filter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_event_filter(ULONG event_filter_bits)
{
 80150d4:	b480      	push	{r7}
 80150d6:	b085      	sub	sp, #20
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (event_filter_bits != ((ULONG) 0))
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d002      	beq.n	80150e8 <_tx_trace_event_filter+0x14>
    {
    
        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80150e2:	23ff      	movs	r3, #255	; 0xff
 80150e4:	60fb      	str	r3, [r7, #12]
 80150e6:	e001      	b.n	80150ec <_tx_trace_event_filter+0x18>
    }
    else
    {
    
        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80150e8:	23ff      	movs	r3, #255	; 0xff
 80150ea:	60fb      	str	r3, [r7, #12]
    }
    
    /* Return completion status.  */
    return(status);
 80150ec:	68fb      	ldr	r3, [r7, #12]
#endif
}
 80150ee:	4618      	mov	r0, r3
 80150f0:	3714      	adds	r7, #20
 80150f2:	46bd      	mov	sp, r7
 80150f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f8:	4770      	bx	lr

080150fa <_tx_trace_event_unfilter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_event_unfilter(ULONG event_unfilter_bits)
{
 80150fa:	b480      	push	{r7}
 80150fc:	b085      	sub	sp, #20
 80150fe:	af00      	add	r7, sp, #0
 8015100:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (event_unfilter_bits != ((ULONG) 0))
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d002      	beq.n	801510e <_tx_trace_event_unfilter+0x14>
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 8015108:	23ff      	movs	r3, #255	; 0xff
 801510a:	60fb      	str	r3, [r7, #12]
 801510c:	e001      	b.n	8015112 <_tx_trace_event_unfilter+0x18>
    }
    else
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 801510e:	23ff      	movs	r3, #255	; 0xff
 8015110:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8015112:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8015114:	4618      	mov	r0, r3
 8015116:	3714      	adds	r7, #20
 8015118:	46bd      	mov	sp, r7
 801511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511e:	4770      	bx	lr

08015120 <_tx_trace_interrupt_control>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_interrupt_control(UINT new_posture)
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b084      	sub	sp, #16
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
#else

UINT    saved_posture;

    /* Perform the interrupt service.  */
    saved_posture =  _tx_thread_interrupt_control(new_posture);
 8015128:	6878      	ldr	r0, [r7, #4]
 801512a:	f7eb f919 	bl	8000360 <_tx_thread_interrupt_control>
 801512e:	60f8      	str	r0, [r7, #12]

    /* Return saved posture.  */
    return(saved_posture);
 8015130:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8015132:	4618      	mov	r0, r3
 8015134:	3710      	adds	r7, #16
 8015136:	46bd      	mov	sp, r7
 8015138:	bd80      	pop	{r7, pc}

0801513a <_tx_trace_isr_enter_insert>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_isr_enter_insert(ULONG isr_id)
{
 801513a:	b480      	push	{r7}
 801513c:	b087      	sub	sp, #28
 801513e:	af00      	add	r7, sp, #0
 8015140:	6078      	str	r0, [r7, #4]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (isr_id != ((ULONG) 0))
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d00b      	beq.n	8015160 <_tx_trace_isr_enter_insert+0x26>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8015148:	f3ef 8310 	mrs	r3, PRIMASK
 801514c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801514e:	b672      	cpsid	i
    return(primask_value);
 8015150:	68fb      	ldr	r3, [r7, #12]
    {
        
        /* NOP code.  */
        TX_DISABLE
 8015152:	617b      	str	r3, [r7, #20]
 8015154:	697b      	ldr	r3, [r7, #20]
 8015156:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8015158:	693b      	ldr	r3, [r7, #16]
 801515a:	f383 8810 	msr	PRIMASK, r3
}
 801515e:	bf00      	nop
        TX_RESTORE
    }
#endif
}
 8015160:	bf00      	nop
 8015162:	371c      	adds	r7, #28
 8015164:	46bd      	mov	sp, r7
 8015166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516a:	4770      	bx	lr

0801516c <_tx_trace_isr_exit_insert>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_isr_exit_insert(ULONG isr_id)
{
 801516c:	b480      	push	{r7}
 801516e:	b087      	sub	sp, #28
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (isr_id != ((ULONG) 0))
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d00b      	beq.n	8015192 <_tx_trace_isr_exit_insert+0x26>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801517a:	f3ef 8310 	mrs	r3, PRIMASK
 801517e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8015180:	b672      	cpsid	i
    return(primask_value);
 8015182:	68fb      	ldr	r3, [r7, #12]
    {
        
        /* NOP code.  */
        TX_DISABLE
 8015184:	617b      	str	r3, [r7, #20]
 8015186:	697b      	ldr	r3, [r7, #20]
 8015188:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801518a:	693b      	ldr	r3, [r7, #16]
 801518c:	f383 8810 	msr	PRIMASK, r3
}
 8015190:	bf00      	nop
        TX_RESTORE
    }
#endif
}
 8015192:	bf00      	nop
 8015194:	371c      	adds	r7, #28
 8015196:	46bd      	mov	sp, r7
 8015198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519c:	4770      	bx	lr

0801519e <_tx_trace_user_event_insert>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_user_event_insert(ULONG event_id, ULONG info_field_1, ULONG info_field_2, ULONG info_field_3, ULONG info_field_4)
{
 801519e:	b480      	push	{r7}
 80151a0:	b087      	sub	sp, #28
 80151a2:	af00      	add	r7, sp, #0
 80151a4:	60f8      	str	r0, [r7, #12]
 80151a6:	60b9      	str	r1, [r7, #8]
 80151a8:	607a      	str	r2, [r7, #4]
 80151aa:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Access input arguments just for the sake of lint, MISRA, etc.  */
    if (event_id != ((ULONG) 0))
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d002      	beq.n	80151b8 <_tx_trace_user_event_insert+0x1a>
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80151b2:	23ff      	movs	r3, #255	; 0xff
 80151b4:	617b      	str	r3, [r7, #20]
 80151b6:	e019      	b.n	80151ec <_tx_trace_user_event_insert+0x4e>
    }
    else if (info_field_1 != ((ULONG) 0))
 80151b8:	68bb      	ldr	r3, [r7, #8]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d002      	beq.n	80151c4 <_tx_trace_user_event_insert+0x26>
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80151be:	23ff      	movs	r3, #255	; 0xff
 80151c0:	617b      	str	r3, [r7, #20]
 80151c2:	e013      	b.n	80151ec <_tx_trace_user_event_insert+0x4e>
    }
    else if (info_field_2 != ((ULONG) 0))
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d002      	beq.n	80151d0 <_tx_trace_user_event_insert+0x32>
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80151ca:	23ff      	movs	r3, #255	; 0xff
 80151cc:	617b      	str	r3, [r7, #20]
 80151ce:	e00d      	b.n	80151ec <_tx_trace_user_event_insert+0x4e>
    }
    else if (info_field_3 != ((ULONG) 0))
 80151d0:	683b      	ldr	r3, [r7, #0]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d002      	beq.n	80151dc <_tx_trace_user_event_insert+0x3e>
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80151d6:	23ff      	movs	r3, #255	; 0xff
 80151d8:	617b      	str	r3, [r7, #20]
 80151da:	e007      	b.n	80151ec <_tx_trace_user_event_insert+0x4e>
    }
    else if (info_field_4 != ((ULONG) 0))
 80151dc:	6a3b      	ldr	r3, [r7, #32]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d002      	beq.n	80151e8 <_tx_trace_user_event_insert+0x4a>
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80151e2:	23ff      	movs	r3, #255	; 0xff
 80151e4:	617b      	str	r3, [r7, #20]
 80151e6:	e001      	b.n	80151ec <_tx_trace_user_event_insert+0x4e>
    }
    else
    {

        /* Trace not enabled, return an error.  */
        status =  TX_FEATURE_NOT_ENABLED;
 80151e8:	23ff      	movs	r3, #255	; 0xff
 80151ea:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80151ec:	697b      	ldr	r3, [r7, #20]
#endif
}
 80151ee:	4618      	mov	r0, r3
 80151f0:	371c      	adds	r7, #28
 80151f2:	46bd      	mov	sp, r7
 80151f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f8:	4770      	bx	lr
	...

080151fc <__errno>:
 80151fc:	4b01      	ldr	r3, [pc, #4]	; (8015204 <__errno+0x8>)
 80151fe:	6818      	ldr	r0, [r3, #0]
 8015200:	4770      	bx	lr
 8015202:	bf00      	nop
 8015204:	24000024 	.word	0x24000024

08015208 <__libc_init_array>:
 8015208:	b570      	push	{r4, r5, r6, lr}
 801520a:	4d0d      	ldr	r5, [pc, #52]	; (8015240 <__libc_init_array+0x38>)
 801520c:	4c0d      	ldr	r4, [pc, #52]	; (8015244 <__libc_init_array+0x3c>)
 801520e:	1b64      	subs	r4, r4, r5
 8015210:	10a4      	asrs	r4, r4, #2
 8015212:	2600      	movs	r6, #0
 8015214:	42a6      	cmp	r6, r4
 8015216:	d109      	bne.n	801522c <__libc_init_array+0x24>
 8015218:	4d0b      	ldr	r5, [pc, #44]	; (8015248 <__libc_init_array+0x40>)
 801521a:	4c0c      	ldr	r4, [pc, #48]	; (801524c <__libc_init_array+0x44>)
 801521c:	f001 f832 	bl	8016284 <_init>
 8015220:	1b64      	subs	r4, r4, r5
 8015222:	10a4      	asrs	r4, r4, #2
 8015224:	2600      	movs	r6, #0
 8015226:	42a6      	cmp	r6, r4
 8015228:	d105      	bne.n	8015236 <__libc_init_array+0x2e>
 801522a:	bd70      	pop	{r4, r5, r6, pc}
 801522c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015230:	4798      	blx	r3
 8015232:	3601      	adds	r6, #1
 8015234:	e7ee      	b.n	8015214 <__libc_init_array+0xc>
 8015236:	f855 3b04 	ldr.w	r3, [r5], #4
 801523a:	4798      	blx	r3
 801523c:	3601      	adds	r6, #1
 801523e:	e7f2      	b.n	8015226 <__libc_init_array+0x1e>
 8015240:	08016724 	.word	0x08016724
 8015244:	08016724 	.word	0x08016724
 8015248:	08016724 	.word	0x08016724
 801524c:	08016728 	.word	0x08016728

08015250 <memcpy>:
 8015250:	440a      	add	r2, r1
 8015252:	4291      	cmp	r1, r2
 8015254:	f100 33ff 	add.w	r3, r0, #4294967295
 8015258:	d100      	bne.n	801525c <memcpy+0xc>
 801525a:	4770      	bx	lr
 801525c:	b510      	push	{r4, lr}
 801525e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015262:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015266:	4291      	cmp	r1, r2
 8015268:	d1f9      	bne.n	801525e <memcpy+0xe>
 801526a:	bd10      	pop	{r4, pc}

0801526c <memset>:
 801526c:	4402      	add	r2, r0
 801526e:	4603      	mov	r3, r0
 8015270:	4293      	cmp	r3, r2
 8015272:	d100      	bne.n	8015276 <memset+0xa>
 8015274:	4770      	bx	lr
 8015276:	f803 1b01 	strb.w	r1, [r3], #1
 801527a:	e7f9      	b.n	8015270 <memset+0x4>

0801527c <iprintf>:
 801527c:	b40f      	push	{r0, r1, r2, r3}
 801527e:	4b0a      	ldr	r3, [pc, #40]	; (80152a8 <iprintf+0x2c>)
 8015280:	b513      	push	{r0, r1, r4, lr}
 8015282:	681c      	ldr	r4, [r3, #0]
 8015284:	b124      	cbz	r4, 8015290 <iprintf+0x14>
 8015286:	69a3      	ldr	r3, [r4, #24]
 8015288:	b913      	cbnz	r3, 8015290 <iprintf+0x14>
 801528a:	4620      	mov	r0, r4
 801528c:	f000 fa5e 	bl	801574c <__sinit>
 8015290:	ab05      	add	r3, sp, #20
 8015292:	9a04      	ldr	r2, [sp, #16]
 8015294:	68a1      	ldr	r1, [r4, #8]
 8015296:	9301      	str	r3, [sp, #4]
 8015298:	4620      	mov	r0, r4
 801529a:	f000 fc67 	bl	8015b6c <_vfiprintf_r>
 801529e:	b002      	add	sp, #8
 80152a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152a4:	b004      	add	sp, #16
 80152a6:	4770      	bx	lr
 80152a8:	24000024 	.word	0x24000024

080152ac <_puts_r>:
 80152ac:	b570      	push	{r4, r5, r6, lr}
 80152ae:	460e      	mov	r6, r1
 80152b0:	4605      	mov	r5, r0
 80152b2:	b118      	cbz	r0, 80152bc <_puts_r+0x10>
 80152b4:	6983      	ldr	r3, [r0, #24]
 80152b6:	b90b      	cbnz	r3, 80152bc <_puts_r+0x10>
 80152b8:	f000 fa48 	bl	801574c <__sinit>
 80152bc:	69ab      	ldr	r3, [r5, #24]
 80152be:	68ac      	ldr	r4, [r5, #8]
 80152c0:	b913      	cbnz	r3, 80152c8 <_puts_r+0x1c>
 80152c2:	4628      	mov	r0, r5
 80152c4:	f000 fa42 	bl	801574c <__sinit>
 80152c8:	4b2c      	ldr	r3, [pc, #176]	; (801537c <_puts_r+0xd0>)
 80152ca:	429c      	cmp	r4, r3
 80152cc:	d120      	bne.n	8015310 <_puts_r+0x64>
 80152ce:	686c      	ldr	r4, [r5, #4]
 80152d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80152d2:	07db      	lsls	r3, r3, #31
 80152d4:	d405      	bmi.n	80152e2 <_puts_r+0x36>
 80152d6:	89a3      	ldrh	r3, [r4, #12]
 80152d8:	0598      	lsls	r0, r3, #22
 80152da:	d402      	bmi.n	80152e2 <_puts_r+0x36>
 80152dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80152de:	f000 fad3 	bl	8015888 <__retarget_lock_acquire_recursive>
 80152e2:	89a3      	ldrh	r3, [r4, #12]
 80152e4:	0719      	lsls	r1, r3, #28
 80152e6:	d51d      	bpl.n	8015324 <_puts_r+0x78>
 80152e8:	6923      	ldr	r3, [r4, #16]
 80152ea:	b1db      	cbz	r3, 8015324 <_puts_r+0x78>
 80152ec:	3e01      	subs	r6, #1
 80152ee:	68a3      	ldr	r3, [r4, #8]
 80152f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80152f4:	3b01      	subs	r3, #1
 80152f6:	60a3      	str	r3, [r4, #8]
 80152f8:	bb39      	cbnz	r1, 801534a <_puts_r+0x9e>
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	da38      	bge.n	8015370 <_puts_r+0xc4>
 80152fe:	4622      	mov	r2, r4
 8015300:	210a      	movs	r1, #10
 8015302:	4628      	mov	r0, r5
 8015304:	f000 f848 	bl	8015398 <__swbuf_r>
 8015308:	3001      	adds	r0, #1
 801530a:	d011      	beq.n	8015330 <_puts_r+0x84>
 801530c:	250a      	movs	r5, #10
 801530e:	e011      	b.n	8015334 <_puts_r+0x88>
 8015310:	4b1b      	ldr	r3, [pc, #108]	; (8015380 <_puts_r+0xd4>)
 8015312:	429c      	cmp	r4, r3
 8015314:	d101      	bne.n	801531a <_puts_r+0x6e>
 8015316:	68ac      	ldr	r4, [r5, #8]
 8015318:	e7da      	b.n	80152d0 <_puts_r+0x24>
 801531a:	4b1a      	ldr	r3, [pc, #104]	; (8015384 <_puts_r+0xd8>)
 801531c:	429c      	cmp	r4, r3
 801531e:	bf08      	it	eq
 8015320:	68ec      	ldreq	r4, [r5, #12]
 8015322:	e7d5      	b.n	80152d0 <_puts_r+0x24>
 8015324:	4621      	mov	r1, r4
 8015326:	4628      	mov	r0, r5
 8015328:	f000 f888 	bl	801543c <__swsetup_r>
 801532c:	2800      	cmp	r0, #0
 801532e:	d0dd      	beq.n	80152ec <_puts_r+0x40>
 8015330:	f04f 35ff 	mov.w	r5, #4294967295
 8015334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015336:	07da      	lsls	r2, r3, #31
 8015338:	d405      	bmi.n	8015346 <_puts_r+0x9a>
 801533a:	89a3      	ldrh	r3, [r4, #12]
 801533c:	059b      	lsls	r3, r3, #22
 801533e:	d402      	bmi.n	8015346 <_puts_r+0x9a>
 8015340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015342:	f000 faa2 	bl	801588a <__retarget_lock_release_recursive>
 8015346:	4628      	mov	r0, r5
 8015348:	bd70      	pop	{r4, r5, r6, pc}
 801534a:	2b00      	cmp	r3, #0
 801534c:	da04      	bge.n	8015358 <_puts_r+0xac>
 801534e:	69a2      	ldr	r2, [r4, #24]
 8015350:	429a      	cmp	r2, r3
 8015352:	dc06      	bgt.n	8015362 <_puts_r+0xb6>
 8015354:	290a      	cmp	r1, #10
 8015356:	d004      	beq.n	8015362 <_puts_r+0xb6>
 8015358:	6823      	ldr	r3, [r4, #0]
 801535a:	1c5a      	adds	r2, r3, #1
 801535c:	6022      	str	r2, [r4, #0]
 801535e:	7019      	strb	r1, [r3, #0]
 8015360:	e7c5      	b.n	80152ee <_puts_r+0x42>
 8015362:	4622      	mov	r2, r4
 8015364:	4628      	mov	r0, r5
 8015366:	f000 f817 	bl	8015398 <__swbuf_r>
 801536a:	3001      	adds	r0, #1
 801536c:	d1bf      	bne.n	80152ee <_puts_r+0x42>
 801536e:	e7df      	b.n	8015330 <_puts_r+0x84>
 8015370:	6823      	ldr	r3, [r4, #0]
 8015372:	250a      	movs	r5, #10
 8015374:	1c5a      	adds	r2, r3, #1
 8015376:	6022      	str	r2, [r4, #0]
 8015378:	701d      	strb	r5, [r3, #0]
 801537a:	e7db      	b.n	8015334 <_puts_r+0x88>
 801537c:	080166a8 	.word	0x080166a8
 8015380:	080166c8 	.word	0x080166c8
 8015384:	08016688 	.word	0x08016688

08015388 <puts>:
 8015388:	4b02      	ldr	r3, [pc, #8]	; (8015394 <puts+0xc>)
 801538a:	4601      	mov	r1, r0
 801538c:	6818      	ldr	r0, [r3, #0]
 801538e:	f7ff bf8d 	b.w	80152ac <_puts_r>
 8015392:	bf00      	nop
 8015394:	24000024 	.word	0x24000024

08015398 <__swbuf_r>:
 8015398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801539a:	460e      	mov	r6, r1
 801539c:	4614      	mov	r4, r2
 801539e:	4605      	mov	r5, r0
 80153a0:	b118      	cbz	r0, 80153aa <__swbuf_r+0x12>
 80153a2:	6983      	ldr	r3, [r0, #24]
 80153a4:	b90b      	cbnz	r3, 80153aa <__swbuf_r+0x12>
 80153a6:	f000 f9d1 	bl	801574c <__sinit>
 80153aa:	4b21      	ldr	r3, [pc, #132]	; (8015430 <__swbuf_r+0x98>)
 80153ac:	429c      	cmp	r4, r3
 80153ae:	d12b      	bne.n	8015408 <__swbuf_r+0x70>
 80153b0:	686c      	ldr	r4, [r5, #4]
 80153b2:	69a3      	ldr	r3, [r4, #24]
 80153b4:	60a3      	str	r3, [r4, #8]
 80153b6:	89a3      	ldrh	r3, [r4, #12]
 80153b8:	071a      	lsls	r2, r3, #28
 80153ba:	d52f      	bpl.n	801541c <__swbuf_r+0x84>
 80153bc:	6923      	ldr	r3, [r4, #16]
 80153be:	b36b      	cbz	r3, 801541c <__swbuf_r+0x84>
 80153c0:	6923      	ldr	r3, [r4, #16]
 80153c2:	6820      	ldr	r0, [r4, #0]
 80153c4:	1ac0      	subs	r0, r0, r3
 80153c6:	6963      	ldr	r3, [r4, #20]
 80153c8:	b2f6      	uxtb	r6, r6
 80153ca:	4283      	cmp	r3, r0
 80153cc:	4637      	mov	r7, r6
 80153ce:	dc04      	bgt.n	80153da <__swbuf_r+0x42>
 80153d0:	4621      	mov	r1, r4
 80153d2:	4628      	mov	r0, r5
 80153d4:	f000 f926 	bl	8015624 <_fflush_r>
 80153d8:	bb30      	cbnz	r0, 8015428 <__swbuf_r+0x90>
 80153da:	68a3      	ldr	r3, [r4, #8]
 80153dc:	3b01      	subs	r3, #1
 80153de:	60a3      	str	r3, [r4, #8]
 80153e0:	6823      	ldr	r3, [r4, #0]
 80153e2:	1c5a      	adds	r2, r3, #1
 80153e4:	6022      	str	r2, [r4, #0]
 80153e6:	701e      	strb	r6, [r3, #0]
 80153e8:	6963      	ldr	r3, [r4, #20]
 80153ea:	3001      	adds	r0, #1
 80153ec:	4283      	cmp	r3, r0
 80153ee:	d004      	beq.n	80153fa <__swbuf_r+0x62>
 80153f0:	89a3      	ldrh	r3, [r4, #12]
 80153f2:	07db      	lsls	r3, r3, #31
 80153f4:	d506      	bpl.n	8015404 <__swbuf_r+0x6c>
 80153f6:	2e0a      	cmp	r6, #10
 80153f8:	d104      	bne.n	8015404 <__swbuf_r+0x6c>
 80153fa:	4621      	mov	r1, r4
 80153fc:	4628      	mov	r0, r5
 80153fe:	f000 f911 	bl	8015624 <_fflush_r>
 8015402:	b988      	cbnz	r0, 8015428 <__swbuf_r+0x90>
 8015404:	4638      	mov	r0, r7
 8015406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015408:	4b0a      	ldr	r3, [pc, #40]	; (8015434 <__swbuf_r+0x9c>)
 801540a:	429c      	cmp	r4, r3
 801540c:	d101      	bne.n	8015412 <__swbuf_r+0x7a>
 801540e:	68ac      	ldr	r4, [r5, #8]
 8015410:	e7cf      	b.n	80153b2 <__swbuf_r+0x1a>
 8015412:	4b09      	ldr	r3, [pc, #36]	; (8015438 <__swbuf_r+0xa0>)
 8015414:	429c      	cmp	r4, r3
 8015416:	bf08      	it	eq
 8015418:	68ec      	ldreq	r4, [r5, #12]
 801541a:	e7ca      	b.n	80153b2 <__swbuf_r+0x1a>
 801541c:	4621      	mov	r1, r4
 801541e:	4628      	mov	r0, r5
 8015420:	f000 f80c 	bl	801543c <__swsetup_r>
 8015424:	2800      	cmp	r0, #0
 8015426:	d0cb      	beq.n	80153c0 <__swbuf_r+0x28>
 8015428:	f04f 37ff 	mov.w	r7, #4294967295
 801542c:	e7ea      	b.n	8015404 <__swbuf_r+0x6c>
 801542e:	bf00      	nop
 8015430:	080166a8 	.word	0x080166a8
 8015434:	080166c8 	.word	0x080166c8
 8015438:	08016688 	.word	0x08016688

0801543c <__swsetup_r>:
 801543c:	4b32      	ldr	r3, [pc, #200]	; (8015508 <__swsetup_r+0xcc>)
 801543e:	b570      	push	{r4, r5, r6, lr}
 8015440:	681d      	ldr	r5, [r3, #0]
 8015442:	4606      	mov	r6, r0
 8015444:	460c      	mov	r4, r1
 8015446:	b125      	cbz	r5, 8015452 <__swsetup_r+0x16>
 8015448:	69ab      	ldr	r3, [r5, #24]
 801544a:	b913      	cbnz	r3, 8015452 <__swsetup_r+0x16>
 801544c:	4628      	mov	r0, r5
 801544e:	f000 f97d 	bl	801574c <__sinit>
 8015452:	4b2e      	ldr	r3, [pc, #184]	; (801550c <__swsetup_r+0xd0>)
 8015454:	429c      	cmp	r4, r3
 8015456:	d10f      	bne.n	8015478 <__swsetup_r+0x3c>
 8015458:	686c      	ldr	r4, [r5, #4]
 801545a:	89a3      	ldrh	r3, [r4, #12]
 801545c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015460:	0719      	lsls	r1, r3, #28
 8015462:	d42c      	bmi.n	80154be <__swsetup_r+0x82>
 8015464:	06dd      	lsls	r5, r3, #27
 8015466:	d411      	bmi.n	801548c <__swsetup_r+0x50>
 8015468:	2309      	movs	r3, #9
 801546a:	6033      	str	r3, [r6, #0]
 801546c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015470:	81a3      	strh	r3, [r4, #12]
 8015472:	f04f 30ff 	mov.w	r0, #4294967295
 8015476:	e03e      	b.n	80154f6 <__swsetup_r+0xba>
 8015478:	4b25      	ldr	r3, [pc, #148]	; (8015510 <__swsetup_r+0xd4>)
 801547a:	429c      	cmp	r4, r3
 801547c:	d101      	bne.n	8015482 <__swsetup_r+0x46>
 801547e:	68ac      	ldr	r4, [r5, #8]
 8015480:	e7eb      	b.n	801545a <__swsetup_r+0x1e>
 8015482:	4b24      	ldr	r3, [pc, #144]	; (8015514 <__swsetup_r+0xd8>)
 8015484:	429c      	cmp	r4, r3
 8015486:	bf08      	it	eq
 8015488:	68ec      	ldreq	r4, [r5, #12]
 801548a:	e7e6      	b.n	801545a <__swsetup_r+0x1e>
 801548c:	0758      	lsls	r0, r3, #29
 801548e:	d512      	bpl.n	80154b6 <__swsetup_r+0x7a>
 8015490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015492:	b141      	cbz	r1, 80154a6 <__swsetup_r+0x6a>
 8015494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015498:	4299      	cmp	r1, r3
 801549a:	d002      	beq.n	80154a2 <__swsetup_r+0x66>
 801549c:	4630      	mov	r0, r6
 801549e:	f000 fa5b 	bl	8015958 <_free_r>
 80154a2:	2300      	movs	r3, #0
 80154a4:	6363      	str	r3, [r4, #52]	; 0x34
 80154a6:	89a3      	ldrh	r3, [r4, #12]
 80154a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80154ac:	81a3      	strh	r3, [r4, #12]
 80154ae:	2300      	movs	r3, #0
 80154b0:	6063      	str	r3, [r4, #4]
 80154b2:	6923      	ldr	r3, [r4, #16]
 80154b4:	6023      	str	r3, [r4, #0]
 80154b6:	89a3      	ldrh	r3, [r4, #12]
 80154b8:	f043 0308 	orr.w	r3, r3, #8
 80154bc:	81a3      	strh	r3, [r4, #12]
 80154be:	6923      	ldr	r3, [r4, #16]
 80154c0:	b94b      	cbnz	r3, 80154d6 <__swsetup_r+0x9a>
 80154c2:	89a3      	ldrh	r3, [r4, #12]
 80154c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80154c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80154cc:	d003      	beq.n	80154d6 <__swsetup_r+0x9a>
 80154ce:	4621      	mov	r1, r4
 80154d0:	4630      	mov	r0, r6
 80154d2:	f000 fa01 	bl	80158d8 <__smakebuf_r>
 80154d6:	89a0      	ldrh	r0, [r4, #12]
 80154d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80154dc:	f010 0301 	ands.w	r3, r0, #1
 80154e0:	d00a      	beq.n	80154f8 <__swsetup_r+0xbc>
 80154e2:	2300      	movs	r3, #0
 80154e4:	60a3      	str	r3, [r4, #8]
 80154e6:	6963      	ldr	r3, [r4, #20]
 80154e8:	425b      	negs	r3, r3
 80154ea:	61a3      	str	r3, [r4, #24]
 80154ec:	6923      	ldr	r3, [r4, #16]
 80154ee:	b943      	cbnz	r3, 8015502 <__swsetup_r+0xc6>
 80154f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80154f4:	d1ba      	bne.n	801546c <__swsetup_r+0x30>
 80154f6:	bd70      	pop	{r4, r5, r6, pc}
 80154f8:	0781      	lsls	r1, r0, #30
 80154fa:	bf58      	it	pl
 80154fc:	6963      	ldrpl	r3, [r4, #20]
 80154fe:	60a3      	str	r3, [r4, #8]
 8015500:	e7f4      	b.n	80154ec <__swsetup_r+0xb0>
 8015502:	2000      	movs	r0, #0
 8015504:	e7f7      	b.n	80154f6 <__swsetup_r+0xba>
 8015506:	bf00      	nop
 8015508:	24000024 	.word	0x24000024
 801550c:	080166a8 	.word	0x080166a8
 8015510:	080166c8 	.word	0x080166c8
 8015514:	08016688 	.word	0x08016688

08015518 <__sflush_r>:
 8015518:	898a      	ldrh	r2, [r1, #12]
 801551a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801551e:	4605      	mov	r5, r0
 8015520:	0710      	lsls	r0, r2, #28
 8015522:	460c      	mov	r4, r1
 8015524:	d458      	bmi.n	80155d8 <__sflush_r+0xc0>
 8015526:	684b      	ldr	r3, [r1, #4]
 8015528:	2b00      	cmp	r3, #0
 801552a:	dc05      	bgt.n	8015538 <__sflush_r+0x20>
 801552c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801552e:	2b00      	cmp	r3, #0
 8015530:	dc02      	bgt.n	8015538 <__sflush_r+0x20>
 8015532:	2000      	movs	r0, #0
 8015534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015538:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801553a:	2e00      	cmp	r6, #0
 801553c:	d0f9      	beq.n	8015532 <__sflush_r+0x1a>
 801553e:	2300      	movs	r3, #0
 8015540:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015544:	682f      	ldr	r7, [r5, #0]
 8015546:	602b      	str	r3, [r5, #0]
 8015548:	d032      	beq.n	80155b0 <__sflush_r+0x98>
 801554a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801554c:	89a3      	ldrh	r3, [r4, #12]
 801554e:	075a      	lsls	r2, r3, #29
 8015550:	d505      	bpl.n	801555e <__sflush_r+0x46>
 8015552:	6863      	ldr	r3, [r4, #4]
 8015554:	1ac0      	subs	r0, r0, r3
 8015556:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015558:	b10b      	cbz	r3, 801555e <__sflush_r+0x46>
 801555a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801555c:	1ac0      	subs	r0, r0, r3
 801555e:	2300      	movs	r3, #0
 8015560:	4602      	mov	r2, r0
 8015562:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015564:	6a21      	ldr	r1, [r4, #32]
 8015566:	4628      	mov	r0, r5
 8015568:	47b0      	blx	r6
 801556a:	1c43      	adds	r3, r0, #1
 801556c:	89a3      	ldrh	r3, [r4, #12]
 801556e:	d106      	bne.n	801557e <__sflush_r+0x66>
 8015570:	6829      	ldr	r1, [r5, #0]
 8015572:	291d      	cmp	r1, #29
 8015574:	d82c      	bhi.n	80155d0 <__sflush_r+0xb8>
 8015576:	4a2a      	ldr	r2, [pc, #168]	; (8015620 <__sflush_r+0x108>)
 8015578:	40ca      	lsrs	r2, r1
 801557a:	07d6      	lsls	r6, r2, #31
 801557c:	d528      	bpl.n	80155d0 <__sflush_r+0xb8>
 801557e:	2200      	movs	r2, #0
 8015580:	6062      	str	r2, [r4, #4]
 8015582:	04d9      	lsls	r1, r3, #19
 8015584:	6922      	ldr	r2, [r4, #16]
 8015586:	6022      	str	r2, [r4, #0]
 8015588:	d504      	bpl.n	8015594 <__sflush_r+0x7c>
 801558a:	1c42      	adds	r2, r0, #1
 801558c:	d101      	bne.n	8015592 <__sflush_r+0x7a>
 801558e:	682b      	ldr	r3, [r5, #0]
 8015590:	b903      	cbnz	r3, 8015594 <__sflush_r+0x7c>
 8015592:	6560      	str	r0, [r4, #84]	; 0x54
 8015594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015596:	602f      	str	r7, [r5, #0]
 8015598:	2900      	cmp	r1, #0
 801559a:	d0ca      	beq.n	8015532 <__sflush_r+0x1a>
 801559c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80155a0:	4299      	cmp	r1, r3
 80155a2:	d002      	beq.n	80155aa <__sflush_r+0x92>
 80155a4:	4628      	mov	r0, r5
 80155a6:	f000 f9d7 	bl	8015958 <_free_r>
 80155aa:	2000      	movs	r0, #0
 80155ac:	6360      	str	r0, [r4, #52]	; 0x34
 80155ae:	e7c1      	b.n	8015534 <__sflush_r+0x1c>
 80155b0:	6a21      	ldr	r1, [r4, #32]
 80155b2:	2301      	movs	r3, #1
 80155b4:	4628      	mov	r0, r5
 80155b6:	47b0      	blx	r6
 80155b8:	1c41      	adds	r1, r0, #1
 80155ba:	d1c7      	bne.n	801554c <__sflush_r+0x34>
 80155bc:	682b      	ldr	r3, [r5, #0]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d0c4      	beq.n	801554c <__sflush_r+0x34>
 80155c2:	2b1d      	cmp	r3, #29
 80155c4:	d001      	beq.n	80155ca <__sflush_r+0xb2>
 80155c6:	2b16      	cmp	r3, #22
 80155c8:	d101      	bne.n	80155ce <__sflush_r+0xb6>
 80155ca:	602f      	str	r7, [r5, #0]
 80155cc:	e7b1      	b.n	8015532 <__sflush_r+0x1a>
 80155ce:	89a3      	ldrh	r3, [r4, #12]
 80155d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155d4:	81a3      	strh	r3, [r4, #12]
 80155d6:	e7ad      	b.n	8015534 <__sflush_r+0x1c>
 80155d8:	690f      	ldr	r7, [r1, #16]
 80155da:	2f00      	cmp	r7, #0
 80155dc:	d0a9      	beq.n	8015532 <__sflush_r+0x1a>
 80155de:	0793      	lsls	r3, r2, #30
 80155e0:	680e      	ldr	r6, [r1, #0]
 80155e2:	bf08      	it	eq
 80155e4:	694b      	ldreq	r3, [r1, #20]
 80155e6:	600f      	str	r7, [r1, #0]
 80155e8:	bf18      	it	ne
 80155ea:	2300      	movne	r3, #0
 80155ec:	eba6 0807 	sub.w	r8, r6, r7
 80155f0:	608b      	str	r3, [r1, #8]
 80155f2:	f1b8 0f00 	cmp.w	r8, #0
 80155f6:	dd9c      	ble.n	8015532 <__sflush_r+0x1a>
 80155f8:	6a21      	ldr	r1, [r4, #32]
 80155fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80155fc:	4643      	mov	r3, r8
 80155fe:	463a      	mov	r2, r7
 8015600:	4628      	mov	r0, r5
 8015602:	47b0      	blx	r6
 8015604:	2800      	cmp	r0, #0
 8015606:	dc06      	bgt.n	8015616 <__sflush_r+0xfe>
 8015608:	89a3      	ldrh	r3, [r4, #12]
 801560a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801560e:	81a3      	strh	r3, [r4, #12]
 8015610:	f04f 30ff 	mov.w	r0, #4294967295
 8015614:	e78e      	b.n	8015534 <__sflush_r+0x1c>
 8015616:	4407      	add	r7, r0
 8015618:	eba8 0800 	sub.w	r8, r8, r0
 801561c:	e7e9      	b.n	80155f2 <__sflush_r+0xda>
 801561e:	bf00      	nop
 8015620:	20400001 	.word	0x20400001

08015624 <_fflush_r>:
 8015624:	b538      	push	{r3, r4, r5, lr}
 8015626:	690b      	ldr	r3, [r1, #16]
 8015628:	4605      	mov	r5, r0
 801562a:	460c      	mov	r4, r1
 801562c:	b913      	cbnz	r3, 8015634 <_fflush_r+0x10>
 801562e:	2500      	movs	r5, #0
 8015630:	4628      	mov	r0, r5
 8015632:	bd38      	pop	{r3, r4, r5, pc}
 8015634:	b118      	cbz	r0, 801563e <_fflush_r+0x1a>
 8015636:	6983      	ldr	r3, [r0, #24]
 8015638:	b90b      	cbnz	r3, 801563e <_fflush_r+0x1a>
 801563a:	f000 f887 	bl	801574c <__sinit>
 801563e:	4b14      	ldr	r3, [pc, #80]	; (8015690 <_fflush_r+0x6c>)
 8015640:	429c      	cmp	r4, r3
 8015642:	d11b      	bne.n	801567c <_fflush_r+0x58>
 8015644:	686c      	ldr	r4, [r5, #4]
 8015646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801564a:	2b00      	cmp	r3, #0
 801564c:	d0ef      	beq.n	801562e <_fflush_r+0xa>
 801564e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015650:	07d0      	lsls	r0, r2, #31
 8015652:	d404      	bmi.n	801565e <_fflush_r+0x3a>
 8015654:	0599      	lsls	r1, r3, #22
 8015656:	d402      	bmi.n	801565e <_fflush_r+0x3a>
 8015658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801565a:	f000 f915 	bl	8015888 <__retarget_lock_acquire_recursive>
 801565e:	4628      	mov	r0, r5
 8015660:	4621      	mov	r1, r4
 8015662:	f7ff ff59 	bl	8015518 <__sflush_r>
 8015666:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015668:	07da      	lsls	r2, r3, #31
 801566a:	4605      	mov	r5, r0
 801566c:	d4e0      	bmi.n	8015630 <_fflush_r+0xc>
 801566e:	89a3      	ldrh	r3, [r4, #12]
 8015670:	059b      	lsls	r3, r3, #22
 8015672:	d4dd      	bmi.n	8015630 <_fflush_r+0xc>
 8015674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015676:	f000 f908 	bl	801588a <__retarget_lock_release_recursive>
 801567a:	e7d9      	b.n	8015630 <_fflush_r+0xc>
 801567c:	4b05      	ldr	r3, [pc, #20]	; (8015694 <_fflush_r+0x70>)
 801567e:	429c      	cmp	r4, r3
 8015680:	d101      	bne.n	8015686 <_fflush_r+0x62>
 8015682:	68ac      	ldr	r4, [r5, #8]
 8015684:	e7df      	b.n	8015646 <_fflush_r+0x22>
 8015686:	4b04      	ldr	r3, [pc, #16]	; (8015698 <_fflush_r+0x74>)
 8015688:	429c      	cmp	r4, r3
 801568a:	bf08      	it	eq
 801568c:	68ec      	ldreq	r4, [r5, #12]
 801568e:	e7da      	b.n	8015646 <_fflush_r+0x22>
 8015690:	080166a8 	.word	0x080166a8
 8015694:	080166c8 	.word	0x080166c8
 8015698:	08016688 	.word	0x08016688

0801569c <std>:
 801569c:	2300      	movs	r3, #0
 801569e:	b510      	push	{r4, lr}
 80156a0:	4604      	mov	r4, r0
 80156a2:	e9c0 3300 	strd	r3, r3, [r0]
 80156a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80156aa:	6083      	str	r3, [r0, #8]
 80156ac:	8181      	strh	r1, [r0, #12]
 80156ae:	6643      	str	r3, [r0, #100]	; 0x64
 80156b0:	81c2      	strh	r2, [r0, #14]
 80156b2:	6183      	str	r3, [r0, #24]
 80156b4:	4619      	mov	r1, r3
 80156b6:	2208      	movs	r2, #8
 80156b8:	305c      	adds	r0, #92	; 0x5c
 80156ba:	f7ff fdd7 	bl	801526c <memset>
 80156be:	4b05      	ldr	r3, [pc, #20]	; (80156d4 <std+0x38>)
 80156c0:	6263      	str	r3, [r4, #36]	; 0x24
 80156c2:	4b05      	ldr	r3, [pc, #20]	; (80156d8 <std+0x3c>)
 80156c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80156c6:	4b05      	ldr	r3, [pc, #20]	; (80156dc <std+0x40>)
 80156c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80156ca:	4b05      	ldr	r3, [pc, #20]	; (80156e0 <std+0x44>)
 80156cc:	6224      	str	r4, [r4, #32]
 80156ce:	6323      	str	r3, [r4, #48]	; 0x30
 80156d0:	bd10      	pop	{r4, pc}
 80156d2:	bf00      	nop
 80156d4:	08016115 	.word	0x08016115
 80156d8:	08016137 	.word	0x08016137
 80156dc:	0801616f 	.word	0x0801616f
 80156e0:	08016193 	.word	0x08016193

080156e4 <_cleanup_r>:
 80156e4:	4901      	ldr	r1, [pc, #4]	; (80156ec <_cleanup_r+0x8>)
 80156e6:	f000 b8af 	b.w	8015848 <_fwalk_reent>
 80156ea:	bf00      	nop
 80156ec:	08015625 	.word	0x08015625

080156f0 <__sfmoreglue>:
 80156f0:	b570      	push	{r4, r5, r6, lr}
 80156f2:	2268      	movs	r2, #104	; 0x68
 80156f4:	1e4d      	subs	r5, r1, #1
 80156f6:	4355      	muls	r5, r2
 80156f8:	460e      	mov	r6, r1
 80156fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80156fe:	f000 f997 	bl	8015a30 <_malloc_r>
 8015702:	4604      	mov	r4, r0
 8015704:	b140      	cbz	r0, 8015718 <__sfmoreglue+0x28>
 8015706:	2100      	movs	r1, #0
 8015708:	e9c0 1600 	strd	r1, r6, [r0]
 801570c:	300c      	adds	r0, #12
 801570e:	60a0      	str	r0, [r4, #8]
 8015710:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015714:	f7ff fdaa 	bl	801526c <memset>
 8015718:	4620      	mov	r0, r4
 801571a:	bd70      	pop	{r4, r5, r6, pc}

0801571c <__sfp_lock_acquire>:
 801571c:	4801      	ldr	r0, [pc, #4]	; (8015724 <__sfp_lock_acquire+0x8>)
 801571e:	f000 b8b3 	b.w	8015888 <__retarget_lock_acquire_recursive>
 8015722:	bf00      	nop
 8015724:	2400f795 	.word	0x2400f795

08015728 <__sfp_lock_release>:
 8015728:	4801      	ldr	r0, [pc, #4]	; (8015730 <__sfp_lock_release+0x8>)
 801572a:	f000 b8ae 	b.w	801588a <__retarget_lock_release_recursive>
 801572e:	bf00      	nop
 8015730:	2400f795 	.word	0x2400f795

08015734 <__sinit_lock_acquire>:
 8015734:	4801      	ldr	r0, [pc, #4]	; (801573c <__sinit_lock_acquire+0x8>)
 8015736:	f000 b8a7 	b.w	8015888 <__retarget_lock_acquire_recursive>
 801573a:	bf00      	nop
 801573c:	2400f796 	.word	0x2400f796

08015740 <__sinit_lock_release>:
 8015740:	4801      	ldr	r0, [pc, #4]	; (8015748 <__sinit_lock_release+0x8>)
 8015742:	f000 b8a2 	b.w	801588a <__retarget_lock_release_recursive>
 8015746:	bf00      	nop
 8015748:	2400f796 	.word	0x2400f796

0801574c <__sinit>:
 801574c:	b510      	push	{r4, lr}
 801574e:	4604      	mov	r4, r0
 8015750:	f7ff fff0 	bl	8015734 <__sinit_lock_acquire>
 8015754:	69a3      	ldr	r3, [r4, #24]
 8015756:	b11b      	cbz	r3, 8015760 <__sinit+0x14>
 8015758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801575c:	f7ff bff0 	b.w	8015740 <__sinit_lock_release>
 8015760:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015764:	6523      	str	r3, [r4, #80]	; 0x50
 8015766:	4b13      	ldr	r3, [pc, #76]	; (80157b4 <__sinit+0x68>)
 8015768:	4a13      	ldr	r2, [pc, #76]	; (80157b8 <__sinit+0x6c>)
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	62a2      	str	r2, [r4, #40]	; 0x28
 801576e:	42a3      	cmp	r3, r4
 8015770:	bf04      	itt	eq
 8015772:	2301      	moveq	r3, #1
 8015774:	61a3      	streq	r3, [r4, #24]
 8015776:	4620      	mov	r0, r4
 8015778:	f000 f820 	bl	80157bc <__sfp>
 801577c:	6060      	str	r0, [r4, #4]
 801577e:	4620      	mov	r0, r4
 8015780:	f000 f81c 	bl	80157bc <__sfp>
 8015784:	60a0      	str	r0, [r4, #8]
 8015786:	4620      	mov	r0, r4
 8015788:	f000 f818 	bl	80157bc <__sfp>
 801578c:	2200      	movs	r2, #0
 801578e:	60e0      	str	r0, [r4, #12]
 8015790:	2104      	movs	r1, #4
 8015792:	6860      	ldr	r0, [r4, #4]
 8015794:	f7ff ff82 	bl	801569c <std>
 8015798:	68a0      	ldr	r0, [r4, #8]
 801579a:	2201      	movs	r2, #1
 801579c:	2109      	movs	r1, #9
 801579e:	f7ff ff7d 	bl	801569c <std>
 80157a2:	68e0      	ldr	r0, [r4, #12]
 80157a4:	2202      	movs	r2, #2
 80157a6:	2112      	movs	r1, #18
 80157a8:	f7ff ff78 	bl	801569c <std>
 80157ac:	2301      	movs	r3, #1
 80157ae:	61a3      	str	r3, [r4, #24]
 80157b0:	e7d2      	b.n	8015758 <__sinit+0xc>
 80157b2:	bf00      	nop
 80157b4:	08016684 	.word	0x08016684
 80157b8:	080156e5 	.word	0x080156e5

080157bc <__sfp>:
 80157bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157be:	4607      	mov	r7, r0
 80157c0:	f7ff ffac 	bl	801571c <__sfp_lock_acquire>
 80157c4:	4b1e      	ldr	r3, [pc, #120]	; (8015840 <__sfp+0x84>)
 80157c6:	681e      	ldr	r6, [r3, #0]
 80157c8:	69b3      	ldr	r3, [r6, #24]
 80157ca:	b913      	cbnz	r3, 80157d2 <__sfp+0x16>
 80157cc:	4630      	mov	r0, r6
 80157ce:	f7ff ffbd 	bl	801574c <__sinit>
 80157d2:	3648      	adds	r6, #72	; 0x48
 80157d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80157d8:	3b01      	subs	r3, #1
 80157da:	d503      	bpl.n	80157e4 <__sfp+0x28>
 80157dc:	6833      	ldr	r3, [r6, #0]
 80157de:	b30b      	cbz	r3, 8015824 <__sfp+0x68>
 80157e0:	6836      	ldr	r6, [r6, #0]
 80157e2:	e7f7      	b.n	80157d4 <__sfp+0x18>
 80157e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80157e8:	b9d5      	cbnz	r5, 8015820 <__sfp+0x64>
 80157ea:	4b16      	ldr	r3, [pc, #88]	; (8015844 <__sfp+0x88>)
 80157ec:	60e3      	str	r3, [r4, #12]
 80157ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80157f2:	6665      	str	r5, [r4, #100]	; 0x64
 80157f4:	f000 f847 	bl	8015886 <__retarget_lock_init_recursive>
 80157f8:	f7ff ff96 	bl	8015728 <__sfp_lock_release>
 80157fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015800:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015804:	6025      	str	r5, [r4, #0]
 8015806:	61a5      	str	r5, [r4, #24]
 8015808:	2208      	movs	r2, #8
 801580a:	4629      	mov	r1, r5
 801580c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015810:	f7ff fd2c 	bl	801526c <memset>
 8015814:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015818:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801581c:	4620      	mov	r0, r4
 801581e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015820:	3468      	adds	r4, #104	; 0x68
 8015822:	e7d9      	b.n	80157d8 <__sfp+0x1c>
 8015824:	2104      	movs	r1, #4
 8015826:	4638      	mov	r0, r7
 8015828:	f7ff ff62 	bl	80156f0 <__sfmoreglue>
 801582c:	4604      	mov	r4, r0
 801582e:	6030      	str	r0, [r6, #0]
 8015830:	2800      	cmp	r0, #0
 8015832:	d1d5      	bne.n	80157e0 <__sfp+0x24>
 8015834:	f7ff ff78 	bl	8015728 <__sfp_lock_release>
 8015838:	230c      	movs	r3, #12
 801583a:	603b      	str	r3, [r7, #0]
 801583c:	e7ee      	b.n	801581c <__sfp+0x60>
 801583e:	bf00      	nop
 8015840:	08016684 	.word	0x08016684
 8015844:	ffff0001 	.word	0xffff0001

08015848 <_fwalk_reent>:
 8015848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801584c:	4606      	mov	r6, r0
 801584e:	4688      	mov	r8, r1
 8015850:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015854:	2700      	movs	r7, #0
 8015856:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801585a:	f1b9 0901 	subs.w	r9, r9, #1
 801585e:	d505      	bpl.n	801586c <_fwalk_reent+0x24>
 8015860:	6824      	ldr	r4, [r4, #0]
 8015862:	2c00      	cmp	r4, #0
 8015864:	d1f7      	bne.n	8015856 <_fwalk_reent+0xe>
 8015866:	4638      	mov	r0, r7
 8015868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801586c:	89ab      	ldrh	r3, [r5, #12]
 801586e:	2b01      	cmp	r3, #1
 8015870:	d907      	bls.n	8015882 <_fwalk_reent+0x3a>
 8015872:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015876:	3301      	adds	r3, #1
 8015878:	d003      	beq.n	8015882 <_fwalk_reent+0x3a>
 801587a:	4629      	mov	r1, r5
 801587c:	4630      	mov	r0, r6
 801587e:	47c0      	blx	r8
 8015880:	4307      	orrs	r7, r0
 8015882:	3568      	adds	r5, #104	; 0x68
 8015884:	e7e9      	b.n	801585a <_fwalk_reent+0x12>

08015886 <__retarget_lock_init_recursive>:
 8015886:	4770      	bx	lr

08015888 <__retarget_lock_acquire_recursive>:
 8015888:	4770      	bx	lr

0801588a <__retarget_lock_release_recursive>:
 801588a:	4770      	bx	lr

0801588c <__swhatbuf_r>:
 801588c:	b570      	push	{r4, r5, r6, lr}
 801588e:	460e      	mov	r6, r1
 8015890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015894:	2900      	cmp	r1, #0
 8015896:	b096      	sub	sp, #88	; 0x58
 8015898:	4614      	mov	r4, r2
 801589a:	461d      	mov	r5, r3
 801589c:	da08      	bge.n	80158b0 <__swhatbuf_r+0x24>
 801589e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80158a2:	2200      	movs	r2, #0
 80158a4:	602a      	str	r2, [r5, #0]
 80158a6:	061a      	lsls	r2, r3, #24
 80158a8:	d410      	bmi.n	80158cc <__swhatbuf_r+0x40>
 80158aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80158ae:	e00e      	b.n	80158ce <__swhatbuf_r+0x42>
 80158b0:	466a      	mov	r2, sp
 80158b2:	f000 fc95 	bl	80161e0 <_fstat_r>
 80158b6:	2800      	cmp	r0, #0
 80158b8:	dbf1      	blt.n	801589e <__swhatbuf_r+0x12>
 80158ba:	9a01      	ldr	r2, [sp, #4]
 80158bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80158c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80158c4:	425a      	negs	r2, r3
 80158c6:	415a      	adcs	r2, r3
 80158c8:	602a      	str	r2, [r5, #0]
 80158ca:	e7ee      	b.n	80158aa <__swhatbuf_r+0x1e>
 80158cc:	2340      	movs	r3, #64	; 0x40
 80158ce:	2000      	movs	r0, #0
 80158d0:	6023      	str	r3, [r4, #0]
 80158d2:	b016      	add	sp, #88	; 0x58
 80158d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080158d8 <__smakebuf_r>:
 80158d8:	898b      	ldrh	r3, [r1, #12]
 80158da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80158dc:	079d      	lsls	r5, r3, #30
 80158de:	4606      	mov	r6, r0
 80158e0:	460c      	mov	r4, r1
 80158e2:	d507      	bpl.n	80158f4 <__smakebuf_r+0x1c>
 80158e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80158e8:	6023      	str	r3, [r4, #0]
 80158ea:	6123      	str	r3, [r4, #16]
 80158ec:	2301      	movs	r3, #1
 80158ee:	6163      	str	r3, [r4, #20]
 80158f0:	b002      	add	sp, #8
 80158f2:	bd70      	pop	{r4, r5, r6, pc}
 80158f4:	ab01      	add	r3, sp, #4
 80158f6:	466a      	mov	r2, sp
 80158f8:	f7ff ffc8 	bl	801588c <__swhatbuf_r>
 80158fc:	9900      	ldr	r1, [sp, #0]
 80158fe:	4605      	mov	r5, r0
 8015900:	4630      	mov	r0, r6
 8015902:	f000 f895 	bl	8015a30 <_malloc_r>
 8015906:	b948      	cbnz	r0, 801591c <__smakebuf_r+0x44>
 8015908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801590c:	059a      	lsls	r2, r3, #22
 801590e:	d4ef      	bmi.n	80158f0 <__smakebuf_r+0x18>
 8015910:	f023 0303 	bic.w	r3, r3, #3
 8015914:	f043 0302 	orr.w	r3, r3, #2
 8015918:	81a3      	strh	r3, [r4, #12]
 801591a:	e7e3      	b.n	80158e4 <__smakebuf_r+0xc>
 801591c:	4b0d      	ldr	r3, [pc, #52]	; (8015954 <__smakebuf_r+0x7c>)
 801591e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015920:	89a3      	ldrh	r3, [r4, #12]
 8015922:	6020      	str	r0, [r4, #0]
 8015924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015928:	81a3      	strh	r3, [r4, #12]
 801592a:	9b00      	ldr	r3, [sp, #0]
 801592c:	6163      	str	r3, [r4, #20]
 801592e:	9b01      	ldr	r3, [sp, #4]
 8015930:	6120      	str	r0, [r4, #16]
 8015932:	b15b      	cbz	r3, 801594c <__smakebuf_r+0x74>
 8015934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015938:	4630      	mov	r0, r6
 801593a:	f000 fc63 	bl	8016204 <_isatty_r>
 801593e:	b128      	cbz	r0, 801594c <__smakebuf_r+0x74>
 8015940:	89a3      	ldrh	r3, [r4, #12]
 8015942:	f023 0303 	bic.w	r3, r3, #3
 8015946:	f043 0301 	orr.w	r3, r3, #1
 801594a:	81a3      	strh	r3, [r4, #12]
 801594c:	89a0      	ldrh	r0, [r4, #12]
 801594e:	4305      	orrs	r5, r0
 8015950:	81a5      	strh	r5, [r4, #12]
 8015952:	e7cd      	b.n	80158f0 <__smakebuf_r+0x18>
 8015954:	080156e5 	.word	0x080156e5

08015958 <_free_r>:
 8015958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801595a:	2900      	cmp	r1, #0
 801595c:	d044      	beq.n	80159e8 <_free_r+0x90>
 801595e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015962:	9001      	str	r0, [sp, #4]
 8015964:	2b00      	cmp	r3, #0
 8015966:	f1a1 0404 	sub.w	r4, r1, #4
 801596a:	bfb8      	it	lt
 801596c:	18e4      	addlt	r4, r4, r3
 801596e:	f000 fc6b 	bl	8016248 <__malloc_lock>
 8015972:	4a1e      	ldr	r2, [pc, #120]	; (80159ec <_free_r+0x94>)
 8015974:	9801      	ldr	r0, [sp, #4]
 8015976:	6813      	ldr	r3, [r2, #0]
 8015978:	b933      	cbnz	r3, 8015988 <_free_r+0x30>
 801597a:	6063      	str	r3, [r4, #4]
 801597c:	6014      	str	r4, [r2, #0]
 801597e:	b003      	add	sp, #12
 8015980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015984:	f000 bc66 	b.w	8016254 <__malloc_unlock>
 8015988:	42a3      	cmp	r3, r4
 801598a:	d908      	bls.n	801599e <_free_r+0x46>
 801598c:	6825      	ldr	r5, [r4, #0]
 801598e:	1961      	adds	r1, r4, r5
 8015990:	428b      	cmp	r3, r1
 8015992:	bf01      	itttt	eq
 8015994:	6819      	ldreq	r1, [r3, #0]
 8015996:	685b      	ldreq	r3, [r3, #4]
 8015998:	1949      	addeq	r1, r1, r5
 801599a:	6021      	streq	r1, [r4, #0]
 801599c:	e7ed      	b.n	801597a <_free_r+0x22>
 801599e:	461a      	mov	r2, r3
 80159a0:	685b      	ldr	r3, [r3, #4]
 80159a2:	b10b      	cbz	r3, 80159a8 <_free_r+0x50>
 80159a4:	42a3      	cmp	r3, r4
 80159a6:	d9fa      	bls.n	801599e <_free_r+0x46>
 80159a8:	6811      	ldr	r1, [r2, #0]
 80159aa:	1855      	adds	r5, r2, r1
 80159ac:	42a5      	cmp	r5, r4
 80159ae:	d10b      	bne.n	80159c8 <_free_r+0x70>
 80159b0:	6824      	ldr	r4, [r4, #0]
 80159b2:	4421      	add	r1, r4
 80159b4:	1854      	adds	r4, r2, r1
 80159b6:	42a3      	cmp	r3, r4
 80159b8:	6011      	str	r1, [r2, #0]
 80159ba:	d1e0      	bne.n	801597e <_free_r+0x26>
 80159bc:	681c      	ldr	r4, [r3, #0]
 80159be:	685b      	ldr	r3, [r3, #4]
 80159c0:	6053      	str	r3, [r2, #4]
 80159c2:	4421      	add	r1, r4
 80159c4:	6011      	str	r1, [r2, #0]
 80159c6:	e7da      	b.n	801597e <_free_r+0x26>
 80159c8:	d902      	bls.n	80159d0 <_free_r+0x78>
 80159ca:	230c      	movs	r3, #12
 80159cc:	6003      	str	r3, [r0, #0]
 80159ce:	e7d6      	b.n	801597e <_free_r+0x26>
 80159d0:	6825      	ldr	r5, [r4, #0]
 80159d2:	1961      	adds	r1, r4, r5
 80159d4:	428b      	cmp	r3, r1
 80159d6:	bf04      	itt	eq
 80159d8:	6819      	ldreq	r1, [r3, #0]
 80159da:	685b      	ldreq	r3, [r3, #4]
 80159dc:	6063      	str	r3, [r4, #4]
 80159de:	bf04      	itt	eq
 80159e0:	1949      	addeq	r1, r1, r5
 80159e2:	6021      	streq	r1, [r4, #0]
 80159e4:	6054      	str	r4, [r2, #4]
 80159e6:	e7ca      	b.n	801597e <_free_r+0x26>
 80159e8:	b003      	add	sp, #12
 80159ea:	bd30      	pop	{r4, r5, pc}
 80159ec:	2400f798 	.word	0x2400f798

080159f0 <sbrk_aligned>:
 80159f0:	b570      	push	{r4, r5, r6, lr}
 80159f2:	4e0e      	ldr	r6, [pc, #56]	; (8015a2c <sbrk_aligned+0x3c>)
 80159f4:	460c      	mov	r4, r1
 80159f6:	6831      	ldr	r1, [r6, #0]
 80159f8:	4605      	mov	r5, r0
 80159fa:	b911      	cbnz	r1, 8015a02 <sbrk_aligned+0x12>
 80159fc:	f000 fb7a 	bl	80160f4 <_sbrk_r>
 8015a00:	6030      	str	r0, [r6, #0]
 8015a02:	4621      	mov	r1, r4
 8015a04:	4628      	mov	r0, r5
 8015a06:	f000 fb75 	bl	80160f4 <_sbrk_r>
 8015a0a:	1c43      	adds	r3, r0, #1
 8015a0c:	d00a      	beq.n	8015a24 <sbrk_aligned+0x34>
 8015a0e:	1cc4      	adds	r4, r0, #3
 8015a10:	f024 0403 	bic.w	r4, r4, #3
 8015a14:	42a0      	cmp	r0, r4
 8015a16:	d007      	beq.n	8015a28 <sbrk_aligned+0x38>
 8015a18:	1a21      	subs	r1, r4, r0
 8015a1a:	4628      	mov	r0, r5
 8015a1c:	f000 fb6a 	bl	80160f4 <_sbrk_r>
 8015a20:	3001      	adds	r0, #1
 8015a22:	d101      	bne.n	8015a28 <sbrk_aligned+0x38>
 8015a24:	f04f 34ff 	mov.w	r4, #4294967295
 8015a28:	4620      	mov	r0, r4
 8015a2a:	bd70      	pop	{r4, r5, r6, pc}
 8015a2c:	2400f79c 	.word	0x2400f79c

08015a30 <_malloc_r>:
 8015a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a34:	1ccd      	adds	r5, r1, #3
 8015a36:	f025 0503 	bic.w	r5, r5, #3
 8015a3a:	3508      	adds	r5, #8
 8015a3c:	2d0c      	cmp	r5, #12
 8015a3e:	bf38      	it	cc
 8015a40:	250c      	movcc	r5, #12
 8015a42:	2d00      	cmp	r5, #0
 8015a44:	4607      	mov	r7, r0
 8015a46:	db01      	blt.n	8015a4c <_malloc_r+0x1c>
 8015a48:	42a9      	cmp	r1, r5
 8015a4a:	d905      	bls.n	8015a58 <_malloc_r+0x28>
 8015a4c:	230c      	movs	r3, #12
 8015a4e:	603b      	str	r3, [r7, #0]
 8015a50:	2600      	movs	r6, #0
 8015a52:	4630      	mov	r0, r6
 8015a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a58:	4e2e      	ldr	r6, [pc, #184]	; (8015b14 <_malloc_r+0xe4>)
 8015a5a:	f000 fbf5 	bl	8016248 <__malloc_lock>
 8015a5e:	6833      	ldr	r3, [r6, #0]
 8015a60:	461c      	mov	r4, r3
 8015a62:	bb34      	cbnz	r4, 8015ab2 <_malloc_r+0x82>
 8015a64:	4629      	mov	r1, r5
 8015a66:	4638      	mov	r0, r7
 8015a68:	f7ff ffc2 	bl	80159f0 <sbrk_aligned>
 8015a6c:	1c43      	adds	r3, r0, #1
 8015a6e:	4604      	mov	r4, r0
 8015a70:	d14d      	bne.n	8015b0e <_malloc_r+0xde>
 8015a72:	6834      	ldr	r4, [r6, #0]
 8015a74:	4626      	mov	r6, r4
 8015a76:	2e00      	cmp	r6, #0
 8015a78:	d140      	bne.n	8015afc <_malloc_r+0xcc>
 8015a7a:	6823      	ldr	r3, [r4, #0]
 8015a7c:	4631      	mov	r1, r6
 8015a7e:	4638      	mov	r0, r7
 8015a80:	eb04 0803 	add.w	r8, r4, r3
 8015a84:	f000 fb36 	bl	80160f4 <_sbrk_r>
 8015a88:	4580      	cmp	r8, r0
 8015a8a:	d13a      	bne.n	8015b02 <_malloc_r+0xd2>
 8015a8c:	6821      	ldr	r1, [r4, #0]
 8015a8e:	3503      	adds	r5, #3
 8015a90:	1a6d      	subs	r5, r5, r1
 8015a92:	f025 0503 	bic.w	r5, r5, #3
 8015a96:	3508      	adds	r5, #8
 8015a98:	2d0c      	cmp	r5, #12
 8015a9a:	bf38      	it	cc
 8015a9c:	250c      	movcc	r5, #12
 8015a9e:	4629      	mov	r1, r5
 8015aa0:	4638      	mov	r0, r7
 8015aa2:	f7ff ffa5 	bl	80159f0 <sbrk_aligned>
 8015aa6:	3001      	adds	r0, #1
 8015aa8:	d02b      	beq.n	8015b02 <_malloc_r+0xd2>
 8015aaa:	6823      	ldr	r3, [r4, #0]
 8015aac:	442b      	add	r3, r5
 8015aae:	6023      	str	r3, [r4, #0]
 8015ab0:	e00e      	b.n	8015ad0 <_malloc_r+0xa0>
 8015ab2:	6822      	ldr	r2, [r4, #0]
 8015ab4:	1b52      	subs	r2, r2, r5
 8015ab6:	d41e      	bmi.n	8015af6 <_malloc_r+0xc6>
 8015ab8:	2a0b      	cmp	r2, #11
 8015aba:	d916      	bls.n	8015aea <_malloc_r+0xba>
 8015abc:	1961      	adds	r1, r4, r5
 8015abe:	42a3      	cmp	r3, r4
 8015ac0:	6025      	str	r5, [r4, #0]
 8015ac2:	bf18      	it	ne
 8015ac4:	6059      	strne	r1, [r3, #4]
 8015ac6:	6863      	ldr	r3, [r4, #4]
 8015ac8:	bf08      	it	eq
 8015aca:	6031      	streq	r1, [r6, #0]
 8015acc:	5162      	str	r2, [r4, r5]
 8015ace:	604b      	str	r3, [r1, #4]
 8015ad0:	4638      	mov	r0, r7
 8015ad2:	f104 060b 	add.w	r6, r4, #11
 8015ad6:	f000 fbbd 	bl	8016254 <__malloc_unlock>
 8015ada:	f026 0607 	bic.w	r6, r6, #7
 8015ade:	1d23      	adds	r3, r4, #4
 8015ae0:	1af2      	subs	r2, r6, r3
 8015ae2:	d0b6      	beq.n	8015a52 <_malloc_r+0x22>
 8015ae4:	1b9b      	subs	r3, r3, r6
 8015ae6:	50a3      	str	r3, [r4, r2]
 8015ae8:	e7b3      	b.n	8015a52 <_malloc_r+0x22>
 8015aea:	6862      	ldr	r2, [r4, #4]
 8015aec:	42a3      	cmp	r3, r4
 8015aee:	bf0c      	ite	eq
 8015af0:	6032      	streq	r2, [r6, #0]
 8015af2:	605a      	strne	r2, [r3, #4]
 8015af4:	e7ec      	b.n	8015ad0 <_malloc_r+0xa0>
 8015af6:	4623      	mov	r3, r4
 8015af8:	6864      	ldr	r4, [r4, #4]
 8015afa:	e7b2      	b.n	8015a62 <_malloc_r+0x32>
 8015afc:	4634      	mov	r4, r6
 8015afe:	6876      	ldr	r6, [r6, #4]
 8015b00:	e7b9      	b.n	8015a76 <_malloc_r+0x46>
 8015b02:	230c      	movs	r3, #12
 8015b04:	603b      	str	r3, [r7, #0]
 8015b06:	4638      	mov	r0, r7
 8015b08:	f000 fba4 	bl	8016254 <__malloc_unlock>
 8015b0c:	e7a1      	b.n	8015a52 <_malloc_r+0x22>
 8015b0e:	6025      	str	r5, [r4, #0]
 8015b10:	e7de      	b.n	8015ad0 <_malloc_r+0xa0>
 8015b12:	bf00      	nop
 8015b14:	2400f798 	.word	0x2400f798

08015b18 <__sfputc_r>:
 8015b18:	6893      	ldr	r3, [r2, #8]
 8015b1a:	3b01      	subs	r3, #1
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	b410      	push	{r4}
 8015b20:	6093      	str	r3, [r2, #8]
 8015b22:	da08      	bge.n	8015b36 <__sfputc_r+0x1e>
 8015b24:	6994      	ldr	r4, [r2, #24]
 8015b26:	42a3      	cmp	r3, r4
 8015b28:	db01      	blt.n	8015b2e <__sfputc_r+0x16>
 8015b2a:	290a      	cmp	r1, #10
 8015b2c:	d103      	bne.n	8015b36 <__sfputc_r+0x1e>
 8015b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b32:	f7ff bc31 	b.w	8015398 <__swbuf_r>
 8015b36:	6813      	ldr	r3, [r2, #0]
 8015b38:	1c58      	adds	r0, r3, #1
 8015b3a:	6010      	str	r0, [r2, #0]
 8015b3c:	7019      	strb	r1, [r3, #0]
 8015b3e:	4608      	mov	r0, r1
 8015b40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b44:	4770      	bx	lr

08015b46 <__sfputs_r>:
 8015b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b48:	4606      	mov	r6, r0
 8015b4a:	460f      	mov	r7, r1
 8015b4c:	4614      	mov	r4, r2
 8015b4e:	18d5      	adds	r5, r2, r3
 8015b50:	42ac      	cmp	r4, r5
 8015b52:	d101      	bne.n	8015b58 <__sfputs_r+0x12>
 8015b54:	2000      	movs	r0, #0
 8015b56:	e007      	b.n	8015b68 <__sfputs_r+0x22>
 8015b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b5c:	463a      	mov	r2, r7
 8015b5e:	4630      	mov	r0, r6
 8015b60:	f7ff ffda 	bl	8015b18 <__sfputc_r>
 8015b64:	1c43      	adds	r3, r0, #1
 8015b66:	d1f3      	bne.n	8015b50 <__sfputs_r+0xa>
 8015b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015b6c <_vfiprintf_r>:
 8015b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b70:	460d      	mov	r5, r1
 8015b72:	b09d      	sub	sp, #116	; 0x74
 8015b74:	4614      	mov	r4, r2
 8015b76:	4698      	mov	r8, r3
 8015b78:	4606      	mov	r6, r0
 8015b7a:	b118      	cbz	r0, 8015b84 <_vfiprintf_r+0x18>
 8015b7c:	6983      	ldr	r3, [r0, #24]
 8015b7e:	b90b      	cbnz	r3, 8015b84 <_vfiprintf_r+0x18>
 8015b80:	f7ff fde4 	bl	801574c <__sinit>
 8015b84:	4b89      	ldr	r3, [pc, #548]	; (8015dac <_vfiprintf_r+0x240>)
 8015b86:	429d      	cmp	r5, r3
 8015b88:	d11b      	bne.n	8015bc2 <_vfiprintf_r+0x56>
 8015b8a:	6875      	ldr	r5, [r6, #4]
 8015b8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b8e:	07d9      	lsls	r1, r3, #31
 8015b90:	d405      	bmi.n	8015b9e <_vfiprintf_r+0x32>
 8015b92:	89ab      	ldrh	r3, [r5, #12]
 8015b94:	059a      	lsls	r2, r3, #22
 8015b96:	d402      	bmi.n	8015b9e <_vfiprintf_r+0x32>
 8015b98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b9a:	f7ff fe75 	bl	8015888 <__retarget_lock_acquire_recursive>
 8015b9e:	89ab      	ldrh	r3, [r5, #12]
 8015ba0:	071b      	lsls	r3, r3, #28
 8015ba2:	d501      	bpl.n	8015ba8 <_vfiprintf_r+0x3c>
 8015ba4:	692b      	ldr	r3, [r5, #16]
 8015ba6:	b9eb      	cbnz	r3, 8015be4 <_vfiprintf_r+0x78>
 8015ba8:	4629      	mov	r1, r5
 8015baa:	4630      	mov	r0, r6
 8015bac:	f7ff fc46 	bl	801543c <__swsetup_r>
 8015bb0:	b1c0      	cbz	r0, 8015be4 <_vfiprintf_r+0x78>
 8015bb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015bb4:	07dc      	lsls	r4, r3, #31
 8015bb6:	d50e      	bpl.n	8015bd6 <_vfiprintf_r+0x6a>
 8015bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8015bbc:	b01d      	add	sp, #116	; 0x74
 8015bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bc2:	4b7b      	ldr	r3, [pc, #492]	; (8015db0 <_vfiprintf_r+0x244>)
 8015bc4:	429d      	cmp	r5, r3
 8015bc6:	d101      	bne.n	8015bcc <_vfiprintf_r+0x60>
 8015bc8:	68b5      	ldr	r5, [r6, #8]
 8015bca:	e7df      	b.n	8015b8c <_vfiprintf_r+0x20>
 8015bcc:	4b79      	ldr	r3, [pc, #484]	; (8015db4 <_vfiprintf_r+0x248>)
 8015bce:	429d      	cmp	r5, r3
 8015bd0:	bf08      	it	eq
 8015bd2:	68f5      	ldreq	r5, [r6, #12]
 8015bd4:	e7da      	b.n	8015b8c <_vfiprintf_r+0x20>
 8015bd6:	89ab      	ldrh	r3, [r5, #12]
 8015bd8:	0598      	lsls	r0, r3, #22
 8015bda:	d4ed      	bmi.n	8015bb8 <_vfiprintf_r+0x4c>
 8015bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015bde:	f7ff fe54 	bl	801588a <__retarget_lock_release_recursive>
 8015be2:	e7e9      	b.n	8015bb8 <_vfiprintf_r+0x4c>
 8015be4:	2300      	movs	r3, #0
 8015be6:	9309      	str	r3, [sp, #36]	; 0x24
 8015be8:	2320      	movs	r3, #32
 8015bea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015bee:	f8cd 800c 	str.w	r8, [sp, #12]
 8015bf2:	2330      	movs	r3, #48	; 0x30
 8015bf4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015db8 <_vfiprintf_r+0x24c>
 8015bf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015bfc:	f04f 0901 	mov.w	r9, #1
 8015c00:	4623      	mov	r3, r4
 8015c02:	469a      	mov	sl, r3
 8015c04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c08:	b10a      	cbz	r2, 8015c0e <_vfiprintf_r+0xa2>
 8015c0a:	2a25      	cmp	r2, #37	; 0x25
 8015c0c:	d1f9      	bne.n	8015c02 <_vfiprintf_r+0x96>
 8015c0e:	ebba 0b04 	subs.w	fp, sl, r4
 8015c12:	d00b      	beq.n	8015c2c <_vfiprintf_r+0xc0>
 8015c14:	465b      	mov	r3, fp
 8015c16:	4622      	mov	r2, r4
 8015c18:	4629      	mov	r1, r5
 8015c1a:	4630      	mov	r0, r6
 8015c1c:	f7ff ff93 	bl	8015b46 <__sfputs_r>
 8015c20:	3001      	adds	r0, #1
 8015c22:	f000 80aa 	beq.w	8015d7a <_vfiprintf_r+0x20e>
 8015c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015c28:	445a      	add	r2, fp
 8015c2a:	9209      	str	r2, [sp, #36]	; 0x24
 8015c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	f000 80a2 	beq.w	8015d7a <_vfiprintf_r+0x20e>
 8015c36:	2300      	movs	r3, #0
 8015c38:	f04f 32ff 	mov.w	r2, #4294967295
 8015c3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c40:	f10a 0a01 	add.w	sl, sl, #1
 8015c44:	9304      	str	r3, [sp, #16]
 8015c46:	9307      	str	r3, [sp, #28]
 8015c48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015c4c:	931a      	str	r3, [sp, #104]	; 0x68
 8015c4e:	4654      	mov	r4, sl
 8015c50:	2205      	movs	r2, #5
 8015c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c56:	4858      	ldr	r0, [pc, #352]	; (8015db8 <_vfiprintf_r+0x24c>)
 8015c58:	f7ea fdda 	bl	8000810 <memchr>
 8015c5c:	9a04      	ldr	r2, [sp, #16]
 8015c5e:	b9d8      	cbnz	r0, 8015c98 <_vfiprintf_r+0x12c>
 8015c60:	06d1      	lsls	r1, r2, #27
 8015c62:	bf44      	itt	mi
 8015c64:	2320      	movmi	r3, #32
 8015c66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c6a:	0713      	lsls	r3, r2, #28
 8015c6c:	bf44      	itt	mi
 8015c6e:	232b      	movmi	r3, #43	; 0x2b
 8015c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c74:	f89a 3000 	ldrb.w	r3, [sl]
 8015c78:	2b2a      	cmp	r3, #42	; 0x2a
 8015c7a:	d015      	beq.n	8015ca8 <_vfiprintf_r+0x13c>
 8015c7c:	9a07      	ldr	r2, [sp, #28]
 8015c7e:	4654      	mov	r4, sl
 8015c80:	2000      	movs	r0, #0
 8015c82:	f04f 0c0a 	mov.w	ip, #10
 8015c86:	4621      	mov	r1, r4
 8015c88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c8c:	3b30      	subs	r3, #48	; 0x30
 8015c8e:	2b09      	cmp	r3, #9
 8015c90:	d94e      	bls.n	8015d30 <_vfiprintf_r+0x1c4>
 8015c92:	b1b0      	cbz	r0, 8015cc2 <_vfiprintf_r+0x156>
 8015c94:	9207      	str	r2, [sp, #28]
 8015c96:	e014      	b.n	8015cc2 <_vfiprintf_r+0x156>
 8015c98:	eba0 0308 	sub.w	r3, r0, r8
 8015c9c:	fa09 f303 	lsl.w	r3, r9, r3
 8015ca0:	4313      	orrs	r3, r2
 8015ca2:	9304      	str	r3, [sp, #16]
 8015ca4:	46a2      	mov	sl, r4
 8015ca6:	e7d2      	b.n	8015c4e <_vfiprintf_r+0xe2>
 8015ca8:	9b03      	ldr	r3, [sp, #12]
 8015caa:	1d19      	adds	r1, r3, #4
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	9103      	str	r1, [sp, #12]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	bfbb      	ittet	lt
 8015cb4:	425b      	neglt	r3, r3
 8015cb6:	f042 0202 	orrlt.w	r2, r2, #2
 8015cba:	9307      	strge	r3, [sp, #28]
 8015cbc:	9307      	strlt	r3, [sp, #28]
 8015cbe:	bfb8      	it	lt
 8015cc0:	9204      	strlt	r2, [sp, #16]
 8015cc2:	7823      	ldrb	r3, [r4, #0]
 8015cc4:	2b2e      	cmp	r3, #46	; 0x2e
 8015cc6:	d10c      	bne.n	8015ce2 <_vfiprintf_r+0x176>
 8015cc8:	7863      	ldrb	r3, [r4, #1]
 8015cca:	2b2a      	cmp	r3, #42	; 0x2a
 8015ccc:	d135      	bne.n	8015d3a <_vfiprintf_r+0x1ce>
 8015cce:	9b03      	ldr	r3, [sp, #12]
 8015cd0:	1d1a      	adds	r2, r3, #4
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	9203      	str	r2, [sp, #12]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	bfb8      	it	lt
 8015cda:	f04f 33ff 	movlt.w	r3, #4294967295
 8015cde:	3402      	adds	r4, #2
 8015ce0:	9305      	str	r3, [sp, #20]
 8015ce2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015dc8 <_vfiprintf_r+0x25c>
 8015ce6:	7821      	ldrb	r1, [r4, #0]
 8015ce8:	2203      	movs	r2, #3
 8015cea:	4650      	mov	r0, sl
 8015cec:	f7ea fd90 	bl	8000810 <memchr>
 8015cf0:	b140      	cbz	r0, 8015d04 <_vfiprintf_r+0x198>
 8015cf2:	2340      	movs	r3, #64	; 0x40
 8015cf4:	eba0 000a 	sub.w	r0, r0, sl
 8015cf8:	fa03 f000 	lsl.w	r0, r3, r0
 8015cfc:	9b04      	ldr	r3, [sp, #16]
 8015cfe:	4303      	orrs	r3, r0
 8015d00:	3401      	adds	r4, #1
 8015d02:	9304      	str	r3, [sp, #16]
 8015d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d08:	482c      	ldr	r0, [pc, #176]	; (8015dbc <_vfiprintf_r+0x250>)
 8015d0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015d0e:	2206      	movs	r2, #6
 8015d10:	f7ea fd7e 	bl	8000810 <memchr>
 8015d14:	2800      	cmp	r0, #0
 8015d16:	d03f      	beq.n	8015d98 <_vfiprintf_r+0x22c>
 8015d18:	4b29      	ldr	r3, [pc, #164]	; (8015dc0 <_vfiprintf_r+0x254>)
 8015d1a:	bb1b      	cbnz	r3, 8015d64 <_vfiprintf_r+0x1f8>
 8015d1c:	9b03      	ldr	r3, [sp, #12]
 8015d1e:	3307      	adds	r3, #7
 8015d20:	f023 0307 	bic.w	r3, r3, #7
 8015d24:	3308      	adds	r3, #8
 8015d26:	9303      	str	r3, [sp, #12]
 8015d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d2a:	443b      	add	r3, r7
 8015d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8015d2e:	e767      	b.n	8015c00 <_vfiprintf_r+0x94>
 8015d30:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d34:	460c      	mov	r4, r1
 8015d36:	2001      	movs	r0, #1
 8015d38:	e7a5      	b.n	8015c86 <_vfiprintf_r+0x11a>
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	3401      	adds	r4, #1
 8015d3e:	9305      	str	r3, [sp, #20]
 8015d40:	4619      	mov	r1, r3
 8015d42:	f04f 0c0a 	mov.w	ip, #10
 8015d46:	4620      	mov	r0, r4
 8015d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d4c:	3a30      	subs	r2, #48	; 0x30
 8015d4e:	2a09      	cmp	r2, #9
 8015d50:	d903      	bls.n	8015d5a <_vfiprintf_r+0x1ee>
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d0c5      	beq.n	8015ce2 <_vfiprintf_r+0x176>
 8015d56:	9105      	str	r1, [sp, #20]
 8015d58:	e7c3      	b.n	8015ce2 <_vfiprintf_r+0x176>
 8015d5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d5e:	4604      	mov	r4, r0
 8015d60:	2301      	movs	r3, #1
 8015d62:	e7f0      	b.n	8015d46 <_vfiprintf_r+0x1da>
 8015d64:	ab03      	add	r3, sp, #12
 8015d66:	9300      	str	r3, [sp, #0]
 8015d68:	462a      	mov	r2, r5
 8015d6a:	4b16      	ldr	r3, [pc, #88]	; (8015dc4 <_vfiprintf_r+0x258>)
 8015d6c:	a904      	add	r1, sp, #16
 8015d6e:	4630      	mov	r0, r6
 8015d70:	f3af 8000 	nop.w
 8015d74:	4607      	mov	r7, r0
 8015d76:	1c78      	adds	r0, r7, #1
 8015d78:	d1d6      	bne.n	8015d28 <_vfiprintf_r+0x1bc>
 8015d7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015d7c:	07d9      	lsls	r1, r3, #31
 8015d7e:	d405      	bmi.n	8015d8c <_vfiprintf_r+0x220>
 8015d80:	89ab      	ldrh	r3, [r5, #12]
 8015d82:	059a      	lsls	r2, r3, #22
 8015d84:	d402      	bmi.n	8015d8c <_vfiprintf_r+0x220>
 8015d86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015d88:	f7ff fd7f 	bl	801588a <__retarget_lock_release_recursive>
 8015d8c:	89ab      	ldrh	r3, [r5, #12]
 8015d8e:	065b      	lsls	r3, r3, #25
 8015d90:	f53f af12 	bmi.w	8015bb8 <_vfiprintf_r+0x4c>
 8015d94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015d96:	e711      	b.n	8015bbc <_vfiprintf_r+0x50>
 8015d98:	ab03      	add	r3, sp, #12
 8015d9a:	9300      	str	r3, [sp, #0]
 8015d9c:	462a      	mov	r2, r5
 8015d9e:	4b09      	ldr	r3, [pc, #36]	; (8015dc4 <_vfiprintf_r+0x258>)
 8015da0:	a904      	add	r1, sp, #16
 8015da2:	4630      	mov	r0, r6
 8015da4:	f000 f880 	bl	8015ea8 <_printf_i>
 8015da8:	e7e4      	b.n	8015d74 <_vfiprintf_r+0x208>
 8015daa:	bf00      	nop
 8015dac:	080166a8 	.word	0x080166a8
 8015db0:	080166c8 	.word	0x080166c8
 8015db4:	08016688 	.word	0x08016688
 8015db8:	080166e8 	.word	0x080166e8
 8015dbc:	080166f2 	.word	0x080166f2
 8015dc0:	00000000 	.word	0x00000000
 8015dc4:	08015b47 	.word	0x08015b47
 8015dc8:	080166ee 	.word	0x080166ee

08015dcc <_printf_common>:
 8015dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015dd0:	4616      	mov	r6, r2
 8015dd2:	4699      	mov	r9, r3
 8015dd4:	688a      	ldr	r2, [r1, #8]
 8015dd6:	690b      	ldr	r3, [r1, #16]
 8015dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015ddc:	4293      	cmp	r3, r2
 8015dde:	bfb8      	it	lt
 8015de0:	4613      	movlt	r3, r2
 8015de2:	6033      	str	r3, [r6, #0]
 8015de4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015de8:	4607      	mov	r7, r0
 8015dea:	460c      	mov	r4, r1
 8015dec:	b10a      	cbz	r2, 8015df2 <_printf_common+0x26>
 8015dee:	3301      	adds	r3, #1
 8015df0:	6033      	str	r3, [r6, #0]
 8015df2:	6823      	ldr	r3, [r4, #0]
 8015df4:	0699      	lsls	r1, r3, #26
 8015df6:	bf42      	ittt	mi
 8015df8:	6833      	ldrmi	r3, [r6, #0]
 8015dfa:	3302      	addmi	r3, #2
 8015dfc:	6033      	strmi	r3, [r6, #0]
 8015dfe:	6825      	ldr	r5, [r4, #0]
 8015e00:	f015 0506 	ands.w	r5, r5, #6
 8015e04:	d106      	bne.n	8015e14 <_printf_common+0x48>
 8015e06:	f104 0a19 	add.w	sl, r4, #25
 8015e0a:	68e3      	ldr	r3, [r4, #12]
 8015e0c:	6832      	ldr	r2, [r6, #0]
 8015e0e:	1a9b      	subs	r3, r3, r2
 8015e10:	42ab      	cmp	r3, r5
 8015e12:	dc26      	bgt.n	8015e62 <_printf_common+0x96>
 8015e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015e18:	1e13      	subs	r3, r2, #0
 8015e1a:	6822      	ldr	r2, [r4, #0]
 8015e1c:	bf18      	it	ne
 8015e1e:	2301      	movne	r3, #1
 8015e20:	0692      	lsls	r2, r2, #26
 8015e22:	d42b      	bmi.n	8015e7c <_printf_common+0xb0>
 8015e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015e28:	4649      	mov	r1, r9
 8015e2a:	4638      	mov	r0, r7
 8015e2c:	47c0      	blx	r8
 8015e2e:	3001      	adds	r0, #1
 8015e30:	d01e      	beq.n	8015e70 <_printf_common+0xa4>
 8015e32:	6823      	ldr	r3, [r4, #0]
 8015e34:	68e5      	ldr	r5, [r4, #12]
 8015e36:	6832      	ldr	r2, [r6, #0]
 8015e38:	f003 0306 	and.w	r3, r3, #6
 8015e3c:	2b04      	cmp	r3, #4
 8015e3e:	bf08      	it	eq
 8015e40:	1aad      	subeq	r5, r5, r2
 8015e42:	68a3      	ldr	r3, [r4, #8]
 8015e44:	6922      	ldr	r2, [r4, #16]
 8015e46:	bf0c      	ite	eq
 8015e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015e4c:	2500      	movne	r5, #0
 8015e4e:	4293      	cmp	r3, r2
 8015e50:	bfc4      	itt	gt
 8015e52:	1a9b      	subgt	r3, r3, r2
 8015e54:	18ed      	addgt	r5, r5, r3
 8015e56:	2600      	movs	r6, #0
 8015e58:	341a      	adds	r4, #26
 8015e5a:	42b5      	cmp	r5, r6
 8015e5c:	d11a      	bne.n	8015e94 <_printf_common+0xc8>
 8015e5e:	2000      	movs	r0, #0
 8015e60:	e008      	b.n	8015e74 <_printf_common+0xa8>
 8015e62:	2301      	movs	r3, #1
 8015e64:	4652      	mov	r2, sl
 8015e66:	4649      	mov	r1, r9
 8015e68:	4638      	mov	r0, r7
 8015e6a:	47c0      	blx	r8
 8015e6c:	3001      	adds	r0, #1
 8015e6e:	d103      	bne.n	8015e78 <_printf_common+0xac>
 8015e70:	f04f 30ff 	mov.w	r0, #4294967295
 8015e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e78:	3501      	adds	r5, #1
 8015e7a:	e7c6      	b.n	8015e0a <_printf_common+0x3e>
 8015e7c:	18e1      	adds	r1, r4, r3
 8015e7e:	1c5a      	adds	r2, r3, #1
 8015e80:	2030      	movs	r0, #48	; 0x30
 8015e82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015e86:	4422      	add	r2, r4
 8015e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015e90:	3302      	adds	r3, #2
 8015e92:	e7c7      	b.n	8015e24 <_printf_common+0x58>
 8015e94:	2301      	movs	r3, #1
 8015e96:	4622      	mov	r2, r4
 8015e98:	4649      	mov	r1, r9
 8015e9a:	4638      	mov	r0, r7
 8015e9c:	47c0      	blx	r8
 8015e9e:	3001      	adds	r0, #1
 8015ea0:	d0e6      	beq.n	8015e70 <_printf_common+0xa4>
 8015ea2:	3601      	adds	r6, #1
 8015ea4:	e7d9      	b.n	8015e5a <_printf_common+0x8e>
	...

08015ea8 <_printf_i>:
 8015ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015eac:	7e0f      	ldrb	r7, [r1, #24]
 8015eae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015eb0:	2f78      	cmp	r7, #120	; 0x78
 8015eb2:	4691      	mov	r9, r2
 8015eb4:	4680      	mov	r8, r0
 8015eb6:	460c      	mov	r4, r1
 8015eb8:	469a      	mov	sl, r3
 8015eba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015ebe:	d807      	bhi.n	8015ed0 <_printf_i+0x28>
 8015ec0:	2f62      	cmp	r7, #98	; 0x62
 8015ec2:	d80a      	bhi.n	8015eda <_printf_i+0x32>
 8015ec4:	2f00      	cmp	r7, #0
 8015ec6:	f000 80d8 	beq.w	801607a <_printf_i+0x1d2>
 8015eca:	2f58      	cmp	r7, #88	; 0x58
 8015ecc:	f000 80a3 	beq.w	8016016 <_printf_i+0x16e>
 8015ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015ed8:	e03a      	b.n	8015f50 <_printf_i+0xa8>
 8015eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015ede:	2b15      	cmp	r3, #21
 8015ee0:	d8f6      	bhi.n	8015ed0 <_printf_i+0x28>
 8015ee2:	a101      	add	r1, pc, #4	; (adr r1, 8015ee8 <_printf_i+0x40>)
 8015ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015ee8:	08015f41 	.word	0x08015f41
 8015eec:	08015f55 	.word	0x08015f55
 8015ef0:	08015ed1 	.word	0x08015ed1
 8015ef4:	08015ed1 	.word	0x08015ed1
 8015ef8:	08015ed1 	.word	0x08015ed1
 8015efc:	08015ed1 	.word	0x08015ed1
 8015f00:	08015f55 	.word	0x08015f55
 8015f04:	08015ed1 	.word	0x08015ed1
 8015f08:	08015ed1 	.word	0x08015ed1
 8015f0c:	08015ed1 	.word	0x08015ed1
 8015f10:	08015ed1 	.word	0x08015ed1
 8015f14:	08016061 	.word	0x08016061
 8015f18:	08015f85 	.word	0x08015f85
 8015f1c:	08016043 	.word	0x08016043
 8015f20:	08015ed1 	.word	0x08015ed1
 8015f24:	08015ed1 	.word	0x08015ed1
 8015f28:	08016083 	.word	0x08016083
 8015f2c:	08015ed1 	.word	0x08015ed1
 8015f30:	08015f85 	.word	0x08015f85
 8015f34:	08015ed1 	.word	0x08015ed1
 8015f38:	08015ed1 	.word	0x08015ed1
 8015f3c:	0801604b 	.word	0x0801604b
 8015f40:	682b      	ldr	r3, [r5, #0]
 8015f42:	1d1a      	adds	r2, r3, #4
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	602a      	str	r2, [r5, #0]
 8015f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015f50:	2301      	movs	r3, #1
 8015f52:	e0a3      	b.n	801609c <_printf_i+0x1f4>
 8015f54:	6820      	ldr	r0, [r4, #0]
 8015f56:	6829      	ldr	r1, [r5, #0]
 8015f58:	0606      	lsls	r6, r0, #24
 8015f5a:	f101 0304 	add.w	r3, r1, #4
 8015f5e:	d50a      	bpl.n	8015f76 <_printf_i+0xce>
 8015f60:	680e      	ldr	r6, [r1, #0]
 8015f62:	602b      	str	r3, [r5, #0]
 8015f64:	2e00      	cmp	r6, #0
 8015f66:	da03      	bge.n	8015f70 <_printf_i+0xc8>
 8015f68:	232d      	movs	r3, #45	; 0x2d
 8015f6a:	4276      	negs	r6, r6
 8015f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f70:	485e      	ldr	r0, [pc, #376]	; (80160ec <_printf_i+0x244>)
 8015f72:	230a      	movs	r3, #10
 8015f74:	e019      	b.n	8015faa <_printf_i+0x102>
 8015f76:	680e      	ldr	r6, [r1, #0]
 8015f78:	602b      	str	r3, [r5, #0]
 8015f7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015f7e:	bf18      	it	ne
 8015f80:	b236      	sxthne	r6, r6
 8015f82:	e7ef      	b.n	8015f64 <_printf_i+0xbc>
 8015f84:	682b      	ldr	r3, [r5, #0]
 8015f86:	6820      	ldr	r0, [r4, #0]
 8015f88:	1d19      	adds	r1, r3, #4
 8015f8a:	6029      	str	r1, [r5, #0]
 8015f8c:	0601      	lsls	r1, r0, #24
 8015f8e:	d501      	bpl.n	8015f94 <_printf_i+0xec>
 8015f90:	681e      	ldr	r6, [r3, #0]
 8015f92:	e002      	b.n	8015f9a <_printf_i+0xf2>
 8015f94:	0646      	lsls	r6, r0, #25
 8015f96:	d5fb      	bpl.n	8015f90 <_printf_i+0xe8>
 8015f98:	881e      	ldrh	r6, [r3, #0]
 8015f9a:	4854      	ldr	r0, [pc, #336]	; (80160ec <_printf_i+0x244>)
 8015f9c:	2f6f      	cmp	r7, #111	; 0x6f
 8015f9e:	bf0c      	ite	eq
 8015fa0:	2308      	moveq	r3, #8
 8015fa2:	230a      	movne	r3, #10
 8015fa4:	2100      	movs	r1, #0
 8015fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015faa:	6865      	ldr	r5, [r4, #4]
 8015fac:	60a5      	str	r5, [r4, #8]
 8015fae:	2d00      	cmp	r5, #0
 8015fb0:	bfa2      	ittt	ge
 8015fb2:	6821      	ldrge	r1, [r4, #0]
 8015fb4:	f021 0104 	bicge.w	r1, r1, #4
 8015fb8:	6021      	strge	r1, [r4, #0]
 8015fba:	b90e      	cbnz	r6, 8015fc0 <_printf_i+0x118>
 8015fbc:	2d00      	cmp	r5, #0
 8015fbe:	d04d      	beq.n	801605c <_printf_i+0x1b4>
 8015fc0:	4615      	mov	r5, r2
 8015fc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8015fc6:	fb03 6711 	mls	r7, r3, r1, r6
 8015fca:	5dc7      	ldrb	r7, [r0, r7]
 8015fcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015fd0:	4637      	mov	r7, r6
 8015fd2:	42bb      	cmp	r3, r7
 8015fd4:	460e      	mov	r6, r1
 8015fd6:	d9f4      	bls.n	8015fc2 <_printf_i+0x11a>
 8015fd8:	2b08      	cmp	r3, #8
 8015fda:	d10b      	bne.n	8015ff4 <_printf_i+0x14c>
 8015fdc:	6823      	ldr	r3, [r4, #0]
 8015fde:	07de      	lsls	r6, r3, #31
 8015fe0:	d508      	bpl.n	8015ff4 <_printf_i+0x14c>
 8015fe2:	6923      	ldr	r3, [r4, #16]
 8015fe4:	6861      	ldr	r1, [r4, #4]
 8015fe6:	4299      	cmp	r1, r3
 8015fe8:	bfde      	ittt	le
 8015fea:	2330      	movle	r3, #48	; 0x30
 8015fec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015ff0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015ff4:	1b52      	subs	r2, r2, r5
 8015ff6:	6122      	str	r2, [r4, #16]
 8015ff8:	f8cd a000 	str.w	sl, [sp]
 8015ffc:	464b      	mov	r3, r9
 8015ffe:	aa03      	add	r2, sp, #12
 8016000:	4621      	mov	r1, r4
 8016002:	4640      	mov	r0, r8
 8016004:	f7ff fee2 	bl	8015dcc <_printf_common>
 8016008:	3001      	adds	r0, #1
 801600a:	d14c      	bne.n	80160a6 <_printf_i+0x1fe>
 801600c:	f04f 30ff 	mov.w	r0, #4294967295
 8016010:	b004      	add	sp, #16
 8016012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016016:	4835      	ldr	r0, [pc, #212]	; (80160ec <_printf_i+0x244>)
 8016018:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801601c:	6829      	ldr	r1, [r5, #0]
 801601e:	6823      	ldr	r3, [r4, #0]
 8016020:	f851 6b04 	ldr.w	r6, [r1], #4
 8016024:	6029      	str	r1, [r5, #0]
 8016026:	061d      	lsls	r5, r3, #24
 8016028:	d514      	bpl.n	8016054 <_printf_i+0x1ac>
 801602a:	07df      	lsls	r7, r3, #31
 801602c:	bf44      	itt	mi
 801602e:	f043 0320 	orrmi.w	r3, r3, #32
 8016032:	6023      	strmi	r3, [r4, #0]
 8016034:	b91e      	cbnz	r6, 801603e <_printf_i+0x196>
 8016036:	6823      	ldr	r3, [r4, #0]
 8016038:	f023 0320 	bic.w	r3, r3, #32
 801603c:	6023      	str	r3, [r4, #0]
 801603e:	2310      	movs	r3, #16
 8016040:	e7b0      	b.n	8015fa4 <_printf_i+0xfc>
 8016042:	6823      	ldr	r3, [r4, #0]
 8016044:	f043 0320 	orr.w	r3, r3, #32
 8016048:	6023      	str	r3, [r4, #0]
 801604a:	2378      	movs	r3, #120	; 0x78
 801604c:	4828      	ldr	r0, [pc, #160]	; (80160f0 <_printf_i+0x248>)
 801604e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016052:	e7e3      	b.n	801601c <_printf_i+0x174>
 8016054:	0659      	lsls	r1, r3, #25
 8016056:	bf48      	it	mi
 8016058:	b2b6      	uxthmi	r6, r6
 801605a:	e7e6      	b.n	801602a <_printf_i+0x182>
 801605c:	4615      	mov	r5, r2
 801605e:	e7bb      	b.n	8015fd8 <_printf_i+0x130>
 8016060:	682b      	ldr	r3, [r5, #0]
 8016062:	6826      	ldr	r6, [r4, #0]
 8016064:	6961      	ldr	r1, [r4, #20]
 8016066:	1d18      	adds	r0, r3, #4
 8016068:	6028      	str	r0, [r5, #0]
 801606a:	0635      	lsls	r5, r6, #24
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	d501      	bpl.n	8016074 <_printf_i+0x1cc>
 8016070:	6019      	str	r1, [r3, #0]
 8016072:	e002      	b.n	801607a <_printf_i+0x1d2>
 8016074:	0670      	lsls	r0, r6, #25
 8016076:	d5fb      	bpl.n	8016070 <_printf_i+0x1c8>
 8016078:	8019      	strh	r1, [r3, #0]
 801607a:	2300      	movs	r3, #0
 801607c:	6123      	str	r3, [r4, #16]
 801607e:	4615      	mov	r5, r2
 8016080:	e7ba      	b.n	8015ff8 <_printf_i+0x150>
 8016082:	682b      	ldr	r3, [r5, #0]
 8016084:	1d1a      	adds	r2, r3, #4
 8016086:	602a      	str	r2, [r5, #0]
 8016088:	681d      	ldr	r5, [r3, #0]
 801608a:	6862      	ldr	r2, [r4, #4]
 801608c:	2100      	movs	r1, #0
 801608e:	4628      	mov	r0, r5
 8016090:	f7ea fbbe 	bl	8000810 <memchr>
 8016094:	b108      	cbz	r0, 801609a <_printf_i+0x1f2>
 8016096:	1b40      	subs	r0, r0, r5
 8016098:	6060      	str	r0, [r4, #4]
 801609a:	6863      	ldr	r3, [r4, #4]
 801609c:	6123      	str	r3, [r4, #16]
 801609e:	2300      	movs	r3, #0
 80160a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80160a4:	e7a8      	b.n	8015ff8 <_printf_i+0x150>
 80160a6:	6923      	ldr	r3, [r4, #16]
 80160a8:	462a      	mov	r2, r5
 80160aa:	4649      	mov	r1, r9
 80160ac:	4640      	mov	r0, r8
 80160ae:	47d0      	blx	sl
 80160b0:	3001      	adds	r0, #1
 80160b2:	d0ab      	beq.n	801600c <_printf_i+0x164>
 80160b4:	6823      	ldr	r3, [r4, #0]
 80160b6:	079b      	lsls	r3, r3, #30
 80160b8:	d413      	bmi.n	80160e2 <_printf_i+0x23a>
 80160ba:	68e0      	ldr	r0, [r4, #12]
 80160bc:	9b03      	ldr	r3, [sp, #12]
 80160be:	4298      	cmp	r0, r3
 80160c0:	bfb8      	it	lt
 80160c2:	4618      	movlt	r0, r3
 80160c4:	e7a4      	b.n	8016010 <_printf_i+0x168>
 80160c6:	2301      	movs	r3, #1
 80160c8:	4632      	mov	r2, r6
 80160ca:	4649      	mov	r1, r9
 80160cc:	4640      	mov	r0, r8
 80160ce:	47d0      	blx	sl
 80160d0:	3001      	adds	r0, #1
 80160d2:	d09b      	beq.n	801600c <_printf_i+0x164>
 80160d4:	3501      	adds	r5, #1
 80160d6:	68e3      	ldr	r3, [r4, #12]
 80160d8:	9903      	ldr	r1, [sp, #12]
 80160da:	1a5b      	subs	r3, r3, r1
 80160dc:	42ab      	cmp	r3, r5
 80160de:	dcf2      	bgt.n	80160c6 <_printf_i+0x21e>
 80160e0:	e7eb      	b.n	80160ba <_printf_i+0x212>
 80160e2:	2500      	movs	r5, #0
 80160e4:	f104 0619 	add.w	r6, r4, #25
 80160e8:	e7f5      	b.n	80160d6 <_printf_i+0x22e>
 80160ea:	bf00      	nop
 80160ec:	080166f9 	.word	0x080166f9
 80160f0:	0801670a 	.word	0x0801670a

080160f4 <_sbrk_r>:
 80160f4:	b538      	push	{r3, r4, r5, lr}
 80160f6:	4d06      	ldr	r5, [pc, #24]	; (8016110 <_sbrk_r+0x1c>)
 80160f8:	2300      	movs	r3, #0
 80160fa:	4604      	mov	r4, r0
 80160fc:	4608      	mov	r0, r1
 80160fe:	602b      	str	r3, [r5, #0]
 8016100:	f7eb fa64 	bl	80015cc <_sbrk>
 8016104:	1c43      	adds	r3, r0, #1
 8016106:	d102      	bne.n	801610e <_sbrk_r+0x1a>
 8016108:	682b      	ldr	r3, [r5, #0]
 801610a:	b103      	cbz	r3, 801610e <_sbrk_r+0x1a>
 801610c:	6023      	str	r3, [r4, #0]
 801610e:	bd38      	pop	{r3, r4, r5, pc}
 8016110:	2400f7a0 	.word	0x2400f7a0

08016114 <__sread>:
 8016114:	b510      	push	{r4, lr}
 8016116:	460c      	mov	r4, r1
 8016118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801611c:	f000 f8a0 	bl	8016260 <_read_r>
 8016120:	2800      	cmp	r0, #0
 8016122:	bfab      	itete	ge
 8016124:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016126:	89a3      	ldrhlt	r3, [r4, #12]
 8016128:	181b      	addge	r3, r3, r0
 801612a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801612e:	bfac      	ite	ge
 8016130:	6563      	strge	r3, [r4, #84]	; 0x54
 8016132:	81a3      	strhlt	r3, [r4, #12]
 8016134:	bd10      	pop	{r4, pc}

08016136 <__swrite>:
 8016136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801613a:	461f      	mov	r7, r3
 801613c:	898b      	ldrh	r3, [r1, #12]
 801613e:	05db      	lsls	r3, r3, #23
 8016140:	4605      	mov	r5, r0
 8016142:	460c      	mov	r4, r1
 8016144:	4616      	mov	r6, r2
 8016146:	d505      	bpl.n	8016154 <__swrite+0x1e>
 8016148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801614c:	2302      	movs	r3, #2
 801614e:	2200      	movs	r2, #0
 8016150:	f000 f868 	bl	8016224 <_lseek_r>
 8016154:	89a3      	ldrh	r3, [r4, #12]
 8016156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801615a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801615e:	81a3      	strh	r3, [r4, #12]
 8016160:	4632      	mov	r2, r6
 8016162:	463b      	mov	r3, r7
 8016164:	4628      	mov	r0, r5
 8016166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801616a:	f000 b817 	b.w	801619c <_write_r>

0801616e <__sseek>:
 801616e:	b510      	push	{r4, lr}
 8016170:	460c      	mov	r4, r1
 8016172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016176:	f000 f855 	bl	8016224 <_lseek_r>
 801617a:	1c43      	adds	r3, r0, #1
 801617c:	89a3      	ldrh	r3, [r4, #12]
 801617e:	bf15      	itete	ne
 8016180:	6560      	strne	r0, [r4, #84]	; 0x54
 8016182:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016186:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801618a:	81a3      	strheq	r3, [r4, #12]
 801618c:	bf18      	it	ne
 801618e:	81a3      	strhne	r3, [r4, #12]
 8016190:	bd10      	pop	{r4, pc}

08016192 <__sclose>:
 8016192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016196:	f000 b813 	b.w	80161c0 <_close_r>
	...

0801619c <_write_r>:
 801619c:	b538      	push	{r3, r4, r5, lr}
 801619e:	4d07      	ldr	r5, [pc, #28]	; (80161bc <_write_r+0x20>)
 80161a0:	4604      	mov	r4, r0
 80161a2:	4608      	mov	r0, r1
 80161a4:	4611      	mov	r1, r2
 80161a6:	2200      	movs	r2, #0
 80161a8:	602a      	str	r2, [r5, #0]
 80161aa:	461a      	mov	r2, r3
 80161ac:	f7eb f9bd 	bl	800152a <_write>
 80161b0:	1c43      	adds	r3, r0, #1
 80161b2:	d102      	bne.n	80161ba <_write_r+0x1e>
 80161b4:	682b      	ldr	r3, [r5, #0]
 80161b6:	b103      	cbz	r3, 80161ba <_write_r+0x1e>
 80161b8:	6023      	str	r3, [r4, #0]
 80161ba:	bd38      	pop	{r3, r4, r5, pc}
 80161bc:	2400f7a0 	.word	0x2400f7a0

080161c0 <_close_r>:
 80161c0:	b538      	push	{r3, r4, r5, lr}
 80161c2:	4d06      	ldr	r5, [pc, #24]	; (80161dc <_close_r+0x1c>)
 80161c4:	2300      	movs	r3, #0
 80161c6:	4604      	mov	r4, r0
 80161c8:	4608      	mov	r0, r1
 80161ca:	602b      	str	r3, [r5, #0]
 80161cc:	f7eb f9c9 	bl	8001562 <_close>
 80161d0:	1c43      	adds	r3, r0, #1
 80161d2:	d102      	bne.n	80161da <_close_r+0x1a>
 80161d4:	682b      	ldr	r3, [r5, #0]
 80161d6:	b103      	cbz	r3, 80161da <_close_r+0x1a>
 80161d8:	6023      	str	r3, [r4, #0]
 80161da:	bd38      	pop	{r3, r4, r5, pc}
 80161dc:	2400f7a0 	.word	0x2400f7a0

080161e0 <_fstat_r>:
 80161e0:	b538      	push	{r3, r4, r5, lr}
 80161e2:	4d07      	ldr	r5, [pc, #28]	; (8016200 <_fstat_r+0x20>)
 80161e4:	2300      	movs	r3, #0
 80161e6:	4604      	mov	r4, r0
 80161e8:	4608      	mov	r0, r1
 80161ea:	4611      	mov	r1, r2
 80161ec:	602b      	str	r3, [r5, #0]
 80161ee:	f7eb f9c4 	bl	800157a <_fstat>
 80161f2:	1c43      	adds	r3, r0, #1
 80161f4:	d102      	bne.n	80161fc <_fstat_r+0x1c>
 80161f6:	682b      	ldr	r3, [r5, #0]
 80161f8:	b103      	cbz	r3, 80161fc <_fstat_r+0x1c>
 80161fa:	6023      	str	r3, [r4, #0]
 80161fc:	bd38      	pop	{r3, r4, r5, pc}
 80161fe:	bf00      	nop
 8016200:	2400f7a0 	.word	0x2400f7a0

08016204 <_isatty_r>:
 8016204:	b538      	push	{r3, r4, r5, lr}
 8016206:	4d06      	ldr	r5, [pc, #24]	; (8016220 <_isatty_r+0x1c>)
 8016208:	2300      	movs	r3, #0
 801620a:	4604      	mov	r4, r0
 801620c:	4608      	mov	r0, r1
 801620e:	602b      	str	r3, [r5, #0]
 8016210:	f7eb f9c3 	bl	800159a <_isatty>
 8016214:	1c43      	adds	r3, r0, #1
 8016216:	d102      	bne.n	801621e <_isatty_r+0x1a>
 8016218:	682b      	ldr	r3, [r5, #0]
 801621a:	b103      	cbz	r3, 801621e <_isatty_r+0x1a>
 801621c:	6023      	str	r3, [r4, #0]
 801621e:	bd38      	pop	{r3, r4, r5, pc}
 8016220:	2400f7a0 	.word	0x2400f7a0

08016224 <_lseek_r>:
 8016224:	b538      	push	{r3, r4, r5, lr}
 8016226:	4d07      	ldr	r5, [pc, #28]	; (8016244 <_lseek_r+0x20>)
 8016228:	4604      	mov	r4, r0
 801622a:	4608      	mov	r0, r1
 801622c:	4611      	mov	r1, r2
 801622e:	2200      	movs	r2, #0
 8016230:	602a      	str	r2, [r5, #0]
 8016232:	461a      	mov	r2, r3
 8016234:	f7eb f9bc 	bl	80015b0 <_lseek>
 8016238:	1c43      	adds	r3, r0, #1
 801623a:	d102      	bne.n	8016242 <_lseek_r+0x1e>
 801623c:	682b      	ldr	r3, [r5, #0]
 801623e:	b103      	cbz	r3, 8016242 <_lseek_r+0x1e>
 8016240:	6023      	str	r3, [r4, #0]
 8016242:	bd38      	pop	{r3, r4, r5, pc}
 8016244:	2400f7a0 	.word	0x2400f7a0

08016248 <__malloc_lock>:
 8016248:	4801      	ldr	r0, [pc, #4]	; (8016250 <__malloc_lock+0x8>)
 801624a:	f7ff bb1d 	b.w	8015888 <__retarget_lock_acquire_recursive>
 801624e:	bf00      	nop
 8016250:	2400f794 	.word	0x2400f794

08016254 <__malloc_unlock>:
 8016254:	4801      	ldr	r0, [pc, #4]	; (801625c <__malloc_unlock+0x8>)
 8016256:	f7ff bb18 	b.w	801588a <__retarget_lock_release_recursive>
 801625a:	bf00      	nop
 801625c:	2400f794 	.word	0x2400f794

08016260 <_read_r>:
 8016260:	b538      	push	{r3, r4, r5, lr}
 8016262:	4d07      	ldr	r5, [pc, #28]	; (8016280 <_read_r+0x20>)
 8016264:	4604      	mov	r4, r0
 8016266:	4608      	mov	r0, r1
 8016268:	4611      	mov	r1, r2
 801626a:	2200      	movs	r2, #0
 801626c:	602a      	str	r2, [r5, #0]
 801626e:	461a      	mov	r2, r3
 8016270:	f7eb f93e 	bl	80014f0 <_read>
 8016274:	1c43      	adds	r3, r0, #1
 8016276:	d102      	bne.n	801627e <_read_r+0x1e>
 8016278:	682b      	ldr	r3, [r5, #0]
 801627a:	b103      	cbz	r3, 801627e <_read_r+0x1e>
 801627c:	6023      	str	r3, [r4, #0]
 801627e:	bd38      	pop	{r3, r4, r5, pc}
 8016280:	2400f7a0 	.word	0x2400f7a0

08016284 <_init>:
 8016284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016286:	bf00      	nop
 8016288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801628a:	bc08      	pop	{r3}
 801628c:	469e      	mov	lr, r3
 801628e:	4770      	bx	lr

08016290 <_fini>:
 8016290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016292:	bf00      	nop
 8016294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016296:	bc08      	pop	{r3}
 8016298:	469e      	mov	lr, r3
 801629a:	4770      	bx	lr
